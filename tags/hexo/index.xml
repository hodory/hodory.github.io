<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Hexo - Tag - Web Developer Hodory</title><link>http://blog.hodory.dev/tags/hexo/</link><description>Hexo - Tag - Web Developer Hodory</description><generator>Hugo -- gohugo.io</generator><language>ko-KR</language><lastBuildDate>Fri, 31 Dec 2021 00:16:53 +0000</lastBuildDate><atom:link href="http://blog.hodory.dev/tags/hexo/" rel="self" type="application/rss+xml"/><item><title>Hexo Netlify CMS 연결하기</title><link>http://blog.hodory.dev/2021/12/31/hexo-netlify-cms-%EC%97%B0%EA%B2%B0%ED%95%98%EA%B8%B0/</link><pubDate>Fri, 31 Dec 2021 00:16:53 +0000</pubDate><author><name>hodory</name></author><guid>http://blog.hodory.dev/2021/12/31/hexo-netlify-cms-%EC%97%B0%EA%B2%B0%ED%95%98%EA%B8%B0/</guid><description>Netlify CMS 블로그 플랫폼에 의존적이지 않고, 개발자st 블로그를 운영하고자 2017년부터 hexo를 이용해 블로그를 운영하고 있습니다.
마크 다운과 파일시스템을 이용하여 블로그 포스트를 작성하고, git을 이용하여 버전 관리를 하는것은 개발자로서 꽤나 매력적이었습니다.
하지만 랩탑을 항상 소지하고 있지 않다면,
다양한 환경에서 블로그를 작성하기 위해 nodejs를 설치하고, hexo-cli 를 설치하는것은 언제나 부담스러운 일입니다.
제 블로그는 Github Actions 를 이용하여 포스팅만 작성하면 자동으로 빌드하여 배포가 되지만,
또 다른 문제점은 포스팅에 이미지가 들어가게 될 경우 작업의 복잡도가 올라가게 됩니다.</description></item><item><title>Github Actions를 이용하여 Hexo 블로그 배포하기</title><link>http://blog.hodory.dev/2019/08/23/deploy-hexo-blog-with-github-actions/</link><pubDate>Fri, 23 Aug 2019 13:37:07 +0000</pubDate><author><name>hodory</name></author><guid>http://blog.hodory.dev/2019/08/23/deploy-hexo-blog-with-github-actions/</guid><description><![CDATA[기존의 Travis-CI를 이용하여 Hexo 블로그를 배포하기 위해,
ChangJoo Park님의 포스팅인 Travis CI를 이용한 Github Pages + Hexo 블로그 자동 배포하기를 참고하여 아래와 같은 YAML 파일을 작성하여 Travis CI 서비스를 이용해서 배포하였습니다.
기존의 코드 # .travis.yml language: node_js node_js: - &#34;10&#34; # Hexo source 코드는 master branch에서 작업되고 있어야합니다. branches: only: - master before_install: - npm install -g hexo install: - npm install before_script: - git config --global user.name &#34;INPUT_YOUR_USER_NAME&#34; - git config --global user.]]></description></item><item><title>［Hexo］블로그 주소를 바꾸었어요!</title><link>http://blog.hodory.dev/2019/06/09/github-pages-blog-migration/</link><pubDate>Sun, 09 Jun 2019 17:55:48 +0000</pubDate><author><name>hodory</name></author><guid>http://blog.hodory.dev/2019/06/09/github-pages-blog-migration/</guid><description>이번에도 Gracefullight님의 제안으로, dev 도메인을 구매하기로 하였습니다.
기존의 아이디를 사용하여 khzero.dev를 쓸까 하다가,
이왕 구매하는거 깃허브 아이디도 바꾸고, 도메인도 맞춰서 사자!
라고 생각을 했었습니다&amp;hellip;그때 멈췄어야 했는데요&amp;hellip;
해당 포스팅을 참조하여 작업을 진행하기 시작했습니다.
1. 도메인 구매 및 연결닉네임을 찾다가 Hodory로 변경하고, hodory.dev 도메인을 구매했습니다.
Github Pages로 관리되던 khzero.github.io Repository 이름을 hodory.github.io로 변경하였죠
지난번 TravisCI로 블로그 자동 배포시 겪은 문제에서 TravisCI로 배포 환경을 구축 했기 때문에,
위의 이미지와 같이 깃허브에서 TravisCI 서비스연결도 다시하고, Hexo config.</description></item><item><title>［Hexo］TravisCI로 블로그 자동 배포시 겪은 문제</title><link>http://blog.hodory.dev/2019/06/06/hexo-travis-ci-with-no-contents/</link><pubDate>Thu, 06 Jun 2019 12:22:59 +0000</pubDate><author><name>hodory</name></author><guid>http://blog.hodory.dev/2019/06/06/hexo-travis-ci-with-no-contents/</guid><description>WARN No layout 자동 배포를 했더니 빈 파일들만 올라가요!! 한줄 요약 : theme 폴더를 레포지토리에 추가하시면됩니다.
아래의 내용은 해당 원인을 찾아가던 본인의 경험담입니다&amp;hellip;
블로그를 직접 만드는데, 시간을 투자하는것 보다 포스팅을 하는게 더 가치 있겠다 싶어 현재 블로그를 Hexo + Github Page를 이용하여 운영하고 있습니다
기존에는 배포를 Hexo-cli를 이용하여 아래와 같은 명령어를 사용하여 배포 했습니다.
$ hexo clean $ hexo generate $ hexo deploy 쉘에서 해당 명령어를 작성하는것 또한 귀찮아져서 package.</description></item><item><title>［Hexo］ 명령어 정리</title><link>http://blog.hodory.dev/2017/08/31/how-to-use-hexo/</link><pubDate>Thu, 31 Aug 2017 22:57:17 +0000</pubDate><author><name>hodory</name></author><guid>http://blog.hodory.dev/2017/08/31/how-to-use-hexo/</guid><description>Hexo 명령어 정리 # 초안 생성명령어
$ hexo new draft [파일명] 예제
$ hexo new draft hello-world # 초안을 포스트로 옮기기(Draft to Post)명령어
$ hexo publish [파일명] 예제
$ hexo publish hello-world # 포스트 생성명령어
$ hexo new [파일명] 예제
$ hexo new hello-world # 배포하기$ hexo clean // clean을 하지 않으면 deploy를 해도 페이지가 업데이트 되지 않는 경우가 발생한다 $ hexo deploy --generate # 기타사항 카테고리와 태그와 같은 설정은 어떻게 설정하나요 ?</description></item></channel></rss>