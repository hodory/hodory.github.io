<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Javascript - Tag - Web Developer Hodory</title><link>http://blog.hodory.dev/tags/javascript/</link><description>Javascript - Tag - Web Developer Hodory</description><generator>Hugo -- gohugo.io</generator><language>ko</language><managingEditor>master@hodory.dev (hodory)</managingEditor><webMaster>master@hodory.dev (hodory)</webMaster><lastBuildDate>Sun, 05 Jan 2020 18:16:44 +0000</lastBuildDate><atom:link href="http://blog.hodory.dev/tags/javascript/" rel="self" type="application/rss+xml"/><item><title>[JS]Document.ready 의 대안</title><link>http://blog.hodory.dev/2020/01/05/document-ready-alternative/</link><pubDate>Sun, 05 Jan 2020 18:16:44 +0000</pubDate><author><name>hodory</name></author><guid>http://blog.hodory.dev/2020/01/05/document-ready-alternative/</guid><description><![CDATA[<p>jQuery를 사용할 때, DOM이 로드된 후 처리를 위해 아래와 같은 구문을 많이 사용해왔습니다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// or
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></div><p>이와 같은 동작을 jQuery 없이 사용 할 수 없을까 찾아 보았는데,</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;DOMContentLoaded&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p>위와 같이 작성하면 됩니다.</p>
<p><code>DOMContentLoaded</code>는 최초로 HTML 문서가 완전히 로드 및 파싱 되었을때 발생되므로,<!-- raw HTML omitted -->
모든 리소스(이미지, 스크립트, 스타일 시트 등)가 로드 된 후 발생하는 <code>load</code> 이벤트 보다는 먼저 호출됩니다.</p>
<p>그렇다면 왜 <code>DOMContentLoaded</code> 이벤트 리스너 대신 <code>$(document).ready()</code>를 사용했을까 알아 보았는데,</p>
<p><a href="https://caniuse.com/#search=DOMContentLoaded" target="_blank" rel="noopener noreferrer">CAN-I-USE-DOMContentLoaded</a>를 확인하였더니, IE8까지는 지원을 하지 않았습니다.<!-- raw HTML omitted -->
물론 jQuery가 아닌 대안들도 있었겠지만, 브라우저 호환성을 위해 jQuery를 써오던 입장에서는 간단하게 사용할 수 있던 방안이었으리라고 봅니다.</p>
<blockquote>
<p>참고자료</p>
</blockquote>
<ul>
<li><a href="https://developer.mozilla.org/ko/docs/Web/Events/DOMContentLoaded" title="해당 링크로 이동" target="_blank" rel="noopener noreferrer">MDN-DOMContentLoaded</a></li>
<li><a href="https://caniuse.com/#search=DOMContentLoaded" title="해당 링크로 이동" target="_blank" rel="noopener noreferrer">CAN-I-USE-DOMContentLoaded</a></li>
</ul>
]]></description></item><item><title>［JS］jQuery 두번째 파라미터가 뭐지?</title><link>http://blog.hodory.dev/2019/12/13/what-is-jquery-second-parameter/</link><pubDate>Fri, 13 Dec 2019 18:56:02 +0000</pubDate><author><name>hodory</name></author><guid>http://blog.hodory.dev/2019/12/13/what-is-jquery-second-parameter/</guid><description><![CDATA[<p>jQuery로 작성된 코드를 보는데, <code>$(&quot;selectorA&quot;, &quot;selectorB&quot;)</code> 와 같은 코드가 있었습니다.<!-- raw HTML omitted -->
당연히 기존에 자주 접하던 <code>$(&quot;selectorA, selectorB&quot;)</code> 와 같은 코드인줄 알았으나, 예상과 다르게 동작하여 문서를 확인해 보았습니다.</p>
<p><a href="https://api.jquery.com/jQuery/#jQuery-selector-context" target="_blank" rel="noopener noreferrer">jQuery 문서</a>에 따르면, <code>A DOM Element, Document, or jQuery to use as context</code> 가 기재되어있다.</p>
<p>해당 영역에는 DOM element가 올 수 있는데 <a href="https://api.jquery.com/jQuery/#selector-context" target="_blank" rel="noopener noreferrer">Selector Context</a>를 확인해보면</p>
<blockquote>
<p>selector context is implemented with the .find() method, so $( &ldquo;span&rdquo;, this ) is equivalent to $( this ).find( &ldquo;span&rdquo; ).</p>
</blockquote>
<p>이와 같이 말하고 있습니다.</p>
<p><a href="https://jsperf.com/jquery-find-vs-context-sel/61" target="_blank" rel="noopener noreferrer">jQuery .find() vs. context selector</a> 해당 링크에서 퍼포먼스 확인을 해보면
아래 이미지와 같이 context selector를 사용 하는 것 보다, 아주 조금이나마 더 빠릅니다.
<figure><img
        
        loading="lazy"
        src="/images/What-Is-jQuery-Second-Parameter/1.png"
        srcset="/images/What-Is-jQuery-Second-Parameter/1.png, /images/What-Is-jQuery-Second-Parameter/1.png 1.5x, /images/What-Is-jQuery-Second-Parameter/1.png 2x"
        sizes="auto"
        alt="/images/What-Is-jQuery-Second-Parameter/1.png"
        title="/images/What-Is-jQuery-Second-Parameter/1.png" ></figure></p>
]]></description></item><item><title>［JS］Object literal 보다 JSON.parse()가 더 빠르다</title><link>http://blog.hodory.dev/2019/11/26/json-parse-is-faster-than-object-literal/</link><pubDate>Tue, 26 Nov 2019 22:51:44 +0000</pubDate><author><name>hodory</name></author><guid>http://blog.hodory.dev/2019/11/26/json-parse-is-faster-than-object-literal/</guid><description><![CDATA[<h2 id="서론" class="headerLink">
    <a href="#%ec%84%9c%eb%a1%a0" class="header-mark"></a>서론</h2><hr>
<p>웹에서 몇 kb 크기의 객체를 초기에 렌더링 하는것은 생각보다 많습니다.</p>
<p>이 javascript 객체가 로드될때까지 클라이언트는 빈 화면을 보게 될 수 있습니다.</p>
<p>이러한 문제를 해결하기 위해, 서버사이드 렌더링을 활용 하는 방법도 있겠지만
다른 방법은 없을까요?</p>
<p>Chrome Dev Summit에서는 객체를 JSON으로 직렬화 하고, 문자열 리터럴로 변환해 Javscript 객체에 전달하는 것이 성능 향상에 도움이 된다고 이야기합니다.</p>
<h2 id="무슨-소리일까" class="headerLink">
    <a href="#%eb%ac%b4%ec%8a%a8-%ec%86%8c%eb%a6%ac%ec%9d%bc%ea%b9%8c" class="header-mark"></a>무슨 소리일까?</h2><hr>
<p>아래의 두 코드는 동일한 객체를 생성하지만,
Javascript 엔진의 경우, JSON 예제를 스캔하고, 파싱만 하기 때문에 빠르다고합니다.</p>
<p><figure><img
        
        loading="lazy"
        src="/images/json-parse-is-faster-than-object-literal/4c9cb490-207e-41db-9d59-126135a099ca.png"
        srcset="/images/json-parse-is-faster-than-object-literal/4c9cb490-207e-41db-9d59-126135a099ca.png, /images/json-parse-is-faster-than-object-literal/4c9cb490-207e-41db-9d59-126135a099ca.png 1.5x, /images/json-parse-is-faster-than-object-literal/4c9cb490-207e-41db-9d59-126135a099ca.png 2x"
        sizes="auto"
        alt="/images/json-parse-is-faster-than-object-literal/4c9cb490-207e-41db-9d59-126135a099ca.png"
        title="/images/json-parse-is-faster-than-object-literal/4c9cb490-207e-41db-9d59-126135a099ca.png" ></figure></p>
<p>Javascript 파서에게 해당 코드는 여러개의 객체 리터럴을 받는 코드이냐, 많은 양의 데이터가 담긴  문자열 단일 리터럴이냐로 구분됩니다.</p>
<p>해당 예제에서의 객체의 값은 숫자이지만, 자기 자신의 속성과 값을 가진 Object 또는 배열이거나, 더 많은 값을 가진 무엇이든 될 수 있기 때문입니다.</p>
<p>이렇기 때문에 <strong>자바스크립트 파서는 단지 올바르게 토큰화 하기위해 JSON.parse에 비해 더 많이 동작 해야 합니다.</strong></p>
<p>또 다른 이유로는 자바스크립트 객체 리터럴은 그 값이 객체문자열이라는것을 미리 알지 못하기때문입니다.</p>
<p>JSON.parse로 파싱할때에는 간단하게 중괄호 이후에 Object로 시작할지, 아니면 잘못된 JSON 형식인지라는 두가지 옵션에만 중점을 둡니다.</p>
<p><figure><img
        
        loading="lazy"
        src="/images/json-parse-is-faster-than-object-literal/b3788160-94bb-4610-84b3-f30b96ea4839.png"
        srcset="/images/json-parse-is-faster-than-object-literal/b3788160-94bb-4610-84b3-f30b96ea4839.png, /images/json-parse-is-faster-than-object-literal/b3788160-94bb-4610-84b3-f30b96ea4839.png 1.5x, /images/json-parse-is-faster-than-object-literal/b3788160-94bb-4610-84b3-f30b96ea4839.png 2x"
        sizes="auto"
        alt="/images/json-parse-is-faster-than-object-literal/b3788160-94bb-4610-84b3-f30b96ea4839.png"
        title="/images/json-parse-is-faster-than-object-literal/b3788160-94bb-4610-84b3-f30b96ea4839.png" ></figure></p>
<p>반면 객체 리터럴은 위의 이미지와 같이 Javscript Object는 중괄호 뒤의 값이 무엇인지를 아직까지는 알 수 없고</p>
<p><figure><img
        
        loading="lazy"
        src="/images/json-parse-is-faster-than-object-literal/23fb44c8-8b1f-4ac6-94da-760d94e16310.png"
        srcset="/images/json-parse-is-faster-than-object-literal/23fb44c8-8b1f-4ac6-94da-760d94e16310.png, /images/json-parse-is-faster-than-object-literal/23fb44c8-8b1f-4ac6-94da-760d94e16310.png 1.5x, /images/json-parse-is-faster-than-object-literal/23fb44c8-8b1f-4ac6-94da-760d94e16310.png 2x"
        sizes="auto"
        alt="/images/json-parse-is-faster-than-object-literal/23fb44c8-8b1f-4ac6-94da-760d94e16310.png"
        title="/images/json-parse-is-faster-than-object-literal/23fb44c8-8b1f-4ac6-94da-760d94e16310.png" ></figure></p>
<p>이렇게 되었을때는 첫번째 라인에 선언된 x의 값을 바인딩 한 객체 리터럴을 생성하는것을 알 수 있다.</p>
<p><figure><img
        
        loading="lazy"
        src="/images/json-parse-is-faster-than-object-literal/9fe6156d-93e5-478d-b7ca-d065792a93fd.png"
        srcset="/images/json-parse-is-faster-than-object-literal/9fe6156d-93e5-478d-b7ca-d065792a93fd.png, /images/json-parse-is-faster-than-object-literal/9fe6156d-93e5-478d-b7ca-d065792a93fd.png 1.5x, /images/json-parse-is-faster-than-object-literal/9fe6156d-93e5-478d-b7ca-d065792a93fd.png 2x"
        sizes="auto"
        alt="/images/json-parse-is-faster-than-object-literal/9fe6156d-93e5-478d-b7ca-d065792a93fd.png"
        title="/images/json-parse-is-faster-than-object-literal/9fe6156d-93e5-478d-b7ca-d065792a93fd.png" ></figure></p>
<p>하지만 이와 같이  선언 되었을 경우 두번째 라인의 코드에서 첫번째 라인의 x는 전혀 참조되지않습니다.</p>
<p><figure><img
        
        loading="lazy"
        src="/images/json-parse-is-faster-than-object-literal/3c12ea86-ac4a-48f4-9078-f2aa6d2b7f01.png"
        srcset="/images/json-parse-is-faster-than-object-literal/3c12ea86-ac4a-48f4-9078-f2aa6d2b7f01.png, /images/json-parse-is-faster-than-object-literal/3c12ea86-ac4a-48f4-9078-f2aa6d2b7f01.png 1.5x, /images/json-parse-is-faster-than-object-literal/3c12ea86-ac4a-48f4-9078-f2aa6d2b7f01.png 2x"
        sizes="auto"
        alt="/images/json-parse-is-faster-than-object-literal/3c12ea86-ac4a-48f4-9078-f2aa6d2b7f01.png"
        title="/images/json-parse-is-faster-than-object-literal/3c12ea86-ac4a-48f4-9078-f2aa6d2b7f01.png" ></figure></p>
<p>이와 같이, 이러한 문맥 의존 문법으로 인해, Javascript 엔진에서의 파싱이 까다롭습니다.</p>
<p>문자열을 JSON 파싱하는것은 이러한 문제가 없어, 구문 분석이 훨씬 간단해져서 빠를 수 있는것 입니다.</p>
<h2 id="실제로-얼마나-빠른건데" class="headerLink">
    <a href="#%ec%8b%a4%ec%a0%9c%eb%a1%9c-%ec%96%bc%eb%a7%88%eb%82%98-%eb%b9%a0%eb%a5%b8%ea%b1%b4%eb%8d%b0" class="header-mark"></a>실제로 얼마나 빠른건데?</h2><hr>
<p><figure><img
        
        loading="lazy"
        src="/images/json-parse-is-faster-than-object-literal/4e1dcc9f-59a1-4b20-be93-17b68ec19453.png"
        srcset="/images/json-parse-is-faster-than-object-literal/4e1dcc9f-59a1-4b20-be93-17b68ec19453.png, /images/json-parse-is-faster-than-object-literal/4e1dcc9f-59a1-4b20-be93-17b68ec19453.png 1.5x, /images/json-parse-is-faster-than-object-literal/4e1dcc9f-59a1-4b20-be93-17b68ec19453.png 2x"
        sizes="auto"
        alt="/images/json-parse-is-faster-than-object-literal/4e1dcc9f-59a1-4b20-be93-17b68ec19453.png"
        title="/images/json-parse-is-faster-than-object-literal/4e1dcc9f-59a1-4b20-be93-17b68ec19453.png" ></figure></p>
<p>캐시가 없는 콜드로드 상태에서 8MB에 가까운 페이로드를 기준으로 파싱하였을때,
v8과 크롬에서 <code>JSON.parse()</code>가 1.7배정도 빠르다고 한다.</p>
<p>이는 다른 자바스크립트 엔진이나 브라우저에서도 적용된다고한다.</p>
<p><a href="https://goo.gle/json-parse-redux" target="_blank" rel="noopener noreferrer">리덕스앱에 이와 같은 적용을 한 사례</a>에서는 Time To Interactive(TTI)가 18% 개선되었고, Lighthouse 성능 점수가 8포인트 증가하였습니다.</p>
<p>이러한 작업을 직접 수동으로 하는것 대신 툴을 이용하는것을 추천합니다.
코드 베이스에 JSON 모듈을 사용할 경우, <a href="https://goo.gle/json-parse-webpack" target="_blank" rel="noopener noreferrer">webpack에서는 <code>JSON.parse()</code>기능을 이미 적용 시켰습니다.</a></p>
<p><a href="http://goo.gle/json-parse-babel" target="_blank" rel="noopener noreferrer">다른 코드들은 babel 플러그인를 이용해 변환 할 수 있습니다.</a></p>
<h2 id="맺음말" class="headerLink">
    <a href="#%eb%a7%ba%ec%9d%8c%eb%a7%90" class="header-mark"></a>맺음말</h2><hr>
<p>페이스북 페이지에서</p>
<blockquote>
<p>Faster apps with JSON.parse</p>
</blockquote>
<p>해당 문구를 보자마자</p>
<p>&ldquo;엥?? <code>JSON.parse()</code>는 느리지 않나??&rdquo; 라는 생각만을 가지고 관심을 가지며 영상을 보면서 정리한 내용이라 제가 잘못 이해한 부분이 있을 수 있습니다.</p>
<p>잘못된 부분이 있으면 코멘트 부탁 드리겠습니다.</p>
<h2 id="출처" class="headerLink">
    <a href="#%ec%b6%9c%ec%b2%98" class="header-mark"></a>출처</h2><hr>
<p><a href="https://youtu.be/ff4fgQxPaO0" target="_blank" rel="noopener noreferrer">Faster apps with JSON.parse (Chrome Dev Summit 2019)</a></p>
]]></description></item><item><title>［JS］jQuery 없이 Selectbox에서 여러개 선택된 option의 값 추출하기</title><link>http://blog.hodory.dev/2019/05/12/how-to-get-multiple-selected-options-with-vanillajs/</link><pubDate>Sun, 12 May 2019 14:29:38 +0000</pubDate><author><name>hodory</name></author><guid>http://blog.hodory.dev/2019/05/12/how-to-get-multiple-selected-options-with-vanillajs/</guid><description><![CDATA[<p>DOM을 다룰때 jQuery를 사용하면 매우 편리합니다.</p>
<p>물론 크로스 브라우저 이슈로도 제이쿼리를 많이 사용합니다.</p>
<p>하지만 DOM을 핸들링하기 위해서만 jQuery를 쓴다면, 편리함은 챙기겠지만 낭비 아닐까싶습니다.</p>
<p>저는 위와 같은 생각으로,<!-- raw HTML omitted -->
주로 DOM 핸들링에는 jQuery 의존성을 줄이고자 순수 자바스크립트를 사용하려 노력하고 있습니다.</p>
<p>또한, <code>document.querySelector</code>와 <code>document.querySelectorAll</code> 를 이용한다면,<!-- raw HTML omitted -->
jQuery에서 사용하던 복잡한 DOM Selector도 쉽게 사용할 수 있습니다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">select</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;user&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;user[]&#34;</span> <span class="na">multiple</span><span class="o">=</span><span class="s">&#34;multiple&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">option</span><span class="p">&gt;</span>선택<span class="p">&lt;/</span><span class="nt">option</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">option</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;foo&#34;</span><span class="p">&gt;</span>Foo<span class="p">&lt;/</span><span class="nt">option</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">option</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;bar&#34;</span><span class="p">&gt;</span>Bar<span class="p">&lt;/</span><span class="nt">option</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">option</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;baz&#34;</span><span class="p">&gt;</span>Baz<span class="p">&lt;/</span><span class="nt">option</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">select</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>위와 같은 Multiple SelectBox에서 여러개가 선택되었을 경우 값을 어떻게 가져올까요?</p>
<p>jQuery를 사용하면 <code>$(&quot;#user&quot;).val()</code>으로 짧고 간결하게 가져올 수 있습니다.</p>
<p>선택된 값이 없을 경우 null이 리턴되고, 선택된 값이 있으면 배열 안에 value 값이 담깁니다.</p>
<p>그렇다면 순수 자바스크립트로는 어떻게 표현할까요?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nb">Array</span><span class="p">.</span><span class="nx">from</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s2">&#34;#user&#34;</span><span class="p">).</span><span class="nx">selectedOptions</span><span class="p">,</span> <span class="p">(</span><span class="nx">item</span><span class="p">)=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">item</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></div><p><code>document.querySelector(&quot;#user&quot;).selectedOptions</code>를 사용하면 ID 값이 user인 DOM을 찾아 selected 된 옵션을 리턴하여줍니다.<!-- raw HTML omitted -->
해당 값에서 value 값만 뽑고싶다면 위와 같이 처리할 수 있습니다.</p>
<p>위와 같이 처리하면 jQuery를 사용할때와 다른점은 선택된 옵션이 없을 경우에는 []를 리턴하여 줍니다.</p>
]]></description></item><item><title>［JS］Knex와 Webpack을 같이 쓰면서 발생한 오류 처리</title><link>http://blog.hodory.dev/2019/04/18/knex-with-webpack/</link><pubDate>Thu, 18 Apr 2019 19:10:52 +0000</pubDate><author><name>hodory</name></author><guid>http://blog.hodory.dev/2019/04/18/knex-with-webpack/</guid><description><![CDATA[<pre tabindex="0"><code>ERROR in &#39;./node_modules/knex/lib/dialects/mssql/index.js&#39;
Module not found: Error : Can&#39;t resolve &#39;mssql/lib/base&#39;
</code></pre><p>프로젝트에 웹팩을 도입하여 사용중, <code>knex</code> 라이브러리를 넣고 나서<!-- raw HTML omitted -->
웹팩으로 빌드시 해당 에러가 나와서 빌드에 실패 했습니다.</p>
<!-- raw HTML omitted -->
<p>해당 오류를 검색 하였는데,<!-- raw HTML omitted -->
역시나 <a href="https://github.com/tgriesser/knex/issues/1128#issuecomment-312735118" target="_blank" rel="noopener noreferrer">깃허브 이슈</a>가 있었고(감사합니다),
webpack의 config에 아래의 내용을 추가 하였습니다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl">  <span class="nx">externals</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">knex</span><span class="o">:</span> <span class="s1">&#39;commonjs knex&#39;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span></code></pre></div><p>해당 작업 후 빌드는 성공했지만,<!-- raw HTML omitted -->
노드 서버에서 실행시 knex 모듈을 찾을 수 없다는 오류가 나왔습니다.</p>
<pre tabindex="0"><code>{
  &#34;errorMessage&#34;: &#34;Cannot find module &#39;knex&#39;&#34;,
  &#34;errorType&#34;: &#34;Error&#34;,
  &#34;stackTrace&#34;: [
    &#34;Function.Module._load (module.js:474:25)&#34;,
    &#34;Module.require (module.js:596:17)&#34;,
    &#34;require (internal/module.js:11:18)&#34;,
    &#34;Object.defineProperty.value (/var/task/main.js:1604:18)&#34;,
    &#34;__webpack_require__ (/var/task/main.js:20:30)&#34;,
    &#34;Object.&lt;anonymous&gt; (/var/task/main.js:1564:14)&#34;,
    &#34;__webpack_require__ (/var/task/main.js:20:30)&#34;,
    &#34;Object.defineProperty.value (/var/task/main.js:1442:20)&#34;,
    &#34;__webpack_require__ (/var/task/main.js:20:30)&#34;
  ]
}
</code></pre><p>계속해서 구글링하던중, 다른분의 도움으로 <a href="https://github.com/tgriesser/knex/issues/1446#issuecomment-253245823" target="_blank" rel="noopener noreferrer">해당 이슈</a> 코멘트를 찾았습니다.<!-- raw HTML omitted -->
해당 코드를 참고하여 mysql2 라이브러리를 사용했기때문에 아래와 같은 코드를 추가 하였습니다.</p>
<pre tabindex="0"><code>{
  plugins: [
    new webpack.NormalModuleReplacementPlugin(/\.\.migrate/, &#39;../util/noop.js&#39;),
    new webpack.NormalModuleReplacementPlugin(/\.\.seed/, &#39;../util/noop.js&#39;),
    new webpack.IgnorePlugin(/mariasql/, /knex/),
    new webpack.IgnorePlugin(/mysql/, /knex/),
    new webpack.IgnorePlugin(/mssql/, /knex/),
    new webpack.IgnorePlugin(/oracle/, /knex/),
    new webpack.IgnorePlugin(/oracledb/, /knex/),
    new webpack.IgnorePlugin(/postgres/, /knex/),
    new webpack.IgnorePlugin(/redshift/, /knex/),
    new webpack.IgnorePlugin(/pg-query-stream/, /knex/),
    new webpack.IgnorePlugin(/sqlite3/, /knex/),
    new webpack.IgnorePlugin(/strong-oracle/, /knex/),
    new webpack.IgnorePlugin(/pg-native/, /pg/)
  ]
}
</code></pre><p>빌드는 성공 했으나 정상 동작하지 않아 확인 해보니 <code>/node_modules/knex/lib/mysql2/index.js</code> 해당 파일에</p>
<p><figure><img
        
        loading="lazy"
        src="https://github.com/hodory/hodory.github.io/blob/master/images/need-mysql.png"
        srcset="https://github.com/hodory/hodory.github.io/blob/master/images/need-mysql.png, https://github.com/hodory/hodory.github.io/blob/master/images/need-mysql.png 1.5x, https://github.com/hodory/hodory.github.io/blob/master/images/need-mysql.png 2x"
        sizes="auto"
        alt="/node_modules/knex/lib/mysql2/index.js"
        title="/node_modules/knex/lib/mysql2/index.js" ></figure></p>
<p>이러한 코드가 있어서 결국 mysql2를 쓰더라도 mysql 라이브러리가 필요하였습니다.</p>
<p>굳이 mysql2 모듈을 고집 할 필요가 없을것 같아, mysql 모듈로 변경하고,<!-- raw HTML omitted -->
<code>new webpack.IgnorePlugin(/mysql/, /knex/)</code> 를 <code>new webpack.IgnorePlugin(/mysql2/, /knex/),</code> 로 변경하니
빌드도 성공하였으며, 정상 동작 하였습니다.</p>
<p>더 좋은 방법이 있을거 같은데 아쉽게도 제가 찾은 방법은 이것 밖에 없었습니다.<!-- raw HTML omitted -->
좋은 해결 방안 있으면 댓글로 공유 부탁 드리겠습니다.</p>
]]></description></item><item><title>［JS］ ES5와 ES6 뭐가 다를까?</title><link>http://blog.hodory.dev/2018/04/17/es5-vs-es6/</link><pubDate>Tue, 17 Apr 2018 01:26:53 +0000</pubDate><author><name>hodory</name></author><guid>http://blog.hodory.dev/2018/04/17/es5-vs-es6/</guid><description><![CDATA[<p>ES5와 ES6를 비교 할겸
ES6를 사용할때 자주 쓰이는 부분만 정리해보았습니다.</p>
<ul>
<li><a href="#Const-%eb%b3%80%ec%88%98" rel="">Const Variables</a></li>
<li><a href="#let-%eb%b3%80%ec%88%98" rel="">let Variables</a></li>
<li><a href="#Block-Scoped-%ed%95%a8%ec%88%98" rel="">Block-Scoped Function</a></li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li><a href="#Arrow-Function" rel="">Arrow Function</a></li>
<li><a href="#Default-Parameter" rel="">Default Parameter</a></li>
<li><a href="#Rest-Parameter" rel="">Rest Parameter</a></li>
<li><a href="#Spread-Operator" rel="">Spread Operator</a></li>
<li><a href="#Template-Literals" rel="">Template Literals</a></li>
<li><a href="#Enhanced-Object-Properties" rel="">Ehhanced Object Properties</a>
<ul>
<li><a href="#Property-Shorthand" rel="">Property Shorthand</a></li>
<li><a href="#Computed-Property-Names" rel="">Computed Property Names</a></li>
<li><a href="#Method-Properties" rel="">Method Properties</a></li>
</ul>
</li>
<li><a href="#Export-Import" rel="">Export / Import</a></li>
<li><a href="#Class-Definition" rel="">Class Definition</a></li>
<li><a href="#Promise" rel="">Promise</a>
<ul>
<li><a href="#Promise-all-%ec%9d%84-%ec%9d%b4%ec%9a%a9%ed%95%a9%eb%8b%88%eb%8b%a4" rel="">Promise all</a></li>
</ul>
</li>
</ul>
<h3 id="const-변수" class="headerLink">
    <a href="#const-%eb%b3%80%ec%88%98" class="header-mark"></a>Const 변수</h3><p>Immutable varibale인 Const 변수(상수 변수)를 지원합니다.(블록-스코프 변수)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">PI</span> <span class="o">=</span> <span class="mf">3.141592</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">PI</span><span class="p">)</span> <span class="c1">// 3.141592
</span></span></span></code></pre></div><h3 id="let-변수" class="headerLink">
    <a href="#let-%eb%b3%80%ec%88%98" class="header-mark"></a>let 변수</h3><p>기존의 함수-스코프였던 변수와 다르게 Hoisting 없는 블록-스코프 변수를 지원합니다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// ES5
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;for loop start&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">10</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;i : &#39;</span> <span class="o">+</span> <span class="nx">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;for loop end i : &#39;</span> <span class="o">+</span> <span class="nx">i</span><span class="p">)</span> <span class="c1">// for loop end i : 10
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">counter</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">j</span><span class="o">&lt;</span><span class="mi">10</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;j : &#39;</span><span class="p">,</span> <span class="nx">j</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">counter</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;j : &#39;</span><span class="p">,</span> <span class="nx">j</span><span class="p">)</span> <span class="c1">// j is not defined
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// ES6
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;for loop start&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">10</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;i : &#39;</span> <span class="o">+</span> <span class="nx">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;for loop end i : &#39;</span> <span class="o">+</span> <span class="nx">i</span><span class="p">)</span> <span class="c1">// j is not defined
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">counter</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">j</span><span class="o">&lt;</span><span class="mi">10</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;j : &#39;</span><span class="p">,</span> <span class="nx">j</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">counter</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;j : &#39;</span><span class="p">,</span><span class="nx">j</span><span class="p">)</span> <span class="c1">// j is not defined
</span></span></span></code></pre></div><p>또한 var 변수는 재선언,재할당이 가능하지만 let 변수는 재선언이 불가능합니다 (const 변수는 immutable variable이므로 재할당도 불가능)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="s1">&#39;foo&#39;</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="s1">&#39;bar&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// hoisting으로 ReferenceError가 나지않는다.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">b</span> <span class="o">=</span> <span class="s1">&#39;foo&#39;</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">b</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">c</span> <span class="o">=</span> <span class="s1">&#39;foo&#39;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">c</span> <span class="o">=</span> <span class="s1">&#39;bar&#39;</span> <span class="c1">// Uncaught SyntaxError: Identifier &#39;c&#39; has already been declared
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">c</span> <span class="o">=</span> <span class="s1">&#39;bar&#39;</span> <span class="c1">// &#34;bar&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">d</span> <span class="o">=</span> <span class="s1">&#39;foo&#39;</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">d</span> <span class="o">=</span> <span class="s1">&#39;bar&#39;</span> <span class="c1">// Uncaught SyntaxError: Identifier &#39;d&#39; has already been declared
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">d</span> <span class="o">=</span> <span class="s1">&#39;bar&#39;</span> <span class="c1">// Uncaught TypeError: Assignment to constant variable.
</span></span></span></code></pre></div><h3 id="block-scoped-함수" class="headerLink">
    <a href="#block-scoped-%ed%95%a8%ec%88%98" class="header-mark"></a>Block-Scoped 함수</h3><p>블록-스코프 함수 정의 방식 개선</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// ES6
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">function</span> <span class="nx">foo</span> <span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">1</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">())</span> <span class="c1">// 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">2</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">())</span> <span class="c1">// 2
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">())</span> <span class="c1">// 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// ES5
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">foo</span><span class="p">()</span> <span class="o">===</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">2</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="nx">foo</span><span class="p">()</span> <span class="o">===</span> <span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">})();</span>
</span></span><span class="line"><span class="cl">    <span class="nx">foo</span><span class="p">()</span> <span class="o">===</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">})();</span>
</span></span></code></pre></div><h3 id="arrow-function" class="headerLink">
    <a href="#arrow-function" class="header-mark"></a>Arrow Function</h3><p><code>function</code>과 <code>return</code>을 묶어 화살표 함수로 변형 가능합니다</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// ES6
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">nums</span> <span class="o">=</span> <span class="nx">evens</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">v</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">v</span><span class="o">+</span><span class="nx">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">this</span><span class="p">.</span><span class="nx">nums</span><span class="p">.</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">v</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="nx">v</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">evens</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="c1">// ES5
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">nums</span> <span class="o">=</span> <span class="nx">evens</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">v</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">v</span><span class="o">+</span><span class="nx">i</span><span class="p">;</span> <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">this</span><span class="p">.</span><span class="nx">nums</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">v</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="nx">v</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nx">self</span><span class="p">.</span><span class="nx">evens</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">v</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></div><h3 id="디폴트-파라미터" class="headerLink">
    <a href="#%eb%94%94%ed%8f%b4%ed%8a%b8-%ed%8c%8c%eb%9d%bc%eb%af%b8%ed%84%b0" class="header-mark"></a>디폴트 파라미터</h3><p>타 언어에서 사용 할 수 있었던 디폴트 파라미터가 지원됩니다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// ES6
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">function</span> <span class="nx">foo</span> <span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="nx">z</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span> <span class="o">+</span> <span class="nx">z</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">foo</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="c1">// 6
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// ES5
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">function</span> <span class="nx">foo</span> <span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">z</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="nx">y</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nx">y</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="nx">z</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nx">z</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span> <span class="o">+</span> <span class="nx">z</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="nx">foo</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="c1">// 6
</span></span></span></code></pre></div><h3 id="rest-parameter" class="headerLink">
    <a href="#rest-parameter" class="header-mark"></a>Rest Parameter</h3><p>지정되지 않은 매개변수 집합을 하나의 변수에 담을 수 있습니다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// ES6
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">function</span> <span class="nx">foo</span> <span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="p">...</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">(</span><span class="nx">x</span> <span class="o">*</span> <span class="nx">y</span><span class="p">)</span> <span class="o">+</span> <span class="nx">a</span><span class="p">.</span><span class="nx">length</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">foo</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="s2">&#34;baz&#34;</span><span class="p">,</span> <span class="kc">true</span> <span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="p">[</span><span class="mi">2</span><span class="p">])</span> <span class="c1">// 6
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// ES5
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">function</span> <span class="nx">foo</span> <span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">(</span><span class="nx">x</span> <span class="o">*</span> <span class="nx">y</span><span class="p">)</span> <span class="o">+</span> <span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="nx">foo</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="s2">&#34;baz&#34;</span><span class="p">,</span> <span class="kc">true</span> <span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="p">[</span><span class="mi">2</span><span class="p">]);</span> <span class="c1">// 6
</span></span></span></code></pre></div><h3 id="spread-operator-전개연산자" class="headerLink">
    <a href="#spread-operator-%ec%a0%84%ea%b0%9c%ec%97%b0%ec%82%b0%ec%9e%90" class="header-mark"></a>Spread Operator (전개연산자)</h3><p>2개 이상의 인수나 2개이상의 요소 또는 2개이상의 변수가 해당되는 곳에 확장 될 수 있도록 합니다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">myFunc</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">z</span><span class="p">){}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// ES6
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">params</span> <span class="o">=</span> <span class="p">[</span> <span class="s2">&#34;Foo&#34;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="mi">2</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">others</span> <span class="o">=</span> <span class="p">[</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="p">...</span><span class="nx">params</span> <span class="p">]</span> <span class="c1">// [ 1, 2, &#34;Foo&#34; ,true, 2 ]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">str</span> <span class="o">=</span> <span class="s2">&#34;Bar&#34;</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">chars</span> <span class="o">=</span> <span class="p">[</span> <span class="p">...</span><span class="nx">str</span> <span class="p">]</span> <span class="c1">// [ &#34;B&#34;, &#34;a&#34;, &#34;r&#34;]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">myFunc</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="p">...</span><span class="nx">params</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="c1">// ES5
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">params</span> <span class="o">=</span> <span class="p">[</span> <span class="s2">&#34;Foo&#34;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="mi">2</span> <span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">others</span> <span class="o">=</span> <span class="p">[</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span> <span class="p">].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">params</span><span class="p">);</span> <span class="c1">// [ 1, 2, &#34;Foo&#34; ,true, 2 ]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="s2">&#34;Bar&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">chars</span> <span class="o">=</span> <span class="nx">str</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&#34;&#34;</span><span class="p">);</span> <span class="c1">// [ &#34;B&#34;, &#34;a&#34;, &#34;r&#34;]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">myFunc</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">params</span><span class="p">));</span>
</span></span></code></pre></div><h3 id="template-literals" class="headerLink">
    <a href="#template-literals" class="header-mark"></a>Template Literals</h3><p>문자열 다중 행 처리와 보간문자 처리를 할 수 있습니다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// ES6
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">user</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">name</span> <span class="o">:</span> <span class="s2">&#34;Foo&#34;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">info</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">id</span><span class="o">:</span> <span class="s2">&#34;bar&#34;</span><span class="p">,</span> <span class="nx">email</span><span class="o">:</span> <span class="s2">&#34;Foo@example.com&#34;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">userInfo</span> <span class="o">=</span> <span class="sb">`Hello </span><span class="si">${</span><span class="nx">user</span><span class="p">.</span><span class="nx">name</span><span class="si">}</span><span class="sb">.
</span></span></span><span class="line"><span class="cl"><span class="sb">Your ID is </span><span class="si">${</span><span class="nx">info</span><span class="p">.</span><span class="nx">id</span><span class="si">}</span><span class="sb"> 
</span></span></span><span class="line"><span class="cl"><span class="sb">and email is </span><span class="si">${</span><span class="nx">info</span><span class="p">.</span><span class="nx">email</span><span class="si">}</span><span class="sb">.`</span>
</span></span><span class="line"><span class="cl"><span class="c1">// Hello Foo.
</span></span></span><span class="line"><span class="cl"><span class="c1">// Your ID is bar
</span></span></span><span class="line"><span class="cl"><span class="c1">// and email is Foo@example.com
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// ES5
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">user</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">name</span> <span class="o">:</span> <span class="s2">&#34;Foo&#34;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">info</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">id</span><span class="o">:</span> <span class="s2">&#34;bar&#34;</span><span class="p">,</span> <span class="nx">email</span><span class="o">:</span> <span class="s2">&#34;Foo@example.com&#34;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">userInfo</span> <span class="o">=</span> <span class="s2">&#34;Hello &#34;</span> <span class="o">+</span> <span class="nx">user</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="s2">&#34;.\n&#34;</span><span class="o">+</span>
</span></span><span class="line"><span class="cl"><span class="s2">&#34;Your ID is &#34;</span> <span class="o">+</span> <span class="nx">info</span><span class="p">.</span><span class="nx">id</span> <span class="o">+</span> <span class="s2">&#34;\n&#34;</span>
</span></span><span class="line"><span class="cl"><span class="s2">&#34;and email is &#34;</span><span class="o">+</span><span class="nx">info</span><span class="p">.</span><span class="nx">email</span><span class="o">+</span><span class="s2">&#34;.&#34;</span><span class="p">;</span>
</span></span></code></pre></div><h3 id="enhanced-object-properties" class="headerLink">
    <a href="#enhanced-object-properties" class="header-mark"></a>Enhanced Object Properties</h3><h5 id="property-shorthand" class="headerLink">
    <a href="#property-shorthand" class="header-mark"></a>Property Shorthand</h5><p>공통 객체 속성 정의를 간결하게 할 수 있습니다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// ES6
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">y</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// ES5
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="nx">x</span><span class="o">:</span> <span class="nx">x</span> <span class="p">,</span> <span class="nx">y</span><span class="o">:</span> <span class="nx">y</span><span class="p">};</span>
</span></span></code></pre></div><h5 id="computed-property-names" class="headerLink">
    <a href="#computed-property-names" class="header-mark"></a>Computed Property Names</h5><p>Object 프로퍼티 정의에 계산된 이름을 지원합니다</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// ES6
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">foo</span><span class="o">:</span> <span class="s2">&#34;Bar&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span><span class="s2">&#34;Baz&#34;</span> <span class="o">+</span> <span class="nx">myFunc</span><span class="p">()</span> <span class="p">]</span><span class="o">:</span> <span class="mi">42</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// ES5
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">foo</span><span class="o">:</span> <span class="s2">&#34;Bar&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="nx">obj</span><span class="p">[</span><span class="s2">&#34;Baz&#34;</span> <span class="o">+</span> <span class="nx">myFunc</span><span class="p">()</span> <span class="p">]</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span>
</span></span></code></pre></div><h5 id="method-properties" class="headerLink">
    <a href="#method-properties" class="header-mark"></a>Method Properties</h5><p>일반적인 함수와 제너레이터 함수의 Object 프로퍼티 정의에 메소드를 표기할 수 있도록 지원합니다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// ES6
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">foo</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">bar</span> <span class="p">(</span><span class="nx">x</span> <span class="p">,</span><span class="nx">y</span><span class="p">)</span> <span class="p">{},</span>
</span></span><span class="line"><span class="cl">    <span class="o">*</span><span class="nx">baz</span> <span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// ES5
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">foo</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">bar</span> <span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{},</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// baz : es5에서는 대체할 것이 없습니다.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><h3 id="export--import" class="headerLink">
    <a href="#export--import" class="header-mark"></a>Export / Import</h3><p>값을 export/import로 모듈에 가져오거나 모듈로 내보낼 수 있습니다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// ES6
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// lib/math.js
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">export</span> <span class="kd">function</span> <span class="nx">sum</span> <span class="p">(</span><span class="nx">x</span> <span class="p">,</span><span class="nx">y</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kd">var</span> <span class="nx">pi</span> <span class="o">=</span> <span class="mf">3.141592</span>
</span></span><span class="line"><span class="cl"><span class="c1">// Foo.js
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">import</span> <span class="o">*</span> <span class="nx">as</span> <span class="nx">math</span> <span class="nx">from</span> <span class="s2">&#34;lib/math&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;2pi = &#34;</span> <span class="o">+</span> <span class="nx">math</span><span class="p">.</span><span class="nx">sum</span><span class="p">(</span><span class="nx">math</span><span class="p">.</span><span class="nx">pi</span><span class="p">,</span> <span class="nx">math</span><span class="p">.</span><span class="nx">pi</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="c1">// Bar.js
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">import</span> <span class="p">{</span> <span class="nx">sum</span><span class="p">,</span> <span class="nx">pi</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&#34;lib/math&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;2pi = &#34;</span> <span class="o">+</span> <span class="nx">sum</span><span class="p">(</span><span class="nx">pi</span><span class="p">,</span><span class="nx">pi</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//ES5
</span></span></span><span class="line"><span class="cl"><span class="c1">// lib/math.js
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">LibMath</span> <span class="o">=</span> <span class="p">{};</span>
</span></span><span class="line"><span class="cl"><span class="nx">LibMath</span><span class="p">.</span><span class="nx">sum</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">x</span> <span class="p">,</span><span class="nx">y</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="nx">LibMath</span><span class="p">.</span><span class="nx">pi</span> <span class="o">=</span> <span class="mf">3.141592</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="c1">// Foo.js
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">math</span> <span class="o">=</span> <span class="nx">LibMath</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;2pi = &#34;</span> <span class="o">+</span> <span class="nx">math</span><span class="p">.</span><span class="nx">sum</span><span class="p">(</span><span class="nx">math</span><span class="p">.</span><span class="nx">pi</span><span class="p">,</span> <span class="nx">math</span><span class="p">.</span><span class="nx">pi</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="c1">// Bar.js
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">sum</span> <span class="o">=</span> <span class="nx">LibMath</span><span class="p">.</span><span class="nx">sum</span><span class="p">,</span> <span class="nx">pi</span> <span class="o">=</span> <span class="nx">LibMath</span><span class="p">.</span><span class="nx">pi</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;2pi = &#34;</span> <span class="o">+</span> <span class="nx">sum</span><span class="p">(</span><span class="nx">pi</span><span class="p">,</span><span class="nx">pi</span><span class="p">));</span>
</span></span></code></pre></div><h3 id="class-definition" class="headerLink">
    <a href="#class-definition" class="header-mark"></a>Class Definition</h3><p>클래스를 지원합니다 (이외에도 상속, 오버로딩, 정적 클래스멤버, Getter/Setter를 지원합니다.)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// ES6
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">class</span> <span class="nx">Car</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">constuctor</span> <span class="p">(</span><span class="nx">id</span><span class="p">,</span> <span class="nx">x</span> <span class="p">,</span><span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">id</span> <span class="o">=</span> <span class="nx">id</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">move</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">move</span> <span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">x</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="nx">y</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// ES5
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">Car</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">id</span><span class="p">,</span> <span class="nx">x</span> <span class="p">,</span><span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">id</span> <span class="o">=</span> <span class="nx">id</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">move</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="nx">Car</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">move</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="nx">y</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="promise" class="headerLink">
    <a href="#promise" class="header-mark"></a>Promise</h3><p>비동기 처리 이후 동작을 순차적,또는 병렬로 진행하기 위해 사용하는 클래스. 기존 Callback Hell에서 벗어날 수 있도록 도와줍니다(잘 구현 했을 경우&hellip;.)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// ES6
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">let</span> <span class="nx">_promise</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span><span class="nx">reject</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="nx">success</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">            <span class="nx">resolve</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="c1">// success
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">reject</span><span class="p">(</span><span class="nx">reason</span><span class="p">)</span>  <span class="c1">// fail
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">_promise</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="nx">then</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">//success일때 처리
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">//reject 일때 처리
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">_promise</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="nx">then</span><span class="p">(...)</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">err</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span></code></pre></div><blockquote>
<blockquote>
<p>여러개의 프로미스가 모두 완료 될때 실행하려면요?</p>
</blockquote>
</blockquote>
<h5 id="promise-all-을-이용합니다" class="headerLink">
    <a href="#promise-all-%ec%9d%84-%ec%9d%b4%ec%9a%a9%ed%95%a9%eb%8b%88%eb%8b%a4" class="header-mark"></a>Promise-all 을 이용합니다.</h5><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">_promise1</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span><span class="nx">reject</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="nx">success</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">            <span class="nx">resolve</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="c1">// success
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">reject</span><span class="p">(</span><span class="nx">reason</span><span class="p">)</span>  <span class="c1">// fail
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">_promise2</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span><span class="nx">reject</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="nx">success</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">            <span class="nx">resolve</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="c1">// success
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">reject</span><span class="p">(</span><span class="nx">reason</span><span class="p">)</span>  <span class="c1">// fail
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">Promise</span><span class="p">.</span><span class="nx">all</span><span class="p">([</span><span class="nx">_promise1</span><span class="p">,</span> <span class="nx">_promise2</span><span class="p">]).</span><span class="nx">then</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// resolve 된 결과 처리
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// reject 된 결과 처리
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// OR
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">_promise1</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span><span class="nx">reject</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="nx">success</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">            <span class="nx">resolve</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="c1">// success
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">reject</span><span class="p">(</span><span class="nx">reason</span><span class="p">)</span>  <span class="c1">// fail
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">let</span> <span class="nx">_promise2</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span><span class="nx">reject</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="nx">success</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">            <span class="nx">resolve</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="c1">// success
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">reject</span><span class="p">(</span><span class="nx">reason</span><span class="p">)</span>  <span class="c1">// fail
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">Promise</span><span class="p">.</span><span class="nx">all</span><span class="p">([</span><span class="nx">_promise1</span><span class="p">(),</span> <span class="nx">_promise2</span><span class="p">()]).</span><span class="nx">then</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// resolve 된 결과 처리
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// reject 된 결과 처리
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></div><blockquote>
<p>참고자료</p>
</blockquote>
<ul>
<li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla" title="해당 링크로 이동" target="_blank" rel="noopener noreferrer">MDN</a></li>
<li><a href="http://es6-features.org" target="_blank" rel="noopener noreferrer">ES-6 기능 소개</a></li>
<li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener noreferrer">Promise</a>
<ul>
<li><a href="http://webframeworks.kr/tutorials/translate/es6-promise-api-1/" title="링크로 이동" target="_blank" rel="noopener noreferrer">ES6 Promises(1) - the API</a></li>
<li><a href="https://programmingsummaries.tistory.com/325" title="링크로 이동" target="_blank" rel="noopener noreferrer">도대체 Promise는 어떻게 쓰는거야?</a></li>
</ul>
</li>
</ul>
]]></description></item><item><title>［Node.js］Express.js로 NodeJS 시작하기</title><link>http://blog.hodory.dev/2018/03/11/start-nodejs/</link><pubDate>Sun, 11 Mar 2018 21:57:18 +0000</pubDate><author><name>hodory</name></author><guid>http://blog.hodory.dev/2018/03/11/start-nodejs/</guid><description><![CDATA[<h4 id="express-제너레이터-설치" class="headerLink">
    <a href="#express-%ec%a0%9c%eb%84%88%eb%a0%88%ec%9d%b4%ed%84%b0-%ec%84%a4%ec%b9%98" class="header-mark"></a>express 제너레이터 설치</h4><pre tabindex="0"><code>npm install express-generator
</code></pre><h4 id="ejs-템플릿을-이용하여-myapp-디렉토리에-생성" class="headerLink">
    <a href="#ejs-%ed%85%9c%ed%94%8c%eb%a6%bf%ec%9d%84-%ec%9d%b4%ec%9a%a9%ed%95%98%ec%97%ac-myapp-%eb%94%94%eb%a0%89%ed%86%a0%eb%a6%ac%ec%97%90-%ec%83%9d%ec%84%b1" class="header-mark"></a>ejs 템플릿을 이용하여 myapp 디렉토리에 생성</h4><pre tabindex="0"><code>express myapp --view=ejs
</code></pre><h4 id="myapp-디렉토리로-이동하여-npm-install패키지-설치" class="headerLink">
    <a href="#myapp-%eb%94%94%eb%a0%89%ed%86%a0%eb%a6%ac%eb%a1%9c-%ec%9d%b4%eb%8f%99%ed%95%98%ec%97%ac-npm-install%ed%8c%a8%ed%82%a4%ec%a7%80-%ec%84%a4%ec%b9%98" class="header-mark"></a>myapp 디렉토리로 이동하여 npm install(패키지 설치)</h4><pre tabindex="0"><code>$ cd myapp &amp; npm install
</code></pre><h4 id="서버-실행" class="headerLink">
    <a href="#%ec%84%9c%eb%b2%84-%ec%8b%a4%ed%96%89" class="header-mark"></a>서버 실행</h4><pre tabindex="0"><code>$ npm start
</code></pre><h1 id="post전송시-필요한-body-parser와-express-session-설치" class="headerLink">
    <a href="#post%ec%a0%84%ec%86%a1%ec%8b%9c-%ed%95%84%ec%9a%94%ed%95%9c-body-parser%ec%99%80-express-session-%ec%84%a4%ec%b9%98" class="header-mark"></a>POST전송시 필요한 body-parser와 express-session 설치</h1><pre tabindex="0"><code>$ npm install body-parser express-session
</code></pre><p>기존에는 NodeJS에서 POST 요청 데이터를 추출 할 수 있도록 하기 위하여 bodyParser를 설치해야 했는데 express-generator에 추가 되었다</p>
]]></description></item></channel></rss>