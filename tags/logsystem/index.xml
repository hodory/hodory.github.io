<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>LogSystem - Tag - Web Developer Hodory</title><link>http://blog.hodory.dev/tags/logsystem/</link><description>LogSystem - Tag - Web Developer Hodory</description><generator>Hugo -- gohugo.io</generator><language>ko-KR</language><lastBuildDate>Fri, 10 May 2019 00:27:05 +0000</lastBuildDate><atom:link href="http://blog.hodory.dev/tags/logsystem/" rel="self" type="application/rss+xml"/><item><title>［PHP］Monolog와 함께 로그를 시작하자 - 1</title><link>http://blog.hodory.dev/2019/05/10/php-logging-with-monolog-1/</link><pubDate>Fri, 10 May 2019 00:27:05 +0000</pubDate><author><name>hodory</name></author><guid>http://blog.hodory.dev/2019/05/10/php-logging-with-monolog-1/</guid><description>PHP에서 로그 남기기PHP에서는 주로 JS에서 console.log | console.debug 와 유사하게 var_dump | print_r | echo | sys_log | error_log 등 다양한 방식으로 로그를 남기고 있습니다.
Monolog란?PSR-3을 준수하고 있는 로깅 프레임워크로, 거의 대부분의 로깅 플랫폼과 연결할 수 있는 핸들러(Slack, ElasticSearch, Mail, NewRelic 등)를 제공하고 있습니다.
RFC 5424(Syslog Protocol이라고 하는데 더 공부해봐야할 것 같습니다.)에 정의된 로그 레벨을 모두 지원하고 있습니다.
DEBUG(100) INFO(200) NOTICE(250) WARNING(300) ERROR(400) CRITICAL(500) ALERT(550) EMERGENCY(600) 코어 컨셉간단하게 Logger Instance에 Record를 추가하면, 해당 인스턴스에 추가 해두었던 핸들러에 이벤트를 전파하는 것으로 보입니다.</description></item></channel></rss>