<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Algorithm - Tag - Web Developer Hodory</title><link>http://blog.hodory.dev/tags/algorithm/</link><description>Algorithm - Tag - Web Developer Hodory</description><generator>Hugo -- gohugo.io</generator><language>ko</language><managingEditor>master@hodory.dev (hodory)</managingEditor><webMaster>master@hodory.dev (hodory)</webMaster><lastBuildDate>Thu, 19 Apr 2018 12:54:39 +0000</lastBuildDate><atom:link href="http://blog.hodory.dev/tags/algorithm/" rel="self" type="application/rss+xml"/><item><title>［Algorithm］이진탐색 알고리즘(Binary Search Algorithm)</title><link>http://blog.hodory.dev/2018/04/19/binary-search/</link><pubDate>Thu, 19 Apr 2018 12:54:39 +0000</pubDate><author><name>hodory</name></author><guid>http://blog.hodory.dev/2018/04/19/binary-search/</guid><description><![CDATA[<h3 id="이진탐색" class="headerLink">
    <a href="#%ec%9d%b4%ec%a7%84%ed%83%90%ec%83%89" class="header-mark"></a>이진탐색</h3><ul>
<li>정의
<ul>
<li>오름차순으로 정렬된 리스트에서 특정한 값의 위치를 찾는 것.</li>
<li>오름차순으로 정렬된 리스트일 경우에만 사용할 수 있다는 단점이 있지만, 절반씩 줄여가며 탐색하기 때문에 매우 빠르다.</li>
</ul>
</li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>구현
<ul>
<li>해당 배열에서 가운데 값을 찾고, 그 값과 비교하여 해당 인덱스에서의 배열의 값이 찾는 값 보다 클때는 앞쪽에서 찾고, 작을때는 뒤쪽에서 찾으면 된다.</li>
<li>코드</li>
<li></li>
</ul>
</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="c1">// 해당 인덱스를 출력해주는 알고리즘 입니다.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">binarSearch</span> <span class="o">=</span> <span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">let</span> <span class="nx">start</span> <span class="o">=</span> <span class="nx">data</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">end</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">last</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">(</span><span class="nx">value</span> <span class="o">&lt;</span> <span class="nx">start</span> <span class="o">||</span> <span class="nx">value</span> <span class="o">&gt;</span> <span class="nx">end</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">while</span> <span class="p">(</span><span class="nx">index</span> <span class="o">&lt;=</span> <span class="nx">last</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="kd">let</span> <span class="nx">center</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">((</span><span class="nx">index</span><span class="o">+</span><span class="nx">last</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">(</span><span class="nx">data</span><span class="p">[</span><span class="nx">center</span><span class="p">]</span> <span class="o">===</span> <span class="nx">value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">center</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">data</span><span class="p">[</span><span class="nx">center</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nx">value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// 해당 인덱스의 배열값이 더 크기때문에 최대 인덱스를 줄인다.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">last</span> <span class="o">=</span> <span class="nx">center</span> <span class="o">-</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">		<span class="k">else</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// 해당 인덱스의 배열값이 더 작기때문에 최소 인덱스를 늘린다.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">index</span> <span class="o">=</span> <span class="nx">center</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 호출
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">binarSearch</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">25</span><span class="p">],</span><span class="mi">25</span><span class="p">)</span> <span class="c1">// 4
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">binarSearch</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">14</span><span class="p">,</span><span class="mi">16</span><span class="p">,</span><span class="mi">18</span><span class="p">,</span><span class="mi">25</span><span class="p">],</span><span class="mi">18</span><span class="p">)</span> <span class="c1">// 6
</span></span></span></code></pre></div><blockquote>
<p>참고자료</p>
</blockquote>
<ul>
<li><a href="https://ko.wikipedia.org/wiki/%ec%9d%b4%ec%a7%84_%ea%b2%80%ec%83%89_%ec%95%8c%ea%b3%a0%eb%a6%ac%ec%a6%98" title="해당 링크로 이동" target="_blank" rel="noopener noreferrer">위키백과</a></li>
<li><a href="https://namu.wiki/w/%ec%9d%b4%ec%a7%84%20%ed%83%90%ec%83%89" title="해당 링크로 이동" target="_blank" rel="noopener noreferrer">나무위키</a></li>
</ul>
]]></description></item><item><title>［Algorithm］반복문 없이 1부터 10까지 합 구하기</title><link>http://blog.hodory.dev/2018/04/18/1-to-10-calc-without-for-loop/</link><pubDate>Wed, 18 Apr 2018 15:53:47 +0000</pubDate><author><name>hodory</name></author><guid>http://blog.hodory.dev/2018/04/18/1-to-10-calc-without-for-loop/</guid><description><![CDATA[<h3 id="1부터-10까지-합-구하기" class="headerLink">
    <a href="#1%eb%b6%80%ed%84%b0-10%ea%b9%8c%ec%a7%80-%ed%95%a9-%ea%b5%ac%ed%95%98%ea%b8%b0" class="header-mark"></a>1부터 10까지 합 구하기</h3><blockquote>
<p>먼저 방법은 무엇이 있을까?</p>
</blockquote>
<ul>
<li>
<p>등차 수열의 합</p>
</li>
<li>
<p>재귀함수 방식</p>
</li>
<li>
<p>기타 등등&hellip;</p>
<p>하나씩 구현해보자</p>
</li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>
<p>등차 수열</p>
<ul>
<li>등차 수열이란 ?
연속하는 두 항의 차이가 모두 일정한 수열.</li>
<li>등차 수열의 합 공식 (출처 : <a href="https://ko.wikipedia.org/wiki/%eb%93%b1%ec%b0%a8%ec%88%98%ec%97%b4" target="_blank" rel="noopener noreferrer">위키피디아</a>)
<figure><a class="lightgallery" href="https://wikimedia.org/api/rest_v1/media/math/render/svg/2c20edf8a4ff670b534d3cb674f934710a88d023" title="등차수열의 합 공식" data-thumbnail="https://wikimedia.org/api/rest_v1/media/math/render/svg/2c20edf8a4ff670b534d3cb674f934710a88d023" data-sub-html="<h2>클릭시 위키피디아로 이동</h2><p>등차수열의 합 공식</p>">
        <img
            
            loading="lazy"
            src="https://wikimedia.org/api/rest_v1/media/math/render/svg/2c20edf8a4ff670b534d3cb674f934710a88d023"
            srcset="https://wikimedia.org/api/rest_v1/media/math/render/svg/2c20edf8a4ff670b534d3cb674f934710a88d023, https://wikimedia.org/api/rest_v1/media/math/render/svg/2c20edf8a4ff670b534d3cb674f934710a88d023 1.5x, https://wikimedia.org/api/rest_v1/media/math/render/svg/2c20edf8a4ff670b534d3cb674f934710a88d023 2x"
            sizes="auto"
            alt="등차수열의 합 공식">
    </a><figcaption class="image-caption">클릭시 위키피디아로 이동</figcaption>
    </figure></li>
<li>코드 구현
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl">  <span class="nx">addFunction</span> <span class="o">=</span> <span class="p">(</span><span class="nx">start</span><span class="p">,</span> <span class="nx">end</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="p">(</span><span class="nx">end</span><span class="o">-</span><span class="nx">start</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="nx">start</span><span class="o">+</span><span class="nx">end</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nx">addFunction</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">10</span><span class="p">)</span>
</span></span></code></pre></div></li>
</ul>
</li>
<li>
<p>재귀함수 방식</p>
<ul>
<li>
<p>재귀 함수란?자기 자신을 재 참조 하는 함수</p>
</li>
<li>
<p>재귀함수 구조(출처 : <a href="https://ko.wikipedia.org/wiki/%EC%9E%AC%EA%B7%80%ED%95%A8%EC%88%98" title="클릭시 위키피디아로 이동" target="_blank" rel="noopener noreferrer">위키피디아</a>)</p>
</li>
<li>
<p>ex)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">factorial</span> <span class="o">=</span> <span class="p">(</span><span class="nx">v</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">v</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">v</span> <span class="o">*</span> <span class="nx">factorial</span><span class="p">(</span><span class="nx">v</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div></li>
<li>
<p>코드 구현</p>
</li>
<li>
<p>ex)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nx">addFunction</span> <span class="o">=</span> <span class="p">(</span><span class="nx">v</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">v</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">v</span> <span class="o">+</span> <span class="nx">addFunction</span><span class="p">(</span><span class="nx">v</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div></li>
</ul>
</li>
</ul>
<blockquote>
<p>참고자료</p>
</blockquote>
<ul>
<li><a href="https://ko.wikipedia.org/wiki/%eb%93%b1%ec%b0%a8%ec%88%98%ec%97%b4" title="해당 링크로 이동" target="_blank" rel="noopener noreferrer">위키백과 - 등차수열</a></li>
<li><a href="https://ko.wikipedia.org/wiki/%ec%9e%ac%ea%b7%80%ed%95%a8%ec%88%98" title="해당 링크로 이동" target="_blank" rel="noopener noreferrer">위키백과 - 재귀함수</a></li>
</ul>
]]></description></item></channel></rss>