<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Git - Tag - Web Developer Hodory</title><link>http://blog.hodory.dev/tags/git/</link><description>Git - Tag - Web Developer Hodory</description><generator>Hugo -- gohugo.io</generator><language>ko</language><managingEditor>master@hodory.dev (hodory)</managingEditor><webMaster>master@hodory.dev (hodory)</webMaster><lastBuildDate>Mon, 09 Mar 2020 23:20:20 +0000</lastBuildDate><atom:link href="http://blog.hodory.dev/tags/git/" rel="self" type="application/rss+xml"/><item><title>[Git] 원격 브랜치명으로 새로운 브랜치 생성하기</title><link>http://blog.hodory.dev/2020/03/09/git-new-branch-from-remote-branch/</link><pubDate>Mon, 09 Mar 2020 23:20:20 +0000</pubDate><author><name>hodory</name></author><guid>http://blog.hodory.dev/2020/03/09/git-new-branch-from-remote-branch/</guid><description><![CDATA[<p>주로 PHPStorm 같은 IDE 나 VSCode 같은 Extension이 잘 되어 있는 에디터를 사용하고,<!-- raw HTML omitted -->
그 이전에는 Source Tree / Git Kraken / Fork 등 Git Client 를 사용하여 Git을 사용하기 때문에,<!-- raw HTML omitted -->
아직 CLI로 Git을 유연하게 다루지 못해 <a href="https://git-scm.com/book/ko/v2/Git-%EB%B8%8C%EB%9E%9C%EC%B9%98-%EB%A6%AC%EB%AA%A8%ED%8A%B8-%EB%B8%8C%EB%9E%9C%EC%B9%98" target="_blank" rel="noopener noreferrer">git-scm</a> 문서의 내용을 정리 합니다.</p>
<h2 id="명령어-정리" class="headerLink">
    <a href="#%eb%aa%85%eb%a0%b9%ec%96%b4-%ec%a0%95%eb%a6%ac" class="header-mark"></a>명령어 정리</h2><h3 id="원격-브랜치명과-같은-이름으로-생성할-때" class="headerLink">
    <a href="#%ec%9b%90%ea%b2%a9-%eb%b8%8c%eb%9e%9c%ec%b9%98%eb%aa%85%ea%b3%bc-%ea%b0%99%ec%9d%80-%ec%9d%b4%eb%a6%84%ec%9c%bc%eb%a1%9c-%ec%83%9d%ec%84%b1%ed%95%a0-%eb%95%8c" class="header-mark"></a>원격 브랜치명과 같은 이름으로 생성할 때</h3><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ git checkout --track origin/master
</span></span></code></pre></div><p>해당 브랜치명이 리모트에만 있고, 로컬에는 없을 때 이를 축약하여 아래와 같이 실행할 수 있다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ git checkout master
</span></span></code></pre></div><h3 id="원격-브랜치명과-다른-이름으로-생성할-때" class="headerLink">
    <a href="#%ec%9b%90%ea%b2%a9-%eb%b8%8c%eb%9e%9c%ec%b9%98%eb%aa%85%ea%b3%bc-%eb%8b%a4%eb%a5%b8-%ec%9d%b4%eb%a6%84%ec%9c%bc%eb%a1%9c-%ec%83%9d%ec%84%b1%ed%95%a0-%eb%95%8c" class="header-mark"></a>원격 브랜치명과 다른 이름으로 생성할 때</h3><p>가장 많이 쓰이는 경우인데, 원격 Git 서버의 master 브랜치를 기준으로 새로운 브랜치를 만들고, 체크아웃 할 때 사용합니다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ git checkout -b my-new-branch-name origin/master
</span></span></code></pre></div><p>위와 같이 실행하면 <code>origin/master</code>를 트래킹 하게 되는데,<!-- raw HTML omitted -->
다른 브랜치를 추적하기 위해 아래와 같이 실행할 수 있습니다.</p>
<pre tabindex="0"><code>$ git branch -u origin/feature-test
</code></pre><h2 id="참고자료" class="headerLink">
    <a href="#%ec%b0%b8%ea%b3%a0%ec%9e%90%eb%a3%8c" class="header-mark"></a>참고자료</h2><p><a href="https://git-scm.com/book/ko/v2/Git-%EB%B8%8C%EB%9E%9C%EC%B9%98-%EB%A6%AC%EB%AA%A8%ED%8A%B8-%EB%B8%8C%EB%9E%9C%EC%B9%98" target="_blank" rel="noopener noreferrer">Git 브랜치 - 리모트 브랜치</a></p>
]]></description></item><item><title>[Git] Git Merge 또는 Git checkout 오류 해결하기</title><link>http://blog.hodory.dev/2020/02/18/error-your-local-changes-would-be-overwritten-by-merge/</link><pubDate>Tue, 18 Feb 2020 23:36:40 +0000</pubDate><author><name>hodory</name></author><guid>http://blog.hodory.dev/2020/02/18/error-your-local-changes-would-be-overwritten-by-merge/</guid><description><![CDATA[<h2 id="문제-상황" class="headerLink">
    <a href="#%eb%ac%b8%ec%a0%9c-%ec%83%81%ed%99%a9" class="header-mark"></a>문제 상황</h2><p><code>git pull origin master</code> 또는 <code>git checkout master</code> 와 같이 브랜치를 변경하거나, 원격저장소에서 pull을 받을때
아래와 같은 오류가 나온적 경험이 한번쯤은 있을것 입니다.</p>
<p><figure><a class="lightgallery" href="/images/error-Your-local-changes-would-be-overwritten-by-merge/files-would-be-overwritten-by-merge.png" title="/images/error-Your-local-changes-would-be-overwritten-by-merge/files-would-be-overwritten-by-merge.png" data-thumbnail="/images/error-Your-local-changes-would-be-overwritten-by-merge/files-would-be-overwritten-by-merge.png">
        <img
            
            loading="lazy"
            src="/images/error-Your-local-changes-would-be-overwritten-by-merge/files-would-be-overwritten-by-merge.png"
            srcset="/images/error-Your-local-changes-would-be-overwritten-by-merge/files-would-be-overwritten-by-merge.png, /images/error-Your-local-changes-would-be-overwritten-by-merge/files-would-be-overwritten-by-merge.png 1.5x, /images/error-Your-local-changes-would-be-overwritten-by-merge/files-would-be-overwritten-by-merge.png 2x"
            sizes="auto"
            alt="/images/error-Your-local-changes-would-be-overwritten-by-merge/files-would-be-overwritten-by-merge.png">
    </a></figure>
<figure><a class="lightgallery" href="/images/error-Your-local-changes-would-be-overwritten-by-merge/files-would-be-overwritten-by-checkout.png" title="/images/error-Your-local-changes-would-be-overwritten-by-merge/files-would-be-overwritten-by-checkout.png" data-thumbnail="/images/error-Your-local-changes-would-be-overwritten-by-merge/files-would-be-overwritten-by-checkout.png">
        <img
            
            loading="lazy"
            src="/images/error-Your-local-changes-would-be-overwritten-by-merge/files-would-be-overwritten-by-checkout.png"
            srcset="/images/error-Your-local-changes-would-be-overwritten-by-merge/files-would-be-overwritten-by-checkout.png, /images/error-Your-local-changes-would-be-overwritten-by-merge/files-would-be-overwritten-by-checkout.png 1.5x, /images/error-Your-local-changes-would-be-overwritten-by-merge/files-would-be-overwritten-by-checkout.png 2x"
            sizes="auto"
            alt="/images/error-Your-local-changes-would-be-overwritten-by-merge/files-would-be-overwritten-by-checkout.png">
    </a></figure></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">error: Your local changes to the following files would be overwritten by checkout:
</span></span><span class="line"><span class="cl">        themes/icarus/layout/widget/recent_posts.ejs
</span></span><span class="line"><span class="cl">Please commit your changes or stash them before you switch branches.
</span></span><span class="line"><span class="cl">Aborting
</span></span></code></pre></div><p><code>error: Your local changes to the following files would be overwritten by merge:</code><!-- raw HTML omitted -->
<code>error: Your local changes to the following files would be overwritten by checkout:</code></p>
<p>위와 같은 오류와 함께 pull이나 checkout이 동작하지 않습니다.</p>
<p>처음 Git을 사용하였을때는 집과 회사를 오가면서 깃허브를 이용해서 push도 하고 pull도 하고 잘 사용하다가<!-- raw HTML omitted -->
이런 오류가 나오면 어떻게 해야할지 모르겠고, 커밋을 해야하는것 같은데<!-- raw HTML omitted -->
무의미한 커밋을 하고 싶지는 않아서 다른 폴더로 clone을 하고 다시 작업을 했었는데요.</p>
<h2 id="해결-방법" class="headerLink">
    <a href="#%ed%95%b4%ea%b2%b0-%eb%b0%a9%eb%b2%95" class="header-mark"></a>해결 방법</h2><hr>
<p>에러 메세지를 자세히 보면 해결 방법이 나와있습니다.<!-- raw HTML omitted -->
<code>Please commit your changes or stash them before you merge.</code> 그리고<!-- raw HTML omitted -->
<code>Please commit your changes or stash them before you switch branches.</code> 라는 문구가 있습니다.<!-- raw HTML omitted -->
메세지 그대로 merge 또는 switch branch 이전에 변경사항을 <strong><code>commit</code></strong> 하거나 <strong><code>stash</code></strong> 하라고 합니다.</p>
<p>위에서도 말했지만 저는 쓸데 없는 커밋을 하고싶지 않아 방법을 모르고 새 프로젝트를 실행했지만<!-- raw HTML omitted -->
이때는 <code>git stash</code> 명령어를 사용하면 됩니다.</p>
<p>stash는 간단하게 버전관리 되는 대상들을 잠시동안 임시저장 해두는 방법이라고 말할 수 있습니다.</p>
<h3 id="그래서-어떻게-하라는건가요" class="headerLink">
    <a href="#%ea%b7%b8%eb%9e%98%ec%84%9c-%ec%96%b4%eb%96%bb%ea%b2%8c-%ed%95%98%eb%9d%bc%eb%8a%94%ea%b1%b4%ea%b0%80%ec%9a%94" class="header-mark"></a>그래서 어떻게 하라는건가요?</h3><hr>
<p>위와 같은 상황에서는 아래와 같이 사용하면 됩니다.</p>
<pre tabindex="0"><code># 현재 Staging 영역에 있는 파일의 변경사항을 스택에 넣어둡니다. 
$ git stash
# 아래 명령어와 같이 원격 저장소의 master에서 pull을 하거나, git checkout master와 같이 브랜치를 바꿀 수 있습니다. 
$ git pull origin master
# stash 명령어로 스택에 넣어둔 변경 사항을 적용하고, 스택에서 제거하여줍니다.
$ git stash pop
</code></pre><p>간단하게 한줄로 표현하면 <code>git stash &amp;&amp; git pull origin master &amp;&amp; git stash pop</code> 와 같이 사용할 수 있습니다.</p>
<h2 id="참고자료" class="headerLink">
    <a href="#%ec%b0%b8%ea%b3%a0%ec%9e%90%eb%a3%8c" class="header-mark"></a>참고자료</h2><p><code>git stash</code>에 대한 자세한 사용법은 <a href="https://git-scm.com/book/ko/v2/Git-%EB%8F%84%EA%B5%AC-Stashing%EA%B3%BC-Cleaning" target="_blank" rel="noopener noreferrer">해당 링크</a>에서 확인할 수 있습니다.</p>
]]></description></item></channel></rss>