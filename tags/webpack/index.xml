<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Webpack - Tag - Web Developer Hodory</title><link>http://blog.hodory.dev/tags/webpack/</link><description>Webpack - Tag - Web Developer Hodory</description><generator>Hugo -- gohugo.io</generator><language>ko</language><managingEditor>master@hodory.dev (hodory)</managingEditor><webMaster>master@hodory.dev (hodory)</webMaster><lastBuildDate>Sun, 05 Jan 2020 18:16:44 +0000</lastBuildDate><atom:link href="http://blog.hodory.dev/tags/webpack/" rel="self" type="application/rss+xml"/><item><title>[JS]Document.ready 의 대안</title><link>http://blog.hodory.dev/2020/01/05/document-ready-alternative/</link><pubDate>Sun, 05 Jan 2020 18:16:44 +0000</pubDate><author><name>hodory</name></author><guid>http://blog.hodory.dev/2020/01/05/document-ready-alternative/</guid><description><![CDATA[<p>jQuery를 사용할 때, DOM이 로드된 후 처리를 위해 아래와 같은 구문을 많이 사용해왔습니다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// or
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></div><p>이와 같은 동작을 jQuery 없이 사용 할 수 없을까 찾아 보았는데,</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;DOMContentLoaded&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p>위와 같이 작성하면 됩니다.</p>
<p><code>DOMContentLoaded</code>는 최초로 HTML 문서가 완전히 로드 및 파싱 되었을때 발생되므로,<!-- raw HTML omitted -->
모든 리소스(이미지, 스크립트, 스타일 시트 등)가 로드 된 후 발생하는 <code>load</code> 이벤트 보다는 먼저 호출됩니다.</p>
<p>그렇다면 왜 <code>DOMContentLoaded</code> 이벤트 리스너 대신 <code>$(document).ready()</code>를 사용했을까 알아 보았는데,</p>
<p><a href="https://caniuse.com/#search=DOMContentLoaded" target="_blank" rel="noopener noreferrer">CAN-I-USE-DOMContentLoaded</a>를 확인하였더니, IE8까지는 지원을 하지 않았습니다.<!-- raw HTML omitted -->
물론 jQuery가 아닌 대안들도 있었겠지만, 브라우저 호환성을 위해 jQuery를 써오던 입장에서는 간단하게 사용할 수 있던 방안이었으리라고 봅니다.</p>
<blockquote>
<p>참고자료</p>
</blockquote>
<ul>
<li><a href="https://developer.mozilla.org/ko/docs/Web/Events/DOMContentLoaded" title="해당 링크로 이동" target="_blank" rel="noopener noreferrer">MDN-DOMContentLoaded</a></li>
<li><a href="https://caniuse.com/#search=DOMContentLoaded" title="해당 링크로 이동" target="_blank" rel="noopener noreferrer">CAN-I-USE-DOMContentLoaded</a></li>
</ul>
]]></description></item><item><title>［JS］jQuery 두번째 파라미터가 뭐지?</title><link>http://blog.hodory.dev/2019/12/13/what-is-jquery-second-parameter/</link><pubDate>Fri, 13 Dec 2019 18:56:02 +0000</pubDate><author><name>hodory</name></author><guid>http://blog.hodory.dev/2019/12/13/what-is-jquery-second-parameter/</guid><description><![CDATA[<p>jQuery로 작성된 코드를 보는데, <code>$(&quot;selectorA&quot;, &quot;selectorB&quot;)</code> 와 같은 코드가 있었습니다.<!-- raw HTML omitted -->
당연히 기존에 자주 접하던 <code>$(&quot;selectorA, selectorB&quot;)</code> 와 같은 코드인줄 알았으나, 예상과 다르게 동작하여 문서를 확인해 보았습니다.</p>
<p><a href="https://api.jquery.com/jQuery/#jQuery-selector-context" target="_blank" rel="noopener noreferrer">jQuery 문서</a>에 따르면, <code>A DOM Element, Document, or jQuery to use as context</code> 가 기재되어있다.</p>
<p>해당 영역에는 DOM element가 올 수 있는데 <a href="https://api.jquery.com/jQuery/#selector-context" target="_blank" rel="noopener noreferrer">Selector Context</a>를 확인해보면</p>
<blockquote>
<p>selector context is implemented with the .find() method, so $( &ldquo;span&rdquo;, this ) is equivalent to $( this ).find( &ldquo;span&rdquo; ).</p>
</blockquote>
<p>이와 같이 말하고 있습니다.</p>
<p><a href="https://jsperf.com/jquery-find-vs-context-sel/61" target="_blank" rel="noopener noreferrer">jQuery .find() vs. context selector</a> 해당 링크에서 퍼포먼스 확인을 해보면
아래 이미지와 같이 context selector를 사용 하는 것 보다, 아주 조금이나마 더 빠릅니다.
<figure><img
        
        loading="lazy"
        src="/images/What-Is-jQuery-Second-Parameter/1.png"
        srcset="/images/What-Is-jQuery-Second-Parameter/1.png, /images/What-Is-jQuery-Second-Parameter/1.png 1.5x, /images/What-Is-jQuery-Second-Parameter/1.png 2x"
        sizes="auto"
        alt="/images/What-Is-jQuery-Second-Parameter/1.png"
        title="/images/What-Is-jQuery-Second-Parameter/1.png" ></figure></p>
]]></description></item><item><title>［JS］jQuery 없이 Selectbox에서 여러개 선택된 option의 값 추출하기</title><link>http://blog.hodory.dev/2019/05/12/how-to-get-multiple-selected-options-with-vanillajs/</link><pubDate>Sun, 12 May 2019 14:29:38 +0000</pubDate><author><name>hodory</name></author><guid>http://blog.hodory.dev/2019/05/12/how-to-get-multiple-selected-options-with-vanillajs/</guid><description><![CDATA[<p>DOM을 다룰때 jQuery를 사용하면 매우 편리합니다.</p>
<p>물론 크로스 브라우저 이슈로도 제이쿼리를 많이 사용합니다.</p>
<p>하지만 DOM을 핸들링하기 위해서만 jQuery를 쓴다면, 편리함은 챙기겠지만 낭비 아닐까싶습니다.</p>
<p>저는 위와 같은 생각으로,<!-- raw HTML omitted -->
주로 DOM 핸들링에는 jQuery 의존성을 줄이고자 순수 자바스크립트를 사용하려 노력하고 있습니다.</p>
<p>또한, <code>document.querySelector</code>와 <code>document.querySelectorAll</code> 를 이용한다면,<!-- raw HTML omitted -->
jQuery에서 사용하던 복잡한 DOM Selector도 쉽게 사용할 수 있습니다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">select</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;user&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;user[]&#34;</span> <span class="na">multiple</span><span class="o">=</span><span class="s">&#34;multiple&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">option</span><span class="p">&gt;</span>선택<span class="p">&lt;/</span><span class="nt">option</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">option</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;foo&#34;</span><span class="p">&gt;</span>Foo<span class="p">&lt;/</span><span class="nt">option</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">option</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;bar&#34;</span><span class="p">&gt;</span>Bar<span class="p">&lt;/</span><span class="nt">option</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">option</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;baz&#34;</span><span class="p">&gt;</span>Baz<span class="p">&lt;/</span><span class="nt">option</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">select</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>위와 같은 Multiple SelectBox에서 여러개가 선택되었을 경우 값을 어떻게 가져올까요?</p>
<p>jQuery를 사용하면 <code>$(&quot;#user&quot;).val()</code>으로 짧고 간결하게 가져올 수 있습니다.</p>
<p>선택된 값이 없을 경우 null이 리턴되고, 선택된 값이 있으면 배열 안에 value 값이 담깁니다.</p>
<p>그렇다면 순수 자바스크립트로는 어떻게 표현할까요?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nb">Array</span><span class="p">.</span><span class="nx">from</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s2">&#34;#user&#34;</span><span class="p">).</span><span class="nx">selectedOptions</span><span class="p">,</span> <span class="p">(</span><span class="nx">item</span><span class="p">)=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">item</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></div><p><code>document.querySelector(&quot;#user&quot;).selectedOptions</code>를 사용하면 ID 값이 user인 DOM을 찾아 selected 된 옵션을 리턴하여줍니다.<!-- raw HTML omitted -->
해당 값에서 value 값만 뽑고싶다면 위와 같이 처리할 수 있습니다.</p>
<p>위와 같이 처리하면 jQuery를 사용할때와 다른점은 선택된 옵션이 없을 경우에는 []를 리턴하여 줍니다.</p>
]]></description></item><item><title>［JS］Knex와 Webpack을 같이 쓰면서 발생한 오류 처리</title><link>http://blog.hodory.dev/2019/04/18/knex-with-webpack/</link><pubDate>Thu, 18 Apr 2019 19:10:52 +0000</pubDate><author><name>hodory</name></author><guid>http://blog.hodory.dev/2019/04/18/knex-with-webpack/</guid><description><![CDATA[<pre tabindex="0"><code>ERROR in &#39;./node_modules/knex/lib/dialects/mssql/index.js&#39;
Module not found: Error : Can&#39;t resolve &#39;mssql/lib/base&#39;
</code></pre><p>프로젝트에 웹팩을 도입하여 사용중, <code>knex</code> 라이브러리를 넣고 나서<!-- raw HTML omitted -->
웹팩으로 빌드시 해당 에러가 나와서 빌드에 실패 했습니다.</p>
<!-- raw HTML omitted -->
<p>해당 오류를 검색 하였는데,<!-- raw HTML omitted -->
역시나 <a href="https://github.com/tgriesser/knex/issues/1128#issuecomment-312735118" target="_blank" rel="noopener noreferrer">깃허브 이슈</a>가 있었고(감사합니다),
webpack의 config에 아래의 내용을 추가 하였습니다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl">  <span class="nx">externals</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">knex</span><span class="o">:</span> <span class="s1">&#39;commonjs knex&#39;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span></code></pre></div><p>해당 작업 후 빌드는 성공했지만,<!-- raw HTML omitted -->
노드 서버에서 실행시 knex 모듈을 찾을 수 없다는 오류가 나왔습니다.</p>
<pre tabindex="0"><code>{
  &#34;errorMessage&#34;: &#34;Cannot find module &#39;knex&#39;&#34;,
  &#34;errorType&#34;: &#34;Error&#34;,
  &#34;stackTrace&#34;: [
    &#34;Function.Module._load (module.js:474:25)&#34;,
    &#34;Module.require (module.js:596:17)&#34;,
    &#34;require (internal/module.js:11:18)&#34;,
    &#34;Object.defineProperty.value (/var/task/main.js:1604:18)&#34;,
    &#34;__webpack_require__ (/var/task/main.js:20:30)&#34;,
    &#34;Object.&lt;anonymous&gt; (/var/task/main.js:1564:14)&#34;,
    &#34;__webpack_require__ (/var/task/main.js:20:30)&#34;,
    &#34;Object.defineProperty.value (/var/task/main.js:1442:20)&#34;,
    &#34;__webpack_require__ (/var/task/main.js:20:30)&#34;
  ]
}
</code></pre><p>계속해서 구글링하던중, 다른분의 도움으로 <a href="https://github.com/tgriesser/knex/issues/1446#issuecomment-253245823" target="_blank" rel="noopener noreferrer">해당 이슈</a> 코멘트를 찾았습니다.<!-- raw HTML omitted -->
해당 코드를 참고하여 mysql2 라이브러리를 사용했기때문에 아래와 같은 코드를 추가 하였습니다.</p>
<pre tabindex="0"><code>{
  plugins: [
    new webpack.NormalModuleReplacementPlugin(/\.\.migrate/, &#39;../util/noop.js&#39;),
    new webpack.NormalModuleReplacementPlugin(/\.\.seed/, &#39;../util/noop.js&#39;),
    new webpack.IgnorePlugin(/mariasql/, /knex/),
    new webpack.IgnorePlugin(/mysql/, /knex/),
    new webpack.IgnorePlugin(/mssql/, /knex/),
    new webpack.IgnorePlugin(/oracle/, /knex/),
    new webpack.IgnorePlugin(/oracledb/, /knex/),
    new webpack.IgnorePlugin(/postgres/, /knex/),
    new webpack.IgnorePlugin(/redshift/, /knex/),
    new webpack.IgnorePlugin(/pg-query-stream/, /knex/),
    new webpack.IgnorePlugin(/sqlite3/, /knex/),
    new webpack.IgnorePlugin(/strong-oracle/, /knex/),
    new webpack.IgnorePlugin(/pg-native/, /pg/)
  ]
}
</code></pre><p>빌드는 성공 했으나 정상 동작하지 않아 확인 해보니 <code>/node_modules/knex/lib/mysql2/index.js</code> 해당 파일에</p>
<p><figure><img
        
        loading="lazy"
        src="https://github.com/hodory/hodory.github.io/blob/master/images/need-mysql.png"
        srcset="https://github.com/hodory/hodory.github.io/blob/master/images/need-mysql.png, https://github.com/hodory/hodory.github.io/blob/master/images/need-mysql.png 1.5x, https://github.com/hodory/hodory.github.io/blob/master/images/need-mysql.png 2x"
        sizes="auto"
        alt="/node_modules/knex/lib/mysql2/index.js"
        title="/node_modules/knex/lib/mysql2/index.js" ></figure></p>
<p>이러한 코드가 있어서 결국 mysql2를 쓰더라도 mysql 라이브러리가 필요하였습니다.</p>
<p>굳이 mysql2 모듈을 고집 할 필요가 없을것 같아, mysql 모듈로 변경하고,<!-- raw HTML omitted -->
<code>new webpack.IgnorePlugin(/mysql/, /knex/)</code> 를 <code>new webpack.IgnorePlugin(/mysql2/, /knex/),</code> 로 변경하니
빌드도 성공하였으며, 정상 동작 하였습니다.</p>
<p>더 좋은 방법이 있을거 같은데 아쉽게도 제가 찾은 방법은 이것 밖에 없었습니다.<!-- raw HTML omitted -->
좋은 해결 방안 있으면 댓글로 공유 부탁 드리겠습니다.</p>
]]></description></item></channel></rss>