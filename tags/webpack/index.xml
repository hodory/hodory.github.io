<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Webpack - Tag - Web Developer Hodory</title><link>http://blog.hodory.dev/tags/webpack/</link><description>Webpack - Tag - Web Developer Hodory</description><generator>Hugo -- gohugo.io</generator><language>ko-KR</language><lastBuildDate>Sun, 05 Jan 2020 18:16:44 +0000</lastBuildDate><atom:link href="http://blog.hodory.dev/tags/webpack/" rel="self" type="application/rss+xml"/><item><title>[JS]Document.ready 의 대안</title><link>http://blog.hodory.dev/2020/01/05/document-ready-alternative/</link><pubDate>Sun, 05 Jan 2020 18:16:44 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2020/01/05/document-ready-alternative/</guid><description>jQuery를 사용할 때, DOM이 로드된 후 처리를 위해 아래와 같은 구문을 많이 사용해왔습니다.
$(function(){ }); // or $(document).ready(function(){ }); 이와 같은 동작을 jQuery 없이 사용 할 수 없을까 찾아 보았는데,
document.addEventListener(&amp;#39;DOMContentLoaded&amp;#39;, () =&amp;gt; { }) 위와 같이 작성하면 됩니다.
DOMContentLoaded는 최초로 HTML 문서가 완전히 로드 및 파싱 되었을때 발생되므로, 모든 리소스(이미지, 스크립트, 스타일 시트 등)가 로드 된 후 발생하는 load 이벤트 보다는 먼저 호출됩니다.
그렇다면 왜 DOMContentLoaded 이벤트 리스너 대신 $(document).</description></item><item><title>［JS］jQuery 두번째 파라미터가 뭐지?</title><link>http://blog.hodory.dev/2019/12/13/what-is-jquery-second-parameter/</link><pubDate>Fri, 13 Dec 2019 18:56:02 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2019/12/13/what-is-jquery-second-parameter/</guid><description><![CDATA[jQuery로 작성된 코드를 보는데, $(&quot;selectorA&quot;, &quot;selectorB&quot;) 와 같은 코드가 있었습니다. 당연히 기존에 자주 접하던 $(&quot;selectorA, selectorB&quot;) 와 같은 코드인줄 알았으나, 예상과 다르게 동작하여 문서를 확인해 보았습니다.
jQuery 문서에 따르면, A DOM Element, Document, or jQuery to use as context 가 기재되어있다.
해당 영역에는 DOM element가 올 수 있는데 Selector Context를 확인해보면
selector context is implemented with the .find() method, so $( &ldquo;span&rdquo;, this ) is equivalent to $( this ).find( &ldquo;span&rdquo; ).]]></description></item><item><title>［JS］jQuery 없이 Selectbox에서 여러개 선택된 option의 값 추출하기</title><link>http://blog.hodory.dev/2019/05/12/how-to-get-multiple-selected-options-with-vanillajs/</link><pubDate>Sun, 12 May 2019 14:29:38 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2019/05/12/how-to-get-multiple-selected-options-with-vanillajs/</guid><description><![CDATA[DOM을 다룰때 jQuery를 사용하면 매우 편리합니다.
물론 크로스 브라우저 이슈로도 제이쿼리를 많이 사용합니다.
하지만 DOM을 핸들링하기 위해서만 jQuery를 쓴다면, 편리함은 챙기겠지만 낭비 아닐까싶습니다.
저는 위와 같은 생각으로, 주로 DOM 핸들링에는 jQuery 의존성을 줄이고자 순수 자바스크립트를 사용하려 노력하고 있습니다.
또한, document.querySelector와 document.querySelectorAll 를 이용한다면, jQuery에서 사용하던 복잡한 DOM Selector도 쉽게 사용할 수 있습니다.
&lt;select id=&#34;user&#34; name=&#34;user[]&#34; multiple=&#34;multiple&#34;&gt; &lt;option&gt;선택&lt;/option&gt; &lt;option value=&#34;foo&#34;&gt;Foo&lt;/option&gt; &lt;option value=&#34;bar&#34;&gt;Bar&lt;/option&gt; &lt;option value=&#34;baz&#34;&gt;Baz&lt;/option&gt; &lt;/select&gt; 위와 같은 Multiple SelectBox에서 여러개가 선택되었을 경우 값을 어떻게 가져올까요?]]></description></item><item><title>［JS］Knex와 Webpack을 같이 쓰면서 발생한 오류 처리</title><link>http://blog.hodory.dev/2019/04/18/knex-with-webpack/</link><pubDate>Thu, 18 Apr 2019 19:10:52 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2019/04/18/knex-with-webpack/</guid><description><![CDATA[ERROR in &#39;./node_modules/knex/lib/dialects/mssql/index.js&#39; Module not found: Error : Can&#39;t resolve &#39;mssql/lib/base&#39; 프로젝트에 웹팩을 도입하여 사용중, knex 라이브러리를 넣고 나서 웹팩으로 빌드시 해당 에러가 나와서 빌드에 실패 했습니다.
해당 오류를 검색 하였는데, 역시나 깃허브 이슈가 있었고(감사합니다), webpack의 config에 아래의 내용을 추가 하였습니다.
externals: { knex: &#39;commonjs knex&#39; } 해당 작업 후 빌드는 성공했지만, 노드 서버에서 실행시 knex 모듈을 찾을 수 없다는 오류가 나왔습니다.
{ &#34;errorMessage&#34;: &#34;Cannot find module &#39;knex&#39;&#34;, &#34;errorType&#34;: &#34;Error&#34;, &#34;stackTrace&#34;: [ &#34;Function.]]></description></item></channel></rss>