<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Conference - Tag - Web Developer Hodory</title><link>http://blog.hodory.dev/tags/conference/</link><description>Conference - Tag - Web Developer Hodory</description><generator>Hugo -- gohugo.io</generator><language>ko</language><managingEditor>master@hodory.dev (hodory)</managingEditor><webMaster>master@hodory.dev (hodory)</webMaster><lastBuildDate>Thu, 26 Sep 2019 21:05:51 +0000</lastBuildDate><atom:link href="http://blog.hodory.dev/tags/conference/" rel="self" type="application/rss+xml"/><item><title>AWS Dev Day Seoul, 2019 메모</title><link>http://blog.hodory.dev/2019/09/26/aws-devday-2019-%EB%A9%94%EB%AA%A8/</link><pubDate>Thu, 26 Sep 2019 21:05:51 +0000</pubDate><author><name>hodory</name></author><guid>http://blog.hodory.dev/2019/09/26/aws-devday-2019-%EB%A9%94%EB%AA%A8/</guid><description><![CDATA[<p>틀린 내용이 있다면 제가 졸아서 잘못 메모했을 수 있습니다&hellip;..</p>
<h2 id="aws-fargate를-사용한-서버리스-컨테이너-활용-하기---삼성전자-개발자-포털-사례" class="headerLink">
    <a href="#aws-fargate%eb%a5%bc-%ec%82%ac%ec%9a%a9%ed%95%9c-%ec%84%9c%eb%b2%84%eb%a6%ac%ec%8a%a4-%ec%bb%a8%ed%85%8c%ec%9d%b4%eb%84%88-%ed%99%9c%ec%9a%a9-%ed%95%98%ea%b8%b0---%ec%82%bc%ec%84%b1%ec%a0%84%ec%9e%90-%ea%b0%9c%eb%b0%9c%ec%9e%90-%ed%8f%ac%ed%84%b8-%ec%82%ac%eb%a1%80" class="header-mark"></a>AWS Fargate를 사용한 서버리스 컨테이너 활용 하기 - 삼성전자 개발자 포털 사례</h2><ul>
<li>ECS</li>
<li>EKS</li>
<li>Fargate for ECS</li>
<li>Fargate for EKS (on the roadmap)</li>
</ul>
<h3 id="ecs" class="headerLink">
    <a href="#ecs" class="header-mark"></a>ECS</h3><p>쿠베 없이 간단하게 사용가능</p>
<p>EC2 인스턴스를 직접관리해야하는 단점</p>
<p><strong>Fargate</strong>를 활용해 해결 가능</p>
<ul>
<li>서버가 없는 컨테이너 환경</li>
<li>서비스와 컨테이너에대한설정만 관리</li>
<li>ECS 대비 EC2 관리에대한 부담만 덜어짐</li>
<li>ECR을 이용해 이미지를 배포할 수 있음</li>
<li>Networking - aws</li>
<li>LayerStorage - task당 10GB</li>
<li>VolumeStorage - 공용 볼륨</li>
</ul>
<p>QA Automation을 중점적으로 CI/CD를 구축함</p>
<p><strong>SRE</strong></p>
<p>아키텍쳐 ECS 클러스터를 이용함.</p>
<p>Fargate 활용시 → 무중단배포전략 기본 탑재, 빠르게 deploy 가능, 비용 절감</p>
<p>ECS의 EC2옵션에 비해 45%절감(compute 비용만)</p>
<p>task 별로 관리가 가능하기때문</p>
<p>워크스페이스를 CloudFoundry playform 오픈 소스를 사용하여 구현
프로메테우스기반으로 VALET 대시보드 구현</p>
<p>task가 runtime으로 넘어갔을때만 과금이 됨.</p>
<p>클러스터안에 서비스가 매핑</p>
<h3 id="활용-사례" class="headerLink">
    <a href="#%ed%99%9c%ec%9a%a9-%ec%82%ac%eb%a1%80" class="header-mark"></a>활용 사례</h3><p>백엔드기준</p>
<ul>
<li>서치, k-v DB, API</li>
</ul>
<p>클러스터세팅</p>
<ul>
<li>TG,vpc,subnet,SG</li>
</ul>
<p>task cpu : 1024 MB , 512 task CPU</p>
<p>Events 탭을 이용하여, 이벤트 발생 확인 가능</p>
<p>build.sh → upload.sh (ECR에 업로드)</p>
<p>ECS workshop - <a href="https://ecsworkshop.com/" target="_blank" rel="noopener noreferrer">https://ecsworkshop.com/</a></p>
<h2 id="실시간-데이터-처리를-위한-현대적-애플리케이션-개발-방법" class="headerLink">
    <a href="#%ec%8b%a4%ec%8b%9c%ea%b0%84-%eb%8d%b0%ec%9d%b4%ed%84%b0-%ec%b2%98%eb%a6%ac%eb%a5%bc-%ec%9c%84%ed%95%9c-%ed%98%84%eb%8c%80%ec%a0%81-%ec%95%a0%ed%94%8c%eb%a6%ac%ec%bc%80%ec%9d%b4%ec%85%98-%ea%b0%9c%eb%b0%9c-%eb%b0%a9%eb%b2%95" class="header-mark"></a>실시간 데이터 처리를 위한 현대적 애플리케이션 개발 방법</h2><h3 id="amplify" class="headerLink">
    <a href="#amplify" class="header-mark"></a>Amplify</h3><p>CLI 툴체인 및 UI 구성요소 포함하는 클라이언트 프레임워크<!-- raw HTML omitted -->
전체 앱 구축 테스트 배포 및 호스팅을 위한 dev tool 제공</p>
<h3 id="appsync" class="headerLink">
    <a href="#appsync" class="header-mark"></a>AppSync</h3><p>관리형 서버리스 gQL 서비스<!-- raw HTML omitted -->
다양한 데이터 소스 활용 가능<!-- raw HTML omitted -->
디바이스가 오프라인일 경우에도 가능<!-- raw HTML omitted -->
오프라인시 변경된 데이터만 동기화처리</p>
<p>queries → get<!-- raw HTML omitted -->
mutation → create | update<!-- raw HTML omitted -->
subscriptions → pub | sub</p>
<h3 id="cognito" class="headerLink">
    <a href="#cognito" class="header-mark"></a>Cognito</h3><p>IAM을 모두 제공할 수 없음</p>
<h3 id="kinesis" class="headerLink">
    <a href="#kinesis" class="header-mark"></a>Kinesis</h3><h3 id="documentdb" class="headerLink">
    <a href="#documentdb" class="header-mark"></a>DocumentDB</h3><p>엘라스틱서치 DB 랑 유사하게보임<!-- raw HTML omitted -->
몽고 DB와 호환됨<!-- raw HTML omitted -->
초당 수백만건 요청 처리 가능<!-- raw HTML omitted -->
컴퓨팅과 스토리지 레이어를 분리하여 컴퓨팅 리소스만 확장 가능, 스토리지는 오토스케일됨<!-- raw HTML omitted -->
데이터를 파티션으로 분산저장(3개의 AZ에 복제)</p>
<p>AppSync를 활용하여 query와 mutation 분리</p>
<h2 id="devops-개발자가-되기-위한-쿠버네티스-핵심-활용-예제-알아보기" class="headerLink">
    <a href="#devops-%ea%b0%9c%eb%b0%9c%ec%9e%90%ea%b0%80-%eb%90%98%ea%b8%b0-%ec%9c%84%ed%95%9c-%ec%bf%a0%eb%b2%84%eb%84%a4%ed%8b%b0%ec%8a%a4-%ed%95%b5%ec%8b%ac-%ed%99%9c%ec%9a%a9-%ec%98%88%ec%a0%9c-%ec%95%8c%ec%95%84%eb%b3%b4%ea%b8%b0" class="header-mark"></a>DevOps 개발자가 되기 위한 쿠버네티스 핵심 활용 예제 알아보기</h2><p>3개의 az에 마스터 노드 배포<!-- raw HTML omitted -->
az당 두개의 인스턴스 배포<!-- raw HTML omitted -->
c타입 인스턴스로 배포됨</p>
<p>deprecated 되는 시점에 마스터노드를 강제 업데이트함.<!-- raw HTML omitted -->
Latest 버전부터 3개 이내의 버전으로 관리되도록 aws에서 관리해줌</p>
<p>EKS는 명령형 인프라가 아닌 선언형 인프라</p>
<p>VPC ink → Network load Balancer</p>
<p>How To Connect with Kubernetes</p>
<ul>
<li>쿠버네티스에서 제공하는 로드밸런서</li>
<li>ALB ingress → IP가 유동적이라 Lambda에서 처리할 수 있으나 번거로움</li>
<li><strong>쿠버네티스의 Node Port 이용</strong></li>
</ul>
<p>kube2Iam을 이용해 IAM을 관리</p>
<p>HPA → pod 오토스케일링</p>
<p>Cluster autoscaler → 노드 오토스케일링(pod를 더 이상 배치할 공간이 없을때)</p>
<p>Monitoring</p>
<p>프로메테우스를 통해 수집 → 그라파나를 통해 → cloudwatch 메트릭을 사용해 대시보드 제공</p>
<p>로그 : 엘라스틱서치와 클라우드워치 fluentD</p>
<p>클라우드워치를 두고 로그패턴을 이용해 노티 가능 → 엘라스틱서치로 전송</p>
<p>엘라스틱 서치 Authentication은 cognito</p>
<p>nginx 리버스프록시로 사용해 키바나접근</p>
<p>AWS Xray를 이용해 APM 체크</p>
<p>배포는 Spinnaker를 이용해서 쿠버네티스 배포할때 용이</p>
<p>pod는 엔드포인트도 계속 변경됨
eks 자체 기능으로 IAM과 쿠버네티스의 IAM을 연결하는 기능 제공예정</p>
<h3 id="monitor" class="headerLink">
    <a href="#monitor" class="header-mark"></a>Monitor</h3><p>기존에는 가장 성능 좋은 쿠버네티스 로깅 플랫폼 fluentd(루비로 작성됨)
→ fluent Bit이 C로 만들어진 더 고성능을 요구할때 사용할 수 있는 플랫폼</p>
<h3 id="networking" class="headerLink">
    <a href="#networking" class="header-mark"></a>Networking</h3><p>어노테이션만으로 nlb alb 등 선택 가능
ALB는 L7형태로 ingress controller에서 해석해서 처리</p>
<h3 id="logging" class="headerLink">
    <a href="#logging" class="header-mark"></a>Logging</h3><p>EFK
pod → fluentd → cloudwatch→ kibana
FluentBit을 사용하면 더 Optimized 할 수 있다.</p>
<h3 id="application-mesh" class="headerLink">
    <a href="#application-mesh" class="header-mark"></a>Application Mesh</h3><p>기존 서비스 Mesh는 envoy proxy를 사용
AppMesh는 EKS만 쓸 수 있는게 아닌 Fargate ECS EC2 EKS Kube on EC2등에서도 사용가능</p>
<h3 id="distribute-logging" class="headerLink">
    <a href="#distribute-logging" class="header-mark"></a>Distribute Logging</h3><p>전체 콜스택 모니터링하기 어려움
X-Ray를 활용
모든 쿼리스트링 모니터링 가능</p>
<h2 id="코드-기반-인프라iac를-활용한-현대-애플리케이션-개발-가속화-우리도-할-수-있어요" class="headerLink">
    <a href="#%ec%bd%94%eb%93%9c-%ea%b8%b0%eb%b0%98-%ec%9d%b8%ed%94%84%eb%9d%bciac%eb%a5%bc-%ed%99%9c%ec%9a%a9%ed%95%9c-%ed%98%84%eb%8c%80-%ec%95%a0%ed%94%8c%eb%a6%ac%ec%bc%80%ec%9d%b4%ec%85%98-%ea%b0%9c%eb%b0%9c-%ea%b0%80%ec%86%8d%ed%99%94-%ec%9a%b0%eb%a6%ac%eb%8f%84-%ed%95%a0-%ec%88%98-%ec%9e%88%ec%96%b4%ec%9a%94" class="header-mark"></a>코드 기반 인프라(IaC)를 활용한 현대 애플리케이션 개발 가속화, 우리도 할 수 있어요</h2><p><strong>Re-host</strong>
데이터센터 → EC2</p>
<p><strong>Re-platform</strong>
가상머신 → 컨테이너</p>
<p><strong>Re-factor</strong>
모놀리스 → 마이크로 서비스</p>
<p><strong>Re-invent</strong>
호스트플릿 → 서버리스</p>
<p>자동화</p>
<ul>
<li>인프라 구성 자동화
<ul>
<li>서비스에 필요한 리소스 프로비저닝</li>
</ul>
</li>
<li>애플리케이션 배포 자동화
<ul>
<li>애플리케이션을 더 효율적, 안전하며, 빠르게 배포</li>
<li>애플리케이션을 빌드, 테스트, 배포</li>
</ul>
</li>
</ul>
<h2 id="코드기반-인프라의-목적" class="headerLink">
    <a href="#%ec%bd%94%eb%93%9c%ea%b8%b0%eb%b0%98-%ec%9d%b8%ed%94%84%eb%9d%bc%ec%9d%98-%eb%aa%a9%ec%a0%81" class="header-mark"></a>코드기반 인프라의 목적</h2><p>인프라 변경 사항을 반복적이고 예측 가능하게 함.</p>
<h2 id="cloudformation" class="headerLink">
    <a href="#cloudformation" class="header-mark"></a>CloudFormation</h2><p>클라우드 인프라 템플릿을 정의하기 위한 언어 - JSON | YAML</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-perl" data-lang="perl"><span class="line"><span class="cl">    <span class="nv">$</span> <span class="nv">cdk</span> <span class="n">init</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$</span> <span class="nv">cdk</span> <span class="n">diff</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$</span> <span class="nv">cdk</span> <span class="n">deploy</span> <span class="p">[</span><span class="n">paramter</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># if you type &#34;y&#34;, deploy the app</span>
</span></span></code></pre></div><p>CDK Deploy 를 활용하면 Cloudformation을 활용해 배포하게됨</p>
<p>cdk를 사용하면 <code>table.grantReadWriteData(fn);</code> 과 같은 함수를 통해 권한을 얻을 수 있음<!-- raw HTML omitted -->
<code>APIGateway.LambdaRestApi()</code>를 사용하면 API Gateway에 대한 IAM 권한을 가질 수 있음.<!-- raw HTML omitted -->
→ serverless framework 사용시 serverless.yml 파일에 iam을 설정하던 부분을 함수로 명시 하는거였음.</p>
<h2 id="loader" class="headerLink">
    <a href="#loader" class="header-mark"></a>Loader</h2><p>ECS Clustuer, ECS Fargate를 이용해 클러스터 생성(규모에 상관없이 재사용가능하도록함)</p>
<h2 id="monitor-1" class="headerLink">
    <a href="#monitor-1" class="header-mark"></a>Monitor</h2><p>cdk-watchful를 활용하여 cloud watch와 연결 가능</p>
<p>jsii →js로 만든것을 다른언어에서 사용가능하도록 해줌 cdk에서 활용됨</p>
<h3 id="프로세스" class="headerLink">
    <a href="#%ed%94%84%eb%a1%9c%ec%84%b8%ec%8a%a4" class="header-mark"></a>프로세스</h3><p>Code Commit → CDK 앱과 Lambda 함수 코드는 동일한 리포지토리에 저장됨</p>
<p>Code Build → CdkCodeBuild 프로젝트는 CDK 앱을 synthesize하여 CloudFormation 템플릿을 생성</p>
<p>배포환경은 동일하게 로컬환경은 개발자 본인만을 위한것이다.<!-- raw HTML omitted -->
클라우드9이나 CloudFormation, 도커등 동일한 환경을 제공할 수 있어야함.</p>
<h2 id="점심-도시락" class="headerLink">
    <a href="#%ec%a0%90%ec%8b%ac-%eb%8f%84%ec%8b%9c%eb%9d%bd" class="header-mark"></a>점심 도시락</h2><p><figure><a class="lightgallery" href="/images/ae7fa212-27d7-4005-aeb3-45f11e4dfc1d.jpg" title="/images/ae7fa212-27d7-4005-aeb3-45f11e4dfc1d.jpg" data-thumbnail="/images/ae7fa212-27d7-4005-aeb3-45f11e4dfc1d.jpg">
        <img
            
            loading="lazy"
            src="/images/ae7fa212-27d7-4005-aeb3-45f11e4dfc1d.jpg"
            srcset="/images/ae7fa212-27d7-4005-aeb3-45f11e4dfc1d.jpg, /images/ae7fa212-27d7-4005-aeb3-45f11e4dfc1d.jpg 1.5x, /images/ae7fa212-27d7-4005-aeb3-45f11e4dfc1d.jpg 2x"
            sizes="auto"
            alt="/images/ae7fa212-27d7-4005-aeb3-45f11e4dfc1d.jpg">
    </a></figure>
닭강정, 새우튀김, 갈비찜?돼지고기찜? + 된장국 (나머진 안 먹어봐서 모르겠습니다)</p>
<h2 id="굿즈swags" class="headerLink">
    <a href="#%ea%b5%bf%ec%a6%88swags" class="header-mark"></a>굿즈(SWAGS)</h2><p><figure><a class="lightgallery" href="/images/7668d682-dc06-4683-ab15-c6c51e81a1e6.jpg" title="/images/7668d682-dc06-4683-ab15-c6c51e81a1e6.jpg" data-thumbnail="/images/7668d682-dc06-4683-ab15-c6c51e81a1e6.jpg">
        <img
            
            loading="lazy"
            src="/images/7668d682-dc06-4683-ab15-c6c51e81a1e6.jpg"
            srcset="/images/7668d682-dc06-4683-ab15-c6c51e81a1e6.jpg, /images/7668d682-dc06-4683-ab15-c6c51e81a1e6.jpg 1.5x, /images/7668d682-dc06-4683-ab15-c6c51e81a1e6.jpg 2x"
            sizes="auto"
            alt="/images/7668d682-dc06-4683-ab15-c6c51e81a1e6.jpg">
    </a></figure></p>
<ul>
<li>티셔츠</li>
<li>머그컵</li>
<li>방향제</li>
<li>담요</li>
<li>보틀</li>
<li>디퓨저</li>
<li>다이어리</li>
</ul>
]]></description></item></channel></rss>