<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>PHPUnit - Tag - Web Developer Hodory</title><link>http://blog.hodory.dev/tags/phpunit/</link><description>PHPUnit - Tag - Web Developer Hodory</description><generator>Hugo -- gohugo.io</generator><language>ko-KR</language><lastBuildDate>Fri, 10 Jan 2020 00:36:54 +0000</lastBuildDate><atom:link href="http://blog.hodory.dev/tags/phpunit/" rel="self" type="application/rss+xml"/><item><title>[PHP] InvalidArgumentException : Unable to locate factory with name [default]</title><link>http://blog.hodory.dev/2020/01/10/php-invalidargumentexception-unable-to-locate-factory-with-name-default/</link><pubDate>Fri, 10 Jan 2020 00:36:54 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2020/01/10/php-invalidargumentexception-unable-to-locate-factory-with-name-default/</guid><description><![CDATA[발단 Laravel Framework로 TDD를 진행중에 Unit Test를 하기 위해 artisan 콘솔을 이용하여 TaskTest 라는 이름의 테스트 클래스를 생성하였습니다.
$ php artisan make:test TaskTest --unit 코드는 간단했습니다.
&lt;?php namespace Tests\Unit; use App\Project; use Illuminate\Foundation\Testing\RefreshDatabase; use PHPUnit\Framework\TestCase; class TaskTest extends TestCase { use RefreshDatabase; /** * @test */ public function it_belongs_to_a_project() { $task = factory(&#39;App\Task&#39;)-&gt;create(); $this-&gt;assertInstanceOf(Project::class, $task-&gt;project); } } 해당 테스트를 생성 후 아래와 같이 PHPUnit으로 해당 테스트를 실행하였더니
$ ./vendor/bin/phpunit --filter it_belongs_to_a_project 아래 이미지와 같은 에러가 나왔습니다.]]></description></item><item><title>PHPUnit Annotation 정리</title><link>http://blog.hodory.dev/2019/11/25/phpunit-annotation-%EC%A0%95%EB%A6%AC/</link><pubDate>Mon, 25 Nov 2019 01:18:24 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2019/11/25/phpunit-annotation-%EC%A0%95%EB%A6%AC/</guid><description>서론 PHP Unit을 사용하면서도 잘 모르는 어노테이션을 PHPUnit v8.4 기준(2019-11-19 최신버전)으로 정리하였습니다.
@author 테스트를 작성자별 그룹화 필터링 할 때 @group 어노테이션의 별칭으로, 테스트를 작성자별로 그룹화하여 필터링 하는데 사용할 수 있습니다.
@after 각 테스트가 끝난 뒤 실행 하려 할 때 각 테스트 메소드들이 실행 된 후, 특정 메소드를 실행하고자 할때 사용할 수 있습니다.
각 테스트가 끝난 뒤 트랜잭션 커밋or롤백을 한다거나, 생성된 파일을 삭제하는 등의 처리를 하는데 사용하면 좋을 것 같습니다.
namespace Tests; use PHPUnit\Framework\TestCase; class MyTest extends TestCase { /** * @after */ public function afterDo() { echo &amp;quot;After Method Called&amp;quot; .</description></item></channel></rss>