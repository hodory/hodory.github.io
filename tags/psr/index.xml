<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>PSR - Tag - Web Developer Hodory</title><link>http://blog.hodory.dev/tags/psr/</link><description>PSR - Tag - Web Developer Hodory</description><generator>Hugo -- gohugo.io</generator><language>ko</language><managingEditor>master@hodory.dev (hodory)</managingEditor><webMaster>master@hodory.dev (hodory)</webMaster><lastBuildDate>Wed, 18 Apr 2018 02:28:50 +0000</lastBuildDate><atom:link href="http://blog.hodory.dev/tags/psr/" rel="self" type="application/rss+xml"/><item><title>［PHP］ PSR(PHP Standards Recommendations)이란?</title><link>http://blog.hodory.dev/2018/04/18/what-is-psr/</link><pubDate>Wed, 18 Apr 2018 02:28:50 +0000</pubDate><author><name>hodory</name></author><guid>http://blog.hodory.dev/2018/04/18/what-is-psr/</guid><description><![CDATA[<h3 id="psr이란" class="headerLink">
    <a href="#psr%ec%9d%b4%eb%9e%80" class="header-mark"></a>PSR이란?</h3><p>PHP Standards Recommendations의 약자로 <a href="https://www.php-fig.org/" title="PHP-FIG로 이동" target="_blank" rel="noopener noreferrer">PHP-FIG(PHP-FrameWork Interop Group)</a>에서 만든 표준 권고안입니다.</p>
<ul>
<li><a href="#PSR-0-DEPRECATED-Autoloading-Standard" rel="">PSR-0</a></li>
<li><a href="#PSR-1-Basic-Coding-Standard" rel="">PSR-1</a></li>
<li><a href="#PSR-2-Coding-Style-Guide" rel="">PSR-2</a></li>
<li><a href="#PSR-3-Logger-Interface" rel="">PSR-3</a></li>
<li><a href="#PSR-4-Autoloader" rel="">PSR-4</a></li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>작성예정 목록
<ul>
<li>PSR-6</li>
<li>PSR-7</li>
<li>PSR-11</li>
<li>PSR-13</li>
<li>PSR-15</li>
<li>PSR-16</li>
</ul>
</li>
</ul>
<h4 id="psr-0-deprecated--autoloading-standard" class="headerLink">
    <a href="#psr-0-deprecated--autoloading-standard" class="header-mark"></a>PSR-0 (DEPRECATED) : Autoloading Standard</h4><p>오토로딩 표준으로 PSR-4가 제정되며 DEPRECATED 되었습니다.</p>
<ul>
<li><code>\&lt;Vendor Name&gt;\(&lt;NameSpace&gt;\)*&lt;Class Name&gt;</code>의 구조를 따릅니다.</li>
<li>각 네임스페이스는 <code>(&quot;Vendor Name&quot;)</code>이 최상위 네임스페이스로 있어야합니다.</li>
<li>각 네임스페이스는 원하는 만큼 하위 네임스페이스를 가질 수 있습니다.</li>
<li>각 네임스페이스 구분자는 파일시스템에서 로딩될때 <code>DIRECTORY_SEPARATOR</code>로 변환됩니다.</li>
<li>클래스명의 각 <code>_</code> 문자는 <code>DIRECTORY_SEPARATOR</code>로 변환됩니다.</li>
<li>기타 자세한 사항은 <a href="https://www.php-fig.org/psr/psr-0/" title="PSR-0 문서로 이동" target="_blank" rel="noopener noreferrer">PSR-0</a>에서 확인 가능합니다.</li>
</ul>
<h5 id="example" class="headerLink">
    <a href="#example" class="header-mark"></a>Example)</h5><p><code>\Doctrine\Commone\IsolatedClassLoader</code>
<code>=&gt;/path/to/project/lib/vendor/Doctrine/Common/IsolatedClassLoader.php</code>
<code>\Symfony\Core\Request</code>
<code>=&gt;/path/to/project/lib/vendor/Symfony/Core/Request.php</code></p>
<h4 id="psr-1--basic-coding-standard" class="headerLink">
    <a href="#psr-1--basic-coding-standard" class="header-mark"></a>PSR-1 : Basic Coding Standard</h4><p>PHP 코드를 공유하는데 있어 기술적 상호 운용성을 위해 고려 해야 할 표준 코딩 가이드입니다.</p>
<ul>
<li>
<p><code>&lt;?php</code> 와  <code>&lt;?=</code> 태그만 사용해야합니다.</p>
</li>
<li>
<p>PHP 코드에는 BOM(Byte Order Mark) 없이 UTF-8로만 사용해야합니다.</p>
</li>
<li>
<p>네임스페이스와 클래스는 PSR(PSR-0, PSR-4)의 오토로딩을 따라야합니다.</p>
<ul>
<li>클래스명은 <code>StudlyCaps</code> 와 같이 첫글자를 대문자로 합니다.</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="o">&lt;?</span><span class="nx">php</span>
</span></span><span class="line"><span class="cl"><span class="c1">// PHP 5.3 이후 버전
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">namespace</span> <span class="nx">Vendor\Model</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Foo</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// PHP 5.3 이전 버전
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">Vendor_Model_Foo</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div></li>
<li>
<p>상수는 <code>_</code>를 구분자로 대문자로 선언해야합니다. <code>ex)const CURRENT_VERSION = 1.0;</code></p>
</li>
<li>
<p>프로퍼티명에 대한 규칙은 정해져 있지않으나, 스코프에서 일관적이어야합니다.</p>
</li>
<li>
<p>메소드는 카멜케이스를 사용해야합니다. <code>ex)camelCase()</code></p>
</li>
</ul>
<h4 id="psr-2--coding-style-guide" class="headerLink">
    <a href="#psr-2--coding-style-guide" class="header-mark"></a>PSR-2 : Coding Style Guide</h4><p>PSR-1의 확장으로 표준 코딩 스타일 가이드를 다룹니다.</p>
<ul>
<li>
<p>PSR-1을 따라야합니다.</p>
</li>
<li>
<p>들여쓰기 할때는 탭을 사용하지 않고 스페이스 4개를 사용합니다.</p>
</li>
<li>
<p>라인 수에 대한 엄격한 제한은 아니지만, 한 줄에는 120자 이하, 라인 수는 80개 이하로 작성합니다.</p>
</li>
<li>
<p>namespace선언과 use 선언들 후에는 한줄을 띄워 작성합니다.</p>
</li>
<li>
<p>클래스와 메소드들의 여는 괄호는 다음줄에 작성하고, 닫는 괄호는 내용이 끝난 다음 줄에 작성합니다.</p>
<ul>
<li>ex)</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="o">&lt;?</span><span class="nx">php</span>
</span></span><span class="line"><span class="cl"><span class="k">namespace</span> <span class="nx">Vendor\Package</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nx">BazClass</span> <span class="k">as</span> <span class="nx">Baz</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nx">OtherVendor\OtherPackage\BazClass</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">TestClass</span> <span class="k">extends</span> <span class="nx">Baz</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">function</span> <span class="nf">alert</span><span class="p">(</span><span class="nv">$msg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">echo</span> <span class="nv">$msg</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div></li>
<li>
<p>모든 프로퍼티와 메소드는 접근제어자가 선언되어야합니다.</p>
<ul>
<li>abstract와 final 키워드는 접근제어자 이전에 선언되고, static 키워드는 접근제어자 이후에 선언되어야합니다.</li>
</ul>
</li>
<li>
<p>제어문은 사이에 스페이스가 있어야합니다.</p>
<ul>
<li>메소드와 함수호출은 그렇지 않습니다.</li>
<li>ex)</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="o">&lt;?</span><span class="nx">php</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span> <span class="k">function</span> <span class="nf">Foo</span><span class="p">(</span><span class="nv">$a</span><span class="p">,</span> <span class="nv">$b</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nv">$a</span> <span class="o">===</span> <span class="nv">$b</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">echo</span> <span class="s2">&#34;equal&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">Foo</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span></span></code></pre></div></li>
<li>
<p>PHP 파일은 빈 줄로 끝나야 하며, PHP로만 이루어진 파일은 닫는 태그인 <code>?&gt;</code>를 생략해야합니다.</p>
</li>
</ul>
<h4 id="psr-3--logger-interface" class="headerLink">
    <a href="#psr-3--logger-interface" class="header-mark"></a>PSR-3 : Logger Interface</h4><p>로깅 라이브러리의 공통적인 인터페이스를 명세합니다.
라이브러리가 <code>Psr\Log\LoggerInterface</code>의 객체를 받아 간편하고 보편적인 방법으로 그것에 로그를 작성할 수 있도록 하는것이 목표입니다.</p>
<ul>
<li>로거 인터페이스는 8개의 <a href="https://tools.ietf.org/html/rfc5424" target="_blank" rel="noopener noreferrer">RFC 5424</a> 레벨(debug, info, notice, warning, error, critical, alert, emergency)로 로그 작성을 하기 위한 메소드를 제공합니다.</li>
<li>9번째 메소드인 <code>log</code>는 첫번째 인자로 로그 레벨을 받고, 호출시 해당 레벨의 메소드를 호출하는것과 같은 결과를 가집니다.
<ul>
<li>해당 레벨의 메소드가 정의되어 있지 않는 경우, <code>Psr\Log\InvalidArgumentException</code> 에러를 보내야합니다.</li>
</ul>
</li>
<li>모든 메소드는 string 형식의 메시지를 받거나, __toString() 처리 된 object를 받습니다.</li>
<li>컨텍스트에 주어진 값을 execption에 보내거나, php error나 warning, notice로 보내면 안됩니다.</li>
</ul>
<h4 id="psr-4--autoloader" class="headerLink">
    <a href="#psr-4--autoloader" class="header-mark"></a>PSR-4 : Autoloader</h4><p>파일 경로를 통해 클래스를 오토로딩 하기위한 명세로, PSR-0를 포함하고 있습니다.</p>
<ul>
<li><code>class</code>라는 용어는 클래스와 인터페이스, 트레이트 또는 다른 비슷한 구조들을 의미합니다.</li>
<li>정규화 된 클래스명의 형식은 다음을 따릅니다.
<ul>
<li><code>\&lt;NamespaceName&gt;(\&lt;SubNamespaceNames&gt;)*\&lt;ClassName&gt;</code>
<ul>
<li>네임스페이스의 맨 처음은 &ldquo;Vendor namespace&quot;로 알려진것으로 시작합니다.</li>
<li>하나 이상의 서브네임스페이스명을 가집니다.</li>
<li>끝을 클래스명으로 작성 합니다.</li>
<li>소문자와 대문자의 조합을 혼합하여 작성할 수 있습니다.</li>
<li>대소문자를 구분하여 참조해야합니다.</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="o">&lt;?</span><span class="nx">php</span>
</span></span><span class="line"><span class="cl"><span class="c1">// guzzle/src/ClientInterface.php
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">namespace</span> <span class="nx">GuzzleHttp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nx">GuzzleHttp\Exception\GuzzleException</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">interface</span> <span class="nx">ClientInterface</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>GuzzleHttp\Exception\GuzzleException은
GuzzleHttp의 Base-Directory(src) 안에 있는 Exception\GuzzleException.php에 위치합니다.</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<blockquote>
<p>참고자료</p>
</blockquote>
<ul>
<li><a href="https://www.php-fig.org/psr/" title="해당 링크로 이동" target="_blank" rel="noopener noreferrer">PSR 공식문서</a></li>
<li><a href="https://www.lesstif.com/pages/viewpage.action?pageId=24445325" title="해당 링크로 이동" target="_blank" rel="noopener noreferrer">PHP 표준 권고(PSR) - 정광섭님</a></li>
</ul>
]]></description></item></channel></rss>