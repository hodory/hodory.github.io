<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>ETC - Category - Web Developer Hodory</title><link>http://blog.hodory.dev/categories/etc/</link><description>ETC - Category - Web Developer Hodory</description><generator>Hugo -- gohugo.io</generator><language>ko-KR</language><lastBuildDate>Sun, 02 Jan 2022 22:21:19 +0000</lastBuildDate><atom:link href="http://blog.hodory.dev/categories/etc/" rel="self" type="application/rss+xml"/><item><title>［Notion］Notion과 Github Actions로 가계부 자동화 하기 - (1)</title><link>http://blog.hodory.dev/2022/01/02/notionnotion%EA%B3%BC-github-actions%EB%A1%9C-%EA%B0%80%EA%B3%84%EB%B6%80-%EC%9E%90%EB%8F%99%ED%99%94-%ED%95%98%EA%B8%B0-1/</link><pubDate>Sun, 02 Jan 2022 22:21:19 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2022/01/02/notionnotion%EA%B3%BC-github-actions%EB%A1%9C-%EA%B0%80%EA%B3%84%EB%B6%80-%EC%9E%90%EB%8F%99%ED%99%94-%ED%95%98%EA%B8%B0-1/</guid><description>시작하기에 앞서 해당 포스트는 ［Notion］Notion과 Zapier로 가계부 자동화 하기의 후속편입니다.
해당 포스트에서는 토스의 소비 서비스를 기반으로 Google Drive, Naver OCR, Github Actions, Notion API 를 사용합니다.
왜 Github Actions로 변경하게 되었을까? 기존에 가계부 자동화로 맨처음 고려 했던 방식은 Github Actions + Naver OCR을 이용한 가계부 자동화 방식이였습니다.
하지만 가계부를 쓰기 위해 코딩을 하는게 맞나? 싶은 생각에 솔루션들을 사용하기로 하였고 플랫폼들을 이용한 기존에 구성한 스택은 다음과 같습니다.
Google Drive : 캡쳐 이미지 저장소 Zapier : Google Drive 이미지 업로드시 정해진 프로세스를 진행하도록 하기 위한 플랫폼 Nanonets : 이미지에 OCR을 동작시켜 이미지에서 필요한 영역의 데이터를 뽑아낼 수 있음.</description></item><item><title>［Notion］Notion과 Zapier로 가계부 자동화 하기</title><link>http://blog.hodory.dev/2021/12/30/notionnotion%EA%B3%BC-zapier%EB%A1%9C-%EA%B0%80%EA%B3%84%EB%B6%80-%EC%9E%90%EB%8F%99%ED%99%94-%ED%95%98%EA%B8%B0/</link><pubDate>Thu, 30 Dec 2021 01:50:47 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2021/12/30/notionnotion%EA%B3%BC-zapier%EB%A1%9C-%EA%B0%80%EA%B3%84%EB%B6%80-%EC%9E%90%EB%8F%99%ED%99%94-%ED%95%98%EA%B8%B0/</guid><description>왜 가계부를 쓰나요? 저는 예전부터 가계부를 써서 돈의 사용처를 기록하고 카테고리화 해서 어디에 돈을 많이 쓰고 있는지 흐름을 보는것을 좋아했습니다.
가계부를 Notion으로 쓰는 이유 첫 가계부는 편한 가계부라는 어플을 사용했고, 그 이후 핀테크쪽 서비스가 커지면서 뱅크샐러드를 사용했었습니다. 뱅크 샐러드는 느리긴 했지만 제가 필요하다 생각했던 모든 것들을 제공 해주고 있었습니다. 토스에서 소비 라는 탭으로 연동된 계좌들의 소비 내역을 보여주는 기능도 출시하여 엄청나게 빠른 속도로 스크래핑이 되었습니다.
문제는 결혼 이후로는 제 지출 내역만 관리하는게 아니라 아내의 지출 내역도 관리가 필요했습니다.</description></item><item><title>2019년 하반기 회고</title><link>http://blog.hodory.dev/2020/01/11/2019%EB%85%84-%ED%95%98%EB%B0%98%EA%B8%B0-%ED%9A%8C%EA%B3%A0/</link><pubDate>Sat, 11 Jan 2020 18:24:46 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2020/01/11/2019%EB%85%84-%ED%95%98%EB%B0%98%EA%B8%B0-%ED%9A%8C%EA%B3%A0/</guid><description>상반기 회고 당시에는 하반기에는 분기별 회고를 해서 더 잘 정리해야겠다 생각했는데, 하반기 회고 조차 늦어지게 되었습니다.
💼 회사 새 회사로 이직을 하게 되면서, 인수인계 기간이 지난 후 약 3주정도 휴가를 즐겼습니다.
여행도 다녀오고, 쉬는 기간동안 카페 투어도 하고 이곳 저곳 돌아다녔지만 생각보다 생산성 있는 휴가는 아니여서 아직 아쉬움이 남아있습니다.
새 회사로 오게되어 회사에 적응하는 시간을 보내고 실무에 투입되었습니다. 이정도 규모의 회사에서는 어떻게 서비스를 하고 있고, 현재 서비스에서 어떤 문제를 가지고 있어서 그것을 해결하기 위해 어떤 고민을 하고 있는지, 앞으로 어떤 계획이 있는지 등을 어깨넘어 보면서 새로운것들을 알아가고 있습니다.</description></item><item><title>AWS Dev Day Seoul, 2019 메모</title><link>http://blog.hodory.dev/2019/09/26/aws-dev-day-seoul-2019-%EB%A9%94%EB%AA%A8/</link><pubDate>Thu, 26 Sep 2019 21:05:51 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2019/09/26/aws-dev-day-seoul-2019-%EB%A9%94%EB%AA%A8/</guid><description>틀린 내용이 있다면 제가 졸아서 잘못 메모했을 수 있습니다&amp;hellip;..
AWS Fargate를 사용한 서버리스 컨테이너 활용 하기 - 삼성전자 개발자 포털 사례 ECS EKS Fargate for ECS Fargate for EKS (on the roadmap) ECS 쿠베 없이 간단하게 사용가능
EC2 인스턴스를 직접관리해야하는 단점
Fargate를 활용해 해결 가능
서버가 없는 컨테이너 환경 서비스와 컨테이너에대한설정만 관리 ECS 대비 EC2 관리에대한 부담만 덜어짐 ECR을 이용해 이미지를 배포할 수 있음 Networking - aws LayerStorage - task당 10GB VolumeStorage - 공용 볼륨 QA Automation을 중점적으로 CI/CD를 구축함</description></item><item><title>애드센스-테러를-당하다</title><link>http://blog.hodory.dev/2019/07/30/%EC%95%A0%EB%93%9C%EC%84%BC%EC%8A%A4-%ED%85%8C%EB%9F%AC%EB%A5%BC-%EB%8B%B9%ED%95%98%EB%8B%A4/</link><pubDate>Tue, 30 Jul 2019 18:50:11 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2019/07/30/%EC%95%A0%EB%93%9C%EC%84%BC%EC%8A%A4-%ED%85%8C%EB%9F%AC%EB%A5%BC-%EB%8B%B9%ED%95%98%EB%8B%A4/</guid><description>아침에 눈을 떠서 메일을 확인 하는데, 구글 애드센스팀으로부터 아래와 같은 메일이 도착하였습니다.
애드센스 계정이 30일동안 정지 되었다는 메일이였는데, 하루 수입이 $0.01도 안 됐기 때문에 그냥 그런가보다 했습니다.
그래도 왜 그럴까 싶어 알아보다가 GA를 확인해보니 해당 시간대에 155 세션이 잡혔고, 모두 디바이스가 데스크탑인 국가 정보가 없는 경우 였습니다.
슬프게도 제 블로그는 일 조회수가 155가 안되기 때문에 이럴일이 없었죠&amp;hellip;.😂
애드센스 관리 페이지를 확인 하였을때도 이와 같이 무효 클릭: 직접 클릭 으로 정지를 당했습니다.</description></item><item><title>2019년 상반기 회고</title><link>http://blog.hodory.dev/2019/07/11/2019%EB%85%84-%EC%83%81%EB%B0%98%EA%B8%B0-%ED%9A%8C%EA%B3%A0/</link><pubDate>Thu, 11 Jul 2019 01:20:50 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2019/07/11/2019%EB%85%84-%EC%83%81%EB%B0%98%EA%B8%B0-%ED%9A%8C%EA%B3%A0/</guid><description>일년이 어떻게 흘러간지 한해가 지날수록 더 기억이 안 나서 정리의 필요성을 느껴, 올해부터는 회고를 진행해볼까 합니다.
💼 회사 01월~02월 서버리스 아키텍쳐 구현 마무리 12월부터 설계 및 개발을 진행하였던 서버리스 아키텍처를 12월 중순쯤 배포하였으나, 이슈 사항들이 많아 마무리 짓는데 생각보다 오래 걸렸습니다.
외부 싱크 여부를 판단하기 위한 데이터들을 Insert 또는 Update 하다 보니, RDS 콘솔 상에서 IOPS 쓰기가 1000 이상이 되는 경우가 발생했습니다.
해당 데이터를 레디스(Elastic Cache)나 noSQL(DynamoDB)에 쌓은 후, 다시 RDS로 옮기는 것도 검토해보았지만, 실제 구현할 경우 관리 포인트가 너무 많이 발생하게 되어 연동 속도를 줄이더라도 Lambda의 동시성을 조절하는 것으로 처리하였습니다.</description></item><item><title>［ETC］시니어 개발자의 조건을 다시 읽고</title><link>http://blog.hodory.dev/2019/06/19/etc%EC%8B%9C%EB%8B%88%EC%96%B4-%EA%B0%9C%EB%B0%9C%EC%9E%90%EC%9D%98-%EC%A1%B0%EA%B1%B4%EC%9D%84-%EB%8B%A4%EC%8B%9C-%EC%9D%BD%EA%B3%A0/</link><pubDate>Wed, 19 Jun 2019 00:06:39 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2019/06/19/etc%EC%8B%9C%EB%8B%88%EC%96%B4-%EA%B0%9C%EB%B0%9C%EC%9E%90%EC%9D%98-%EC%A1%B0%EA%B1%B4%EC%9D%84-%EB%8B%A4%EC%8B%9C-%EC%9D%BD%EA%B3%A0/</guid><description>시니어 개발자의 조건이라는 포스팅을 2017년 초에 접하고, 북마크에 담아두었다가 오늘에서야 다시 열어보게 되었습니다.
주요 키워드는 아래의 6가지였습니다.
시스템을 알고 서비스를 개발 해야한다. 기반기술을 중요시 해야한다. 적절한 엔지니어링을 택해야 한다. 클린코드가 모든 경우에 정답은 아니다. 애자일은 만능이 아니다. 오픈소스를 무분별하게 가져다 쓰는것 보다, 내부 동작 원리를 이해하고 용도에 맞게 사용해야한다. 부족한 부분을 기여할 수 있는 프로슈머가 되어야 한다. 필자분께서 결론에 담아주신 내용이 가장 인상이 깊었습니다.
쥬니어와 시니어가 같은 일을 하고 같은 품질의 결과물을 만들어 낸다면 나이는 많고 연봉은 높은 시니어를 반길 이유가 없다.</description></item><item><title>［GCP］ Nuxt.js GAE에 배포 이슈사항</title><link>http://blog.hodory.dev/2018/07/20/gcp-nuxt.js-gae%EC%97%90-%EB%B0%B0%ED%8F%AC-%EC%9D%B4%EC%8A%88%EC%82%AC%ED%95%AD/</link><pubDate>Fri, 20 Jul 2018 14:45:42 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2018/07/20/gcp-nuxt.js-gae%EC%97%90-%EB%B0%B0%ED%8F%AC-%EC%9D%B4%EC%8A%88%EC%82%AC%ED%95%AD/</guid><description><![CDATA[502 Bad Gateway 배포 후 링크 접속시 502 Bad Gateway 에러가 발생하였는데
에러 로그를 보니 localhost:8080로 접근하고 있었다
검색 결과 NuxtJS의 실행 포트를 변경할 수 있는 방법이 소개 되어있었다.
package.json에 다음과 같이 작성하면 된다.
{ ... &#34;config&#34;: { &#34;nuxt&#34;: { &#34;host&#34;: &#34;0.0.0.0&#34;, &#34;port&#34;: &#34;8080&#34; } } } 또는
{ &#34;scripts&#34;: { ... &#34;start&#34;: &#34;HOST=0.0.0.0 PORT=8080 nuxt build &amp;&amp; nuxt start&#34; } } 으로 작성하여 다시 deploy 하면 정상적으로 동작한다.
참고자료]]></description></item><item><title>［Database］ postgresql와 mysql 뭐가 다를까?</title><link>http://blog.hodory.dev/2018/04/23/database-postgresql%EC%99%80-mysql-%EB%AD%90%EA%B0%80-%EB%8B%A4%EB%A5%BC%EA%B9%8C/</link><pubDate>Mon, 23 Apr 2018 17:22:45 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2018/04/23/database-postgresql%EC%99%80-mysql-%EB%AD%90%EA%B0%80-%EB%8B%A4%EB%A5%BC%EA%B9%8C/</guid><description>PostgreSQL 과 MySQL의 차이점 PostgreSQL은 기본적으로 트랜잭션을 지원합니다(MySQL의 경우 테이블이 InnoDB 타입일 경우에만 지원합니다.) Databse의 하위개념으로 Schema가 있습니다.(MySQL의 Database의 개념은 PostgreSQL의 스키마와 개념이 비슷합니다.) 스키마를 별도로 지정하지 않을 경우, public이라는 스키마를 기본적으로 사용합니다. 데이터베이스가 다르면 물리적으로 분리되어있다는것을 의미합니다. 서로 다른 Schema간에는 JOIN이 가능합니다. 구조 참고자료
postgreSQL 구조 이미지 - 구루비 postgreSQL 소개</description></item><item><title>［Algorithm］이진탐색 알고리즘(Binary Search Algorithm)</title><link>http://blog.hodory.dev/2018/04/19/algorithm%EC%9D%B4%EC%A7%84%ED%83%90%EC%83%89-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98binary-search-algorithm/</link><pubDate>Thu, 19 Apr 2018 12:54:39 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2018/04/19/algorithm%EC%9D%B4%EC%A7%84%ED%83%90%EC%83%89-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98binary-search-algorithm/</guid><description>이진탐색 정의 오름차순으로 정렬된 리스트에서 특정한 값의 위치를 찾는 것. 오름차순으로 정렬된 리스트일 경우에만 사용할 수 있다는 단점이 있지만, 절반씩 줄여가며 탐색하기 때문에 매우 빠르다. 구현 해당 배열에서 가운데 값을 찾고, 그 값과 비교하여 해당 인덱스에서의 배열의 값이 찾는 값 보다 클때는 앞쪽에서 찾고, 작을때는 뒤쪽에서 찾으면 된다. 코드 // 해당 인덱스를 출력해주는 알고리즘 입니다. binarSearch = (data, value) =&amp;gt; { let start = data[0], end = data.slice(-1)[0], index = 0, last = data.</description></item><item><title>［ETC］Triple DES(3-DES)를 사용하지 않는 이유</title><link>http://blog.hodory.dev/2018/04/18/etctriple-des3-des%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94-%EC%9D%B4%EC%9C%A0/</link><pubDate>Wed, 18 Apr 2018 18:27:20 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2018/04/18/etctriple-des3-des%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94-%EC%9D%B4%EC%9C%A0/</guid><description>대학교 프로젝트에서 T-DES 암호화 알고리즘을 사용하여 소켓 기반 채팅 프로그램을 만든 적이 있습니다.
DES 암호화 알고리즘을 보완하기위해 DES를 3번 수행하는 방식입니다.
그렇다면 왜 3DES 암호화 알고리즘의 사용이 줄어들었을까요?
암호화키가 DES 표준에 따라 56비트로 제한됩니다. AES(Advanced Encryption Standard)가 미국 표준으로 승인되어 AES 암호화 알고리즘이 더 많이 쓰이고 있습니다. 암호화를 세번 하면서 생기는 속도의 문제점 (AES가 훨씬 빠르다고 합니다.) 결론적으로 대칭키 암호화 알고리즘에서는 DES 암호화 알고리즘을 AES 암호화 알고리즘이 대체하게 되어 없어졌다 할 수 있습니다.</description></item><item><title>［Algorithm］반복문 없이 1부터 10까지 합 구하기</title><link>http://blog.hodory.dev/2018/04/18/algorithm%EB%B0%98%EB%B3%B5%EB%AC%B8-%EC%97%86%EC%9D%B4-1%EB%B6%80%ED%84%B0-10%EA%B9%8C%EC%A7%80-%ED%95%A9-%EA%B5%AC%ED%95%98%EA%B8%B0/</link><pubDate>Wed, 18 Apr 2018 15:53:47 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2018/04/18/algorithm%EB%B0%98%EB%B3%B5%EB%AC%B8-%EC%97%86%EC%9D%B4-1%EB%B6%80%ED%84%B0-10%EA%B9%8C%EC%A7%80-%ED%95%A9-%EA%B5%AC%ED%95%98%EA%B8%B0/</guid><description><![CDATA[1부터 10까지 합 구하기 먼저 방법은 무엇이 있을까?
등차 수열의 합
재귀함수 방식
기타 등등&hellip;
하나씩 구현해보자
등차 수열
등차 수열이란 ? 연속하는 두 항의 차이가 모두 일정한 수열. 등차 수열의 합 공식 (출처 : 위키피디아) 클릭시 위키피디아로 이동 코드 구현 addFunction = (start, end) =&gt; { return (end-start+1)*(start+end)/2 } addFunction(1,10) 재귀함수 방식
재귀 함수란?자기 자신을 재 참조 하는 함수
재귀함수 구조(출처 : 위키피디아)
ex)
factorial = (v) =&gt; { if (v &lt;= 1) return 1 else return v * factorial(v-1) } 코드 구현]]></description></item><item><title>［Docker］명령어 정리</title><link>http://blog.hodory.dev/2017/09/01/docker%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%A0%95%EB%A6%AC/</link><pubDate>Fri, 01 Sep 2017 16:31:39 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2017/09/01/docker%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%A0%95%EB%A6%AC/</guid><description><![CDATA[이미지 다운로드
$ docker pull [다운로드 할 이미지명]: latest 이미지를 컨테이너로 만들때
$ docker run -i -t --name [컨테이너명] -d [이미지명] 컨테이너상태 확인 (&quot;a&quot;옵션은 정지된 컨테이너도 보여줌)
$ docker ps [-a] 컨테이너를 실행
$ docker start [컨테이너명] 컨테이너에 별칭을 주기
$ docker run -it --name &lt;별칭&gt; &lt;이미지명&gt; ex) $ docker run -it --name nginx richarvey/nginx-php-fpm 컨테이너 특정 포트 연결
$ docker run -p &lt;로컬 포트 번호&gt;:&lt;컨테이너 포트 번호&gt; &lt;이미지명&gt; ex) $ docker run -p 8000:80 richarvey/nginx-php-fpm 컨테이너 정지]]></description></item></channel></rss>