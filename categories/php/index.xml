<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>PHP - Category - Web Developer Hodory</title><link>http://blog.hodory.dev/categories/php/</link><description>PHP - Category - Web Developer Hodory</description><generator>Hugo -- gohugo.io</generator><language>ko</language><managingEditor>master@hodory.dev (hodory)</managingEditor><webMaster>master@hodory.dev (hodory)</webMaster><lastBuildDate>Tue, 14 Apr 2020 23:38:07 +0000</lastBuildDate><atom:link href="http://blog.hodory.dev/categories/php/" rel="self" type="application/rss+xml"/><item><title>윈도우 컴포저 패키지 설치시 오류 처리 방법</title><link>http://blog.hodory.dev/2020/04/14/composer-error-on-windows/</link><pubDate>Tue, 14 Apr 2020 23:38:07 +0000</pubDate><author><name>hodory</name></author><guid>http://blog.hodory.dev/2020/04/14/composer-error-on-windows/</guid><description><![CDATA[<h2 id="your-requirements-could-not-be-resolved-to-an-installable-set-of-packages" class="headerLink">
    <a href="#your-requirements-could-not-be-resolved-to-an-installable-set-of-packages" class="header-mark"></a>Your requirements could not be resolved to an installable set of packages.</h2><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">Your requirements could not be resolved to an installable <span class="nb">set</span> of packages.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  Problem <span class="m">1</span>
</span></span><span class="line"><span class="cl">    - laravel/horizon v4.2.1 requires ext-pcntl * -&gt; the requested PHP extension pcntl is missing from your system.
</span></span><span class="line"><span class="cl">    - laravel/horizon v4.2.0 requires ext-pcntl * -&gt; the requested PHP extension pcntl is missing from your system.
</span></span><span class="line"><span class="cl">    - laravel/horizon 4.x-dev requires ext-pcntl * -&gt; the requested PHP extension pcntl is missing from your system.
</span></span><span class="line"><span class="cl">    - Installation request <span class="k">for</span> laravel/horizon ^4.2 -&gt; satisfiable by laravel/horizon<span class="o">[</span>4.x-dev, v4.2.0, v4.2.1<span class="o">]</span>.
</span></span></code></pre></div><p>Laravel Horizon을 windows에서 설치하려 할 때 위와 같은 오류가 발생하였습니다.</p>
<h2 id="해결방안" class="headerLink">
    <a href="#%ed%95%b4%ea%b2%b0%eb%b0%a9%ec%95%88" class="header-mark"></a>해결방안</h2><p>pcntl은 윈도우에서 지원이 되지 않으므로 Docker 또는 Vargrant와 같은 가상환경을 사용해야 합니다.
<a href="https://www.php.net/manual/en/pcntl.installation.php" target="_blank" rel="noopener noreferrer">Link</a></p>
<p>또는 아래와 같이 실행하여 설치를 완료 할 수 있습니다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">composer require laravel/horizon --ignore-platform-reqs
</span></span></code></pre></div><p><code>--ignore-platform-reqs</code> 옵션의 설명은
해당 링크에서 확인할 수 있습니다. <a href="https://getcomposer.org/doc/03-cli.md" target="_blank" rel="noopener noreferrer">Link</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext"><span class="line"><span class="cl">ignore php, hhvm, lib-* and ext-* requirements and force the installation even if the local machine does not fulfill these. See also the platform config option.
</span></span></code></pre></div><p>패키지를 설치하는데 필요한 조건을 충족하지 못하더라도 무시하고 설치를 실행하는 옵션입니다.</p>
<p>필요 조건을 모두 충족하지 않은 경우이므로 정상동작에 실패 할 수 있습니다.</p>
]]></description></item><item><title>[PHP] InvalidArgumentException : Unable to locate factory with name [default]</title><link>http://blog.hodory.dev/2020/01/10/unable-to-locale-factory-with-name-default/</link><pubDate>Fri, 10 Jan 2020 00:36:54 +0000</pubDate><author><name>hodory</name></author><guid>http://blog.hodory.dev/2020/01/10/unable-to-locale-factory-with-name-default/</guid><description><![CDATA[<h2 id="발단" class="headerLink">
    <a href="#%eb%b0%9c%eb%8b%a8" class="header-mark"></a>발단</h2><p>Laravel Framework로 TDD를 진행중에 Unit Test를 하기 위해 artisan 콘솔을 이용하여 <code>TaskTest</code> 라는 이름의 테스트 클래스를 생성하였습니다.</p>
<pre tabindex="0"><code class="language-shellscript" data-lang="shellscript">$ php artisan make:test TaskTest --unit
</code></pre><p>코드는 간단했습니다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="o">&lt;?</span><span class="nx">php</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">namespace</span> <span class="nx">Tests\Unit</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nx">App\Project</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nx">Illuminate\Foundation\Testing\RefreshDatabase</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nx">PHPUnit\Framework\TestCase</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">TaskTest</span> <span class="k">extends</span> <span class="nx">TestCase</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">use</span> <span class="nx">RefreshDatabase</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="sd">/**
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @test
</span></span></span><span class="line"><span class="cl"><span class="sd">     */</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">function</span> <span class="nf">it_belongs_to_a_project</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$task</span> <span class="o">=</span> <span class="nx">factory</span><span class="p">(</span><span class="s1">&#39;App\Task&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">create</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertInstanceOf</span><span class="p">(</span><span class="nx">Project</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="nv">$task</span><span class="o">-&gt;</span><span class="na">project</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>해당 테스트를 생성 후 아래와 같이 PHPUnit으로 해당 테스트를 실행하였더니</p>
<pre tabindex="0"><code class="language-shellscript" data-lang="shellscript">$ ./vendor/bin/phpunit --filter it_belongs_to_a_project
</code></pre><p>아래 이미지와 같은 에러가 나왔습니다.
<figure><a class="lightgallery" href="/images/Unable-to-locale-factory-with-name-default/1.jpg" title="/images/Unable-to-locale-factory-with-name-default/1.jpg" data-thumbnail="/images/Unable-to-locale-factory-with-name-default/1.jpg">
        <img
            
            loading="lazy"
            src="/images/Unable-to-locale-factory-with-name-default/1.jpg"
            srcset="/images/Unable-to-locale-factory-with-name-default/1.jpg, /images/Unable-to-locale-factory-with-name-default/1.jpg 1.5x, /images/Unable-to-locale-factory-with-name-default/1.jpg 2x"
            sizes="auto"
            alt="/images/Unable-to-locale-factory-with-name-default/1.jpg">
    </a></figure></p>
<h2 id="invalidargumentexception--unable-to-locate-factory-with-name-default-apptask" class="headerLink">
    <a href="#invalidargumentexception--unable-to-locate-factory-with-name-default-apptask" class="header-mark"></a><code>InvalidArgumentException : Unable to locate factory with name [default] [App\Task]</code></h2><p>과연 무엇이 문제일까 싶어 해당 모델의 migration이 제대로 안된걸까요?</p>
<!-- raw HTML omitted -->
<p>migrate 명령어도 실행해보았고, Controller Test에서 사용할때에는 문제가 없었지만 factory 코드도 다시 작성 해보았습니다.</p>
<p>구글링으로 <a href="https://www.lesstif.com/pages/viewpage.action?pageId=26084077" target="_blank" rel="noopener noreferrer">정광섭님의 위키</a>를 참고했을때는 factory에 클래스가 제대로 설정된게 아닌 경우라 하여,<!-- raw HTML omitted -->
<code>factory('App\Task')</code> 와 <code>factory(Task::class)</code> 와 <code>factory(\App\Task::class)</code> 모두 테스트 해보았는데 모두 동작을 안했고,<!-- raw HTML omitted --></p>
<p>Laracast와 StackoverFlow에서는 phpunit의 setup 메소드를 상속하여,<!-- raw HTML omitted -->
<code>parent::setup()</code> 을 호출하고, factory를 호출하면 해결된다는 답변들도 확인하였으나, 제게 맞는 해결 방법은 아니였습니다.</p>
<p>하지만 라라캐스트 질문의 <a href="https://laracasts.com/discuss/channels/testing/unable-to-locate-factory-with-name-default?page=1#reply=400775" target="_blank" rel="noopener noreferrer">어떤 답변</a>에서는
<code>--unit</code>으로 생성한 테스트 클래스가 상속하는 TestCase 클래스가 <code>\Tests\TestCase</code> 가 아닌 <code>\PHPUnit\Framework\TestCase</code>여서 발생했다는 내용이 있었습니다.</p>
<h2 id="해결" class="headerLink">
    <a href="#%ed%95%b4%ea%b2%b0" class="header-mark"></a>해결</h2><p>저도 이걸 확인하고 바로 위의 코드를 아래와 같이 변경하였습니다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="o">&lt;?</span><span class="nx">php</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">namespace</span> <span class="nx">Tests\Unit</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nx">App\Project</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nx">Illuminate\Foundation\Testing\RefreshDatabase</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="o">-</span> <span class="k">use</span> <span class="nx">PHPUnit\Framework\TestCase</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="o">+</span> <span class="k">use</span> <span class="nx">Tests\TestCase</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">TaskTest</span> <span class="k">extends</span> <span class="nx">TestCase</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">use</span> <span class="nx">RefreshDatabase</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="sd">/**
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @test
</span></span></span><span class="line"><span class="cl"><span class="sd">     */</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">function</span> <span class="nf">it_belongs_to_a_project</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$task</span> <span class="o">=</span> <span class="nx">factory</span><span class="p">(</span><span class="s1">&#39;App\Task&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">create</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertInstanceOf</span><span class="p">(</span><span class="nx">Project</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="nv">$task</span><span class="o">-&gt;</span><span class="na">project</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>네임스페이스를 확인할 생각은 전혀 하지 못했는데, 일반적인 테스트 클래스는 모두 <code>use Tests\TestCase;</code> 이렇게 선언되어있었으나<!-- raw HTML omitted -->
<code>--unit</code>으로 선언했을때는 <code>use PHPUnit\Framework\TestCase;</code>으로 자동 설정되어있었습니다.</p>
<p>아직까지 artisan에서 <code>--unit</code> 옵션을 사용하여 테스트 클래스를 만들었을때 namespace 변경 없이 하는 방법은 찾지 못하였는데,<!-- raw HTML omitted -->
<code>Illuminate\Foundation\Testing\TestCase</code> 에서 무언가 factory 메소드의 파라미터로 모델을 주입해주는 설정해주는것으로 보입니다.</p>
<blockquote>
<p>참고자료</p>
</blockquote>
<ul>
<li><a href="https://www.lesstif.com/pages/viewpage.action?pageId=26084077" target="_blank" rel="noopener noreferrer">정광섭님의 위키</a></li>
<li><a href="https://laracasts.com/discuss/channels/testing/unable-to-locate-factory-with-name-default?page=1#reply=400775" target="_blank" rel="noopener noreferrer">Laracast &ldquo;Unable to locate factory with name [default]??&rdquo;- amcsi</a></li>
</ul>
]]></description></item><item><title>PHPUnit Annotation 정리</title><link>http://blog.hodory.dev/2019/11/25/phpunit-annotations/</link><pubDate>Mon, 25 Nov 2019 01:18:24 +0000</pubDate><author><name>hodory</name></author><guid>http://blog.hodory.dev/2019/11/25/phpunit-annotations/</guid><description><![CDATA[<h2 id="서론" class="headerLink">
    <a href="#%ec%84%9c%eb%a1%a0" class="header-mark"></a>서론</h2><hr>
<p>PHP Unit을 사용하면서도 잘 모르는 어노테이션을 PHPUnit v8.4 기준(2019-11-19 최신버전)으로 정리하였습니다.</p>
<h2 id="author" class="headerLink">
    <a href="#author" class="header-mark"></a>@author</h2><h3 id="테스트를-작성자별-그룹화-필터링-할-때" class="headerLink">
    <a href="#%ed%85%8c%ec%8a%a4%ed%8a%b8%eb%a5%bc-%ec%9e%91%ec%84%b1%ec%9e%90%eb%b3%84-%ea%b7%b8%eb%a3%b9%ed%99%94-%ed%95%84%ed%84%b0%eb%a7%81-%ed%95%a0-%eb%95%8c" class="header-mark"></a>테스트를 작성자별 그룹화 필터링 할 때</h3><hr>
<p><code>@group</code> 어노테이션의 별칭으로, 테스트를 작성자별로 그룹화하여 필터링 하는데 사용할 수 있습니다.</p>
<h2 id="after" class="headerLink">
    <a href="#after" class="header-mark"></a>@after</h2><h3 id="각-테스트가-끝난-뒤-실행-하려-할-때" class="headerLink">
    <a href="#%ea%b0%81-%ed%85%8c%ec%8a%a4%ed%8a%b8%ea%b0%80-%eb%81%9d%eb%82%9c-%eb%92%a4-%ec%8b%a4%ed%96%89-%ed%95%98%eb%a0%a4-%ed%95%a0-%eb%95%8c" class="header-mark"></a>각 테스트가 끝난 뒤 실행 하려 할 때</h3><hr>
<p>각 테스트 메소드들이 실행 된 후, 특정 메소드를 실행하고자 할때 사용할 수 있습니다.</p>
<p>각 테스트가 끝난 뒤 트랜잭션 커밋or롤백을 한다거나, 생성된 파일을 삭제하는 등의 처리를 하는데 사용하면 좋을 것 같습니다.</p>
<!-- raw HTML omitted -->
<pre><code>namespace Tests;

use PHPUnit\Framework\TestCase;

class MyTest extends TestCase
{
    /**
     * @after
     */
    public function afterDo()
    {
        echo &quot;After Method Called&quot; . PHP_EOL;
    }

    public function test1()
    {
        echo &quot;test1 Method Called&quot; . PHP_EOL;
        self::assertTrue(true);
    }

    public function test2()
    {
        echo &quot;test2 Method Called&quot; . PHP_EOL;
        self::assertTrue(true);
    }
}

// 출력 결과
test1 Method Called
After Method Called
test2 Method Called
After Method Called
```
</code></pre>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<h2 id="afterclass" class="headerLink">
    <a href="#afterclass" class="header-mark"></a>@afterClass</h2><h3 id="모든-테스트가-끝난-후-실행-하려-할-때" class="headerLink">
    <a href="#%eb%aa%a8%eb%93%a0-%ed%85%8c%ec%8a%a4%ed%8a%b8%ea%b0%80-%eb%81%9d%eb%82%9c-%ed%9b%84-%ec%8b%a4%ed%96%89-%ed%95%98%eb%a0%a4-%ed%95%a0-%eb%95%8c" class="header-mark"></a>모든 테스트가 끝난 후 실행 하려 할 때</h3><hr>
<p>모든 테스트가 끝난 후, 공유된 자원들을 정리하기 위해 호출할 정적 메소드를 지정 할 수 있습니다.</p>
<p>해당 부분에서 테스트 실행시 만든 DB 커넥션을 회수하거나, 전체 트랜잭션을 처리 하거나, 소켓을 닫는 등의 처리를 할 수 있을것 같습니다.</p>
<!-- raw HTML omitted -->
<pre><code>namespace Tests;

use PHPUnit\Framework\TestCase;

class MyTest extends TestCase
{
    /**
     * @afterClass
     */
    public static function afterClassDo()
    {
        echo &quot;After Class Method Called&quot; . PHP_EOL;
    }

    public function test1()
    {
        echo &quot;test1 Method Called&quot; . PHP_EOL;
        self::assertTrue(true);
    }

    public function test2()
    {
        echo &quot;test2 Method Called&quot; . PHP_EOL;
        self::assertTrue(true);
    }
}

// 출력 결과
test1 Method Called
test2 Method Called
After Class Method Called
```
</code></pre>
<!-- raw HTML omitted -->
<h2 id="backupglobals" class="headerLink">
    <a href="#backupglobals" class="header-mark"></a>@backupGlobals</h2><h3 id="글로벌-변수를-유지하고-싶다면" class="headerLink">
    <a href="#%ea%b8%80%eb%a1%9c%eb%b2%8c-%eb%b3%80%ec%88%98%eb%a5%bc-%ec%9c%a0%ec%a7%80%ed%95%98%ea%b3%a0-%ec%8b%b6%eb%8b%a4%eb%a9%b4" class="header-mark"></a>글로벌 변수를 유지하고 싶다면</h3><hr>
<p>모든 글로벌 변수를 각 테스트 전에 백업하고, 각 테스트 이후 해당 백업을 복원시킵니다.</p>
<p>메소드 레벨에서 재정의가 가능합니다.</p>
<p>해당 설명만으로는 이해가 잘 되지 않아서 직접 예제 코드를 만들어 보았습니다.
클래스 스코프 밖에 정의된 글로벌 변수인 <code>$className</code>을 <code>@backupGlobals</code> 어노테이션이 enabled 되어 있는 테스트 코드에서는 실행이전 값을 백업하여두고 테스트가 끝나면 복원이 되어,
두번째 테스트코드에서도 &ldquo;MyTest&quot;라는 값을 가지고 있게됩니다.</p>
<!-- raw HTML omitted -->
<pre><code>namespace Tests;

use PHPUnit\Framework\TestCase;

$className = &quot;MyTest&quot;;

/**
 * @backupGlobals enabled
 */
class MyTest extends TestCase
{
    public function test_글로벌변수를_백업하고_변경()
    {
        global $className;
        $this-&gt;assertEquals($className, &quot;MyTest&quot;);
        $className = &quot;Foo&quot;;
    }

    /**
     * @backupGlobals disabled
     */
    public function test_글로벌변수를_백업하지_않고_변경()
    {
        global $className;
        $this-&gt;assertEquals($className, &quot;MyTest&quot;);
        $className = &quot;Bar&quot;;
    }

    public function test_글로벌변수를_백업되어있는지_체크()
    {
        global $className;
        $this-&gt;assertEquals($className, &quot;Bar&quot;);
    }
}
```
</code></pre>
<!-- raw HTML omitted -->
<h2 id="backupstaticattributes" class="headerLink">
    <a href="#backupstaticattributes" class="header-mark"></a>@backupStaticAttributes</h2><h3 id="정적-속성을-사용하려-할-때" class="headerLink">
    <a href="#%ec%a0%95%ec%a0%81-%ec%86%8d%ec%84%b1%ec%9d%84-%ec%82%ac%ec%9a%a9%ed%95%98%eb%a0%a4-%ed%95%a0-%eb%95%8c" class="header-mark"></a><del>정적 속성을 사용하려 할 때</del></h3><hr>
<p><del>선언된 클래스들 안의 모든 정적 속성을 각 테스트 전에 백업하고, 각 테스트 후에 해당 백업을 복원 시킵니다.</del></p>
<p><del>클래스 레벨에도 선언 가능하며, 각 테스트 메소드에서 추가 제어 가능합니다.</del></p>
<!-- raw HTML omitted -->
<pre><code>use PHPUnit\Framework\TestCase;
        
/**
 * @backupStaticAttributes enabled
 */
class MyTest extends TestCase
{
    public function test_정적속성을_사용하는_테스트()
    {
        // ...
    }

    /**
     * @backupStaticAttributes disabled
     */
    public function test_정적속성을_사용하지_않는_테스트()
    {
        // ...
    }
}
```
</code></pre>
<!-- raw HTML omitted -->
<h2 id="before" class="headerLink">
    <a href="#before" class="header-mark"></a>@before</h2><h3 id="각-테스트-실행전에-실행-하려-할-때" class="headerLink">
    <a href="#%ea%b0%81-%ed%85%8c%ec%8a%a4%ed%8a%b8-%ec%8b%a4%ed%96%89%ec%a0%84%ec%97%90-%ec%8b%a4%ed%96%89-%ed%95%98%eb%a0%a4-%ed%95%a0-%eb%95%8c" class="header-mark"></a>각 테스트 실행전에 실행 하려 할 때</h3><hr>
<p>각 테스트 메소드가 호출되기 전에 실행할 메소드를 지정할 수 있습니다.</p>
<p>아래와 같이 beforeMethod는 각 메소드 호출전에 실행되지만,
users 배열의 값이 증가되지는 않습니다.</p>
<!-- raw HTML omitted -->
<pre><code>class MyTest extends TestCase
{
    protected $users = [];

    /**
     * @before
     */
    public function beforeMethod()
    {
        echo &quot;Before Method Called&quot; . PHP_EOL;
        $this-&gt;users[] = [
            'name' =&gt; '홍길동'
        ];
    }

    public function test1()
    {
        echo &quot;test1 Method Called&quot; . PHP_EOL;
        self::assertCount(1, $this-&gt;users);
    }

    public function test2()
    {
        echo &quot;test2 Method Called&quot; . PHP_EOL;
        self::assertCount(1, $this-&gt;users);
    }
}

// 출력 결과
Before Method Called
test1 Method Called
Before Method Called
test2 Method Called
```
</code></pre>
<!-- raw HTML omitted -->
<h2 id="beforeclass" class="headerLink">
    <a href="#beforeclass" class="header-mark"></a>@beforeClass</h2><h3 id="테스트-실행전-공유-속성을-만들-때" class="headerLink">
    <a href="#%ed%85%8c%ec%8a%a4%ed%8a%b8-%ec%8b%a4%ed%96%89%ec%a0%84-%ea%b3%b5%ec%9c%a0-%ec%86%8d%ec%84%b1%ec%9d%84-%eb%a7%8c%eb%93%a4-%eb%95%8c" class="header-mark"></a>테스트 실행전 공유 속성을 만들 때</h3><hr>
<p>해당 클래스에서 테스트가 실행되기전 공유 하기 위한 정보를 설정하기 위해 호출 할 static 메소드에 지정하여 사용할 수 있습니다.</p>
<!-- raw HTML omitted -->
<pre><code>class MyTest extends TestCase
{
    protected $users = [];

    /**
     * @beforeClass
     */
    public static function beforeClass()
    {
        echo &quot;Before Class Called&quot; . PHP_EOL;
    }

    /**
     * @before
     */
    public function beforeMethod()
    {
        echo &quot;Before Method Called&quot; . PHP_EOL;
        $this-&gt;users[] = [
            'name' =&gt; '홍길동'
        ];
    }

    public function test1()
    {
        echo &quot;test1 Method Called&quot; . PHP_EOL;
        self::assertCount(1, $this-&gt;users);
    }

    public function test2()
    {
        echo &quot;test2 Method Called&quot; . PHP_EOL;
        self::assertCount(1, $this-&gt;users);
    }
}

// 출력 결과
Before Class Called
Before Method Called
test1 Method Called
Before Method Called
test2 Method Called
```
</code></pre>
<!-- raw HTML omitted -->
<h2 id="codecoverageignore" class="headerLink">
    <a href="#codecoverageignore" class="header-mark"></a>@codeCoverageIgnore*</h2><hr>
<p>코드 커버리지 분석시 제외할 라인에 사용할 수 있습니다.</p>
<!-- raw HTML omitted -->
<pre><code>/**
 * @codeCoverageIgnore
 */
class Foo
{
    public function bar()
    {
    }
}

class Bar
{
    /**
     * @codeCoverageIgnore
     */
    public function foo()
    {
    }
}

if (false) {
    // @codeCoverageIgnoreStart
    print '*';
    // @codeCoverageIgnoreEnd
}

exit; // @codeCoverageIgnore
```
</code></pre>
<!-- raw HTML omitted -->
<h2 id="covers" class="headerLink">
    <a href="#covers" class="header-mark"></a>@covers</h2><h3 id="테스트-영역을-명시하려-할-때" class="headerLink">
    <a href="#%ed%85%8c%ec%8a%a4%ed%8a%b8-%ec%98%81%ec%97%ad%ec%9d%84-%eb%aa%85%ec%8b%9c%ed%95%98%eb%a0%a4-%ed%95%a0-%eb%95%8c" class="header-mark"></a>테스트 영역을 명시하려 할 때</h3><hr>
<p>어떤 영역을 테스트 하고자 하는지 명시하고자 할 때 사용합니다.</p>
<p>이와 같이 명시 하면 IDE(PHPStorm)에서 연결되어 있어 ctrl+shift+T 를 이용해 테스트로 바로 이동이 가능해지고, usage로 찾을 수 있어 메소드명 수정시 같이 반영됩니다.</p>
<!-- raw HTML omitted -->
<h2 id="coversdefaultclass" class="headerLink">
    <a href="#coversdefaultclass" class="header-mark"></a>@coversDefaultClass</h2><h3 id="너무-긴-네임스페이스와-클래스명을-반복해서-쓰고-싶지-않을-때" class="headerLink">
    <a href="#%eb%84%88%eb%ac%b4-%ea%b8%b4-%eb%84%a4%ec%9e%84%ec%8a%a4%ed%8e%98%ec%9d%b4%ec%8a%a4%ec%99%80-%ed%81%b4%eb%9e%98%ec%8a%a4%eb%aa%85%ec%9d%84-%eb%b0%98%eb%b3%b5%ed%95%b4%ec%84%9c-%ec%93%b0%ea%b3%a0-%ec%8b%b6%ec%a7%80-%ec%95%8a%ec%9d%84-%eb%95%8c" class="header-mark"></a>너무 긴 네임스페이스와 클래스명을 반복해서 쓰고 싶지 않을 때</h3><hr>
<p>기본 네임스페이스나 클래스명을 명시하는데 사용할 수 있어, <code>@covers</code> 어노테이션에 긴 네임스페이스나, 클래스명을 반복해서 사용할 필요가 없어집니다.</p>
<p>해당 어노테이션에는 정규화 된 클래스명을 사용해야하기때문에,
모호하지 않도록 클래스명 맨 앞에 <code>\</code> 로 시작하는것을 추천합니다.</p>
<p>아래 예제 코드와 같이 <code>@covers \Foo\CoveredClass::publicMethod</code> 를 <code>@covers ::publicMethod</code>로 줄여 쓸 수 있는 이점을 얻게 됩니다.</p>
<!-- raw HTML omitted -->
<pre><code>/**
 * @coversDefaultClass \Foo\CoveredClass
 */
class CoversDefaultClassTest extends TestCase
{
    /**
     * @covers ::publicMethod
     */
    public function testSomething()
    {
        $o = new Foo\CoveredClass;
        $o-&gt;publicMethod();
    }
}
```
</code></pre>
<!-- raw HTML omitted -->
<h2 id="coversnothing" class="headerLink">
    <a href="#coversnothing" class="header-mark"></a>@coversNothing</h2><h3 id="작성예정" class="headerLink">
    <a href="#%ec%9e%91%ec%84%b1%ec%98%88%ec%a0%95" class="header-mark"></a>작성예정</h3><hr>
<p>클래스나 메소드레벨에서 사용할 수 있고 <code>@covers</code> 어노테이션을 덮어 씁니다.</p>
<h2 id="dataprovider" class="headerLink">
    <a href="#dataprovider" class="header-mark"></a>@DataProvider</h2><h3 id="메소드를-이용해-파라미터를-주입하고-싶을때" class="headerLink">
    <a href="#%eb%a9%94%ec%86%8c%eb%93%9c%eb%a5%bc-%ec%9d%b4%ec%9a%a9%ed%95%b4-%ed%8c%8c%eb%9d%bc%eb%af%b8%ed%84%b0%eb%a5%bc-%ec%a3%bc%ec%9e%85%ed%95%98%ea%b3%a0-%ec%8b%b6%ec%9d%84%eb%95%8c" class="header-mark"></a>메소드를 이용해 파라미터를 주입하고 싶을때</h3><hr>
<p><code>@dataProvider</code> 를 사용하면 메소드의 파라미터로 전달할 수 있습니다.
Java Junit 패키지에서 JunitParams를 이용하여 <code>@Parameters</code> 어노테이션을 사용하는것과 동일한 효과를 얻을 수 있습니다.</p>
<ul>
<li>예제 코드
<ul>
<li>
<p>아래 예제 코드와 같은 테스트는 배열의 각 값 들이 <code>$a</code>, <code>$b</code>, <code>$expected</code> 로 바인딩 되며,
총 4개의 배열이 자동 주입되어 테스트가 4회 수행됩니다.</p>
<ul>
<li>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl">  <span class="o">&lt;?</span><span class="nx">php</span>
</span></span><span class="line"><span class="cl">  <span class="k">use</span> <span class="nx">PHPUnit\Framework\TestCase</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">class</span> <span class="nc">DataTest</span> <span class="k">extends</span> <span class="nx">TestCase</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="sd">/**
</span></span></span><span class="line"><span class="cl"><span class="sd">       * @dataProvider additionProvider
</span></span></span><span class="line"><span class="cl"><span class="sd">       */</span>
</span></span><span class="line"><span class="cl">      <span class="k">public</span> <span class="k">function</span> <span class="nf">testAdd</span><span class="p">(</span><span class="nv">$a</span><span class="p">,</span> <span class="nv">$b</span><span class="p">,</span> <span class="nv">$expected</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertSame</span><span class="p">(</span><span class="nv">$expected</span><span class="p">,</span> <span class="nv">$a</span> <span class="o">+</span> <span class="nv">$b</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="k">public</span> <span class="k">function</span> <span class="nf">additionProvider</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="k">return</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">              <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">              <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">              <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">              <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">          <span class="p">];</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span></code></pre></div></li>
</ul>
</li>
<li>
<p>아래와 같이 이름이 정의된 dataset을 사용할 수도 있습니다.</p>
<ul>
<li>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl">  <span class="o">&lt;?</span><span class="nx">php</span>
</span></span><span class="line"><span class="cl">  <span class="k">use</span> <span class="nx">PHPUnit\Framework\TestCase</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">class</span> <span class="nc">DataTest</span> <span class="k">extends</span> <span class="nx">TestCase</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="sd">/**
</span></span></span><span class="line"><span class="cl"><span class="sd">       * @dataProvider additionProvider
</span></span></span><span class="line"><span class="cl"><span class="sd">       */</span>
</span></span><span class="line"><span class="cl">      <span class="k">public</span> <span class="k">function</span> <span class="nf">testAdd</span><span class="p">(</span><span class="nv">$a</span><span class="p">,</span> <span class="nv">$b</span><span class="p">,</span> <span class="nv">$expected</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertSame</span><span class="p">(</span><span class="nv">$expected</span><span class="p">,</span> <span class="nv">$a</span> <span class="o">+</span> <span class="nv">$b</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="k">public</span> <span class="k">function</span> <span class="nf">additionProvider</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="k">return</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">              <span class="s1">&#39;adding zeros&#39;</span>  <span class="o">=&gt;</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">              <span class="s1">&#39;zero plus one&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">              <span class="s1">&#39;one plus zero&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">              <span class="s1">&#39;one plus one&#39;</span>  <span class="o">=&gt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">          <span class="p">];</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span></code></pre></div></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="depends" class="headerLink">
    <a href="#depends" class="header-mark"></a>@depends</h2><h3 id="테스트-코드간의-종속성-정의" class="headerLink">
    <a href="#%ed%85%8c%ec%8a%a4%ed%8a%b8-%ec%bd%94%eb%93%9c%ea%b0%84%ec%9d%98-%ec%a2%85%ec%86%8d%ec%84%b1-%ec%a0%95%ec%9d%98" class="header-mark"></a>테스트 코드간의 종속성 정의</h3><hr>
<p><code>@depends</code> 어노테이션 사용시 테스트 코드간의 종속성을 선언 할 수 있습니다.</p>
<p>실행순서를 정의하는것은 아니지만, <code>@depends</code>에 정의된 테스트의 리턴값의 레퍼런스를 전달합니다.</p>
<p>레퍼런스 전달이 아닌 값의 깊은 복사를 원할 경우  <code>@depends clone</code> 를 이용하고,
PHP에서 clone으로 불리는 얕은 복사를 원할 경우 <code>@depends shallowClone</code> 를 이용하면 됩니다.</p>
<h2 id="doesnotperformassertions" class="headerLink">
    <a href="#doesnotperformassertions" class="header-mark"></a>@doesNotPerformAssertions</h2><h3 id="값에-대한-assertion-없이-테스트-코드를-실행만-하고자-할때" class="headerLink">
    <a href="#%ea%b0%92%ec%97%90-%eb%8c%80%ed%95%9c-assertion-%ec%97%86%ec%9d%b4-%ed%85%8c%ec%8a%a4%ed%8a%b8-%ec%bd%94%eb%93%9c%eb%a5%bc-%ec%8b%a4%ed%96%89%eb%a7%8c-%ed%95%98%ea%b3%a0%ec%9e%90-%ed%95%a0%eb%95%8c" class="header-mark"></a>값에 대한 assertion 없이 테스트 코드를 실행만 하고자 할때</h3><hr>
<p>아래와 같이 테스트를 수행하지 않을 경우 <code>This test did not perform any assertions</code>와 같은 Warning이 발생됩니다.</p>
<p>해당 어노테이션을 사용하면 Risky 없이 <code>OK (1 test, 0 assertions)</code>로 성공 처리됩니다.</p>
<!-- raw HTML omitted -->
<pre><code>namespace Tests;

use PHPUnit\Framework\TestCase;

class MyTest extends TestCase
{
    public function testAddSlashes()
    {
        echo addslashes(&quot;name='1'&quot;);
    }
}

// 출력 결과

This test did not perform any assertions

/opt/project/tests/MyTest.php:9
name=\'1\'

OK, but incomplete, skipped, or risky tests!
Tests: 1, Assertions: 0, Risky: 1.

&lt;?php

namespace Tests;

use PHPUnit\Framework\TestCase;

class MyTest extends TestCase
{
    /**
     * @doesNotPerformAssertions
     */
    public function testAddSlashes()
    {
        echo addslashes(&quot;name='1'&quot;);
    }
}
```
</code></pre>
<!-- raw HTML omitted -->
<h2 id="group" class="headerLink">
    <a href="#group" class="header-mark"></a>@group</h2><h3 id="테스트-코드에-태그를-달고-싶을때" class="headerLink">
    <a href="#%ed%85%8c%ec%8a%a4%ed%8a%b8-%ec%bd%94%eb%93%9c%ec%97%90-%ed%83%9c%ea%b7%b8%eb%a5%bc-%eb%8b%ac%ea%b3%a0-%ec%8b%b6%ec%9d%84%eb%95%8c" class="header-mark"></a>테스트 코드에 태그를 달고 싶을때</h3><hr>
<p><code>@group</code>어노테이션을 이용하여, 테스트 코드에 1개 이상의 태그와 같이 묶음 필터를 추가할 수 있습니다.</p>
<p>XML 설정 파일 주입을 이용 하거나 CLI에서 실행시 <code>--group</code> 과 <code>--exclude-group</code> 를 이용해서 테스트 실행 대상 또는 제외그룹을 설정할 수 있습니다.</p>
<h2 id="large" class="headerLink">
    <a href="#large" class="header-mark"></a>@large</h2><h3 id="60초-이상-실행-되면-실패-처리-하고자-할-때" class="headerLink">
    <a href="#60%ec%b4%88-%ec%9d%b4%ec%83%81-%ec%8b%a4%ed%96%89-%eb%90%98%eb%a9%b4-%ec%8b%a4%ed%8c%a8-%ec%b2%98%eb%a6%ac-%ed%95%98%ea%b3%a0%ec%9e%90-%ed%95%a0-%eb%95%8c" class="header-mark"></a>60초 이상 실행 되면 실패 처리 하고자 할 때</h3><hr>
<p><code>@group large</code>의 별칭으로,<code>PHP_Invoker</code> 패키지가 설치되어 있고, strict mode가 실행되어 있으면 <strong>60초</strong> 이상 실행 될 경우 실패 처리됩니다.
해당 타임아웃에 관한 정보는 설정 정보 XML의 <code>timeoutForLargeTests</code>속성을 통해 설정 할 수 있습니다.</p>
<h2 id="medium" class="headerLink">
    <a href="#medium" class="header-mark"></a>@medium</h2><h3 id="10초-이상-실행-되면-실패-처리-하고자-할-때" class="headerLink">
    <a href="#10%ec%b4%88-%ec%9d%b4%ec%83%81-%ec%8b%a4%ed%96%89-%eb%90%98%eb%a9%b4-%ec%8b%a4%ed%8c%a8-%ec%b2%98%eb%a6%ac-%ed%95%98%ea%b3%a0%ec%9e%90-%ed%95%a0-%eb%95%8c" class="header-mark"></a>10초 이상 실행 되면 실패 처리 하고자 할 때</h3><hr>
<p><code>@group medium</code>의 별칭으로, <code>PHP_Invoker</code> 패키지가 설치되어 있고, strict mode가 실행되어 있으면 <strong>10초</strong> 이상 실행 될 경우 실패 처리됩니다.
해당 타임아웃에 관한 정보는 설정 정보 XML의 <code>timeoutForMediumTests</code>속성을 통해 설정 할 수 있습니다.</p>
<p>Medium 테스트는 <code>@large</code> 테스트에 의존적이여서는 안됩니다.</p>
<h2 id="preserveglobalstate" class="headerLink">
    <a href="#preserveglobalstate" class="header-mark"></a>@preserveGlobalState</h2><h3 id="테스트가-별도의-프로세스에서-실행될때-직렬화-오류-방지" class="headerLink">
    <a href="#%ed%85%8c%ec%8a%a4%ed%8a%b8%ea%b0%80-%eb%b3%84%eb%8f%84%ec%9d%98-%ed%94%84%eb%a1%9c%ec%84%b8%ec%8a%a4%ec%97%90%ec%84%9c-%ec%8b%a4%ed%96%89%eb%90%a0%eb%95%8c-%ec%a7%81%eb%a0%ac%ed%99%94-%ec%98%a4%eb%a5%98-%eb%b0%a9%ec%a7%80" class="header-mark"></a>테스트가 별도의 프로세스에서 실행될때 직렬화 오류 방지</h3><hr>
<p>테스트가 별도의 프로세스에서 실행될 때, PHPUnit은부모 프로세스에서 글로벌 state를 직렬화 한 값을 자식 프로세스에서 역직렬화하여 상태를 보존합니다.</p>
<p>부모 프로세스에서 직렬화 할 수 없는 글로벌 state가 있는 경우, 해당 옵션을 <code>disable</code> 처리하여 방지할 수 있습니다.</p>
<h2 id="requires" class="headerLink">
    <a href="#requires" class="header-mark"></a>@requires</h2><h3 id="특정-조건일때만-테스트를-수행하고자-할-때" class="headerLink">
    <a href="#%ed%8a%b9%ec%a0%95-%ec%a1%b0%ea%b1%b4%ec%9d%bc%eb%95%8c%eb%a7%8c-%ed%85%8c%ec%8a%a4%ed%8a%b8%eb%a5%bc-%ec%88%98%ed%96%89%ed%95%98%ea%b3%a0%ec%9e%90-%ed%95%a0-%eb%95%8c" class="header-mark"></a>특정 조건일때만 테스트를 수행하고자 할 때</h3><hr>
<p>PHP의 버전이나 extensions 설치여부 등 전제 조건을 체크하여 테스트를 건너뛸 수 있습니다.</p>
<p><code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code>, <code>=</code>, <code>==</code>, <code>!=</code>, <code>&lt;&gt;</code> 등의 비교 연산자를 사용하여 버전을 비교할 수 있습니다.</p>
<p>해당 어노테이션을 이용해 체크 가능한 항목은 아래와 같습니다.</p>
<ul>
<li>체크 가능한 조건
<ul>
<li>PHP
<ul>
<li>PHP 버전</li>
</ul>
</li>
<li>PHPUnit
<ul>
<li>PHP Unit 버전</li>
</ul>
</li>
<li>OS
<ul>
<li><code>PHP_OS</code> 상수와 정규식으로 매칭되는 값입니다.
ex) WIN32|WINNT</li>
</ul>
</li>
<li>OSFAMILY
<ul>
<li><code>PHP_OS_FAMILY</code> 상수와 매칭되는 값으로 PHP 7.2.0부터 사용가능합니다.
ex) Windows</li>
</ul>
</li>
<li>function
<ul>
<li>함수 존재 여부 → function_exists()</li>
</ul>
</li>
<li>extension
<ul>
<li>extension 설치 여부 및 버전 체크</li>
</ul>
</li>
</ul>
</li>
</ul>
<!-- raw HTML omitted -->
<pre><code>/**
 * @requires extension mysqli
 */
class DatabaseTest extends TestCase
{
    /**
     * @requires PHP &gt;= 5.3
     */
    public function testConnection()
    {
                // 해당 테스트는 mysqli 확장프로그램이 설치되어 있고, PHP 버전이 5.3 이상일때 실행됩니다.
    }

    // 추가적인 테스트를 작성하였을때에도 mysqli 확장프로그램이 필요합니다.
}
```
</code></pre>
<!-- raw HTML omitted -->
<h2 id="runtestsinseparateprocesses" class="headerLink">
    <a href="#runtestsinseparateprocesses" class="header-mark"></a>@runTestsInSeparateProcesses</h2><h3 id="테스트-클래스-내의-모든-테스트-메소드가-별도-php프로세스에서-테스트코드를-실행-하는것을-명시할-때" class="headerLink">
    <a href="#%ed%85%8c%ec%8a%a4%ed%8a%b8-%ed%81%b4%eb%9e%98%ec%8a%a4-%eb%82%b4%ec%9d%98-%eb%aa%a8%eb%93%a0-%ed%85%8c%ec%8a%a4%ed%8a%b8-%eb%a9%94%ec%86%8c%eb%93%9c%ea%b0%80-%eb%b3%84%eb%8f%84-php%ed%94%84%eb%a1%9c%ec%84%b8%ec%8a%a4%ec%97%90%ec%84%9c-%ed%85%8c%ec%8a%a4%ed%8a%b8%ec%bd%94%eb%93%9c%eb%a5%bc-%ec%8b%a4%ed%96%89-%ed%95%98%eb%8a%94%ea%b2%83%ec%9d%84-%eb%aa%85%ec%8b%9c%ed%95%a0-%eb%95%8c" class="header-mark"></a>테스트 클래스 내의 모든 테스트 메소드가 별도 PHP프로세스에서 테스트코드를 실행 하는것을 명시할 때</h3><hr>
<p>해당 테스트 클래스 내의 모든 테스트 메소드들이 별도의 PHP 프로세스에서 실행되어야 함을 표시 할 때 사용합니다.</p>
<p>PHPUnit은 직렬화를 통해 Global state를 유지하려 하기 때문에, 직렬화가 불가능한 부분은 <code>@preserveGlobalState</code>를 참조하세요.</p>
<h2 id="runinseparateprocess" class="headerLink">
    <a href="#runinseparateprocess" class="header-mark"></a>@runInSeparateProcess</h2><hr>
<p>해당 테스트 메소드가 별도의 PHP 프로세스에서 실행되어야 함을 표시 할 때 사용합니다.</p>
<p>PHPUnit은 직렬화를 통해 Global state를 유지하려 하기 때문에, 직렬화가 불가능한 부분은 <code>@preserveGlobalState</code>를 참조하세요.</p>
<h2 id="small" class="headerLink">
    <a href="#small" class="header-mark"></a>@small</h2><hr>
<p><code>@group small</code>의 별칭으로, <code>PHP_Invoker</code> 패키지가 설치되어 있고, strict mode가 실행되어 있으면 <strong>1초</strong> 이상 실행 될 경우 실패 처리됩니다.
해당 타임아웃에 관한 정보는 설정 정보 XML의 <code>timeoutForSmallTests</code>속성을 통해 설정 할 수 있습니다.</p>
<p>Medium 테스트는 <code>@large</code> 와 <code>@medium</code>로 마킹된 테스트에 의존적이여서는 안됩니다.</p>
<p>※ <strong>테스트의 실행 시간 제어를 하고자 할 때, <code>@small</code>, <code>@medium</code>, <code>@large</code> 와 같은 어노테이션을 명시적으로 사용해야합니다.</strong></p>
<h2 id="test" class="headerLink">
    <a href="#test" class="header-mark"></a>@test</h2><h3 id="테스트-메소드명을-test로-시작하고싶지-않을-때" class="headerLink">
    <a href="#%ed%85%8c%ec%8a%a4%ed%8a%b8-%eb%a9%94%ec%86%8c%eb%93%9c%eb%aa%85%ec%9d%84-test%eb%a1%9c-%ec%8b%9c%ec%9e%91%ed%95%98%ea%b3%a0%ec%8b%b6%ec%a7%80-%ec%95%8a%ec%9d%84-%eb%95%8c" class="header-mark"></a>테스트 메소드명을 test로 시작하고싶지 않을 때</h3><hr>
<p>테스트 메소드는 메소드명의 prefix로 test를 사용합니다.</p>
<p>테스트 메소드명의 prefix로 <code>test</code>를 사용하지 않는 대안으로, 주석에 <code>@test</code> 어노테이션을 사용하면 테스트 메소드라고 인식됩니다.</p>
<p><figure><a class="lightgallery" href="/images/phpunit-annotations/eeb49a85-fdd7-40ee-99df-60579993b1a3.png" title="/images/phpunit-annotations/eeb49a85-fdd7-40ee-99df-60579993b1a3.png" data-thumbnail="/images/phpunit-annotations/eeb49a85-fdd7-40ee-99df-60579993b1a3.png">
        <img
            
            loading="lazy"
            src="/images/phpunit-annotations/eeb49a85-fdd7-40ee-99df-60579993b1a3.png"
            srcset="/images/phpunit-annotations/eeb49a85-fdd7-40ee-99df-60579993b1a3.png, /images/phpunit-annotations/eeb49a85-fdd7-40ee-99df-60579993b1a3.png 1.5x, /images/phpunit-annotations/eeb49a85-fdd7-40ee-99df-60579993b1a3.png 2x"
            sizes="auto"
            alt="/images/phpunit-annotations/eeb49a85-fdd7-40ee-99df-60579993b1a3.png">
    </a></figure></p>
<p><figure><a class="lightgallery" href="/images/phpunit-annotations/cbdae160-7e46-49e4-9d93-0a3584597625.png" title="/images/phpunit-annotations/cbdae160-7e46-49e4-9d93-0a3584597625.png" data-thumbnail="/images/phpunit-annotations/cbdae160-7e46-49e4-9d93-0a3584597625.png">
        <img
            
            loading="lazy"
            src="/images/phpunit-annotations/cbdae160-7e46-49e4-9d93-0a3584597625.png"
            srcset="/images/phpunit-annotations/cbdae160-7e46-49e4-9d93-0a3584597625.png, /images/phpunit-annotations/cbdae160-7e46-49e4-9d93-0a3584597625.png 1.5x, /images/phpunit-annotations/cbdae160-7e46-49e4-9d93-0a3584597625.png 2x"
            sizes="auto"
            alt="/images/phpunit-annotations/cbdae160-7e46-49e4-9d93-0a3584597625.png">
    </a></figure></p>
<h2 id="testdox" class="headerLink">
    <a href="#testdox" class="header-mark"></a>@testdox</h2><h3 id="testdox-옵션으로-생성되는-문서의-설명을-대체하려-할-때" class="headerLink">
    <a href="#testdox-%ec%98%b5%ec%85%98%ec%9c%bc%eb%a1%9c-%ec%83%9d%ec%84%b1%eb%90%98%eb%8a%94-%eb%ac%b8%ec%84%9c%ec%9d%98-%ec%84%a4%eb%aa%85%ec%9d%84-%eb%8c%80%ec%b2%b4%ed%95%98%eb%a0%a4-%ed%95%a0-%eb%95%8c" class="header-mark"></a>testdox 옵션으로 생성되는 문서의 설명을 대체하려 할 때</h3><hr>
<p><code>--testdox</code>를 옵션으로 주었을때, 메소드의 이름으로부터 만들어진 설명을 오버라이딩 할 수 있습니다.</p>
<p>클래스 또는 메소드의 설명을 더 명확히 만들어 agile document를 만들 수 있습니다.</p>
<p><strong>주의할 점으로는 PHPUnit v7.0까지는 어노테이션 파싱 오류로, @test로 인식되어 동작합니다.</strong></p>
<h2 id="testwith" class="headerLink">
    <a href="#testwith" class="header-mark"></a>@testWith</h2><h3 id="주석을-이용해-파라미터를-주입하고-싶을때" class="headerLink">
    <a href="#%ec%a3%bc%ec%84%9d%ec%9d%84-%ec%9d%b4%ec%9a%a9%ed%95%b4-%ed%8c%8c%eb%9d%bc%eb%af%b8%ed%84%b0%eb%a5%bc-%ec%a3%bc%ec%9e%85%ed%95%98%ea%b3%a0-%ec%8b%b6%ec%9d%84%eb%95%8c" class="header-mark"></a>주석을 이용해 파라미터를 주입하고 싶을때</h3><hr>
<p><code>@dataProvider</code>는 호출될 메소드를 필요로 하지만, 주석만을 이용해 테스트하고자 할 때에는
<code>@testWith</code>를 사용할 수 있습니다.</p>
<p>JSON 포맷은 연관배열로 주입됩니다.</p>
<p><strong>주의 할 점은 여러개의 dataset을 정의할 때에는 라인당 하나씩 지정해야합니다.</strong></p>
<p>아래의 두개의 코드는 동일하게 동작합니다.</p>
<!-- raw HTML omitted -->
<pre><code>/**
 * @param string    $input
 * @param int       $expectedLength
 *
 * @testWith        [&quot;test&quot;, 4]
 *                  [&quot;longer-string&quot;, 13]
 */
public function testStringLength(string $input, int $expectedLength)
{
    $this-&gt;assertSame($expectedLength, strlen($input));
}

/**
 * @param string    $input
 * @param int       $expectedLength
 *
 * @dataProvider    additionProvider
 */
public function testStringLengthWithDataProvider(string $input, int $expectedLength)
{
    $this-&gt;assertSame($expectedLength, strlen($input));
}

public function additionProvider()
{
        return [
                [&quot;test&quot;, 4],
                [&quot;longer-string&quot;, 13]
        ];
}

/**
 * @param array     $array
 * @param array     $keys
 *
 * @testWith        [{&quot;day&quot;: &quot;monday&quot;, &quot;conditions&quot;: &quot;sunny&quot;}, [&quot;day&quot;, &quot;conditions&quot;]]
 */
public function testArrayKeys($array, $keys)
{
    $this-&gt;assertSame($keys, array_keys($array));
}

/**
 * @param array     $array
 * @param array     $keys
 *
 * @dataProvider    additionProvider
 */
public function testArrayKeysWithDataProvider($array, $keys)
{
    $this-&gt;assertSame($keys, array_keys($array));
}

public function additionProvider()
{
        return [
                [[&quot;day&quot; =&gt; &quot;monday&quot;, &quot;conditions&quot; =&gt; &quot;sunny&quot;], [&quot;day&quot;, &quot;conditions&quot;]]
        ];
}
```
</code></pre>
<!-- raw HTML omitted -->
<h2 id="ticket" class="headerLink">
    <a href="#ticket" class="header-mark"></a>@ticket</h2><h3 id="ticket-idjira-이슈-코드와-같은로-테스트를-필터링-할-때" class="headerLink">
    <a href="#ticket-idjira-%ec%9d%b4%ec%8a%88-%ec%bd%94%eb%93%9c%ec%99%80-%ea%b0%99%ec%9d%80%eb%a1%9c-%ed%85%8c%ec%8a%a4%ed%8a%b8%eb%a5%bc-%ed%95%84%ed%84%b0%eb%a7%81-%ed%95%a0-%eb%95%8c" class="header-mark"></a>Ticket ID(JIRA 이슈 코드와 같은)로 테스트를 필터링 할 때</h3><hr>
<p><code>@group</code> 어노테이션의 별칭. ticket ID를 이용하여 테스트를 필터링 할 수 있도록 하여줍니다.</p>
<h2 id="uses" class="headerLink">
    <a href="#uses" class="header-mark"></a>@uses</h2><hr>
<p>테스트에 의해 실행될 코드를 지정합니다.</p>
<p>좋은 예제는 아래와 같이 유닛 테스트 코드에 필요한 Object 값 입니다.</p>
<!-- raw HTML omitted -->
<p>해당 어노테이션에는 정규화 된 클래스명을 사용해야하기때문에,
모호하지 않도록 클래스명 맨 앞에 <code>\</code> 로 시작하는것을 추천합니다.</p>
]]></description></item><item><title>［PHP］Monolog와 함께 로그를 시작하자 - 1</title><link>http://blog.hodory.dev/2019/05/10/php-logging-with-monolog-1/</link><pubDate>Fri, 10 May 2019 00:27:05 +0000</pubDate><author><name>hodory</name></author><guid>http://blog.hodory.dev/2019/05/10/php-logging-with-monolog-1/</guid><description><![CDATA[<h3 id="php에서-로그-남기기" class="headerLink">
    <a href="#php%ec%97%90%ec%84%9c-%eb%a1%9c%ea%b7%b8-%eb%82%a8%ea%b8%b0%ea%b8%b0" class="header-mark"></a>PHP에서 로그 남기기</h3><p>PHP에서는 주로 JS에서 <code>console.log | console.debug</code> 와 유사하게 <!-- raw HTML omitted -->
<code>var_dump | print_r | echo | sys_log | error_log</code> 등 다양한 방식으로 로그를 남기고 있습니다.</p>
<h3 id="monolog란" class="headerLink">
    <a href="#monolog%eb%9e%80" class="header-mark"></a>Monolog란?</h3><p><a href="https://hodory.github.io/2018/04/18/what-is-psr/#PSR-3-Logger-Interface" target="_blank" rel="noopener noreferrer">PSR-3</a>을 준수하고 있는 로깅 프레임워크로,<!-- raw HTML omitted -->
거의 대부분의 로깅 플랫폼과 연결할 수 있는 핸들러(Slack, ElasticSearch, Mail, NewRelic 등)를 제공하고 있습니다.</p>
<p><a href="http://tools.ietf.org/html/rfc5424" target="_blank" rel="noopener noreferrer">RFC 5424</a>(Syslog Protocol이라고 하는데 더 공부해봐야할 것 같습니다.)에 정의된 로그 레벨을 모두 지원하고 있습니다.</p>
<ul>
<li>DEBUG(100)</li>
<li>INFO(200)</li>
<li>NOTICE(250)</li>
<li>WARNING(300)</li>
<li>ERROR(400)</li>
<li>CRITICAL(500)</li>
<li>ALERT(550)</li>
<li>EMERGENCY(600)</li>
</ul>
<!-- raw HTML omitted -->
<h3 id="코어-컨셉httpsgithubcomseldaekmonologblobmasterdoc01-usagemdcore-concepts" class="headerLink">
    <a href="#%ec%bd%94%ec%96%b4-%ec%bb%a8%ec%85%89httpsgithubcomseldaekmonologblobmasterdoc01-usagemdcore-concepts" class="header-mark"></a><a href="https://github.com/Seldaek/monolog/blob/master/doc/01-usage.md#core-concepts" target="_blank" rel="noopener noreferrer">코어 컨셉</a></h3><p>간단하게 Logger Instance에 Record를 추가하면,<!-- raw HTML omitted -->
해당 인스턴스에 추가 해두었던 핸들러에 이벤트를 전파하는 것으로 보입니다.(한개의 로그를 여러곳에 저장할 수 있는 이점을 가지고 있습니다.)</p>
<h3 id="설치-방법" class="headerLink">
    <a href="#%ec%84%a4%ec%b9%98-%eb%b0%a9%eb%b2%95" class="header-mark"></a>설치 방법</h3><p>PHP Composer로 관리할 수 있는 라이브러리이므로 Composer를 이용하여 설치합니다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-perl" data-lang="perl"><span class="line"><span class="cl"><span class="n">composer</span> <span class="k">require</span> <span class="nn">monolog</span><span class="o">/</span><span class="n">monolog</span>
</span></span></code></pre></div><h3 id="사용방법" class="headerLink">
    <a href="#%ec%82%ac%ec%9a%a9%eb%b0%a9%eb%b2%95" class="header-mark"></a>사용방법</h3><p>우선적으로 use를 사용하여 사용할 Namespace를 추가합니다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="o">&lt;?</span><span class="nx">php</span>
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nx">Monolog\Logger</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nx">Monolog\Handler\StreamHandler</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nx">Monolog\Handler\FirePHPHandler</span><span class="p">;</span>
</span></span></code></pre></div><p>Logging Channel의 이름을 설정하여 객체를 생성합니다.</p>
<pre tabindex="0"><code>// Create the logger
$logger = new Logger(&#39;Application&#39;);
</code></pre><p>로그를 전파할 핸들러를 추가합니다.</p>
<ul>
<li>php:stderr 또는 원격이나 로컬 파일 기타에 사용할 <code>Stream Handler</code>를 설정합니다.</li>
<li>Slack Webhook Url으로 보내기 위해 <code>Slack WebHook Handler</code>를 설정합니다.</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="c1">// Now add some handlers
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nv">$logger</span><span class="o">-&gt;</span><span class="na">pushHandler</span><span class="p">(</span><span class="k">new</span> <span class="nx">StreamHandler</span><span class="p">(</span><span class="no">__DIR__</span> <span class="o">.</span> <span class="s1">&#39;/app.log&#39;</span><span class="p">,</span> <span class="nx">Logger</span><span class="o">::</span><span class="na">DEBUG</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="nv">$logger</span><span class="o">-&gt;</span><span class="na">pushHandler</span><span class="p">(</span><span class="k">new</span> <span class="nx">SlackWebhookHandler</span><span class="p">({{</span><span class="nx">WEBHOOK_URL</span><span class="p">}},</span> <span class="p">{{</span><span class="nx">CHANNEL</span><span class="p">}},</span> <span class="p">{{</span><span class="nx">USERNAME</span><span class="p">}},</span> <span class="k">false</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">false</span><span class="p">,</span> <span class="k">false</span><span class="p">,</span> <span class="nx">Logger</span><span class="o">::</span><span class="na">INFO</span><span class="p">));</span>
</span></span></code></pre></div><p>아래와 같은 함수를 호출하여 로그를 쌓을 수 있습니다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="c1">// You can now use your logger
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nv">$logger</span><span class="o">-&gt;</span><span class="na">info</span><span class="p">(</span><span class="s1">&#39;Welcome To Monolog&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="sd">/*********
</span></span></span><span class="line"><span class="cl"><span class="sd"> * app.log
</span></span></span><span class="line"><span class="cl"><span class="sd"> *********/</span>
</span></span><span class="line"><span class="cl"><span class="c1">// [2019-05-10 17:03:10] Application.INFO: Welcome To Monolog [] []
</span></span></span></code></pre></div><p>Legacy한 프로젝트에서는 주로 컨테이너 객체라는 개념이 없는 경우가 많은데,<!-- raw HTML omitted -->
프로젝트 내부에서도 글로벌 변수에 담아서 Logger 객체를 사용해야하나 고민하였습니다.
문서를 확인하다보니 이를 위한 <code>Monolog\Registry</code>라는 유틸 클래스가 있었고,
이와 같이 사용할 수 있습니다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="sd">/****************
</span></span></span><span class="line"><span class="cl"><span class="sd"> * bootstrap.php
</span></span></span><span class="line"><span class="cl"><span class="sd"> ****************/</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="o">&lt;?</span><span class="nx">php</span>
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nx">Monolog\Handler\StreamHandler</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nx">Monolog\Logger</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nx">Monolog\Registry</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$logger</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Logger</span><span class="p">(</span><span class="s1">&#39;Application&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nv">$logger</span><span class="o">-&gt;</span><span class="na">pushHandler</span><span class="p">(</span><span class="k">new</span> <span class="nx">StreamHandler</span><span class="p">(</span><span class="no">__DIR__</span> <span class="o">.</span> <span class="s1">&#39;/app.log&#39;</span><span class="p">,</span> <span class="nx">Logger</span><span class="o">::</span><span class="na">DEBUG</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="nx">Registry</span><span class="o">::</span><span class="na">addLogger</span><span class="p">(</span><span class="nv">$logger</span><span class="p">,</span><span class="s1">&#39;ApplicationLog&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="sd">/****************
</span></span></span><span class="line"><span class="cl"><span class="sd"> * foo.php
</span></span></span><span class="line"><span class="cl"><span class="sd"> ****************/</span>
</span></span><span class="line"><span class="cl"><span class="o">&lt;?</span><span class="nx">php</span>
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nx">Monolog\Registry</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">require_once</span> <span class="no">__DIR__</span> <span class="o">.</span> <span class="s2">&#34;/bootstrap.php&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">function</span> <span class="nf">logInfo</span><span class="p">(</span><span class="nv">$message</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$logger</span> <span class="o">=</span> <span class="nx">Registry</span><span class="o">::</span><span class="na">getInstance</span><span class="p">(</span><span class="s1">&#39;ApplicationLog&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$logger</span><span class="o">-&gt;</span><span class="na">info</span><span class="p">(</span><span class="nv">$message</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">logInfo</span><span class="p">(</span><span class="s1">&#39;I am Global Logging&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="sd">/*********
</span></span></span><span class="line"><span class="cl"><span class="sd"> * app.log
</span></span></span><span class="line"><span class="cl"><span class="sd"> *********/</span>
</span></span><span class="line"><span class="cl"><span class="c1">// [2019-05-10 17:03:10] Application.INFO: I am Global Logging [] []
</span></span></span></code></pre></div><p>이와 같이 bootstrap.php 파일에서 Register에 등록한 Logger 객체는<!-- raw HTML omitted -->
global 변수를 사용하지 않아도 클래스 / 함수 상관 없이 어디에서든지 사용 가능해집니다.</p>
<p>더 좋은 활용 방법이 있으시다면 공유 부탁드리겠습니다.</p>
<p>자세한 사항은 <a href="https://github.com/Seldaek/monolog/blob/master/doc/01-usage.md" target="_blank" rel="noopener noreferrer">Monolog-Usage</a>에서 확인 하실 수 있습니다.</p>
]]></description></item><item><title>［Laravel］with() | has() | whereHas() 뭐가 다를까</title><link>http://blog.hodory.dev/2019/04/27/eloquent-orm-with-has-where-has/</link><pubDate>Sat, 27 Apr 2019 00:15:24 +0000</pubDate><author><name>hodory</name></author><guid>http://blog.hodory.dev/2019/04/27/eloquent-orm-with-has-where-has/</guid><description><![CDATA[<p>ORM도 익숙하지 않지만, Eloquent ORM은 처음 접해보면서,</p>
<p>쿼리빌더를 사용하는것은 ORM스럽지 못하다 느껴 최대한 ORM으로 풀고 싶었습니다</p>
<p>검색으로 알아보던중 <a href="https://laravel.kr/docs/5.8/eloquent-relationships" target="_blank" rel="noopener noreferrer">Eloquent:Relations</a>에 대해 알게되었습니다.</p>
<p><a href="https://laravel.kr/docs/5.8/eloquent-relationships#%EA%B4%80%EA%B3%84%EC%9D%98%20%EC%A1%B4%EC%9E%AC%20%EC%97%AC%EB%B6%80%20%EC%BF%BC%EB%A6%AC%20%EC%A7%88%EC%9D%98%ED%95%98%EA%B8%B0" target="_blank" rel="noopener noreferrer">라라벨 공식 문서 : 관계의 존재 여부 쿼리 질의하기</a></p>
<p>예를들어 <code>User</code>가 여러개의 <code>Post</code> 를 가지고 있다면,<!-- raw HTML omitted -->
<code>User</code> 클래스에 <code>$this-&gt;hasMany('App\Post');</code>를 설정해 두었을 것이라는 가정하에 설명을 진행하도록 하겠습니다.</p>
<!-- raw HTML omitted -->
<h2 id="with" class="headerLink">
    <a href="#with" class="header-mark"></a>with()</h2><ul>
<li>user
<ul>
<li>id</li>
<li>name</li>
</ul>
</li>
<li>post
<ul>
<li>id</li>
<li>user_id</li>
<li>title
이와 같은 테이블 구조에서 유저가 작성한 글의 제목을 조회하려면</li>
</ul>
</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="nv">$users</span> <span class="o">=</span> <span class="nx">selectAll</span><span class="p">(</span><span class="s2">&#34;select * from `user`);
</span></span></span><span class="line"><span class="cl"><span class="s2">foreach (</span><span class="si">$users</span><span class="s2"> as </span><span class="si">$user</span><span class="s2">) {
</span></span></span><span class="line"><span class="cl"><span class="s2">    </span><span class="si">$user[&#39;post_title&#39;]</span><span class="s2"> = selectOne(&#34;</span><span class="nx">select</span> <span class="sb">`title`</span> <span class="nx">from</span> <span class="sb">`post`</span> <span class="nx">where</span> <span class="sb">`post`</span><span class="o">.</span><span class="sb">`user_id`</span> <span class="o">=</span> <span class="p">{</span><span class="nv">$user</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]}</span><span class="s2">&#34;);
</span></span></span><span class="line"><span class="cl"><span class="s2">}
</span></span></span></code></pre></div><p>회원을 조회하고, 회원들을 순회하며 게시물을 조회하는 코드입니다.<!-- raw HTML omitted -->
이 경우 회원이 1000명일 경우 쿼리는 1001번 실행하게 됩니다.<!-- raw HTML omitted -->
이것을 <a href="https://zetawiki.com/wiki/N%2B1_%EC%BF%BC%EB%A6%AC_%EB%AC%B8%EC%A0%9C" target="_blank" rel="noopener noreferrer">N+1쿼리 문제</a> 라고 합니다.</p>
<p>사람들에 따라 직관적이여서 선호하기도 하고,<!-- raw HTML omitted -->
join으로 실행시 쿼리가 오래 걸리면 이와 같이 분리하여 사용하기도 합니다.
또는 join으로 해결할 수 없는 상황에서도 사용합니다.</p>
<p>이 문제를 해결 하기 위해</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="err">$</span><span class="n">users</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">selectAll</span><span class="p">(</span><span class="s2">&#34;select `user`.*,`post`.`title` as post_title from `user` left join `post` on `post`.`user_id` = `user`.`id`&#34;</span><span class="p">);</span><span class="w"> 
</span></span></span></code></pre></div><p>join으로 해결할 수 없는 경우를 제외 하고는 위와 같이 join을 사용해서 조회 할 수 있습니다.</p>
<p>또한 이 문제는 ORM에서 주로 발생 합니다.<!-- raw HTML omitted -->
ORM을 사용하면 user와 post의 관계를 설정하고, 아래와 같이 사용할 수 있습니다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="k">foreach</span> <span class="p">(</span><span class="nx">User</span><span class="o">::</span><span class="na">all</span><span class="p">()</span> <span class="k">as</span> <span class="nv">$user</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">echo</span> <span class="nv">$user</span><span class="o">-&gt;</span><span class="na">post</span><span class="o">-&gt;</span><span class="na">title</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>해당 코드는</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">select</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">;</span><span class="w"> </span><span class="o">#</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p">,</span><span class="w"> </span><span class="mi">4</span><span class="p">,</span><span class="w"> </span><span class="mi">5</span><span class="p">,</span><span class="w"> </span><span class="mi">6</span><span class="p">....</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">select</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="o">`</span><span class="n">post</span><span class="o">`</span><span class="w"> </span><span class="k">where</span><span class="w"> </span><span class="n">id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">select</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="o">`</span><span class="n">post</span><span class="o">`</span><span class="w"> </span><span class="k">where</span><span class="w"> </span><span class="n">id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">2</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">select</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="o">`</span><span class="n">post</span><span class="o">`</span><span class="w"> </span><span class="k">where</span><span class="w"> </span><span class="n">id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">3</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">select</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="o">`</span><span class="n">post</span><span class="o">`</span><span class="w"> </span><span class="k">where</span><span class="w"> </span><span class="n">id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">4</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">...</span><span class="w">
</span></span></span></code></pre></div><p>user를 조회하고, user의 수 만큼 post를 조회합니다.<!-- raw HTML omitted -->
위의 N+1 문제와 같은 문제입니다.</p>
<p>이 문제를 해결 하기 위한 방안으로는 <a href="https://zetawiki.com/wiki/%EC%A6%89%EC%8B%9C_%EB%A1%9C%EB%94%A9" target="_blank" rel="noopener noreferrer">즉시 로딩(Eager Loading)</a>이 있습니다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="k">foreach</span> <span class="p">(</span><span class="nx">User</span><span class="o">::</span><span class="na">with</span><span class="p">(</span><span class="s1">&#39;posts&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">()</span> <span class="k">as</span> <span class="nv">$user</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">echo</span> <span class="nv">$user</span><span class="o">-&gt;</span><span class="na">post</span><span class="o">-&gt;</span><span class="na">title</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>이와같이 <code>with()</code>를 사용하면 미리 선언한 관계를 사용하여 같이 가져올수있습니다.<!-- raw HTML omitted -->
언뜻 보기엔 별 다를바 없어 보이는 코드이지만 with 메소드를 사용하면, user와 연관된 post를 미리 로드합니다.</p>
<p>실행되는 쿼리는</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">select</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">;</span><span class="w"> </span><span class="o">#</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p">,</span><span class="w"> </span><span class="mi">4</span><span class="p">,</span><span class="w"> </span><span class="mi">5</span><span class="p">,</span><span class="w"> </span><span class="mi">6</span><span class="p">....</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">select</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="o">`</span><span class="n">post</span><span class="o">`</span><span class="w"> </span><span class="k">where</span><span class="w"> </span><span class="o">`</span><span class="n">id</span><span class="o">`</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p">,</span><span class="w"> </span><span class="mi">4</span><span class="p">,</span><span class="w"> </span><span class="mi">5</span><span class="p">,</span><span class="w"> </span><span class="mi">6</span><span class="p">,</span><span class="w"> </span><span class="p">...);</span><span class="w">
</span></span></span></code></pre></div><p>위와 같이 쿼리 2개만 실행이 되어 쿼리 실행을 최소화 할 수 있습니다.</p>
<p><code>with()</code> 메소드의 2번째 파라미터를 사용해 제한 할 수도 있습니다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="k">foreach</span><span class="p">(</span><span class="nx">User</span><span class="o">::</span><span class="na">with</span><span class="p">([</span><span class="s1">&#39;posts&#39;</span> <span class="o">=&gt;</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$query</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$query</span><span class="o">-&gt;</span><span class="na">where</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span> <span class="s1">&#39;like&#39;</span><span class="p">,</span> <span class="s1">&#39;치킨%&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">])</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">()</span> <span class="k">as</span> <span class="nv">$user</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">echo</span> <span class="nv">$user</span><span class="o">-&gt;</span><span class="na">post</span><span class="o">-&gt;</span><span class="na">title</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">;</span>
</span></span></code></pre></div><p><code>user</code>를 조회할 때, <code>치킨</code>으로 시작하는 <code>post</code>를 같이 미리 로드 할 수 있습니다.</p>
<h2 id="has" class="headerLink">
    <a href="#has" class="header-mark"></a>has()</h2><p><code>has()</code> 메소드를 이용하면, 해당 관계에서 최소 한개를 가지고 있는 결과를 조회합니다</p>
<p><code>User::has('posts')-&gt;get();</code>을 사용하면 post를 한개라도 작성한 회원을 조회할것입니다.</p>
<p>쿼리로 표현한다면, 아래와 비슷할것 같습니다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">select</span><span class="w"> </span><span class="o">*</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">from</span><span class="w"> </span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="k">join</span><span class="w"> </span><span class="o">`</span><span class="n">post</span><span class="o">`</span><span class="w"> </span><span class="k">on</span><span class="w"> </span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">id</span><span class="o">`</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">`</span><span class="n">post</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">user_id</span><span class="o">`</span><span class="w">
</span></span></span></code></pre></div><p>has 메소드는 2번째 파라미터에 <code>operator</code> 와 3번째 파라미터에 <code>count</code>를 사용할 수 있습니다.<!-- raw HTML omitted --></p>
<p>이 파라미터를 사용하면 예로 5개 이상의 글을 작성한 회원을 찾을 수 있습니다.
Eloquent를 사용하면 이와같이 작성 할 수 있습니다.<!-- raw HTML omitted -->
<code>User::has('posts', '&gt;=', 5)-&gt;get();</code></p>
<h2 id="wherehas" class="headerLink">
    <a href="#wherehas" class="header-mark"></a>whereHas()</h2><p>그렇다면 <code>whereHas()</code>는 뭐가 다를까요? <!-- raw HTML omitted -->
<code>whereHas()</code> 메소드는 두번째 파라미터로 콜백을 받아 더 복잡한 쿼리를 처리할 수 있습니다.</p>
<p>위와 같은 모델링에서 게시글의 제목이 <code>치킨</code>으로 시작하는 글을 작성한 회원을 찾는다면 아래와 같을것 입니다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="nx">User</span><span class="o">::</span><span class="na">whereHas</span><span class="p">(</span><span class="s1">&#39;posts&#39;</span><span class="p">,</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$query</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$query</span><span class="o">-&gt;</span><span class="na">where</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span> <span class="s1">&#39;like&#39;</span><span class="p">,</span> <span class="s1">&#39;치킨%&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">();</span>
</span></span></code></pre></div><p>쿼리로 표현한다면</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">select</span><span class="w"> </span><span class="o">*</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">from</span><span class="w"> </span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="k">join</span><span class="w"> </span><span class="o">`</span><span class="n">post</span><span class="o">`</span><span class="w"> </span><span class="k">on</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">id</span><span class="o">`</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">`</span><span class="n">post</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">user_id</span><span class="o">`</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">and</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">`</span><span class="n">post</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">title</span><span class="o">`</span><span class="w"> </span><span class="k">like</span><span class="w"> </span><span class="s1">&#39;치킨%&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">OR</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">select</span><span class="w"> </span><span class="o">*</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">from</span><span class="w"> </span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="k">join</span><span class="w"> </span><span class="o">`</span><span class="n">post</span><span class="o">`</span><span class="w"> </span><span class="k">on</span><span class="w"> </span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">id</span><span class="o">`</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">`</span><span class="n">post</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">user_id</span><span class="o">`</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">where</span><span class="w"> </span><span class="o">`</span><span class="n">post</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">title</span><span class="o">`</span><span class="w"> </span><span class="k">like</span><span class="w"> </span><span class="s1">&#39;치킨%&#39;</span><span class="w">
</span></span></span></code></pre></div><p>이와 같이 표현할 수 있을것 같습니다.</p>
<blockquote>
<p>참고자료</p>
</blockquote>
<ul>
<li><a href="https://stackoverflow.com/questions/30231862/laravel-eloquent-has-with-wherehas-what-do-they-mean?answertab=votes#tab-top" title="해당 링크로 이동" target="_blank" rel="noopener noreferrer">Stack Overflow -&gt; Laravel - Eloquent “Has”, “With”, “WhereHas” - What do they mean?</a></li>
<li><a href="https://laravel.kr/docs/5.8/eloquent-relationships" title="해당 링크로 이동" target="_blank" rel="noopener noreferrer">Laravel 공식 문서 -&gt; Eloquent: Relationships - 관계</a></li>
</ul>
]]></description></item><item><title>［PHP］배열 key의 min 또는 max 구하기</title><link>http://blog.hodory.dev/2018/10/27/php-array-column/</link><pubDate>Sat, 27 Oct 2018 15:23:32 +0000</pubDate><author><name>hodory</name></author><guid>http://blog.hodory.dev/2018/10/27/php-array-column/</guid><description><![CDATA[<p>PHP로 개발을 하다보면, 연관 배열을 많이 쓰게되는데요</p>
<p>아래와 같은 배열에서 cnt의 max값과 min값을 구하려면 어떻게 해야할까요?</p>
<!-- raw HTML omitted -->
<p>또는 이러한 배열에서 특정 키값의 값만 뽑아 배열로 만들고싶다면 어떻게 해야할까요?</p>
<pre tabindex="0"><code>array(3) {
  [0]=&gt;
  array(3) {
    [&#34;title&#34;]=&gt;
    string(5) &#34;apple&#34;
    [&#34;cnt&#34;]=&gt;
    int(1) &#34;5&#34;
    [&#34;color&#34;]=&gt;
    string(5) &#34;green&#34;
  }
  [1]=&gt;
  array(3) {
    [&#34;name&#34;]=&gt;
    string(4) &#34;pear&#34;
    [&#34;cnt&#34;]=&gt;
    int(1) &#34;8&#34;
    [&#34;color&#34;]=&gt;
    string(6) &#34;yellow&#34;
  }
</code></pre><p>배열을 순회하여 해당 키의 값을 뽑아 배열을 만들고,</p>
<p>최소 또는 최대값이 필요하면 min 또는 max 함수를 적용해야 한다 생각했습니다.</p>
<p>그런 코드는 만들고 싶지 않아 검색을 하다보니</p>
<p>PHP 5.5버전부터는 <a href="http://php.net/manual/en/function.array-column.php" title="해당 링크로 이동" target="_blank" rel="noopener noreferrer">array_column</a>을 사용하면 쉽게 처리할 수 있었습니다.</p>
<p><code>array array_column ( array $input , mixed $column_key [, mixed $index_key = NULL ] )</code> 와 같은 구조로</p>
<p>첫번째 파라미터에 해당 배열을 넣고, 두번째 파라미터에 뽑아낼 key를 넣으면 됩니다.</p>
<p>예를들어 아래와 같은 연관 배열에서 cnt로만 배열을 만들려면 이와 같이 할 수 있습니다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="o">&lt;?</span><span class="nx">php</span>
</span></span><span class="line"><span class="cl"><span class="nv">$arr</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;title&#39;</span><span class="o">=&gt;</span><span class="s1">&#39;title1&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;cnt&#39;</span><span class="o">=&gt;</span><span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;color&#39;</span><span class="o">=&gt;</span><span class="s1">&#39;blue&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;title&#39;</span><span class="o">=&gt;</span><span class="s1">&#39;title2&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;cnt&#39;</span><span class="o">=&gt;</span><span class="mi">3</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;color&#39;</span><span class="o">=&gt;</span><span class="s1">&#39;blue&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">],</span>
</span></span><span class="line"><span class="cl"><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$cntArr</span> <span class="o">=</span> <span class="nx">array_column</span><span class="p">(</span><span class="nv">$arr</span><span class="p">,</span> <span class="s1">&#39;cnt&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">var_dump</span><span class="p">(</span><span class="nv">$cntArr</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">### Result 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">array</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">int</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">int</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>또한 세번째 파라미터로는 index_key를 넣을 수 있는데요</p>
<p>return 할 배열의 키로 사용할 값을 넣으면 됩니다 예를들어 이렇게 쓸 수 있을것 같았습니다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="o">&lt;?</span><span class="nx">php</span>
</span></span><span class="line"><span class="cl"><span class="c1">// example code
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nv">$arr</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;idx&#39;</span> <span class="o">=&gt;</span> <span class="mi">2555</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;title&#39;</span><span class="o">=&gt;</span><span class="s1">&#39;title1&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;cnt&#39;</span><span class="o">=&gt;</span><span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;color&#39;</span><span class="o">=&gt;</span><span class="s1">&#39;blue&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;idx&#39;</span> <span class="o">=&gt;</span> <span class="mi">2982</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;title&#39;</span><span class="o">=&gt;</span><span class="s1">&#39;title2&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;cnt&#39;</span><span class="o">=&gt;</span><span class="mi">3</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;color&#39;</span><span class="o">=&gt;</span><span class="s1">&#39;blue&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">],</span>
</span></span><span class="line"><span class="cl"><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$cntArr</span> <span class="o">=</span> <span class="nx">array_column</span><span class="p">(</span><span class="nv">$arr</span><span class="p">,</span> <span class="s1">&#39;cnt&#39;</span><span class="p">,</span> <span class="s1">&#39;idx&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">var_dump</span><span class="p">(</span><span class="nv">$cntArr</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">### Result
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">array</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="p">[</span><span class="mi">2555</span><span class="p">]</span><span class="o">=&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">int</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">[</span><span class="mi">2982</span><span class="p">]</span><span class="o">=&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">int</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>이와같이 사용하면 해당 idx의 cnt를 뽑을 수 있어 더 효율적으로 사용할 수 있을거 같습니다.</p>
<p>더 좋은 사용 방안 있으시면 댓글로 부탁드리겠습니다.</p>
<blockquote>
<p>참고자료</p>
</blockquote>
<ul>
<li><a href="https://stackoverflow.com/questions/17339421/find-highest-value-in-multidimensional-array" title="해당 링크로 이동" target="_blank" rel="noopener noreferrer">StackOverFlow - Find highest value in multidimensional array</a></li>
<li><a href="https://secure.php.net/manual/en/function.array-column.php" title="해당 링크로 이동" target="_blank" rel="noopener noreferrer">PHP 공식문서 - array_column()</a></li>
</ul>
]]></description></item><item><title>［PHP］ PHP4.x 버전과 PHP 5.x 버전 비교(Comparison between PHP4 and PHP5)</title><link>http://blog.hodory.dev/2018/04/20/php4-vs-php5/</link><pubDate>Fri, 20 Apr 2018 02:04:12 +0000</pubDate><author><name>hodory</name></author><guid>http://blog.hodory.dev/2018/04/20/php4-vs-php5/</guid><description><![CDATA[<h3 id="php5에서-무엇이-바뀌었을까" class="headerLink">
    <a href="#php5%ec%97%90%ec%84%9c-%eb%ac%b4%ec%97%87%ec%9d%b4-%eb%b0%94%eb%80%8c%ec%97%88%ec%9d%84%ea%b9%8c" class="header-mark"></a>PHP5에서 무엇이 바뀌었을까?</h3><ul>
<li>젠드엔진2가 내장되었습니다.</li>
<li>PHP GCI 버전이 <code>php.exe</code> 에서 <code>php-cgi.exe</code> 로 변경되었습니다.</li>
<li>PHP CLI 버전이 <code>cli/php.exe</code> 에서 주 디렉토리로 변경되었습니다.</li>
<li>PHP CLI 버전은 <code>php.ini</code> 지시어 설정과 상관없이 항상 전역 <code>$argv</code>(Array of arguments passed to script) 와 <code>$argc</code>(The number of arguments passed to script) 변수를 가지며, <code>register_argc_argv</code>(argv와 argc 변수를 선언할지 여부 설정)를 <code>off</code>로 설정해도 영향을 미치지 않습니다.</li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>ISAPI 모듈들의 이름이 php4xxx에서 php5xxx로 바뀌었습니다.</li>
<li>프로퍼티가 없는 객체를 &ldquo;빈&rdquo; 것으로 판단하지 않습니다.</li>
<li>인터페이스 등을 사용할 경우, 사용 전 선언해야합니다.</li>
<li>포함한 파일에 함수정의가 있을경우, 그 파일이 두번 포함 되었을 때,PHP5에서는 치명적인 오류가 발생합니다. include_once를 사용하길 권장합니다.</li>
<li>키워드
<ul>
<li>예외처리(try()-catch()-finally()[v5.5~])</li>
<li>네임스페이스[v5.3~]</li>
<li>인터페이스(interface,implements)</li>
<li>추상클래스(abstract)</li>
<li>접근제어자(private,protected,public)</li>
<li>instanceof : 객체의 클래스 확인</li>
<li>clone : 객체 복제</li>
<li>컴파일 상수
<ul>
<li><code>__NAMESPACE__</code> [v5.3~]</li>
<li><code>__DIR__</code> [v5.3~]</li>
</ul>
</li>
</ul>
</li>
<li>DataBase
<ul>
<li>MySQL 클라이언트 라이브러리를 포함하지 않습니다.</li>
<li>MySQL 4.1 이상에서 동작하는 <a href="https://php.net/manual/kr/ref.mysqli.php" title="공식 문서로 이동" target="_blank" rel="noopener noreferrer">MySQLi</a>가 추가되었습니다.</li>
<li><a href="https://php.net/manual/kr/ref.sqlite.php" target="_blank" rel="noopener noreferrer">SQLite</a> 확장 모듈이 포함됩니다.</li>
</ul>
</li>
<li>새로운 함수가 추가되었습니다.(New Functions)
<ul>
<li>배열 (9개)
<ul>
<li><a href="https://php.net/manual/kr/function.array-combine.php" target="_blank" rel="noopener noreferrer">array_combine()</a> : 하나의 배열은 키로, 하나의 배열은 값으로 가지는 배열 생성 합니다.</li>
<li><a href="https://php.net/manual/kr/function.array-walk-recursive.php" target="_blank" rel="noopener noreferrer">array_walk_recursive()</a> : 배열의 모든 원소에 사용자 함수를 적용합니다.</li>
<li>이 외의 7개 함수</li>
</ul>
</li>
<li>iconv (7개)
<ul>
<li><a href="https://php.net/manual/kr/function.iconv-strlen.php" target="_blank" rel="noopener noreferrer">iconv_strlen()</a> : 문자열의 문자 수를 반환 합니다.</li>
<li><a href="https://php.net/manual/kr/function.iconv-strpos.php" target="_blank" rel="noopener noreferrer">iconv_strpos()</a> : haystack에서 needle이 처음으로 나타나는 위치를 찾습니다.</li>
<li><a href="https://php.net/manual/kr/function.iconv-strrpos.php" target="_blank" rel="noopener noreferrer">iconv_strrpos()</a> : haystack에서 needle이 마지막으로 나타나는 위치를 찾습니다.</li>
<li><a href="https://php.net/manual/kr/function.iconv-substr.php" target="_blank" rel="noopener noreferrer">iconv_substr()</a> : 문자열의 일부를 잘라냅니다.</li>
<li>이 외의 3개 함수</li>
</ul>
</li>
<li>스트림 (8개)
<ul>
<li><a href="https://php.net/manual/kr/function.stream-copy-to-stream.php" target="_blank" rel="noopener noreferrer">stream_copy_to_stream()</a> : 한 스트림의 데이터를 다른 스트림으로 복제합니다.</li>
<li><a href="https://php.net/manual/kr/function.stream-get-line.php" target="_blank" rel="noopener noreferrer">stream_get_line()</a> : 스트림 자원에서 주어진 구분자로 나타나는 열을 얻습니다.</li>
<li>이 외의 6개 함수</li>
</ul>
</li>
<li>날짜와 시간 관련 (4개)
<ul>
<li><a href="https://php.net/manual/kr/function.idate.php" target="_blank" rel="noopener noreferrer">idate()</a> : 지역 날짜/시간을 정수로 바꿉니다.</li>
<li><a href="https://php.net/manual/kr/function.date-sunset.php" target="_blank" rel="noopener noreferrer">date_sunset()</a> : 주어진 날짜와 위치의 일몰 시간을 반환합니다.</li>
<li><a href="https://php.net/manual/kr/function.date-sunrise.php" target="_blank" rel="noopener noreferrer">date_sunrise()</a> : 주어진 날짜와 위치의 일출 시간을 반환합니다.</li>
<li><a href="https://php.net/manual/kr/function.time-nanosleep.php" target="_blank" rel="noopener noreferrer">time_nanosleep()</a> : 초와 나노초의 수만큼 지연합니다.</li>
</ul>
</li>
<li>문자열 (3개)
<ul>
<li><a href="https://php.net/manual/kr/function.str-split.php" target="_blank" rel="noopener noreferrer">str_split()</a> : 문자열을 배열로 변환합니다.</li>
<li><a href="https://php.net/manual/kr/function.strpbrk.php" target="_blank" rel="noopener noreferrer">strbrk()</a> : 문자열에서 문자 세트에 있는 문자를 검색합니다.(대소문자 구분하여 세트중 한글자라도 먼저 나오는것을 찾습니다.)</li>
<li><a href="https://php.net/manual/kr/function.substr-compare.php" target="_blank" rel="noopener noreferrer">substr_compare()</a> : 두 문자열을 offset부터 length까지(대소문자 구분없이:옵션) 바이너리로 안전하게 비교합니다.</li>
</ul>
</li>
<li>인터베이스 (19개)</li>
<li>기타 (30개)
<ul>
<li><a href="https://php.net/manual/kr/function.file-put-contents.php" target="_blank" rel="noopener noreferrer">file_put_contents()</a> : 문자열을 파일로 씁니다.</li>
<li><a href="https://php.net/manual/kr/function.get-headers.php" target="_blank" rel="noopener noreferrer">get_headers()</a> : HTTP 요청의 응답으로 서버가 보낸 모든 헤더를 가져옵니다.</li>
<li><a href="https://php.net/manual/kr/function.http-build-query.php" target="_blank" rel="noopener noreferrer">http_build_query()</a> : 배열을 이용하여 URL-encode한 쿼리 문자열을 생성합니다.</li>
<li><a href="https://php.net/manual/kr/function.scandir.php" target="_blank" rel="noopener noreferrer">scandir()</a> : 지정한 경로 안에 파일과 디렉토리 목록을 배열로 반환합니다.</li>
<li>이 외의 27개 함수</li>
</ul>
</li>
<li>자세한 내용은 <a href="https://php.net/manual/kr/migration5.functions.php" target="_blank" rel="noopener noreferrer">해당링크</a>에서 확인 하실 수 있습니다.</li>
</ul>
</li>
<li>새로운 지시어 (<code>php.ini</code> 지시어)
<ul>
<li>mail.force_extra_parameter</li>
<li><a href="https://php.net/manual/kr/ini.core.php#ini.register-long-arrays" target="_blank" rel="noopener noreferrer">register_long_arrays</a></li>
<li><a href="https://php.net/manual/kr/session.configuration.php#ini.session.hash-function" target="_blank" rel="noopener noreferrer">session.hash_function</a> : 해시 함수 선택(MD5 or SHA-1)</li>
<li><a href="https://php.net/manual/kr/session.configuration.php#ini.session.hash-bits-per-character" target="_blank" rel="noopener noreferrer">session.hash_bits_per_character</a></li>
<li><a href="https://php.net/manual/kr/ini.core.php#ini.zend.ze1-compatibility-mode" target="_blank" rel="noopener noreferrer">zend.ze1_compatibility_mode</a> : 젠드엔진1 (PHP 4)호환모드 활성화</li>
</ul>
</li>
</ul>
<h5 id="기타-자세한-사항은-해당링크httpsphpnetmanualkrmigration5php에서-확인-하실-수-있습니다" class="headerLink">
    <a href="#%ea%b8%b0%ed%83%80-%ec%9e%90%ec%84%b8%ed%95%9c-%ec%82%ac%ed%95%ad%ec%9d%80-%ed%95%b4%eb%8b%b9%eb%a7%81%ed%81%achttpsphpnetmanualkrmigration5php%ec%97%90%ec%84%9c-%ed%99%95%ec%9d%b8-%ed%95%98%ec%8b%a4-%ec%88%98-%ec%9e%88%ec%8a%b5%eb%8b%88%eb%8b%a4" class="header-mark"></a>기타 자세한 사항은 <a href="https://php.net/manual/kr/migration5.php" target="_blank" rel="noopener noreferrer">해당링크</a>에서 확인 하실 수 있습니다.</h5><blockquote>
<p>참고자료</p>
</blockquote>
<ul>
<li><a href="https://php.net/manual/kr/migration5.php" title="해당 링크로 이동" target="_blank" rel="noopener noreferrer">PHP 공식문서 - PHP4에서 PHP 5.0.x로 이행</a></li>
</ul>
]]></description></item><item><title>［PHP］ PSR(PHP Standards Recommendations)이란?</title><link>http://blog.hodory.dev/2018/04/18/what-is-psr/</link><pubDate>Wed, 18 Apr 2018 02:28:50 +0000</pubDate><author><name>hodory</name></author><guid>http://blog.hodory.dev/2018/04/18/what-is-psr/</guid><description><![CDATA[<h3 id="psr이란" class="headerLink">
    <a href="#psr%ec%9d%b4%eb%9e%80" class="header-mark"></a>PSR이란?</h3><p>PHP Standards Recommendations의 약자로 <a href="https://www.php-fig.org/" title="PHP-FIG로 이동" target="_blank" rel="noopener noreferrer">PHP-FIG(PHP-FrameWork Interop Group)</a>에서 만든 표준 권고안입니다.</p>
<ul>
<li><a href="#PSR-0-DEPRECATED-Autoloading-Standard" rel="">PSR-0</a></li>
<li><a href="#PSR-1-Basic-Coding-Standard" rel="">PSR-1</a></li>
<li><a href="#PSR-2-Coding-Style-Guide" rel="">PSR-2</a></li>
<li><a href="#PSR-3-Logger-Interface" rel="">PSR-3</a></li>
<li><a href="#PSR-4-Autoloader" rel="">PSR-4</a></li>
</ul>
<!-- raw HTML omitted -->
<ul>
<li>작성예정 목록
<ul>
<li>PSR-6</li>
<li>PSR-7</li>
<li>PSR-11</li>
<li>PSR-13</li>
<li>PSR-15</li>
<li>PSR-16</li>
</ul>
</li>
</ul>
<h4 id="psr-0-deprecated--autoloading-standard" class="headerLink">
    <a href="#psr-0-deprecated--autoloading-standard" class="header-mark"></a>PSR-0 (DEPRECATED) : Autoloading Standard</h4><p>오토로딩 표준으로 PSR-4가 제정되며 DEPRECATED 되었습니다.</p>
<ul>
<li><code>\&lt;Vendor Name&gt;\(&lt;NameSpace&gt;\)*&lt;Class Name&gt;</code>의 구조를 따릅니다.</li>
<li>각 네임스페이스는 <code>(&quot;Vendor Name&quot;)</code>이 최상위 네임스페이스로 있어야합니다.</li>
<li>각 네임스페이스는 원하는 만큼 하위 네임스페이스를 가질 수 있습니다.</li>
<li>각 네임스페이스 구분자는 파일시스템에서 로딩될때 <code>DIRECTORY_SEPARATOR</code>로 변환됩니다.</li>
<li>클래스명의 각 <code>_</code> 문자는 <code>DIRECTORY_SEPARATOR</code>로 변환됩니다.</li>
<li>기타 자세한 사항은 <a href="https://www.php-fig.org/psr/psr-0/" title="PSR-0 문서로 이동" target="_blank" rel="noopener noreferrer">PSR-0</a>에서 확인 가능합니다.</li>
</ul>
<h5 id="example" class="headerLink">
    <a href="#example" class="header-mark"></a>Example)</h5><p><code>\Doctrine\Commone\IsolatedClassLoader</code>
<code>=&gt;/path/to/project/lib/vendor/Doctrine/Common/IsolatedClassLoader.php</code>
<code>\Symfony\Core\Request</code>
<code>=&gt;/path/to/project/lib/vendor/Symfony/Core/Request.php</code></p>
<h4 id="psr-1--basic-coding-standard" class="headerLink">
    <a href="#psr-1--basic-coding-standard" class="header-mark"></a>PSR-1 : Basic Coding Standard</h4><p>PHP 코드를 공유하는데 있어 기술적 상호 운용성을 위해 고려 해야 할 표준 코딩 가이드입니다.</p>
<ul>
<li>
<p><code>&lt;?php</code> 와  <code>&lt;?=</code> 태그만 사용해야합니다.</p>
</li>
<li>
<p>PHP 코드에는 BOM(Byte Order Mark) 없이 UTF-8로만 사용해야합니다.</p>
</li>
<li>
<p>네임스페이스와 클래스는 PSR(PSR-0, PSR-4)의 오토로딩을 따라야합니다.</p>
<ul>
<li>클래스명은 <code>StudlyCaps</code> 와 같이 첫글자를 대문자로 합니다.</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="o">&lt;?</span><span class="nx">php</span>
</span></span><span class="line"><span class="cl"><span class="c1">// PHP 5.3 이후 버전
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">namespace</span> <span class="nx">Vendor\Model</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Foo</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// PHP 5.3 이전 버전
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">Vendor_Model_Foo</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div></li>
<li>
<p>상수는 <code>_</code>를 구분자로 대문자로 선언해야합니다. <code>ex)const CURRENT_VERSION = 1.0;</code></p>
</li>
<li>
<p>프로퍼티명에 대한 규칙은 정해져 있지않으나, 스코프에서 일관적이어야합니다.</p>
</li>
<li>
<p>메소드는 카멜케이스를 사용해야합니다. <code>ex)camelCase()</code></p>
</li>
</ul>
<h4 id="psr-2--coding-style-guide" class="headerLink">
    <a href="#psr-2--coding-style-guide" class="header-mark"></a>PSR-2 : Coding Style Guide</h4><p>PSR-1의 확장으로 표준 코딩 스타일 가이드를 다룹니다.</p>
<ul>
<li>
<p>PSR-1을 따라야합니다.</p>
</li>
<li>
<p>들여쓰기 할때는 탭을 사용하지 않고 스페이스 4개를 사용합니다.</p>
</li>
<li>
<p>라인 수에 대한 엄격한 제한은 아니지만, 한 줄에는 120자 이하, 라인 수는 80개 이하로 작성합니다.</p>
</li>
<li>
<p>namespace선언과 use 선언들 후에는 한줄을 띄워 작성합니다.</p>
</li>
<li>
<p>클래스와 메소드들의 여는 괄호는 다음줄에 작성하고, 닫는 괄호는 내용이 끝난 다음 줄에 작성합니다.</p>
<ul>
<li>ex)</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="o">&lt;?</span><span class="nx">php</span>
</span></span><span class="line"><span class="cl"><span class="k">namespace</span> <span class="nx">Vendor\Package</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nx">BazClass</span> <span class="k">as</span> <span class="nx">Baz</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nx">OtherVendor\OtherPackage\BazClass</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">TestClass</span> <span class="k">extends</span> <span class="nx">Baz</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">function</span> <span class="nf">alert</span><span class="p">(</span><span class="nv">$msg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">echo</span> <span class="nv">$msg</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div></li>
<li>
<p>모든 프로퍼티와 메소드는 접근제어자가 선언되어야합니다.</p>
<ul>
<li>abstract와 final 키워드는 접근제어자 이전에 선언되고, static 키워드는 접근제어자 이후에 선언되어야합니다.</li>
</ul>
</li>
<li>
<p>제어문은 사이에 스페이스가 있어야합니다.</p>
<ul>
<li>메소드와 함수호출은 그렇지 않습니다.</li>
<li>ex)</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="o">&lt;?</span><span class="nx">php</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span> <span class="k">function</span> <span class="nf">Foo</span><span class="p">(</span><span class="nv">$a</span><span class="p">,</span> <span class="nv">$b</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nv">$a</span> <span class="o">===</span> <span class="nv">$b</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">echo</span> <span class="s2">&#34;equal&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">Foo</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span></span></code></pre></div></li>
<li>
<p>PHP 파일은 빈 줄로 끝나야 하며, PHP로만 이루어진 파일은 닫는 태그인 <code>?&gt;</code>를 생략해야합니다.</p>
</li>
</ul>
<h4 id="psr-3--logger-interface" class="headerLink">
    <a href="#psr-3--logger-interface" class="header-mark"></a>PSR-3 : Logger Interface</h4><p>로깅 라이브러리의 공통적인 인터페이스를 명세합니다.
라이브러리가 <code>Psr\Log\LoggerInterface</code>의 객체를 받아 간편하고 보편적인 방법으로 그것에 로그를 작성할 수 있도록 하는것이 목표입니다.</p>
<ul>
<li>로거 인터페이스는 8개의 <a href="https://tools.ietf.org/html/rfc5424" target="_blank" rel="noopener noreferrer">RFC 5424</a> 레벨(debug, info, notice, warning, error, critical, alert, emergency)로 로그 작성을 하기 위한 메소드를 제공합니다.</li>
<li>9번째 메소드인 <code>log</code>는 첫번째 인자로 로그 레벨을 받고, 호출시 해당 레벨의 메소드를 호출하는것과 같은 결과를 가집니다.
<ul>
<li>해당 레벨의 메소드가 정의되어 있지 않는 경우, <code>Psr\Log\InvalidArgumentException</code> 에러를 보내야합니다.</li>
</ul>
</li>
<li>모든 메소드는 string 형식의 메시지를 받거나, __toString() 처리 된 object를 받습니다.</li>
<li>컨텍스트에 주어진 값을 execption에 보내거나, php error나 warning, notice로 보내면 안됩니다.</li>
</ul>
<h4 id="psr-4--autoloader" class="headerLink">
    <a href="#psr-4--autoloader" class="header-mark"></a>PSR-4 : Autoloader</h4><p>파일 경로를 통해 클래스를 오토로딩 하기위한 명세로, PSR-0를 포함하고 있습니다.</p>
<ul>
<li><code>class</code>라는 용어는 클래스와 인터페이스, 트레이트 또는 다른 비슷한 구조들을 의미합니다.</li>
<li>정규화 된 클래스명의 형식은 다음을 따릅니다.
<ul>
<li><code>\&lt;NamespaceName&gt;(\&lt;SubNamespaceNames&gt;)*\&lt;ClassName&gt;</code>
<ul>
<li>네임스페이스의 맨 처음은 &ldquo;Vendor namespace&quot;로 알려진것으로 시작합니다.</li>
<li>하나 이상의 서브네임스페이스명을 가집니다.</li>
<li>끝을 클래스명으로 작성 합니다.</li>
<li>소문자와 대문자의 조합을 혼합하여 작성할 수 있습니다.</li>
<li>대소문자를 구분하여 참조해야합니다.</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="o">&lt;?</span><span class="nx">php</span>
</span></span><span class="line"><span class="cl"><span class="c1">// guzzle/src/ClientInterface.php
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">namespace</span> <span class="nx">GuzzleHttp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nx">GuzzleHttp\Exception\GuzzleException</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">interface</span> <span class="nx">ClientInterface</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>GuzzleHttp\Exception\GuzzleException은
GuzzleHttp의 Base-Directory(src) 안에 있는 Exception\GuzzleException.php에 위치합니다.</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<blockquote>
<p>참고자료</p>
</blockquote>
<ul>
<li><a href="https://www.php-fig.org/psr/" title="해당 링크로 이동" target="_blank" rel="noopener noreferrer">PSR 공식문서</a></li>
<li><a href="https://www.lesstif.com/pages/viewpage.action?pageId=24445325" title="해당 링크로 이동" target="_blank" rel="noopener noreferrer">PHP 표준 권고(PSR) - 정광섭님</a></li>
</ul>
]]></description></item><item><title>［PHP］ 에러 보여주기</title><link>http://blog.hodory.dev/2017/11/17/php-view-error/</link><pubDate>Fri, 17 Nov 2017 15:12:22 +0000</pubDate><author><name>hodory</name></author><guid>http://blog.hodory.dev/2017/11/17/php-view-error/</guid><description><![CDATA[<h5 id="배포-서버에서는-권장하지-않는-설정입니다" class="headerLink">
    <a href="#%eb%b0%b0%ed%8f%ac-%ec%84%9c%eb%b2%84%ec%97%90%ec%84%9c%eb%8a%94-%ea%b6%8c%ec%9e%a5%ed%95%98%ec%a7%80-%ec%95%8a%eb%8a%94-%ec%84%a4%ec%a0%95%ec%9e%85%eb%8b%88%eb%8b%a4" class="header-mark"></a>배포 서버에서는 권장하지 않는 설정입니다.</h5><h5 id="테스트-서버에서-에러-메세지를-확인하고-싶을때" class="headerLink">
    <a href="#%ed%85%8c%ec%8a%a4%ed%8a%b8-%ec%84%9c%eb%b2%84%ec%97%90%ec%84%9c-%ec%97%90%eb%9f%ac-%eb%a9%94%ec%84%b8%ec%a7%80%eb%a5%bc-%ed%99%95%ec%9d%b8%ed%95%98%ea%b3%a0-%ec%8b%b6%ec%9d%84%eb%95%8c" class="header-mark"></a>테스트 서버에서 에러 메세지를 확인하고 싶을때</h5><h5 id="해당-php-파일의-최상위나-공통파일의-최상위에-이-소스코드를-넣어주시면-됩니다" class="headerLink">
    <a href="#%ed%95%b4%eb%8b%b9-php-%ed%8c%8c%ec%9d%bc%ec%9d%98-%ec%b5%9c%ec%83%81%ec%9c%84%eb%82%98-%ea%b3%b5%ed%86%b5%ed%8c%8c%ec%9d%bc%ec%9d%98-%ec%b5%9c%ec%83%81%ec%9c%84%ec%97%90-%ec%9d%b4-%ec%86%8c%ec%8a%a4%ec%bd%94%eb%93%9c%eb%a5%bc-%eb%84%a3%ec%96%b4%ec%a3%bc%ec%8b%9c%eb%a9%b4-%eb%90%a9%eb%8b%88%eb%8b%a4" class="header-mark"></a>해당 php 파일의 최상위나 공통파일의 최상위에 이 소스코드를 넣어주시면 됩니다.</h5><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="o">&lt;?</span><span class="nx">php</span>
</span></span><span class="line"><span class="cl">    <span class="nx">error_reporting</span><span class="p">(</span><span class="k">E_ALL</span><span class="p">);</span> <span class="c1">//모든 PHP 에러를 리포팅함
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">ini_set</span><span class="p">(</span><span class="s2">&#34;display_errors&#34;</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span> <span class="c1">//php.ini 파일의 &#39;display_errors&#39;를 활성화 시킴
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">?&gt;</span><span class="err">
</span></span></span></code></pre></div>]]></description></item><item><title>［PHP］삼항 연산자</title><link>http://blog.hodory.dev/2017/09/01/conditional-ternary-operator/</link><pubDate>Fri, 01 Sep 2017 10:09:11 +0000</pubDate><author><name>hodory</name></author><guid>http://blog.hodory.dev/2017/09/01/conditional-ternary-operator/</guid><description><![CDATA[<p>삼항연산자(?:)는 조건식 ? 참일때 실행할로직 : 거짓일때 실행할 로직; 과 같이쓴다. (if-else를 짧게 줄인것)</p>
<p>a 변수값이 있는지 검사한후 값이 있으면 foo값을 반환, 없으면 bar라는 값을 반환</p>
<p><code>ex)</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="o">&lt;?</span><span class="nx">php</span>
</span></span><span class="line"><span class="cl"><span class="nv">$a</span> <span class="o">=</span> <span class="s1">&#39;foo&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nv">$b</span> <span class="o">=</span> <span class="nv">$a</span> <span class="o">?:</span> <span class="s1">&#39;bar&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">echo</span> <span class="nv">$b</span><span class="p">;</span>    <span class="c1">// foo
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">?&gt;</span><span class="err">
</span></span></span></code></pre></div>]]></description></item><item><title>［PHP］ 0001과 같이 번호 지정 하기</title><link>http://blog.hodory.dev/2017/08/31/php-str-pad/</link><pubDate>Thu, 31 Aug 2017 21:51:38 +0000</pubDate><author><name>hodory</name></author><guid>http://blog.hodory.dev/2017/08/31/php-str-pad/</guid><description><![CDATA[<h4 id="php에서-0001과-같이-번호-지정하기" class="headerLink">
    <a href="#php%ec%97%90%ec%84%9c-0001%ea%b3%bc-%ea%b0%99%ec%9d%b4-%eb%b2%88%ed%98%b8-%ec%a7%80%ec%a0%95%ed%95%98%ea%b8%b0" class="header-mark"></a>PHP에서 0001과 같이 번호 지정하기</h4><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="o">&lt;?</span><span class="nx">php</span>
</span></span><span class="line"><span class="cl"><span class="nv">$count</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nv">$count</span> <span class="o">=</span> <span class="nx">str_pad</span><span class="p">(</span><span class="nv">$count</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="s1">&#39;0&#39;</span><span class="p">,</span><span class="nx">STR_PAD_LEFT</span><span class="p">);</span> <span class="c1">//0001
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">?&gt;</span><span class="err">
</span></span></span></code></pre></div><p><code>01이나 001 같이 사용할 때는 두번째 파라미터 값에 2(01) 또는 3(001)을 사용하면 된다.</code></p>
]]></description></item></channel></rss>