<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>PHP - Category - Web Developer Hodory</title><link>http://blog.hodory.dev/categories/php/</link><description>PHP - Category - Web Developer Hodory</description><generator>Hugo -- gohugo.io</generator><language>ko</language><managingEditor>master@hodory.dev (hodory)</managingEditor><webMaster>master@hodory.dev (hodory)</webMaster><lastBuildDate>Sun, 15 Dec 2024 15:00:00 +0000</lastBuildDate><atom:link href="http://blog.hodory.dev/categories/php/" rel="self" type="application/rss+xml"/><item><title>[PHP] Array And Class Object Performance Test</title><link>http://blog.hodory.dev/2024/12/15/php-array-and-class-object-performance-test/</link><pubDate>Sun, 15 Dec 2024 15:00:00 +0000</pubDate><author><name>hodory</name></author><guid>http://blog.hodory.dev/2024/12/15/php-array-and-class-object-performance-test/</guid><description><![CDATA[<h2 id="comparison" class="headerLink">
    <a href="#comparison" class="header-mark"></a>Comparison</h2>
<div class="table-wrapper">
  <table>
    <thead>
        <tr>
            <th style="text-align: "></th>
            <th style="text-align: ">PHP Dynamic Array</th>
            <th style="text-align: ">Class With Constructor</th>
            <th style="text-align: ">Class With Setter</th>
            <th style="text-align: ">Illuminate\Support\Collection</th>
            <th style="text-align: ">Collection + Class Based Collection</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td style="text-align: ">Test Link</td>
            <td style="text-align: "><a href="https://3v4l.org/h08dj/perf" target="_blank" rel="noopener noreferrer">https://3v4l.org/h08dj/perf</a></td>
            <td style="text-align: "><a href="https://3v4l.org/CU0MC/perf" target="_blank" rel="noopener noreferrer">https://3v4l.org/CU0MC/perf</a></td>
            <td style="text-align: "><a href="https://3v4l.org/IqmsA/perf" target="_blank" rel="noopener noreferrer">https://3v4l.org/IqmsA/perf</a></td>
            <td style="text-align: ">코드가 너무 길어서 테스트 불가</td>
            <td style="text-align: ">코드가 너무 길어서 테스트 불가</td>
        </tr>
        <tr>
            <td style="text-align: ">Memory Peak</td>
            <td style="text-align: ">536 MB</td>
            <td style="text-align: ">254 MB</td>
            <td style="text-align: ">254 MB</td>
            <td style="text-align: ">658 MB</td>
            <td style="text-align: ">660 MB</td>
        </tr>
        <tr>
            <td style="text-align: ">Execution Time</td>
            <td style="text-align: ">Execution Time: 2.32 seconds</td>
            <td style="text-align: ">Execution Time: 3.38 seconds</td>
            <td style="text-align: ">Execution Time: 4.25 seconds</td>
            <td style="text-align: ">Execution Time: 3.55 seconds</td>
            <td style="text-align: ">Execution Time: 5.96 seconds</td>
        </tr>
    </tbody>
  </table>
</div>
<h2 id="code" class="headerLink">
    <a href="#code" class="header-mark"></a>Code</h2><h3 id="php-dynamic-array" class="headerLink">
    <a href="#php-dynamic-array" class="header-mark"></a>PHP Dynamic Array</h3><div class="code-block highlight is-closed show-line-numbers  tw-group tw-my-2">
  <div class="
    code-block-title 
    
    tw-flex 
    tw-flex-row 
    tw-justify-between 
    tw-w-full tw-bg-bgColor-secondary
    ">      
    <button 
      class="
        tw-select-none 
        tw-mx-2 
        tw-block
        group-[.is-open]:tw-rotate-90
        tw-transition-[transform] 
        tw-duration-500 
        tw-ease-in-out
        print:!tw-hidden"
      disabled
      aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z"/></svg></button>

    <div class="code-block-title-bar tw-w-full">
      <p class="tw-select-none !tw-my-1">PHP</p>
    </div>
    <div class="tw-flex">
      <button 
        class="
          line-number-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.show-line-numbers]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle line numbers"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M61.77 401l17.5-20.15a19.92 19.92 0 0 0 5.07-14.19v-3.31C84.34 356 80.5 352 73 352H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8h22.83a157.41 157.41 0 0 0-11 12.31l-5.61 7c-4 5.07-5.25 10.13-2.8 14.88l1.05 1.93c3 5.76 6.29 7.88 12.25 7.88h4.73c10.33 0 15.94 2.44 15.94 9.09 0 4.72-4.2 8.22-14.36 8.22a41.54 41.54 0 0 1-15.47-3.12c-6.49-3.88-11.74-3.5-15.6 3.12l-5.59 9.31c-3.72 6.13-3.19 11.72 2.63 15.94 7.71 4.69 20.38 9.44 37 9.44 34.16 0 48.5-22.75 48.5-44.12-.03-14.38-9.12-29.76-28.73-34.88zM496 224H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-160H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16V80a16 16 0 0 0-16-16zm0 320H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM16 160h64a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H64V40a8 8 0 0 0-8-8H32a8 8 0 0 0-7.14 4.42l-8 16A8 8 0 0 0 24 64h8v64H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8zm-3.91 160H80a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H41.32c3.29-10.29 48.34-18.68 48.34-56.44 0-29.06-25-39.56-44.47-39.56-21.36 0-33.8 10-40.46 18.75-4.37 5.59-3 10.84 2.8 15.37l8.58 6.88c5.61 4.56 11 2.47 16.12-2.44a13.44 13.44 0 0 1 9.46-3.84c3.33 0 9.28 1.56 9.28 8.75C51 248.19 0 257.31 0 304.59v4C0 316 5.08 320 12.09 320z"/></svg></button>

      <button 
        class="
          wrap-code-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.is-wrap]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle code wrap"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z"/></svg></button>
      
      <button 
        class="
          copy-code-button
          tw-select-none
          tw-mx-2 
          tw-hidden
          group-[.is-open]:tw-block
          hover:tw-text-fgColor-link 
          print:!tw-hidden"
        title="Copy code">
          <span class="copy-icon tw-block"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z"/></svg></span>
          <span class="check-icon tw-hidden"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"/></svg></span>
      </button>
        
      <button 
        class="
          tw-select-none 
          tw-mx-2 
          tw-block 
          group-[.is-open]:tw-hidden 
          print:!tw-hidden" 
        disabled
        aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M328 256c0 39.8-32.2 72-72 72s-72-32.2-72-72 32.2-72 72-72 72 32.2 72 72zm104-72c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72zm-352 0c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72z"/></svg></button>
    </div>
  </div>
  <pre style="counter-reset: codeblock;" class="tw-block tw-m-0 tw-p-0"><code 
    id="codeblock-id-1" 
    class="
      chroma 
      !tw-block 
      tw-p-0
      tw-m-0
      tw-transition-[max-height] 
      tw-duration-500 
      tw-ease-in-out 
      group-[.is-closed]:!tw-max-h-0 
      group-[.is-wrap]:tw-text-wrap
      tw-overflow-y-hidden
      tw-overflow-x-auto
      tw-scrollbar-thin
      "><span class="line"><span class="cl"><span class="o">&lt;?</span><span class="nx">php</span>
</span></span><span class="line"><span class="cl"><span class="nx">ini_set</span><span class="p">(</span><span class="s1">&#39;memory_limit&#39;</span><span class="p">,</span> <span class="s1">&#39;1024M&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nv">$start</span> <span class="o">=</span> <span class="nx">microtime</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nv">$product</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="p">(</span><span class="nv">$k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$k</span> <span class="o">&lt;=</span> <span class="mi">1000</span><span class="p">;</span> <span class="nv">$k</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$options</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="nv">$j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$j</span> <span class="o">&lt;=</span> <span class="mi">10</span><span class="p">;</span> <span class="nv">$j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$optionItems</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;=</span> <span class="mi">100</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nv">$optionItems</span><span class="p">[]</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="s1">&#39;title&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;OptionItem&#39;</span> <span class="o">.</span> <span class="nv">$i</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="s1">&#39;description&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;OptionItem &#39;</span> <span class="o">.</span> <span class="nv">$i</span> <span class="o">.</span> <span class="s1">&#39; Description&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="s1">&#39;price&#39;</span> <span class="o">=&gt;</span> <span class="nx">random_int</span><span class="p">(</span><span class="mi">1000</span><span class="p">,</span> <span class="mi">10000</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nv">$options</span><span class="p">[]</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;title&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Option&#39;</span> <span class="o">.</span> <span class="nv">$j</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;description&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Option &#39;</span> <span class="o">.</span> <span class="nv">$j</span> <span class="o">.</span> <span class="s1">&#39; Description&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;price&#39;</span> <span class="o">=&gt;</span> <span class="nx">random_int</span><span class="p">(</span><span class="mi">1000</span><span class="p">,</span> <span class="mi">10000</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;items&#39;</span> <span class="o">=&gt;</span> <span class="nv">$optionItems</span>
</span></span><span class="line"><span class="cl">        <span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$product</span><span class="p">[]</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;title&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Product&#39;</span> <span class="o">.</span> <span class="nv">$k</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;description&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Product &#39;</span> <span class="o">.</span> <span class="nv">$k</span> <span class="o">.</span> <span class="s1">&#39; Description&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;price&#39;</span> <span class="o">=&gt;</span> <span class="nx">random_int</span><span class="p">(</span><span class="mi">1000</span><span class="p">,</span> <span class="mi">10000</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;currency&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;USD&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;category&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Category&#39;</span> <span class="o">.</span> <span class="nv">$k</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;brand&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Brand&#39;</span> <span class="o">.</span> <span class="nv">$k</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;options&#39;</span> <span class="o">=&gt;</span> <span class="nv">$options</span>
</span></span><span class="line"><span class="cl">    <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$end</span> <span class="o">=</span> <span class="nx">microtime</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="k">echo</span> <span class="s1">&#39;Memory Peak Usage: &#39;</span> <span class="o">.</span> <span class="p">(</span><span class="nx">memory_get_peak_usage</span><span class="p">(</span><span class="k">true</span><span class="p">)</span> <span class="o">/</span> <span class="mi">1024</span> <span class="o">/</span> <span class="mi">1024</span><span class="p">)</span> <span class="o">.</span> <span class="s1">&#39; MB&#39;</span> <span class="o">.</span> <span class="s1">&#39;&lt;br&gt;&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">echo</span> <span class="s1">&#39;Execution Time: &#39;</span> <span class="o">.</span> <span class="nx">round</span><span class="p">(</span><span class="nv">$end</span> <span class="o">-</span> <span class="nv">$start</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">.</span> <span class="s1">&#39; seconds&#39;</span> <span class="o">.</span> <span class="s1">&#39;&lt;br&gt;&#39;</span><span class="p">;</span></span></span></code></pre>
</div>
<h3 id="php-class-with-constructor" class="headerLink">
    <a href="#php-class-with-constructor" class="header-mark"></a>PHP Class With Constructor</h3><div class="code-block highlight is-closed show-line-numbers  tw-group tw-my-2">
  <div class="
    code-block-title 
    
    tw-flex 
    tw-flex-row 
    tw-justify-between 
    tw-w-full tw-bg-bgColor-secondary
    ">      
    <button 
      class="
        tw-select-none 
        tw-mx-2 
        tw-block
        group-[.is-open]:tw-rotate-90
        tw-transition-[transform] 
        tw-duration-500 
        tw-ease-in-out
        print:!tw-hidden"
      disabled
      aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z"/></svg></button>

    <div class="code-block-title-bar tw-w-full">
      <p class="tw-select-none !tw-my-1">PHP</p>
    </div>
    <div class="tw-flex">
      <button 
        class="
          line-number-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.show-line-numbers]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle line numbers"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M61.77 401l17.5-20.15a19.92 19.92 0 0 0 5.07-14.19v-3.31C84.34 356 80.5 352 73 352H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8h22.83a157.41 157.41 0 0 0-11 12.31l-5.61 7c-4 5.07-5.25 10.13-2.8 14.88l1.05 1.93c3 5.76 6.29 7.88 12.25 7.88h4.73c10.33 0 15.94 2.44 15.94 9.09 0 4.72-4.2 8.22-14.36 8.22a41.54 41.54 0 0 1-15.47-3.12c-6.49-3.88-11.74-3.5-15.6 3.12l-5.59 9.31c-3.72 6.13-3.19 11.72 2.63 15.94 7.71 4.69 20.38 9.44 37 9.44 34.16 0 48.5-22.75 48.5-44.12-.03-14.38-9.12-29.76-28.73-34.88zM496 224H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-160H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16V80a16 16 0 0 0-16-16zm0 320H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM16 160h64a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H64V40a8 8 0 0 0-8-8H32a8 8 0 0 0-7.14 4.42l-8 16A8 8 0 0 0 24 64h8v64H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8zm-3.91 160H80a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H41.32c3.29-10.29 48.34-18.68 48.34-56.44 0-29.06-25-39.56-44.47-39.56-21.36 0-33.8 10-40.46 18.75-4.37 5.59-3 10.84 2.8 15.37l8.58 6.88c5.61 4.56 11 2.47 16.12-2.44a13.44 13.44 0 0 1 9.46-3.84c3.33 0 9.28 1.56 9.28 8.75C51 248.19 0 257.31 0 304.59v4C0 316 5.08 320 12.09 320z"/></svg></button>

      <button 
        class="
          wrap-code-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.is-wrap]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle code wrap"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z"/></svg></button>
      
      <button 
        class="
          copy-code-button
          tw-select-none
          tw-mx-2 
          tw-hidden
          group-[.is-open]:tw-block
          hover:tw-text-fgColor-link 
          print:!tw-hidden"
        title="Copy code">
          <span class="copy-icon tw-block"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z"/></svg></span>
          <span class="check-icon tw-hidden"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"/></svg></span>
      </button>
        
      <button 
        class="
          tw-select-none 
          tw-mx-2 
          tw-block 
          group-[.is-open]:tw-hidden 
          print:!tw-hidden" 
        disabled
        aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M328 256c0 39.8-32.2 72-72 72s-72-32.2-72-72 32.2-72 72-72 72 32.2 72 72zm104-72c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72zm-352 0c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72z"/></svg></button>
    </div>
  </div>
  <pre style="counter-reset: codeblock;" class="tw-block tw-m-0 tw-p-0"><code 
    id="codeblock-id-2" 
    class="
      chroma 
      !tw-block 
      tw-p-0
      tw-m-0
      tw-transition-[max-height] 
      tw-duration-500 
      tw-ease-in-out 
      group-[.is-closed]:!tw-max-h-0 
      group-[.is-wrap]:tw-text-wrap
      tw-overflow-y-hidden
      tw-overflow-x-auto
      tw-scrollbar-thin
      "><span class="line"><span class="cl"><span class="o">&lt;?</span><span class="nx">php</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Product</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span> <span class="nx">string</span> <span class="nv">$title</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span> <span class="nx">string</span> <span class="nv">$description</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span> <span class="nx">int</span> <span class="nv">$price</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span> <span class="nx">string</span> <span class="nv">$currency</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span> <span class="nx">string</span> <span class="nv">$category</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span> <span class="nx">string</span> <span class="nv">$brand</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span> <span class="k">array</span> <span class="nv">$options</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="sd">/**
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @param string $title
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @param string $description
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @param int $price
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @param string $currency
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @param string $category
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @param string $brand
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @param array $options
</span></span></span><span class="line"><span class="cl"><span class="sd">     */</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nx">string</span> <span class="nv">$title</span><span class="p">,</span> <span class="nx">string</span> <span class="nv">$description</span><span class="p">,</span> <span class="nx">int</span> <span class="nv">$price</span><span class="p">,</span> <span class="nx">string</span> <span class="nv">$currency</span><span class="p">,</span> <span class="nx">string</span> <span class="nv">$category</span><span class="p">,</span> <span class="nx">string</span> <span class="nv">$brand</span><span class="p">,</span> <span class="k">array</span> <span class="nv">$options</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">title</span> <span class="o">=</span> <span class="nv">$title</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">description</span> <span class="o">=</span> <span class="nv">$description</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">price</span> <span class="o">=</span> <span class="nv">$price</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">currency</span> <span class="o">=</span> <span class="nv">$currency</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">category</span> <span class="o">=</span> <span class="nv">$category</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">brand</span> <span class="o">=</span> <span class="nv">$brand</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">options</span> <span class="o">=</span> <span class="nv">$options</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="sd">/**
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @return string
</span></span></span><span class="line"><span class="cl"><span class="sd">     */</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">function</span> <span class="nf">getTitle</span><span class="p">()</span><span class="o">:</span> <span class="nx">string</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">title</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="sd">/**
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @param string $title
</span></span></span><span class="line"><span class="cl"><span class="sd">     */</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">function</span> <span class="nf">setTitle</span><span class="p">(</span><span class="nx">string</span> <span class="nv">$title</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">title</span> <span class="o">=</span> <span class="nv">$title</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="sd">/**
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @return string
</span></span></span><span class="line"><span class="cl"><span class="sd">     */</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">function</span> <span class="nf">getDescription</span><span class="p">()</span><span class="o">:</span> <span class="nx">string</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">description</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="sd">/**
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @param string $description
</span></span></span><span class="line"><span class="cl"><span class="sd">     */</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">function</span> <span class="nf">setDescription</span><span class="p">(</span><span class="nx">string</span> <span class="nv">$description</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">description</span> <span class="o">=</span> <span class="nv">$description</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="sd">/**
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @return int
</span></span></span><span class="line"><span class="cl"><span class="sd">     */</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">function</span> <span class="nf">getPrice</span><span class="p">()</span><span class="o">:</span> <span class="nx">int</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">price</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="sd">/**
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @param int $price
</span></span></span><span class="line"><span class="cl"><span class="sd">     */</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">function</span> <span class="nf">setPrice</span><span class="p">(</span><span class="nx">int</span> <span class="nv">$price</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">price</span> <span class="o">=</span> <span class="nv">$price</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="sd">/**
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @return string
</span></span></span><span class="line"><span class="cl"><span class="sd">     */</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">function</span> <span class="nf">getCurrency</span><span class="p">()</span><span class="o">:</span> <span class="nx">string</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">currency</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="sd">/**
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @param string $currency
</span></span></span><span class="line"><span class="cl"><span class="sd">     */</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">function</span> <span class="nf">setCurrency</span><span class="p">(</span><span class="nx">string</span> <span class="nv">$currency</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">currency</span> <span class="o">=</span> <span class="nv">$currency</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="sd">/**
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @return string
</span></span></span><span class="line"><span class="cl"><span class="sd">     */</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">function</span> <span class="nf">getCategory</span><span class="p">()</span><span class="o">:</span> <span class="nx">string</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">category</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="sd">/**
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @param string $category
</span></span></span><span class="line"><span class="cl"><span class="sd">     */</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">function</span> <span class="nf">setCategory</span><span class="p">(</span><span class="nx">string</span> <span class="nv">$category</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">category</span> <span class="o">=</span> <span class="nv">$category</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="sd">/**
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @return string
</span></span></span><span class="line"><span class="cl"><span class="sd">     */</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">function</span> <span class="nf">getBrand</span><span class="p">()</span><span class="o">:</span> <span class="nx">string</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">brand</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="sd">/**
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @param string $brand
</span></span></span><span class="line"><span class="cl"><span class="sd">     */</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">function</span> <span class="nf">setBrand</span><span class="p">(</span><span class="nx">string</span> <span class="nv">$brand</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">brand</span> <span class="o">=</span> <span class="nv">$brand</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="sd">/**
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="sd">     */</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">function</span> <span class="nf">getOptions</span><span class="p">()</span><span class="o">:</span> <span class="k">array</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">options</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="sd">/**
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @param array $options
</span></span></span><span class="line"><span class="cl"><span class="sd">     */</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">function</span> <span class="nf">setOptions</span><span class="p">(</span><span class="k">array</span> <span class="nv">$options</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">options</span> <span class="o">=</span> <span class="nv">$options</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Option</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">private</span> <span class="nx">string</span> <span class="nv">$title</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span> <span class="nx">string</span> <span class="nv">$description</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span> <span class="nx">int</span> <span class="nv">$price</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span> <span class="k">array</span> <span class="nv">$items</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="sd">/**
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @param string $title
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @param string $description
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @param int $price
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @param array $items
</span></span></span><span class="line"><span class="cl"><span class="sd">     */</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nx">string</span> <span class="nv">$title</span><span class="p">,</span> <span class="nx">string</span> <span class="nv">$description</span><span class="p">,</span> <span class="nx">int</span> <span class="nv">$price</span><span class="p">,</span> <span class="k">array</span> <span class="nv">$items</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">title</span> <span class="o">=</span> <span class="nv">$title</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">description</span> <span class="o">=</span> <span class="nv">$description</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">price</span> <span class="o">=</span> <span class="nv">$price</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">items</span> <span class="o">=</span> <span class="nv">$items</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="sd">/**
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @param string $title
</span></span></span><span class="line"><span class="cl"><span class="sd">     */</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">function</span> <span class="nf">setTitle</span><span class="p">(</span><span class="nx">string</span> <span class="nv">$title</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">title</span> <span class="o">=</span> <span class="nv">$title</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="sd">/**
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @param string $description
</span></span></span><span class="line"><span class="cl"><span class="sd">     */</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">function</span> <span class="nf">setDescription</span><span class="p">(</span><span class="nx">string</span> <span class="nv">$description</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">description</span> <span class="o">=</span> <span class="nv">$description</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="sd">/**
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @param int $price
</span></span></span><span class="line"><span class="cl"><span class="sd">     */</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">function</span> <span class="nf">setPrice</span><span class="p">(</span><span class="nx">int</span> <span class="nv">$price</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">price</span> <span class="o">=</span> <span class="nv">$price</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="sd">/**
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @param array $items
</span></span></span><span class="line"><span class="cl"><span class="sd">     */</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">function</span> <span class="nf">setItems</span><span class="p">(</span><span class="k">array</span> <span class="nv">$items</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">items</span> <span class="o">=</span> <span class="nv">$items</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">OptionItem</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span> <span class="nx">string</span> <span class="nv">$title</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span> <span class="nx">string</span> <span class="nv">$description</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span> <span class="nx">int</span> <span class="nv">$price</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="sd">/**
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @param string $title
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @param string $description
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @param int $price
</span></span></span><span class="line"><span class="cl"><span class="sd">     */</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nx">string</span> <span class="nv">$title</span><span class="p">,</span> <span class="nx">string</span> <span class="nv">$description</span><span class="p">,</span> <span class="nx">int</span> <span class="nv">$price</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">title</span> <span class="o">=</span> <span class="nv">$title</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">description</span> <span class="o">=</span> <span class="nv">$description</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">price</span> <span class="o">=</span> <span class="nv">$price</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="sd">/**
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @param string $title
</span></span></span><span class="line"><span class="cl"><span class="sd">     */</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">function</span> <span class="nf">setTitle</span><span class="p">(</span><span class="nx">string</span> <span class="nv">$title</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">title</span> <span class="o">=</span> <span class="nv">$title</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="sd">/**
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @param string $description
</span></span></span><span class="line"><span class="cl"><span class="sd">     */</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">function</span> <span class="nf">setDescription</span><span class="p">(</span><span class="nx">string</span> <span class="nv">$description</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">description</span> <span class="o">=</span> <span class="nv">$description</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="sd">/**
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @param int $price
</span></span></span><span class="line"><span class="cl"><span class="sd">     */</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">function</span> <span class="nf">setPrice</span><span class="p">(</span><span class="nx">int</span> <span class="nv">$price</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">price</span> <span class="o">=</span> <span class="nv">$price</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$product</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="p">(</span><span class="nv">$k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$k</span> <span class="o">&lt;=</span> <span class="mi">100</span><span class="p">;</span> <span class="nv">$k</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$options</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="nv">$j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$j</span> <span class="o">&lt;=</span> <span class="mi">10</span><span class="p">;</span> <span class="nv">$j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$optionItems</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;=</span> <span class="mi">100</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nv">$optionItem</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">OptionItem</span><span class="p">(</span><span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;OptionItem&#39;</span> <span class="o">.</span> <span class="nv">$i</span><span class="p">,</span> <span class="nx">description</span><span class="o">:</span> <span class="s1">&#39;OptionItem &#39;</span> <span class="o">.</span> <span class="nv">$i</span> <span class="o">.</span> <span class="s1">&#39; Description&#39;</span><span class="p">,</span> <span class="nx">price</span><span class="o">:</span> <span class="nx">random_int</span><span class="p">(</span><span class="mi">1000</span><span class="p">,</span> <span class="mi">10000</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">            <span class="nv">$optionItems</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$optionItem</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nv">$option</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Option</span><span class="p">(</span><span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;Option&#39;</span> <span class="o">.</span> <span class="nv">$j</span><span class="p">,</span> <span class="nx">description</span><span class="o">:</span> <span class="s1">&#39;Option &#39;</span> <span class="o">.</span> <span class="nv">$j</span> <span class="o">.</span> <span class="s1">&#39; Description&#39;</span><span class="p">,</span> <span class="nx">price</span><span class="o">:</span> <span class="nx">random_int</span><span class="p">(</span><span class="mi">1000</span><span class="p">,</span> <span class="mi">10000</span><span class="p">),</span> <span class="nx">items</span><span class="o">:</span> <span class="nv">$optionItems</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$options</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$option</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$product</span><span class="p">[]</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Product</span><span class="p">(</span><span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;Product&#39;</span> <span class="o">.</span> <span class="nv">$k</span><span class="p">,</span> <span class="nx">description</span><span class="o">:</span> <span class="s1">&#39;Product &#39;</span> <span class="o">.</span> <span class="nv">$k</span> <span class="o">.</span> <span class="s1">&#39; Description&#39;</span><span class="p">,</span> <span class="nx">price</span><span class="o">:</span> <span class="nx">random_int</span><span class="p">(</span><span class="mi">1000</span><span class="p">,</span> <span class="mi">10000</span><span class="p">),</span> <span class="nx">currency</span><span class="o">:</span> <span class="s1">&#39;USD&#39;</span><span class="p">,</span> <span class="nx">category</span><span class="o">:</span> <span class="s1">&#39;Category&#39;</span> <span class="o">.</span> <span class="nv">$k</span><span class="p">,</span> <span class="nx">brand</span><span class="o">:</span> <span class="s1">&#39;Brand&#39;</span> <span class="o">.</span> <span class="nv">$k</span><span class="p">,</span> <span class="nx">options</span><span class="o">:</span> <span class="nv">$options</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</div>
<h3 id="php-class-with-setter" class="headerLink">
    <a href="#php-class-with-setter" class="header-mark"></a>PHP Class With Setter</h3><div class="code-block highlight is-closed show-line-numbers  tw-group tw-my-2">
  <div class="
    code-block-title 
    
    tw-flex 
    tw-flex-row 
    tw-justify-between 
    tw-w-full tw-bg-bgColor-secondary
    ">      
    <button 
      class="
        tw-select-none 
        tw-mx-2 
        tw-block
        group-[.is-open]:tw-rotate-90
        tw-transition-[transform] 
        tw-duration-500 
        tw-ease-in-out
        print:!tw-hidden"
      disabled
      aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z"/></svg></button>

    <div class="code-block-title-bar tw-w-full">
      <p class="tw-select-none !tw-my-1">PHP</p>
    </div>
    <div class="tw-flex">
      <button 
        class="
          line-number-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.show-line-numbers]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle line numbers"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M61.77 401l17.5-20.15a19.92 19.92 0 0 0 5.07-14.19v-3.31C84.34 356 80.5 352 73 352H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8h22.83a157.41 157.41 0 0 0-11 12.31l-5.61 7c-4 5.07-5.25 10.13-2.8 14.88l1.05 1.93c3 5.76 6.29 7.88 12.25 7.88h4.73c10.33 0 15.94 2.44 15.94 9.09 0 4.72-4.2 8.22-14.36 8.22a41.54 41.54 0 0 1-15.47-3.12c-6.49-3.88-11.74-3.5-15.6 3.12l-5.59 9.31c-3.72 6.13-3.19 11.72 2.63 15.94 7.71 4.69 20.38 9.44 37 9.44 34.16 0 48.5-22.75 48.5-44.12-.03-14.38-9.12-29.76-28.73-34.88zM496 224H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-160H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16V80a16 16 0 0 0-16-16zm0 320H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM16 160h64a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H64V40a8 8 0 0 0-8-8H32a8 8 0 0 0-7.14 4.42l-8 16A8 8 0 0 0 24 64h8v64H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8zm-3.91 160H80a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H41.32c3.29-10.29 48.34-18.68 48.34-56.44 0-29.06-25-39.56-44.47-39.56-21.36 0-33.8 10-40.46 18.75-4.37 5.59-3 10.84 2.8 15.37l8.58 6.88c5.61 4.56 11 2.47 16.12-2.44a13.44 13.44 0 0 1 9.46-3.84c3.33 0 9.28 1.56 9.28 8.75C51 248.19 0 257.31 0 304.59v4C0 316 5.08 320 12.09 320z"/></svg></button>

      <button 
        class="
          wrap-code-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.is-wrap]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle code wrap"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z"/></svg></button>
      
      <button 
        class="
          copy-code-button
          tw-select-none
          tw-mx-2 
          tw-hidden
          group-[.is-open]:tw-block
          hover:tw-text-fgColor-link 
          print:!tw-hidden"
        title="Copy code">
          <span class="copy-icon tw-block"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z"/></svg></span>
          <span class="check-icon tw-hidden"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"/></svg></span>
      </button>
        
      <button 
        class="
          tw-select-none 
          tw-mx-2 
          tw-block 
          group-[.is-open]:tw-hidden 
          print:!tw-hidden" 
        disabled
        aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M328 256c0 39.8-32.2 72-72 72s-72-32.2-72-72 32.2-72 72-72 72 32.2 72 72zm104-72c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72zm-352 0c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72z"/></svg></button>
    </div>
  </div>
  <pre style="counter-reset: codeblock;" class="tw-block tw-m-0 tw-p-0"><code 
    id="codeblock-id-3" 
    class="
      chroma 
      !tw-block 
      tw-p-0
      tw-m-0
      tw-transition-[max-height] 
      tw-duration-500 
      tw-ease-in-out 
      group-[.is-closed]:!tw-max-h-0 
      group-[.is-wrap]:tw-text-wrap
      tw-overflow-y-hidden
      tw-overflow-x-auto
      tw-scrollbar-thin
      "><span class="line"><span class="cl"> <span class="o">&lt;?</span><span class="nx">php</span>
</span></span><span class="line"><span class="cl"><span class="nx">ini_set</span><span class="p">(</span><span class="s1">&#39;memory_limit&#39;</span><span class="p">,</span> <span class="s1">&#39;1024M&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Product</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span> <span class="nx">string</span> <span class="nv">$title</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span> <span class="nx">string</span> <span class="nv">$description</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span> <span class="nx">int</span> <span class="nv">$price</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span> <span class="nx">string</span> <span class="nv">$currency</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span> <span class="nx">string</span> <span class="nv">$category</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span> <span class="nx">string</span> <span class="nv">$brand</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span> <span class="k">array</span> <span class="nv">$options</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="sd">/**
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @return string
</span></span></span><span class="line"><span class="cl"><span class="sd">     */</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">function</span> <span class="nf">getTitle</span><span class="p">()</span><span class="o">:</span> <span class="nx">string</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">title</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="sd">/**
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @param string $title
</span></span></span><span class="line"><span class="cl"><span class="sd">     */</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">function</span> <span class="nf">setTitle</span><span class="p">(</span><span class="nx">string</span> <span class="nv">$title</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">title</span> <span class="o">=</span> <span class="nv">$title</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="sd">/**
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @return string
</span></span></span><span class="line"><span class="cl"><span class="sd">     */</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">function</span> <span class="nf">getDescription</span><span class="p">()</span><span class="o">:</span> <span class="nx">string</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">description</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="sd">/**
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @param string $description
</span></span></span><span class="line"><span class="cl"><span class="sd">     */</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">function</span> <span class="nf">setDescription</span><span class="p">(</span><span class="nx">string</span> <span class="nv">$description</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">description</span> <span class="o">=</span> <span class="nv">$description</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="sd">/**
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @return int
</span></span></span><span class="line"><span class="cl"><span class="sd">     */</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">function</span> <span class="nf">getPrice</span><span class="p">()</span><span class="o">:</span> <span class="nx">int</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">price</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="sd">/**
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @param int $price
</span></span></span><span class="line"><span class="cl"><span class="sd">     */</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">function</span> <span class="nf">setPrice</span><span class="p">(</span><span class="nx">int</span> <span class="nv">$price</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">price</span> <span class="o">=</span> <span class="nv">$price</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="sd">/**
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @return string
</span></span></span><span class="line"><span class="cl"><span class="sd">     */</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">function</span> <span class="nf">getCurrency</span><span class="p">()</span><span class="o">:</span> <span class="nx">string</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">currency</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="sd">/**
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @param string $currency
</span></span></span><span class="line"><span class="cl"><span class="sd">     */</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">function</span> <span class="nf">setCurrency</span><span class="p">(</span><span class="nx">string</span> <span class="nv">$currency</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">currency</span> <span class="o">=</span> <span class="nv">$currency</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="sd">/**
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @return string
</span></span></span><span class="line"><span class="cl"><span class="sd">     */</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">function</span> <span class="nf">getCategory</span><span class="p">()</span><span class="o">:</span> <span class="nx">string</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">category</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="sd">/**
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @param string $category
</span></span></span><span class="line"><span class="cl"><span class="sd">     */</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">function</span> <span class="nf">setCategory</span><span class="p">(</span><span class="nx">string</span> <span class="nv">$category</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">category</span> <span class="o">=</span> <span class="nv">$category</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="sd">/**
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @return string
</span></span></span><span class="line"><span class="cl"><span class="sd">     */</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">function</span> <span class="nf">getBrand</span><span class="p">()</span><span class="o">:</span> <span class="nx">string</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">brand</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="sd">/**
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @param string $brand
</span></span></span><span class="line"><span class="cl"><span class="sd">     */</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">function</span> <span class="nf">setBrand</span><span class="p">(</span><span class="nx">string</span> <span class="nv">$brand</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">brand</span> <span class="o">=</span> <span class="nv">$brand</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="sd">/**
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="sd">     */</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">function</span> <span class="nf">getOptions</span><span class="p">()</span><span class="o">:</span> <span class="k">array</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">options</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="sd">/**
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @param array $options
</span></span></span><span class="line"><span class="cl"><span class="sd">     */</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">function</span> <span class="nf">setOptions</span><span class="p">(</span><span class="k">array</span> <span class="nv">$options</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">options</span> <span class="o">=</span> <span class="nv">$options</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Option</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span> <span class="nx">string</span> <span class="nv">$title</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span> <span class="nx">string</span> <span class="nv">$description</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span> <span class="nx">int</span> <span class="nv">$price</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span> <span class="k">array</span> <span class="nv">$items</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="sd">/**
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @param string $title
</span></span></span><span class="line"><span class="cl"><span class="sd">     */</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">function</span> <span class="nf">setTitle</span><span class="p">(</span><span class="nx">string</span> <span class="nv">$title</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">title</span> <span class="o">=</span> <span class="nv">$title</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="sd">/**
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @param string $description
</span></span></span><span class="line"><span class="cl"><span class="sd">     */</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">function</span> <span class="nf">setDescription</span><span class="p">(</span><span class="nx">string</span> <span class="nv">$description</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">description</span> <span class="o">=</span> <span class="nv">$description</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="sd">/**
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @param int $price
</span></span></span><span class="line"><span class="cl"><span class="sd">     */</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">function</span> <span class="nf">setPrice</span><span class="p">(</span><span class="nx">int</span> <span class="nv">$price</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">price</span> <span class="o">=</span> <span class="nv">$price</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="sd">/**
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @param array $items
</span></span></span><span class="line"><span class="cl"><span class="sd">     */</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">function</span> <span class="nf">setItems</span><span class="p">(</span><span class="k">array</span> <span class="nv">$items</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">items</span> <span class="o">=</span> <span class="nv">$items</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">OptionItem</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span> <span class="nx">string</span> <span class="nv">$title</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span> <span class="nx">string</span> <span class="nv">$description</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span> <span class="nx">int</span> <span class="nv">$price</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="sd">/**
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @param string $title
</span></span></span><span class="line"><span class="cl"><span class="sd">     */</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">function</span> <span class="nf">setTitle</span><span class="p">(</span><span class="nx">string</span> <span class="nv">$title</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">title</span> <span class="o">=</span> <span class="nv">$title</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="sd">/**
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @param string $description
</span></span></span><span class="line"><span class="cl"><span class="sd">     */</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">function</span> <span class="nf">setDescription</span><span class="p">(</span><span class="nx">string</span> <span class="nv">$description</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">description</span> <span class="o">=</span> <span class="nv">$description</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="sd">/**
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @param int $price
</span></span></span><span class="line"><span class="cl"><span class="sd">     */</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">function</span> <span class="nf">setPrice</span><span class="p">(</span><span class="nx">int</span> <span class="nv">$price</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">price</span> <span class="o">=</span> <span class="nv">$price</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nv">$start</span> <span class="o">=</span> <span class="nx">microtime</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$products</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="p">(</span><span class="nv">$k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$k</span> <span class="o">&lt;=</span> <span class="mi">1000</span><span class="p">;</span> <span class="nv">$k</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$product</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Product</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$product</span><span class="o">-&gt;</span><span class="na">setTitle</span><span class="p">(</span><span class="s1">&#39;Product&#39;</span> <span class="o">.</span> <span class="nv">$k</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$product</span><span class="o">-&gt;</span><span class="na">setDescription</span><span class="p">(</span><span class="s1">&#39;Product &#39;</span> <span class="o">.</span> <span class="nv">$k</span> <span class="o">.</span> <span class="s1">&#39; Description&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$product</span><span class="o">-&gt;</span><span class="na">setPrice</span><span class="p">(</span><span class="nx">random_int</span><span class="p">(</span><span class="mi">1000</span><span class="p">,</span> <span class="mi">10000</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$product</span><span class="o">-&gt;</span><span class="na">setCurrency</span><span class="p">(</span><span class="s1">&#39;USD&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$product</span><span class="o">-&gt;</span><span class="na">setCategory</span><span class="p">(</span><span class="s1">&#39;Category&#39;</span> <span class="o">.</span> <span class="nv">$k</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$product</span><span class="o">-&gt;</span><span class="na">setBrand</span><span class="p">(</span><span class="s1">&#39;Brand&#39;</span> <span class="o">.</span> <span class="nv">$k</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$options</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="nv">$j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$j</span> <span class="o">&lt;=</span> <span class="mi">10</span><span class="p">;</span> <span class="nv">$j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$option</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Option</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$option</span><span class="o">-&gt;</span><span class="na">setTitle</span><span class="p">(</span><span class="s1">&#39;Option&#39;</span> <span class="o">.</span> <span class="nv">$j</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$option</span><span class="o">-&gt;</span><span class="na">setDescription</span><span class="p">(</span><span class="s1">&#39;Option &#39;</span> <span class="o">.</span> <span class="nv">$j</span> <span class="o">.</span> <span class="s1">&#39; Description&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$option</span><span class="o">-&gt;</span><span class="na">setPrice</span><span class="p">(</span><span class="nx">random_int</span><span class="p">(</span><span class="mi">1000</span><span class="p">,</span> <span class="mi">10000</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nv">$optionItems</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;=</span> <span class="mi">100</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nv">$optionItem</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">OptionItem</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="nv">$optionItem</span><span class="o">-&gt;</span><span class="na">setTitle</span><span class="p">(</span><span class="s1">&#39;Option Item&#39;</span> <span class="o">.</span> <span class="nv">$i</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="nv">$optionItem</span><span class="o">-&gt;</span><span class="na">setDescription</span><span class="p">(</span><span class="s1">&#39;Option Item &#39;</span> <span class="o">.</span> <span class="nv">$i</span> <span class="o">.</span> <span class="s1">&#39; Description&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="nv">$optionItem</span><span class="o">-&gt;</span><span class="na">setPrice</span><span class="p">(</span><span class="nx">random_int</span><span class="p">(</span><span class="mi">1000</span><span class="p">,</span> <span class="mi">10000</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="nv">$optionItems</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$optionItem</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nv">$option</span><span class="o">-&gt;</span><span class="na">setItems</span><span class="p">(</span><span class="nv">$optionItems</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$options</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$option</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$product</span><span class="o">-&gt;</span><span class="na">setOptions</span><span class="p">(</span><span class="nv">$options</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$products</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$product</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$end</span> <span class="o">=</span> <span class="nx">microtime</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="k">echo</span> <span class="s1">&#39;Memory Peak Usage: &#39;</span> <span class="o">.</span> <span class="p">(</span><span class="nx">memory_get_peak_usage</span><span class="p">(</span><span class="k">true</span><span class="p">)</span> <span class="o">/</span> <span class="mi">1024</span> <span class="o">/</span> <span class="mi">1024</span><span class="p">)</span> <span class="o">.</span> <span class="s1">&#39; MB&#39;</span> <span class="o">.</span> <span class="s1">&#39;&lt;br&gt;&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">echo</span> <span class="s1">&#39;Execution Time: &#39;</span> <span class="o">.</span> <span class="nx">round</span><span class="p">(</span><span class="nv">$end</span> <span class="o">-</span> <span class="nv">$start</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">.</span> <span class="s1">&#39; seconds&#39;</span> <span class="o">.</span> <span class="s1">&#39;&lt;br&gt;&#39;</span><span class="p">;</span></span></span></code></pre>
</div>
<h3 id="illuminatesupportcollection" class="headerLink">
    <a href="#illuminatesupportcollection" class="header-mark"></a>Illuminate\Support\Collection</h3><div class="code-block highlight is-closed show-line-numbers  tw-group tw-my-2">
  <div class="
    code-block-title 
    
    tw-flex 
    tw-flex-row 
    tw-justify-between 
    tw-w-full tw-bg-bgColor-secondary
    ">      
    <button 
      class="
        tw-select-none 
        tw-mx-2 
        tw-block
        group-[.is-open]:tw-rotate-90
        tw-transition-[transform] 
        tw-duration-500 
        tw-ease-in-out
        print:!tw-hidden"
      disabled
      aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z"/></svg></button>

    <div class="code-block-title-bar tw-w-full">
      <p class="tw-select-none !tw-my-1">PHP</p>
    </div>
    <div class="tw-flex">
      <button 
        class="
          line-number-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.show-line-numbers]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle line numbers"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M61.77 401l17.5-20.15a19.92 19.92 0 0 0 5.07-14.19v-3.31C84.34 356 80.5 352 73 352H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8h22.83a157.41 157.41 0 0 0-11 12.31l-5.61 7c-4 5.07-5.25 10.13-2.8 14.88l1.05 1.93c3 5.76 6.29 7.88 12.25 7.88h4.73c10.33 0 15.94 2.44 15.94 9.09 0 4.72-4.2 8.22-14.36 8.22a41.54 41.54 0 0 1-15.47-3.12c-6.49-3.88-11.74-3.5-15.6 3.12l-5.59 9.31c-3.72 6.13-3.19 11.72 2.63 15.94 7.71 4.69 20.38 9.44 37 9.44 34.16 0 48.5-22.75 48.5-44.12-.03-14.38-9.12-29.76-28.73-34.88zM496 224H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-160H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16V80a16 16 0 0 0-16-16zm0 320H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM16 160h64a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H64V40a8 8 0 0 0-8-8H32a8 8 0 0 0-7.14 4.42l-8 16A8 8 0 0 0 24 64h8v64H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8zm-3.91 160H80a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H41.32c3.29-10.29 48.34-18.68 48.34-56.44 0-29.06-25-39.56-44.47-39.56-21.36 0-33.8 10-40.46 18.75-4.37 5.59-3 10.84 2.8 15.37l8.58 6.88c5.61 4.56 11 2.47 16.12-2.44a13.44 13.44 0 0 1 9.46-3.84c3.33 0 9.28 1.56 9.28 8.75C51 248.19 0 257.31 0 304.59v4C0 316 5.08 320 12.09 320z"/></svg></button>

      <button 
        class="
          wrap-code-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.is-wrap]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle code wrap"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z"/></svg></button>
      
      <button 
        class="
          copy-code-button
          tw-select-none
          tw-mx-2 
          tw-hidden
          group-[.is-open]:tw-block
          hover:tw-text-fgColor-link 
          print:!tw-hidden"
        title="Copy code">
          <span class="copy-icon tw-block"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z"/></svg></span>
          <span class="check-icon tw-hidden"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"/></svg></span>
      </button>
        
      <button 
        class="
          tw-select-none 
          tw-mx-2 
          tw-block 
          group-[.is-open]:tw-hidden 
          print:!tw-hidden" 
        disabled
        aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M328 256c0 39.8-32.2 72-72 72s-72-32.2-72-72 32.2-72 72-72 72 32.2 72 72zm104-72c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72zm-352 0c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72z"/></svg></button>
    </div>
  </div>
  <pre style="counter-reset: codeblock;" class="tw-block tw-m-0 tw-p-0"><code 
    id="codeblock-id-4" 
    class="
      chroma 
      !tw-block 
      tw-p-0
      tw-m-0
      tw-transition-[max-height] 
      tw-duration-500 
      tw-ease-in-out 
      group-[.is-closed]:!tw-max-h-0 
      group-[.is-wrap]:tw-text-wrap
      tw-overflow-y-hidden
      tw-overflow-x-auto
      tw-scrollbar-thin
      "><span class="line"><span class="cl"><span class="o">&lt;?</span><span class="nx">php</span>
</span></span><span class="line"><span class="cl"><span class="k">namespace</span> <span class="nx">Illuminate\Contracts\Support</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">ini_set</span><span class="p">(</span><span class="s1">&#39;memory_limit&#39;</span><span class="p">,</span> <span class="s1">&#39;1024M&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="k">interface</span> <span class="nx">CanBeEscapedWhenCastToString</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="sd">/**
</span></span></span><span class="line"><span class="cl"><span class="sd">     * Indicate that the object&#39;s string representation should be escaped when __toString is invoked.
</span></span></span><span class="line"><span class="cl"><span class="sd">     *
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @param  bool  $escape
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @return $this
</span></span></span><span class="line"><span class="cl"><span class="sd">     */</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">function</span> <span class="nf">escapeWhenCastingToString</span><span class="p">(</span><span class="nv">$escape</span> <span class="o">=</span> <span class="k">true</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="cp">?&gt;</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">&lt;?php
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">namespace Illuminate\Support\Traits;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">use Closure;
</span></span></span><span class="line"><span class="cl"><span class="err">use Illuminate\Support\HigherOrderWhenProxy;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">trait Conditionable
</span></span></span><span class="line"><span class="cl"><span class="err">{
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Apply the callback if the given &#34;value&#34; is (or resolves to) truthy.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TWhenParameter
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TWhenReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (\Closure($this): TWhenParameter)|TWhenParameter|null  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable($this, TWhenParameter): TWhenReturnType)|null  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable($this, TWhenParameter): TWhenReturnType)|null  $default
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return $this|TWhenReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function when($value = null, ?callable $callback = null, ?callable $default = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $value = $value instanceof Closure ? $value($this) : $value;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if (func_num_args() === 0) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return new HigherOrderWhenProxy($this);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if (func_num_args() === 1) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return (new HigherOrderWhenProxy($this))-&gt;condition($value);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($value) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return $callback($this, $value) ?? $this;
</span></span></span><span class="line"><span class="cl"><span class="err">        } elseif ($default) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return $default($this, $value) ?? $this;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Apply the callback if the given &#34;value&#34; is (or resolves to) falsy.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TUnlessParameter
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TUnlessReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (\Closure($this): TUnlessParameter)|TUnlessParameter|null  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable($this, TUnlessParameter): TUnlessReturnType)|null  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable($this, TUnlessParameter): TUnlessReturnType)|null  $default
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return $this|TUnlessReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function unless($value = null, ?callable $callback = null, ?callable $default = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $value = $value instanceof Closure ? $value($this) : $value;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if (func_num_args() === 0) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return (new HigherOrderWhenProxy($this))-&gt;negateConditionOnCapture();
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if (func_num_args() === 1) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return (new HigherOrderWhenProxy($this))-&gt;condition(! $value);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if (! $value) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return $callback($this, $value) ?? $this;
</span></span></span><span class="line"><span class="cl"><span class="err">        } elseif ($default) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return $default($this, $value) ?? $this;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">}
</span></span></span><span class="line"><span class="cl"><span class="err">?&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">&lt;?php
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">namespace Illuminate\Support;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">use ArgumentCountError;
</span></span></span><span class="line"><span class="cl"><span class="err">use \ArrayAccess;
</span></span></span><span class="line"><span class="cl"><span class="err">use Illuminate\Support\Traits\Macroable;
</span></span></span><span class="line"><span class="cl"><span class="err">use InvalidArgumentException;
</span></span></span><span class="line"><span class="cl"><span class="err">use Random\Randomizer;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">class Arr
</span></span></span><span class="line"><span class="cl"><span class="err">{
</span></span></span><span class="line"><span class="cl"><span class="err">    use Macroable;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Determine whether the given value is array accessible.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function accessible($value)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return is_array($value) || $value instanceof ArrayAccess;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Add an element to an array using &#34;dot&#34; notation if it doesn&#39;t exist.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string|int|float  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function add($array, $key, $value)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if (is_null(static::get($array, $key))) {
</span></span></span><span class="line"><span class="cl"><span class="err">            static::set($array, $key, $value);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $array;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Collapse an array of arrays into a single array.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  iterable  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function collapse($array)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $results = [];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($array as $values) {
</span></span></span><span class="line"><span class="cl"><span class="err">            if ($values instanceof Collection) {
</span></span></span><span class="line"><span class="cl"><span class="err">                $values = $values-&gt;all();
</span></span></span><span class="line"><span class="cl"><span class="err">            } elseif (! is_array($values)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                continue;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            $results[] = $values;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return array_merge([], ...$results);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Cross join the given arrays, returning all possible permutations.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  iterable  ...$arrays
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function crossJoin(...$arrays)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $results = [[]];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($arrays as $index =&gt; $array) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $append = [];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            foreach ($results as $product) {
</span></span></span><span class="line"><span class="cl"><span class="err">                foreach ($array as $item) {
</span></span></span><span class="line"><span class="cl"><span class="err">                    $product[$index] = $item;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">                    $append[] = $product;
</span></span></span><span class="line"><span class="cl"><span class="err">                }
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            $results = $append;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $results;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Divide an array into two arrays. One with keys and the other with values.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function divide($array)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return [array_keys($array), array_values($array)];
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Flatten a multi-dimensional associative array with dots.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  iterable  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $prepend
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function dot($array, $prepend = &#39;&#39;)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $results = [];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($array as $key =&gt; $value) {
</span></span></span><span class="line"><span class="cl"><span class="err">            if (is_array($value) &amp;&amp; ! empty($value)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                $results = array_merge($results, static::dot($value, $prepend.$key.&#39;.&#39;));
</span></span></span><span class="line"><span class="cl"><span class="err">            } else {
</span></span></span><span class="line"><span class="cl"><span class="err">                $results[$prepend.$key] = $value;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $results;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Convert a flatten &#34;dot&#34; notation array into an expanded array.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  iterable  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function undot($array)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $results = [];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($array as $key =&gt; $value) {
</span></span></span><span class="line"><span class="cl"><span class="err">            static::set($results, $key, $value);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $results;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get all of the given array except for a specified array of keys.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array|string|int|float  $keys
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function except($array, $keys)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        static::forget($array, $keys);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $array;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Determine if the given key exists in the provided array.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \ArrayAccess|array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string|int|float  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function exists($array, $key)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($array instanceof Enumerable) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return $array-&gt;has($key);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($array instanceof ArrayAccess) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return $array-&gt;offsetExists($key);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if (is_float($key)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $key = (string) $key;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return array_key_exists($key, $array);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Return the first element in an array passing a given truth test.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TKey
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TValue
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TFirstDefault
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  iterable&lt;TKey, TValue&gt;  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): bool)|null  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TFirstDefault|(\Closure(): TFirstDefault)  $default
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TValue|TFirstDefault
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function first($array, ?callable $callback = null, $default = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if (is_null($callback)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            if (empty($array)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                return value($default);
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            foreach ($array as $item) {
</span></span></span><span class="line"><span class="cl"><span class="err">                return $item;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            return value($default);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($array as $key =&gt; $value) {
</span></span></span><span class="line"><span class="cl"><span class="err">            if ($callback($value, $key)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                return $value;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return value($default);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Return the last element in an array passing a given truth test.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable|null  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $default
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return mixed
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function last($array, ?callable $callback = null, $default = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if (is_null($callback)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return empty($array) ? value($default) : end($array);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return static::first(array_reverse($array, true), $callback, $default);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Take the first or last {$limit} items from an array.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $limit
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function take($array, $limit)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($limit &lt; 0) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return array_slice($array, $limit, abs($limit));
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return array_slice($array, 0, $limit);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Flatten a multi-dimensional array into a single level.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  iterable  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $depth
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function flatten($array, $depth = INF)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $result = [];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($array as $item) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $item = $item instanceof Collection ? $item-&gt;all() : $item;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            if (! is_array($item)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                $result[] = $item;
</span></span></span><span class="line"><span class="cl"><span class="err">            } else {
</span></span></span><span class="line"><span class="cl"><span class="err">                $values = $depth === 1
</span></span></span><span class="line"><span class="cl"><span class="err">                    ? array_values($item)
</span></span></span><span class="line"><span class="cl"><span class="err">                    : static::flatten($item, $depth - 1);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">                foreach ($values as $value) {
</span></span></span><span class="line"><span class="cl"><span class="err">                    $result[] = $value;
</span></span></span><span class="line"><span class="cl"><span class="err">                }
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $result;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Remove one or many array items from a given array using &#34;dot&#34; notation.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array|string|int|float  $keys
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return void
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function forget(&amp;$array, $keys)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $original = &amp;$array;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $keys = (array) $keys;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if (count($keys) === 0) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($keys as $key) {
</span></span></span><span class="line"><span class="cl"><span class="err">            // if the exact key exists in the top-level, remove it
</span></span></span><span class="line"><span class="cl"><span class="err">            if (static::exists($array, $key)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                unset($array[$key]);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">                continue;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            $parts = explode(&#39;.&#39;, $key);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            // clean up before each pass
</span></span></span><span class="line"><span class="cl"><span class="err">            $array = &amp;$original;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            while (count($parts) &gt; 1) {
</span></span></span><span class="line"><span class="cl"><span class="err">                $part = array_shift($parts);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">                if (isset($array[$part]) &amp;&amp; static::accessible($array[$part])) {
</span></span></span><span class="line"><span class="cl"><span class="err">                    $array = &amp;$array[$part];
</span></span></span><span class="line"><span class="cl"><span class="err">                } else {
</span></span></span><span class="line"><span class="cl"><span class="err">                    continue 2;
</span></span></span><span class="line"><span class="cl"><span class="err">                }
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            unset($array[array_shift($parts)]);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get an item from an array using &#34;dot&#34; notation.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \ArrayAccess|array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string|int|null  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $default
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return mixed
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function get($array, $key, $default = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if (! static::accessible($array)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return value($default);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if (is_null($key)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return $array;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if (static::exists($array, $key)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return $array[$key];
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if (! str_contains($key, &#39;.&#39;)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return $array[$key] ?? value($default);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach (explode(&#39;.&#39;, $key) as $segment) {
</span></span></span><span class="line"><span class="cl"><span class="err">            if (static::accessible($array) &amp;&amp; static::exists($array, $segment)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                $array = $array[$segment];
</span></span></span><span class="line"><span class="cl"><span class="err">            } else {
</span></span></span><span class="line"><span class="cl"><span class="err">                return value($default);
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $array;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Check if an item or items exist in an array using &#34;dot&#34; notation.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \ArrayAccess|array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string|array  $keys
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function has($array, $keys)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $keys = (array) $keys;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if (! $array || $keys === []) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return false;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($keys as $key) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $subKeyArray = $array;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            if (static::exists($array, $key)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                continue;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            foreach (explode(&#39;.&#39;, $key) as $segment) {
</span></span></span><span class="line"><span class="cl"><span class="err">                if (static::accessible($subKeyArray) &amp;&amp; static::exists($subKeyArray, $segment)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                    $subKeyArray = $subKeyArray[$segment];
</span></span></span><span class="line"><span class="cl"><span class="err">                } else {
</span></span></span><span class="line"><span class="cl"><span class="err">                    return false;
</span></span></span><span class="line"><span class="cl"><span class="err">                }
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return true;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Determine if any of the keys exist in an array using &#34;dot&#34; notation.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \ArrayAccess|array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string|array  $keys
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function hasAny($array, $keys)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if (is_null($keys)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return false;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $keys = (array) $keys;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if (! $array) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return false;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($keys === []) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return false;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($keys as $key) {
</span></span></span><span class="line"><span class="cl"><span class="err">            if (static::has($array, $key)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                return true;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return false;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Determines if an array is associative.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * An array is &#34;associative&#34; if it doesn&#39;t have sequential numerical keys beginning with zero.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function isAssoc(array $array)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return ! array_is_list($array);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Determines if an array is a list.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * An array is a &#34;list&#34; if all array keys are sequential integers starting from 0 with no gaps in between.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function isList($array)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return array_is_list($array);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Join all items using a string. The final items can use a separate glue string.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $glue
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $finalGlue
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return string
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function join($array, $glue, $finalGlue = &#39;&#39;)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($finalGlue === &#39;&#39;) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return implode($glue, $array);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if (count($array) === 0) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return &#39;&#39;;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if (count($array) === 1) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return end($array);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $finalItem = array_pop($array);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return implode($glue, $array).$finalGlue.$finalItem;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Key an associative array by a field or using a callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable|array|string  $keyBy
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function keyBy($array, $keyBy)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return Collection::make($array)-&gt;keyBy($keyBy)-&gt;all();
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Prepend the key names of an associative array.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $prependWith
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function prependKeysWith($array, $prependWith)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return static::mapWithKeys($array, fn ($item, $key) =&gt; [$prependWith.$key =&gt; $item]);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get a subset of the items from the given array.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array|string  $keys
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function only($array, $keys)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return array_intersect_key($array, array_flip((array) $keys));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Select an array of values from an array.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array|string  $keys
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function select($array, $keys)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $keys = static::wrap($keys);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return static::map($array, function ($item) use ($keys) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $result = [];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            foreach ($keys as $key) {
</span></span></span><span class="line"><span class="cl"><span class="err">                if (Arr::accessible($item) &amp;&amp; Arr::exists($item, $key)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                    $result[$key] = $item[$key];
</span></span></span><span class="line"><span class="cl"><span class="err">                } elseif (is_object($item) &amp;&amp; isset($item-&gt;{$key})) {
</span></span></span><span class="line"><span class="cl"><span class="err">                    $result[$key] = $item-&gt;{$key};
</span></span></span><span class="line"><span class="cl"><span class="err">                }
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            return $result;
</span></span></span><span class="line"><span class="cl"><span class="err">        });
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Pluck an array of values from an array.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  iterable  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string|array|int|null  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string|array|null  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function pluck($array, $value, $key = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $results = [];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        [$value, $key] = static::explodePluckParameters($value, $key);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($array as $item) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $itemValue = data_get($item, $value);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            // If the key is &#34;null&#34;, we will just append the value to the array and keep
</span></span></span><span class="line"><span class="cl"><span class="err">            // looping. Otherwise we will key the array using the value of the key we
</span></span></span><span class="line"><span class="cl"><span class="err">            // received from the developer. Then we&#39;ll return the final array form.
</span></span></span><span class="line"><span class="cl"><span class="err">            if (is_null($key)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                $results[] = $itemValue;
</span></span></span><span class="line"><span class="cl"><span class="err">            } else {
</span></span></span><span class="line"><span class="cl"><span class="err">                $itemKey = data_get($item, $key);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">                if (is_object($itemKey) &amp;&amp; method_exists($itemKey, &#39;__toString&#39;)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                    $itemKey = (string) $itemKey;
</span></span></span><span class="line"><span class="cl"><span class="err">                }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">                $results[$itemKey] = $itemValue;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $results;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Explode the &#34;value&#34; and &#34;key&#34; arguments passed to &#34;pluck&#34;.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string|array  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string|array|null  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    protected static function explodePluckParameters($value, $key)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $value = is_string($value) ? explode(&#39;.&#39;, $value) : $value;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $key = is_null($key) || is_array($key) ? $key : explode(&#39;.&#39;, $key);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return [$value, $key];
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Run a map over each of the items in the array.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function map(array $array, callable $callback)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $keys = array_keys($array);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        try {
</span></span></span><span class="line"><span class="cl"><span class="err">            $items = array_map($callback, $array, $keys);
</span></span></span><span class="line"><span class="cl"><span class="err">        } catch (ArgumentCountError) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $items = array_map($callback, $array);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return array_combine($keys, $items);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Run an associative map over each of the items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * The callback should return an associative array with a single key/value pair.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TKey
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TValue
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TMapWithKeysKey of array-key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TMapWithKeysValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array&lt;TKey, TValue&gt;  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TValue, TKey): array&lt;TMapWithKeysKey, TMapWithKeysValue&gt;  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function mapWithKeys(array $array, callable $callback)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $result = [];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($array as $key =&gt; $value) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $assoc = $callback($value, $key);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            foreach ($assoc as $mapKey =&gt; $mapValue) {
</span></span></span><span class="line"><span class="cl"><span class="err">                $result[$mapKey] = $mapValue;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $result;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Run a map over each nested chunk of items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TKey
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array&lt;TKey, array&gt;  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(mixed...): TValue  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array&lt;TKey, TValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function mapSpread(array $array, callable $callback)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return static::map($array, function ($chunk, $key) use ($callback) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $chunk[] = $key;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            return $callback(...$chunk);
</span></span></span><span class="line"><span class="cl"><span class="err">        });
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Push an item onto the beginning of an array.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function prepend($array, $value, $key = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if (func_num_args() == 2) {
</span></span></span><span class="line"><span class="cl"><span class="err">            array_unshift($array, $value);
</span></span></span><span class="line"><span class="cl"><span class="err">        } else {
</span></span></span><span class="line"><span class="cl"><span class="err">            $array = [$key =&gt; $value] + $array;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $array;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get a value from the array, and remove it.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string|int  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $default
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return mixed
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function pull(&amp;$array, $key, $default = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $value = static::get($array, $key, $default);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        static::forget($array, $key);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $value;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Convert the array into a query string.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return string
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function query($array)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return http_build_query($array, &#39;&#39;, &#39;&amp;&#39;, PHP_QUERY_RFC3986);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get one or a specified number of random values from an array.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int|null  $number
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $preserveKeys
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return mixed
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @throws \InvalidArgumentException
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function random($array, $number = null, $preserveKeys = false)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $requested = is_null($number) ? 1 : $number;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $count = count($array);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($requested &gt; $count) {
</span></span></span><span class="line"><span class="cl"><span class="err">            throw new InvalidArgumentException(
</span></span></span><span class="line"><span class="cl"><span class="err">                &#34;You requested {$requested} items, but there are only {$count} items available.&#34;
</span></span></span><span class="line"><span class="cl"><span class="err">            );
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if (empty($array) || (! is_null($number) &amp;&amp; $number &lt;= 0)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return is_null($number) ? null : [];
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $keys = (new Randomizer)-&gt;pickArrayKeys($array, $requested);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if (is_null($number)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return $array[$keys[0]];
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $results = [];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($preserveKeys) {
</span></span></span><span class="line"><span class="cl"><span class="err">            foreach ($keys as $key) {
</span></span></span><span class="line"><span class="cl"><span class="err">                $results[$key] = $array[$key];
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">        } else {
</span></span></span><span class="line"><span class="cl"><span class="err">            foreach ($keys as $key) {
</span></span></span><span class="line"><span class="cl"><span class="err">                $results[] = $array[$key];
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $results;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Set an array item to a given value using &#34;dot&#34; notation.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * If no key is given to the method, the entire array will be replaced.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string|int|null  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function set(&amp;$array, $key, $value)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if (is_null($key)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return $array = $value;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $keys = explode(&#39;.&#39;, $key);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($keys as $i =&gt; $key) {
</span></span></span><span class="line"><span class="cl"><span class="err">            if (count($keys) === 1) {
</span></span></span><span class="line"><span class="cl"><span class="err">                break;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            unset($keys[$i]);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            // If the key doesn&#39;t exist at this depth, we will just create an empty array
</span></span></span><span class="line"><span class="cl"><span class="err">            // to hold the next value, allowing us to create the arrays to hold final
</span></span></span><span class="line"><span class="cl"><span class="err">            // values at the correct depth. Then we&#39;ll keep digging into the array.
</span></span></span><span class="line"><span class="cl"><span class="err">            if (! isset($array[$key]) || ! is_array($array[$key])) {
</span></span></span><span class="line"><span class="cl"><span class="err">                $array[$key] = [];
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            $array = &amp;$array[$key];
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $array[array_shift($keys)] = $value;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $array;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Shuffle the given array and return the result.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function shuffle($array)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return (new Randomizer)-&gt;shuffleArray($array);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Sort the array using the given callback or &#34;dot&#34; notation.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable|array|string|null  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function sort($array, $callback = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return Collection::make($array)-&gt;sortBy($callback)-&gt;all();
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Sort the array in descending order using the given callback or &#34;dot&#34; notation.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable|array|string|null  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function sortDesc($array, $callback = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return Collection::make($array)-&gt;sortByDesc($callback)-&gt;all();
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Recursively sort an array by keys and values.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $options
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $descending
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function sortRecursive($array, $options = SORT_REGULAR, $descending = false)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($array as &amp;$value) {
</span></span></span><span class="line"><span class="cl"><span class="err">            if (is_array($value)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                $value = static::sortRecursive($value, $options, $descending);
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if (! array_is_list($array)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $descending
</span></span></span><span class="line"><span class="cl"><span class="err">                ? krsort($array, $options)
</span></span></span><span class="line"><span class="cl"><span class="err">                : ksort($array, $options);
</span></span></span><span class="line"><span class="cl"><span class="err">        } else {
</span></span></span><span class="line"><span class="cl"><span class="err">            $descending
</span></span></span><span class="line"><span class="cl"><span class="err">                ? rsort($array, $options)
</span></span></span><span class="line"><span class="cl"><span class="err">                : sort($array, $options);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $array;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Recursively sort an array by keys and values in descending order.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $options
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function sortRecursiveDesc($array, $options = SORT_REGULAR)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return static::sortRecursive($array, $options, true);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Conditionally compile classes from an array into a CSS class list.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return string
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function toCssClasses($array)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $classList = static::wrap($array);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $classes = [];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($classList as $class =&gt; $constraint) {
</span></span></span><span class="line"><span class="cl"><span class="err">            if (is_numeric($class)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                $classes[] = $constraint;
</span></span></span><span class="line"><span class="cl"><span class="err">            } elseif ($constraint) {
</span></span></span><span class="line"><span class="cl"><span class="err">                $classes[] = $class;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return implode(&#39; &#39;, $classes);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Conditionally compile styles from an array into a style list.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return string
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function toCssStyles($array)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $styleList = static::wrap($array);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $styles = [];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($styleList as $class =&gt; $constraint) {
</span></span></span><span class="line"><span class="cl"><span class="err">            if (is_numeric($class)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                $styles[] = Str::finish($constraint, &#39;;&#39;);
</span></span></span><span class="line"><span class="cl"><span class="err">            } elseif ($constraint) {
</span></span></span><span class="line"><span class="cl"><span class="err">                $styles[] = Str::finish($class, &#39;;&#39;);
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return implode(&#39; &#39;, $styles);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Filter the array using the given callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function where($array, callable $callback)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return array_filter($array, $callback, ARRAY_FILTER_USE_BOTH);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Filter items where the value is not null.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function whereNotNull($array)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return static::where($array, fn ($value) =&gt; ! is_null($value));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * If the given value is not an array and not null, wrap it in one.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function wrap($value)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if (is_null($value)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return [];
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return is_array($value) ? $value : [$value];
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">}
</span></span></span><span class="line"><span class="cl"><span class="err">?&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">&lt;?php
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">namespace Illuminate\Contracts\Support;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">interface Jsonable
</span></span></span><span class="line"><span class="cl"><span class="err">{
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Convert the object to its JSON representation.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $options
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return string
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function toJson($options = 0);
</span></span></span><span class="line"><span class="cl"><span class="err">}
</span></span></span><span class="line"><span class="cl"><span class="err">?&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">&lt;?php
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">namespace Illuminate\Contracts\Support;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">/**
</span></span></span><span class="line"><span class="cl"><span class="err"> * @template TKey of array-key
</span></span></span><span class="line"><span class="cl"><span class="err"> * @template TValue
</span></span></span><span class="line"><span class="cl"><span class="err"> */
</span></span></span><span class="line"><span class="cl"><span class="err">interface Arrayable
</span></span></span><span class="line"><span class="cl"><span class="err">{
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the instance as an array.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array&lt;TKey, TValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function toArray();
</span></span></span><span class="line"><span class="cl"><span class="err">}
</span></span></span><span class="line"><span class="cl"><span class="err">?&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">&lt;?php
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">namespace Illuminate\Support\Traits;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">use BadMethodCallException;
</span></span></span><span class="line"><span class="cl"><span class="err">use ReflectionClass;
</span></span></span><span class="line"><span class="cl"><span class="err">use ReflectionMethod;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">trait Macroable
</span></span></span><span class="line"><span class="cl"><span class="err">{
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * The registered string macros.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @var array
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    protected static $macros = [];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Register a custom macro.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $name
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  object|callable  $macro
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param-closure-this static  $macro
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return void
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function macro($name, $macro)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        static::$macros[$name] = $macro;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Mix another object into the class.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  object  $mixin
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $replace
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return void
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @throws \ReflectionException
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function mixin($mixin, $replace = true)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $methods = (new ReflectionClass($mixin))-&gt;getMethods(
</span></span></span><span class="line"><span class="cl"><span class="err">            ReflectionMethod::IS_PUBLIC | ReflectionMethod::IS_PROTECTED
</span></span></span><span class="line"><span class="cl"><span class="err">        );
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($methods as $method) {
</span></span></span><span class="line"><span class="cl"><span class="err">            if ($replace || ! static::hasMacro($method-&gt;name)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                static::macro($method-&gt;name, $method-&gt;invoke($mixin));
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Checks if macro is registered.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $name
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function hasMacro($name)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return isset(static::$macros[$name]);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Flush the existing macros.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return void
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function flushMacros()
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        static::$macros = [];
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Dynamically handle calls to the class.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $method
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $parameters
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return mixed
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @throws \BadMethodCallException
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function __callStatic($method, $parameters)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if (! static::hasMacro($method)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            throw new BadMethodCallException(sprintf(
</span></span></span><span class="line"><span class="cl"><span class="err">                &#39;Method %s::%s does not exist.&#39;, static::class, $method
</span></span></span><span class="line"><span class="cl"><span class="err">            ));
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $macro = static::$macros[$method];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($macro instanceof Closure) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $macro = $macro-&gt;bindTo(null, static::class);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $macro(...$parameters);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Dynamically handle calls to the class.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $method
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $parameters
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return mixed
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @throws \BadMethodCallException
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function __call($method, $parameters)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if (! static::hasMacro($method)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            throw new BadMethodCallException(sprintf(
</span></span></span><span class="line"><span class="cl"><span class="err">                &#39;Method %s::%s does not exist.&#39;, static::class, $method
</span></span></span><span class="line"><span class="cl"><span class="err">            ));
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $macro = static::$macros[$method];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($macro instanceof Closure) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $macro = $macro-&gt;bindTo($this, static::class);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $macro(...$parameters);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">}
</span></span></span><span class="line"><span class="cl"><span class="err">?&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">&lt;?php
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">namespace Illuminate\Support;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">use CachingIterator;
</span></span></span><span class="line"><span class="cl"><span class="err">use Countable;
</span></span></span><span class="line"><span class="cl"><span class="err">use Illuminate\Contracts\Support\Arrayable;
</span></span></span><span class="line"><span class="cl"><span class="err">use Illuminate\Contracts\Support\Jsonable;
</span></span></span><span class="line"><span class="cl"><span class="err">use IteratorAggregate;
</span></span></span><span class="line"><span class="cl"><span class="err">use JsonSerializable;
</span></span></span><span class="line"><span class="cl"><span class="err">use \Traversable;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">/**
</span></span></span><span class="line"><span class="cl"><span class="err"> * @template TKey of array-key
</span></span></span><span class="line"><span class="cl"><span class="err"> *
</span></span></span><span class="line"><span class="cl"><span class="err"> * @template-covariant TValue
</span></span></span><span class="line"><span class="cl"><span class="err"> *
</span></span></span><span class="line"><span class="cl"><span class="err"> * @extends \Illuminate\Contracts\Support\Arrayable&lt;TKey, TValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err"> * @extends \IteratorAggregate&lt;TKey, TValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err"> */
</span></span></span><span class="line"><span class="cl"><span class="err">interface Enumerable extends Arrayable, Countable, IteratorAggregate, Jsonable, JsonSerializable
</span></span></span><span class="line"><span class="cl"><span class="err">{
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Create a new collection instance if the value isn&#39;t one already.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TMakeKey of array-key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TMakeValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;TMakeKey, TMakeValue&gt;|iterable&lt;TMakeKey, TMakeValue&gt;|null  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;TMakeKey, TMakeValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function make($items = []);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Create a new instance by invoking the callback a given amount of times.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $number
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable|null  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function times($number, ?callable $callback = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Create a collection with the given range.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $from
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $to
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $step
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function range($from, $to, $step = 1);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Wrap the given value in a collection if applicable.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TWrapValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  iterable&lt;array-key, TWrapValue&gt;|TWrapValue  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;array-key, TWrapValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function wrap($value);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the underlying items from the given collection if applicable.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TUnwrapKey of array-key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TUnwrapValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array&lt;TUnwrapKey, TUnwrapValue&gt;|static&lt;TUnwrapKey, TUnwrapValue&gt;  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array&lt;TUnwrapKey, TUnwrapValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function unwrap($value);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Create a new instance with no items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function empty();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get all items in the enumerable.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function all();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Alias for the &#34;avg&#34; method.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue): float|int)|string|null  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return float|int|null
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function average($callback = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the median of a given key.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string|array&lt;array-key, string&gt;|null  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return float|int|null
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function median($key = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the mode of a given key.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string|array&lt;array-key, string&gt;|null  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array&lt;int, float|int&gt;|null
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function mode($key = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Collapse the items into a single enumerable.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int, mixed&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function collapse();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Alias for the &#34;contains&#34; method.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): bool)|TValue|string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $operator
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function some($key, $operator = null, $value = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Determine if an item exists, using strict comparison.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue): bool)|TValue|array-key  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TValue|null  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function containsStrict($key, $value = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the average value of a given key.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue): float|int)|string|null  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return float|int|null
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function avg($callback = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Determine if an item exists in the enumerable.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): bool)|TValue|string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $operator
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function contains($key, $operator = null, $value = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Determine if an item is not contained in the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $operator
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function doesntContain($key, $operator = null, $value = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Cross join with the given lists, returning all possible permutations.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TCrossJoinKey
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TCrossJoinValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;TCrossJoinKey, TCrossJoinValue&gt;|iterable&lt;TCrossJoinKey, TCrossJoinValue&gt;  ...$lists
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int, array&lt;int, TValue|TCrossJoinValue&gt;&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function crossJoin(...$lists);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Dump the collection and end the script.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  ...$args
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return never
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function dd(...$args);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Dump the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  ...$args
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return $this
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function dump(...$args);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the items that are not present in the given items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;array-key, TValue&gt;|iterable&lt;array-key, TValue&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function diff($items);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the items that are not present in the given items, using the callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;array-key, TValue&gt;|iterable&lt;array-key, TValue&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TValue, TValue): int  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function diffUsing($items, callable $callback);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the items whose keys and values are not present in the given items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;TKey, TValue&gt;|iterable&lt;TKey, TValue&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function diffAssoc($items);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the items whose keys and values are not present in the given items, using the callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;TKey, TValue&gt;|iterable&lt;TKey, TValue&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TKey, TKey): int  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function diffAssocUsing($items, callable $callback);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the items whose keys are not present in the given items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;TKey, mixed&gt;|iterable&lt;TKey, mixed&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function diffKeys($items);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the items whose keys are not present in the given items, using the callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;TKey, mixed&gt;|iterable&lt;TKey, mixed&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TKey, TKey): int  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function diffKeysUsing($items, callable $callback);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Retrieve duplicate items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue): bool)|string|null  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $strict
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function duplicates($callback = null, $strict = false);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Retrieve duplicate items using strict comparison.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue): bool)|string|null  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function duplicatesStrict($callback = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Execute a callback over each item.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TValue, TKey): mixed  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return $this
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function each(callable $callback);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Execute a callback over each nested chunk of items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function eachSpread(callable $callback);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Determine if all items pass the given truth test.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): bool)|TValue|string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $operator
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function every($key, $operator = null, $value = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get all items except for those with the specified keys.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Support\Enumerable&lt;array-key, TKey&gt;|array&lt;array-key, TKey&gt;  $keys
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function except($keys);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Run a filter over each of the items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue): bool)|null  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function filter(?callable $callback = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Apply the callback if the given &#34;value&#34; is (or resolves to) truthy.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TWhenReturnType as null
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable($this): TWhenReturnType)|null  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable($this): TWhenReturnType)|null  $default
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return $this|TWhenReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function when($value, ?callable $callback = null, ?callable $default = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Apply the callback if the collection is empty.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TWhenEmptyReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable($this): TWhenEmptyReturnType)  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable($this): TWhenEmptyReturnType)|null  $default
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return $this|TWhenEmptyReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function whenEmpty(callable $callback, ?callable $default = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Apply the callback if the collection is not empty.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TWhenNotEmptyReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable($this): TWhenNotEmptyReturnType  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable($this): TWhenNotEmptyReturnType)|null  $default
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return $this|TWhenNotEmptyReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function whenNotEmpty(callable $callback, ?callable $default = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Apply the callback if the given &#34;value&#34; is (or resolves to) falsy.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TUnlessReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable($this): TUnlessReturnType)  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable($this): TUnlessReturnType)|null  $default
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return $this|TUnlessReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function unless($value, callable $callback, ?callable $default = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Apply the callback unless the collection is empty.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TUnlessEmptyReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable($this): TUnlessEmptyReturnType  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable($this): TUnlessEmptyReturnType)|null  $default
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return $this|TUnlessEmptyReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function unlessEmpty(callable $callback, ?callable $default = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Apply the callback unless the collection is not empty.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TUnlessNotEmptyReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable($this): TUnlessNotEmptyReturnType  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable($this): TUnlessNotEmptyReturnType)|null  $default
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return $this|TUnlessNotEmptyReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function unlessNotEmpty(callable $callback, ?callable $default = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Filter items by the given key value pair.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $operator
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function where($key, $operator = null, $value = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Filter items where the value for the given key is null.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string|null  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function whereNull($key = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Filter items where the value for the given key is not null.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string|null  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function whereNotNull($key = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Filter items by the given key value pair using strict comparison.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function whereStrict($key, $value);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Filter items by the given key value pair.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable|iterable  $values
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $strict
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function whereIn($key, $values, $strict = false);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Filter items by the given key value pair using strict comparison.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable|iterable  $values
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function whereInStrict($key, $values);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Filter items such that the value of the given key is between the given values.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable|iterable  $values
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function whereBetween($key, $values);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Filter items such that the value of the given key is not between the given values.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable|iterable  $values
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function whereNotBetween($key, $values);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Filter items by the given key value pair.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable|iterable  $values
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $strict
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function whereNotIn($key, $values, $strict = false);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Filter items by the given key value pair using strict comparison.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable|iterable  $values
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function whereNotInStrict($key, $values);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Filter the items, removing any items that don&#39;t match the given type(s).
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TWhereInstanceOf
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  class-string&lt;TWhereInstanceOf&gt;|array&lt;array-key, class-string&lt;TWhereInstanceOf&gt;&gt;  $type
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;TKey, TWhereInstanceOf&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function whereInstanceOf($type);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the first item from the enumerable passing the given truth test.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TFirstDefault
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue,TKey): bool)|null  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TFirstDefault|(\Closure(): TFirstDefault)  $default
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TValue|TFirstDefault
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function first(?callable $callback = null, $default = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the first item by the given key value pair.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $operator
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TValue|null
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function firstWhere($key, $operator = null, $value = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get a flattened array of the items in the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $depth
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function flatten($depth = INF);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Flip the values with their keys.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;TValue, TKey&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function flip();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get an item from the collection by key.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TGetDefault
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TKey  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TGetDefault|(\Closure(): TGetDefault)  $default
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TValue|TGetDefault
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function get($key, $default = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Group an associative array by a field or using a callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TGroupKey of array-key
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): TGroupKey)|array|string  $groupBy
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $preserveKeys
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;($groupBy is string ? array-key : ($groupBy is array ? array-key : TGroupKey)), static&lt;($preserveKeys is true ? TKey : int), TValue&gt;&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function groupBy($groupBy, $preserveKeys = false);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Key an associative array by a field or using a callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TNewKey of array-key
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): TNewKey)|array|string  $keyBy
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;($keyBy is string ? array-key : ($keyBy is array ? array-key : TNewKey)), TValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function keyBy($keyBy);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Determine if an item exists in the collection by key.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TKey|array&lt;array-key, TKey&gt;  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function has($key);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Determine if any of the keys exist in the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function hasAny($key);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Concatenate values of a given key as a string.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): mixed)|string  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string|null  $glue
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return string
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function implode($value, $glue = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Intersect the collection with the given items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;TKey, TValue&gt;|iterable&lt;TKey, TValue&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function intersect($items);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Intersect the collection with the given items, using the callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;array-key, TValue&gt;|iterable&lt;array-key, TValue&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TValue, TValue): int  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function intersectUsing($items, callable $callback);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Intersect the collection with the given items with additional index check.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;TKey, TValue&gt;|iterable&lt;TKey, TValue&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function intersectAssoc($items);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Intersect the collection with the given items with additional index check, using the callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;array-key, TValue&gt;|iterable&lt;array-key, TValue&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TValue, TValue): int  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function intersectAssocUsing($items, callable $callback);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Intersect the collection with the given items by key.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;TKey, mixed&gt;|iterable&lt;TKey, mixed&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function intersectByKeys($items);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Determine if the collection is empty or not.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function isEmpty();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Determine if the collection is not empty.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function isNotEmpty();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Determine if the collection contains a single item.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function containsOneItem();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Join all items from the collection using a string. The final items can use a separate glue string.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $glue
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $finalGlue
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return string
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function join($glue, $finalGlue = &#39;&#39;);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the keys of the collection items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int, TKey&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function keys();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the last item from the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TLastDefault
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): bool)|null  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TLastDefault|(\Closure(): TLastDefault)  $default
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TValue|TLastDefault
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function last(?callable $callback = null, $default = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Run a map over each of the items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TMapValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TValue, TKey): TMapValue  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;TKey, TMapValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function map(callable $callback);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Run a map over each nested chunk of items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function mapSpread(callable $callback);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Run a dictionary map over the items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * The callback should return an associative array with a single key/value pair.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TMapToDictionaryKey of array-key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TMapToDictionaryValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TValue, TKey): array&lt;TMapToDictionaryKey, TMapToDictionaryValue&gt;  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;TMapToDictionaryKey, array&lt;int, TMapToDictionaryValue&gt;&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function mapToDictionary(callable $callback);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Run a grouping map over the items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * The callback should return an associative array with a single key/value pair.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TMapToGroupsKey of array-key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TMapToGroupsValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TValue, TKey): array&lt;TMapToGroupsKey, TMapToGroupsValue&gt;  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;TMapToGroupsKey, static&lt;int, TMapToGroupsValue&gt;&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function mapToGroups(callable $callback);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Run an associative map over each of the items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * The callback should return an associative array with a single key/value pair.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TMapWithKeysKey of array-key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TMapWithKeysValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TValue, TKey): array&lt;TMapWithKeysKey, TMapWithKeysValue&gt;  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;TMapWithKeysKey, TMapWithKeysValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function mapWithKeys(callable $callback);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Map a collection and flatten the result by a single level.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TFlatMapKey of array-key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TFlatMapValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TValue, TKey): (\Illuminate\Support\Collection&lt;TFlatMapKey, TFlatMapValue&gt;|array&lt;TFlatMapKey, TFlatMapValue&gt;)  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;TFlatMapKey, TFlatMapValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function flatMap(callable $callback);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Map the values into a new class.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TMapIntoValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  class-string&lt;TMapIntoValue&gt;  $class
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;TKey, TMapIntoValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function mapInto($class);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Merge the collection with the given items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;TKey, TValue&gt;|iterable&lt;TKey, TValue&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function merge($items);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Recursively merge the collection with the given items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TMergeRecursiveValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;TKey, TMergeRecursiveValue&gt;|iterable&lt;TKey, TMergeRecursiveValue&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;TKey, TValue|TMergeRecursiveValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function mergeRecursive($items);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Create a collection by using this collection for keys and another for its values.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TCombineValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;array-key, TCombineValue&gt;|iterable&lt;array-key, TCombineValue&gt;  $values
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;TValue, TCombineValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function combine($values);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Union the collection with the given items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;TKey, TValue&gt;|iterable&lt;TKey, TValue&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function union($items);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the min value of a given key.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue):mixed)|string|null  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return mixed
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function min($callback = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the max value of a given key.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue):mixed)|string|null  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return mixed
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function max($callback = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Create a new collection consisting of every n-th element.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $step
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $offset
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function nth($step, $offset = 0);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the items with the specified keys.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Support\Enumerable&lt;array-key, TKey&gt;|array&lt;array-key, TKey&gt;|string  $keys
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function only($keys);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * &#34;Paginate&#34; the collection by slicing it into a smaller collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $page
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $perPage
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function forPage($page, $perPage);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Partition the collection into two arrays using the given callback or key.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): bool)|TValue|string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $operator
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int&lt;0, 1&gt;, static&lt;TKey, TValue&gt;&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function partition($key, $operator = null, $value = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Push all of the given items onto the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TConcatKey of array-key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TConcatValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  iterable&lt;TConcatKey, TConcatValue&gt;  $source
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;TKey|TConcatKey, TValue|TConcatValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function concat($source);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get one or a specified number of items randomly from the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int|null  $number
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int, TValue&gt;|TValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @throws \InvalidArgumentException
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function random($number = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Reduce the collection to a single value.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TReduceInitial
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TReduceReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TReduceInitial|TReduceReturnType, TValue, TKey): TReduceReturnType  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TReduceInitial  $initial
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TReduceReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function reduce(callable $callback, $initial = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Reduce the collection to multiple aggregate values.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  ...$initial
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @throws \UnexpectedValueException
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function reduceSpread(callable $callback, ...$initial);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Replace the collection items with the given items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;TKey, TValue&gt;|iterable&lt;TKey, TValue&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function replace($items);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Recursively replace the collection items with the given items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;TKey, TValue&gt;|iterable&lt;TKey, TValue&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function replaceRecursive($items);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Reverse items order.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function reverse();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Search the collection for a given value and return the corresponding key if successful.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TValue|callable(TValue,TKey): bool  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $strict
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TKey|bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function search($value, $strict = false);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the item before the given item.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TValue|(callable(TValue,TKey): bool)  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $strict
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TValue|null
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function before($value, $strict = false);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the item after the given item.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TValue|(callable(TValue,TKey): bool)  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $strict
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TValue|null
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function after($value, $strict = false);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Shuffle the items in the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function shuffle();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Create chunks representing a &#34;sliding window&#34; view of the items in the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $size
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $step
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int, static&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function sliding($size = 2, $step = 1);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Skip the first {$count} items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $count
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function skip($count);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Skip items in the collection until the given condition is met.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TValue|callable(TValue,TKey): bool  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function skipUntil($value);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Skip items in the collection while the given condition is met.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TValue|callable(TValue,TKey): bool  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function skipWhile($value);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get a slice of items from the enumerable.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $offset
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int|null  $length
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function slice($offset, $length = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Split a collection into a certain number of groups.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $numberOfGroups
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int, static&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function split($numberOfGroups);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the first item in the collection, but only if exactly one item exists. Otherwise, throw an exception.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): bool)|string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $operator
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @throws \Illuminate\Support\ItemNotFoundException
</span></span></span><span class="line"><span class="cl"><span class="err">     * @throws \Illuminate\Support\MultipleItemsFoundException
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function sole($key = null, $operator = null, $value = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the first item in the collection but throw an exception if no matching items exist.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): bool)|string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $operator
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @throws \Illuminate\Support\ItemNotFoundException
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function firstOrFail($key = null, $operator = null, $value = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Chunk the collection into chunks of the given size.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $size
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int, static&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function chunk($size);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Chunk the collection into chunks with a callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TValue, TKey, static&lt;int, TValue&gt;): bool  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int, static&lt;int, TValue&gt;&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function chunkWhile(callable $callback);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Split a collection into a certain number of groups, and fill the first groups completely.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $numberOfGroups
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int, static&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function splitIn($numberOfGroups);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Sort through each item with a callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TValue): int)|null|int  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function sort($callback = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Sort items in descending order.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $options
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function sortDesc($options = SORT_REGULAR);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Sort the collection using the given callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array&lt;array-key, (callable(TValue, TValue): mixed)|(callable(TValue, TKey): mixed)|string|array{string, string}&gt;|(callable(TValue, TKey): mixed)|string  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $options
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $descending
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function sortBy($callback, $options = SORT_REGULAR, $descending = false);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Sort the collection in descending order using the given callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array&lt;array-key, (callable(TValue, TValue): mixed)|(callable(TValue, TKey): mixed)|string|array{string, string}&gt;|(callable(TValue, TKey): mixed)|string  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $options
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function sortByDesc($callback, $options = SORT_REGULAR);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Sort the collection keys.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $options
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $descending
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function sortKeys($options = SORT_REGULAR, $descending = false);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Sort the collection keys in descending order.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $options
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function sortKeysDesc($options = SORT_REGULAR);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Sort the collection keys using a callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TKey, TKey): int  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function sortKeysUsing(callable $callback);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the sum of the given values.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue): mixed)|string|null  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return mixed
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function sum($callback = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Take the first or last {$limit} items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $limit
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function take($limit);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Take items in the collection until the given condition is met.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TValue|callable(TValue,TKey): bool  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function takeUntil($value);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Take items in the collection while the given condition is met.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TValue|callable(TValue,TKey): bool  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function takeWhile($value);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Pass the collection to the given callback and then return it.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TValue): mixed  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return $this
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function tap(callable $callback);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Pass the enumerable to the given callback and return the result.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TPipeReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable($this): TPipeReturnType  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TPipeReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function pipe(callable $callback);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Pass the collection into a new class.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TPipeIntoValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  class-string&lt;TPipeIntoValue&gt;  $class
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TPipeIntoValue
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function pipeInto($class);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Pass the collection through a series of callable pipes and return the result.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array&lt;callable&gt;  $pipes
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return mixed
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function pipeThrough($pipes);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the values of a given key.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string|array&lt;array-key, string&gt;  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string|null  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;array-key, mixed&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function pluck($value, $key = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Create a collection of all elements that do not pass a given truth test.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): bool)|bool|TValue  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function reject($callback = true);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Convert a flatten &#34;dot&#34; notation array into an expanded array.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function undot();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Return only unique items from the collection array.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): mixed)|string|null  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $strict
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function unique($key = null, $strict = false);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Return only unique items from the collection array using strict comparison.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): mixed)|string|null  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function uniqueStrict($key = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Reset the keys on the underlying array.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int, TValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function values();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Pad collection to the specified length with a value.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TPadValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $size
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TPadValue  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int, TValue|TPadValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function pad($size, $value);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the values iterator.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return \Traversable&lt;TKey, TValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function getIterator(): \Traversable;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Count the number of items in the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return int
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function count(): int;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Count the number of items in the collection by a field or using a callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): array-key)|string|null  $countBy
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;array-key, int&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function countBy($countBy = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Zip the collection together with one or more arrays.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * e.g. new Collection([1, 2, 3])-&gt;zip([4, 5, 6]);
</span></span></span><span class="line"><span class="cl"><span class="err">     *      =&gt; [[1, 4], [2, 5], [3, 6]]
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TZipValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;array-key, TZipValue&gt;|iterable&lt;array-key, TZipValue&gt;  ...$items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int, static&lt;int, TValue|TZipValue&gt;&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function zip($items);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Collect the values into a collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return \Illuminate\Support\Collection&lt;TKey, TValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function collect();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the collection of items as a plain array.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array&lt;TKey, mixed&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function toArray();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Convert the object into something JSON serializable.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return mixed
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function jsonSerialize(): mixed;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the collection of items as JSON.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $options
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return string
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function toJson($options = 0);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get a CachingIterator instance.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $flags
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return \CachingIterator
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function getCachingIterator($flags = CachingIterator::CALL_TOSTRING);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Convert the collection to its string representation.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return string
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function __toString();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Indicate that the model&#39;s string representation should be escaped when __toString is invoked.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $escape
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return $this
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function escapeWhenCastingToString($escape = true);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Add a method to the list of proxied methods.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $method
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return void
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function proxy($method);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Dynamically access collection proxies.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return mixed
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @throws \Exception
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function __get($key);
</span></span></span><span class="line"><span class="cl"><span class="err">}
</span></span></span><span class="line"><span class="cl"><span class="err">?&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">&lt;?php
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">namespace Illuminate\Support\Traits;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">use BackedEnum;
</span></span></span><span class="line"><span class="cl"><span class="err">use CachingIterator;
</span></span></span><span class="line"><span class="cl"><span class="err">use Exception;
</span></span></span><span class="line"><span class="cl"><span class="err">use Illuminate\Contracts\Support\Arrayable;
</span></span></span><span class="line"><span class="cl"><span class="err">use Illuminate\Contracts\Support\Jsonable;
</span></span></span><span class="line"><span class="cl"><span class="err">use Illuminate\Support\Arr;
</span></span></span><span class="line"><span class="cl"><span class="err">use Illuminate\Support\Collection;
</span></span></span><span class="line"><span class="cl"><span class="err">use Illuminate\Support\Enumerable;
</span></span></span><span class="line"><span class="cl"><span class="err">use Illuminate\Support\HigherOrderCollectionProxy;
</span></span></span><span class="line"><span class="cl"><span class="err">use InvalidArgumentException;
</span></span></span><span class="line"><span class="cl"><span class="err">use JsonSerializable;
</span></span></span><span class="line"><span class="cl"><span class="err">use \Traversable;
</span></span></span><span class="line"><span class="cl"><span class="err">use UnexpectedValueException;
</span></span></span><span class="line"><span class="cl"><span class="err">use UnitEnum;
</span></span></span><span class="line"><span class="cl"><span class="err">use WeakMap;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">/**
</span></span></span><span class="line"><span class="cl"><span class="err"> * @template TKey of array-key
</span></span></span><span class="line"><span class="cl"><span class="err"> *
</span></span></span><span class="line"><span class="cl"><span class="err"> * @template-covariant TValue
</span></span></span><span class="line"><span class="cl"><span class="err"> *
</span></span></span><span class="line"><span class="cl"><span class="err"> * @property-read HigherOrderCollectionProxy&lt;TKey, TValue&gt; $average
</span></span></span><span class="line"><span class="cl"><span class="err"> * @property-read HigherOrderCollectionProxy&lt;TKey, TValue&gt; $avg
</span></span></span><span class="line"><span class="cl"><span class="err"> * @property-read HigherOrderCollectionProxy&lt;TKey, TValue&gt; $contains
</span></span></span><span class="line"><span class="cl"><span class="err"> * @property-read HigherOrderCollectionProxy&lt;TKey, TValue&gt; $doesntContain
</span></span></span><span class="line"><span class="cl"><span class="err"> * @property-read HigherOrderCollectionProxy&lt;TKey, TValue&gt; $each
</span></span></span><span class="line"><span class="cl"><span class="err"> * @property-read HigherOrderCollectionProxy&lt;TKey, TValue&gt; $every
</span></span></span><span class="line"><span class="cl"><span class="err"> * @property-read HigherOrderCollectionProxy&lt;TKey, TValue&gt; $filter
</span></span></span><span class="line"><span class="cl"><span class="err"> * @property-read HigherOrderCollectionProxy&lt;TKey, TValue&gt; $first
</span></span></span><span class="line"><span class="cl"><span class="err"> * @property-read HigherOrderCollectionProxy&lt;TKey, TValue&gt; $flatMap
</span></span></span><span class="line"><span class="cl"><span class="err"> * @property-read HigherOrderCollectionProxy&lt;TKey, TValue&gt; $groupBy
</span></span></span><span class="line"><span class="cl"><span class="err"> * @property-read HigherOrderCollectionProxy&lt;TKey, TValue&gt; $keyBy
</span></span></span><span class="line"><span class="cl"><span class="err"> * @property-read HigherOrderCollectionProxy&lt;TKey, TValue&gt; $map
</span></span></span><span class="line"><span class="cl"><span class="err"> * @property-read HigherOrderCollectionProxy&lt;TKey, TValue&gt; $max
</span></span></span><span class="line"><span class="cl"><span class="err"> * @property-read HigherOrderCollectionProxy&lt;TKey, TValue&gt; $min
</span></span></span><span class="line"><span class="cl"><span class="err"> * @property-read HigherOrderCollectionProxy&lt;TKey, TValue&gt; $partition
</span></span></span><span class="line"><span class="cl"><span class="err"> * @property-read HigherOrderCollectionProxy&lt;TKey, TValue&gt; $percentage
</span></span></span><span class="line"><span class="cl"><span class="err"> * @property-read HigherOrderCollectionProxy&lt;TKey, TValue&gt; $reject
</span></span></span><span class="line"><span class="cl"><span class="err"> * @property-read HigherOrderCollectionProxy&lt;TKey, TValue&gt; $skipUntil
</span></span></span><span class="line"><span class="cl"><span class="err"> * @property-read HigherOrderCollectionProxy&lt;TKey, TValue&gt; $skipWhile
</span></span></span><span class="line"><span class="cl"><span class="err"> * @property-read HigherOrderCollectionProxy&lt;TKey, TValue&gt; $some
</span></span></span><span class="line"><span class="cl"><span class="err"> * @property-read HigherOrderCollectionProxy&lt;TKey, TValue&gt; $sortBy
</span></span></span><span class="line"><span class="cl"><span class="err"> * @property-read HigherOrderCollectionProxy&lt;TKey, TValue&gt; $sortByDesc
</span></span></span><span class="line"><span class="cl"><span class="err"> * @property-read HigherOrderCollectionProxy&lt;TKey, TValue&gt; $sum
</span></span></span><span class="line"><span class="cl"><span class="err"> * @property-read HigherOrderCollectionProxy&lt;TKey, TValue&gt; $takeUntil
</span></span></span><span class="line"><span class="cl"><span class="err"> * @property-read HigherOrderCollectionProxy&lt;TKey, TValue&gt; $takeWhile
</span></span></span><span class="line"><span class="cl"><span class="err"> * @property-read HigherOrderCollectionProxy&lt;TKey, TValue&gt; $unique
</span></span></span><span class="line"><span class="cl"><span class="err"> * @property-read HigherOrderCollectionProxy&lt;TKey, TValue&gt; $unless
</span></span></span><span class="line"><span class="cl"><span class="err"> * @property-read HigherOrderCollectionProxy&lt;TKey, TValue&gt; $until
</span></span></span><span class="line"><span class="cl"><span class="err"> * @property-read HigherOrderCollectionProxy&lt;TKey, TValue&gt; $when
</span></span></span><span class="line"><span class="cl"><span class="err"> */
</span></span></span><span class="line"><span class="cl"><span class="err">trait EnumeratesValues
</span></span></span><span class="line"><span class="cl"><span class="err">{
</span></span></span><span class="line"><span class="cl"><span class="err">    use Conditionable;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Indicates that the object&#39;s string representation should be escaped when __toString is invoked.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @var bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    protected $escapeWhenCastingToString = false;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * The methods that can be proxied.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @var array&lt;int, string&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    protected static $proxies = [
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;average&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;avg&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;contains&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;doesntContain&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;each&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;every&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;filter&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;first&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;flatMap&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;groupBy&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;keyBy&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;map&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;max&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;min&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;partition&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;percentage&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;reject&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;skipUntil&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;skipWhile&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;some&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;sortBy&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;sortByDesc&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;sum&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;takeUntil&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;takeWhile&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;unique&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;unless&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;until&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;when&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">    ];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Create a new collection instance if the value isn&#39;t one already.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TMakeKey of array-key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TMakeValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;TMakeKey, TMakeValue&gt;|iterable&lt;TMakeKey, TMakeValue&gt;|null  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;TMakeKey, TMakeValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function make($items = [])
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static($items);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Wrap the given value in a collection if applicable.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TWrapValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  iterable&lt;array-key, TWrapValue&gt;|TWrapValue  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;array-key, TWrapValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function wrap($value)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $value instanceof Enumerable
</span></span></span><span class="line"><span class="cl"><span class="err">            ? new static($value)
</span></span></span><span class="line"><span class="cl"><span class="err">            : new static(Arr::wrap($value));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the underlying items from the given collection if applicable.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TUnwrapKey of array-key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TUnwrapValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array&lt;TUnwrapKey, TUnwrapValue&gt;|static&lt;TUnwrapKey, TUnwrapValue&gt;  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array&lt;TUnwrapKey, TUnwrapValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function unwrap($value)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $value instanceof Enumerable ? $value-&gt;all() : $value;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Create a new instance with no items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function empty()
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static([]);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Create a new collection by invoking the callback a given amount of times.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TTimesValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $number
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(int): TTimesValue)|null  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int, TTimesValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function times($number, ?callable $callback = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($number &lt; 1) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return new static;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return static::range(1, $number)
</span></span></span><span class="line"><span class="cl"><span class="err">            -&gt;unless($callback == null)
</span></span></span><span class="line"><span class="cl"><span class="err">            -&gt;map($callback);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the average value of a given key.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue): float|int)|string|null  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return float|int|null
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function avg($callback = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $callback = $this-&gt;valueRetriever($callback);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $reduced = $this-&gt;reduce(static function (&amp;$reduce, $value) use ($callback) {
</span></span></span><span class="line"><span class="cl"><span class="err">            if (! is_null($resolved = $callback($value))) {
</span></span></span><span class="line"><span class="cl"><span class="err">                $reduce[0] += $resolved;
</span></span></span><span class="line"><span class="cl"><span class="err">                $reduce[1]++;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            return $reduce;
</span></span></span><span class="line"><span class="cl"><span class="err">        }, [0, 0]);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $reduced[1] ? $reduced[0] / $reduced[1] : null;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Alias for the &#34;avg&#34; method.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue): float|int)|string|null  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return float|int|null
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function average($callback = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;avg($callback);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Alias for the &#34;contains&#34; method.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): bool)|TValue|string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $operator
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function some($key, $operator = null, $value = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;contains(...func_get_args());
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Dump the given arguments and terminate execution.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  ...$args
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return never
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function dd(...$args)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        dd($this-&gt;all(), ...$args);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Dump the items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  ...$args
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return $this
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function dump(...$args)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        dump($this-&gt;all(), ...$args);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Execute a callback over each item.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TValue, TKey): mixed  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return $this
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function each(callable $callback)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($this as $key =&gt; $item) {
</span></span></span><span class="line"><span class="cl"><span class="err">            if ($callback($item, $key) === false) {
</span></span></span><span class="line"><span class="cl"><span class="err">                break;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Execute a callback over each nested chunk of items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(...mixed): mixed  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function eachSpread(callable $callback)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;each(function ($chunk, $key) use ($callback) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $chunk[] = $key;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            return $callback(...$chunk);
</span></span></span><span class="line"><span class="cl"><span class="err">        });
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Determine if all items pass the given truth test.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): bool)|TValue|string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $operator
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function every($key, $operator = null, $value = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if (func_num_args() === 1) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $callback = $this-&gt;valueRetriever($key);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            foreach ($this as $k =&gt; $v) {
</span></span></span><span class="line"><span class="cl"><span class="err">                if (! $callback($v, $k)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                    return false;
</span></span></span><span class="line"><span class="cl"><span class="err">                }
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            return true;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;every($this-&gt;operatorForWhere(...func_get_args()));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the first item by the given key value pair.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable|string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $operator
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TValue|null
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function firstWhere($key, $operator = null, $value = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;first($this-&gt;operatorForWhere(...func_get_args()));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get a single key&#39;s value from the first matching item in the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TValueDefault
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TValueDefault|(\Closure(): TValueDefault)  $default
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TValue|TValueDefault
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function value($key, $default = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($value = $this-&gt;firstWhere($key)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return data_get($value, $key, $default);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return value($default);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Ensure that every item in the collection is of the expected type.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TEnsureOfType
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  class-string&lt;TEnsureOfType&gt;|array&lt;array-key, class-string&lt;TEnsureOfType&gt;&gt;  $type
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;TKey, TEnsureOfType&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @throws \UnexpectedValueException
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function ensure($type)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $allowedTypes = is_array($type) ? $type : [$type];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;each(function ($item, $index) use ($allowedTypes) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $itemType = get_debug_type($item);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            foreach ($allowedTypes as $allowedType) {
</span></span></span><span class="line"><span class="cl"><span class="err">                if ($itemType === $allowedType || $item instanceof $allowedType) {
</span></span></span><span class="line"><span class="cl"><span class="err">                    return true;
</span></span></span><span class="line"><span class="cl"><span class="err">                }
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            throw new UnexpectedValueException(
</span></span></span><span class="line"><span class="cl"><span class="err">                sprintf(&#34;Collection should only include [%s] items, but &#39;%s&#39; found at position %d.&#34;, implode(&#39;, &#39;, $allowedTypes), $itemType, $index)
</span></span></span><span class="line"><span class="cl"><span class="err">            );
</span></span></span><span class="line"><span class="cl"><span class="err">        });
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Determine if the collection is not empty.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @phpstan-assert-if-true TValue $this-&gt;first()
</span></span></span><span class="line"><span class="cl"><span class="err">     * @phpstan-assert-if-true TValue $this-&gt;last()
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @phpstan-assert-if-false null $this-&gt;first()
</span></span></span><span class="line"><span class="cl"><span class="err">     * @phpstan-assert-if-false null $this-&gt;last()
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function isNotEmpty()
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return ! $this-&gt;isEmpty();
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Run a map over each nested chunk of items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TMapSpreadValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(mixed...): TMapSpreadValue  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;TKey, TMapSpreadValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function mapSpread(callable $callback)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;map(function ($chunk, $key) use ($callback) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $chunk[] = $key;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            return $callback(...$chunk);
</span></span></span><span class="line"><span class="cl"><span class="err">        });
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Run a grouping map over the items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * The callback should return an associative array with a single key/value pair.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TMapToGroupsKey of array-key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TMapToGroupsValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TValue, TKey): array&lt;TMapToGroupsKey, TMapToGroupsValue&gt;  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;TMapToGroupsKey, static&lt;int, TMapToGroupsValue&gt;&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function mapToGroups(callable $callback)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $groups = $this-&gt;mapToDictionary($callback);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $groups-&gt;map([$this, &#39;make&#39;]);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Map a collection and flatten the result by a single level.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TFlatMapKey of array-key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TFlatMapValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TValue, TKey): (\Illuminate\Support\Collection&lt;TFlatMapKey, TFlatMapValue&gt;|array&lt;TFlatMapKey, TFlatMapValue&gt;)  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;TFlatMapKey, TFlatMapValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function flatMap(callable $callback)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;map($callback)-&gt;collapse();
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Map the values into a new class.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TMapIntoValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  class-string&lt;TMapIntoValue&gt;  $class
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;TKey, TMapIntoValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function mapInto($class)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if (is_subclass_of($class, BackedEnum::class)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return $this-&gt;map(fn ($value, $key) =&gt; $class::from($value));
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;map(fn ($value, $key) =&gt; new $class($value, $key));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the min value of a given key.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue):mixed)|string|null  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return mixed
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function min($callback = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $callback = $this-&gt;valueRetriever($callback);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;map(fn ($value) =&gt; $callback($value))
</span></span></span><span class="line"><span class="cl"><span class="err">            -&gt;filter(fn ($value) =&gt; ! is_null($value))
</span></span></span><span class="line"><span class="cl"><span class="err">            -&gt;reduce(fn ($result, $value) =&gt; is_null($result) || $value &lt; $result ? $value : $result);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the max value of a given key.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue):mixed)|string|null  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return mixed
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function max($callback = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $callback = $this-&gt;valueRetriever($callback);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;filter(fn ($value) =&gt; ! is_null($value))-&gt;reduce(function ($result, $item) use ($callback) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $value = $callback($item);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            return is_null($result) || $value &gt; $result ? $value : $result;
</span></span></span><span class="line"><span class="cl"><span class="err">        });
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * &#34;Paginate&#34; the collection by slicing it into a smaller collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $page
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $perPage
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function forPage($page, $perPage)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $offset = max(0, ($page - 1) * $perPage);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;slice($offset, $perPage);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Partition the collection into two arrays using the given callback or key.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): bool)|TValue|string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TValue|string|null  $operator
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TValue|null  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int&lt;0, 1&gt;, static&lt;TKey, TValue&gt;&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function partition($key, $operator = null, $value = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $passed = [];
</span></span></span><span class="line"><span class="cl"><span class="err">        $failed = [];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $callback = func_num_args() === 1
</span></span></span><span class="line"><span class="cl"><span class="err">            ? $this-&gt;valueRetriever($key)
</span></span></span><span class="line"><span class="cl"><span class="err">            : $this-&gt;operatorForWhere(...func_get_args());
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($this as $key =&gt; $item) {
</span></span></span><span class="line"><span class="cl"><span class="err">            if ($callback($item, $key)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                $passed[$key] = $item;
</span></span></span><span class="line"><span class="cl"><span class="err">            } else {
</span></span></span><span class="line"><span class="cl"><span class="err">                $failed[$key] = $item;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static([new static($passed), new static($failed)]);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Calculate the percentage of items that pass a given truth test.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): bool)  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $precision
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return float|null
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function percentage(callable $callback, int $precision = 2)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($this-&gt;isEmpty()) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return null;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return round(
</span></span></span><span class="line"><span class="cl"><span class="err">            $this-&gt;filter($callback)-&gt;count() / $this-&gt;count() * 100,
</span></span></span><span class="line"><span class="cl"><span class="err">            $precision
</span></span></span><span class="line"><span class="cl"><span class="err">        );
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the sum of the given values.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue): mixed)|string|null  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return mixed
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function sum($callback = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $callback = is_null($callback)
</span></span></span><span class="line"><span class="cl"><span class="err">            ? $this-&gt;identity()
</span></span></span><span class="line"><span class="cl"><span class="err">            : $this-&gt;valueRetriever($callback);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;reduce(fn ($result, $item) =&gt; $result + $callback($item), 0);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Apply the callback if the collection is empty.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TWhenEmptyReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable($this): TWhenEmptyReturnType)  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable($this): TWhenEmptyReturnType)|null  $default
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return $this|TWhenEmptyReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function whenEmpty(callable $callback, ?callable $default = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;when($this-&gt;isEmpty(), $callback, $default);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Apply the callback if the collection is not empty.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TWhenNotEmptyReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable($this): TWhenNotEmptyReturnType  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable($this): TWhenNotEmptyReturnType)|null  $default
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return $this|TWhenNotEmptyReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function whenNotEmpty(callable $callback, ?callable $default = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;when($this-&gt;isNotEmpty(), $callback, $default);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Apply the callback unless the collection is empty.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TUnlessEmptyReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable($this): TUnlessEmptyReturnType  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable($this): TUnlessEmptyReturnType)|null  $default
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return $this|TUnlessEmptyReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function unlessEmpty(callable $callback, ?callable $default = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;whenNotEmpty($callback, $default);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Apply the callback unless the collection is not empty.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TUnlessNotEmptyReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable($this): TUnlessNotEmptyReturnType  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable($this): TUnlessNotEmptyReturnType)|null  $default
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return $this|TUnlessNotEmptyReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function unlessNotEmpty(callable $callback, ?callable $default = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;whenEmpty($callback, $default);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Filter items by the given key value pair.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable|string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $operator
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function where($key, $operator = null, $value = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;filter($this-&gt;operatorForWhere(...func_get_args()));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Filter items where the value for the given key is null.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string|null  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function whereNull($key = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;whereStrict($key, null);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Filter items where the value for the given key is not null.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string|null  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function whereNotNull($key = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;where($key, &#39;!==&#39;, null);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Filter items by the given key value pair using strict comparison.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function whereStrict($key, $value)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;where($key, &#39;===&#39;, $value);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Filter items by the given key value pair.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable|iterable  $values
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $strict
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function whereIn($key, $values, $strict = false)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $values = $this-&gt;getArrayableItems($values);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;filter(fn ($item) =&gt; in_array(data_get($item, $key), $values, $strict));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Filter items by the given key value pair using strict comparison.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable|iterable  $values
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function whereInStrict($key, $values)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;whereIn($key, $values, true);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Filter items such that the value of the given key is between the given values.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable|iterable  $values
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function whereBetween($key, $values)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;where($key, &#39;&gt;=&#39;, reset($values))-&gt;where($key, &#39;&lt;=&#39;, end($values));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Filter items such that the value of the given key is not between the given values.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable|iterable  $values
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function whereNotBetween($key, $values)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;filter(
</span></span></span><span class="line"><span class="cl"><span class="err">            fn ($item) =&gt; data_get($item, $key) &lt; reset($values) || data_get($item, $key) &gt; end($values)
</span></span></span><span class="line"><span class="cl"><span class="err">        );
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Filter items by the given key value pair.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable|iterable  $values
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $strict
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function whereNotIn($key, $values, $strict = false)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $values = $this-&gt;getArrayableItems($values);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;reject(fn ($item) =&gt; in_array(data_get($item, $key), $values, $strict));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Filter items by the given key value pair using strict comparison.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable|iterable  $values
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function whereNotInStrict($key, $values)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;whereNotIn($key, $values, true);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Filter the items, removing any items that don&#39;t match the given type(s).
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TWhereInstanceOf
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  class-string&lt;TWhereInstanceOf&gt;|array&lt;array-key, class-string&lt;TWhereInstanceOf&gt;&gt;  $type
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;TKey, TWhereInstanceOf&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function whereInstanceOf($type)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;filter(function ($value) use ($type) {
</span></span></span><span class="line"><span class="cl"><span class="err">            if (is_array($type)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                foreach ($type as $classType) {
</span></span></span><span class="line"><span class="cl"><span class="err">                    if ($value instanceof $classType) {
</span></span></span><span class="line"><span class="cl"><span class="err">                        return true;
</span></span></span><span class="line"><span class="cl"><span class="err">                    }
</span></span></span><span class="line"><span class="cl"><span class="err">                }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">                return false;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            return $value instanceof $type;
</span></span></span><span class="line"><span class="cl"><span class="err">        });
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Pass the collection to the given callback and return the result.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TPipeReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable($this): TPipeReturnType  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TPipeReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function pipe(callable $callback)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $callback($this);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Pass the collection into a new class.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TPipeIntoValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  class-string&lt;TPipeIntoValue&gt;  $class
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TPipeIntoValue
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function pipeInto($class)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new $class($this);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Pass the collection through a series of callable pipes and return the result.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array&lt;callable&gt;  $callbacks
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return mixed
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function pipeThrough($callbacks)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return Collection::make($callbacks)-&gt;reduce(
</span></span></span><span class="line"><span class="cl"><span class="err">            fn ($carry, $callback) =&gt; $callback($carry),
</span></span></span><span class="line"><span class="cl"><span class="err">            $this,
</span></span></span><span class="line"><span class="cl"><span class="err">        );
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Reduce the collection to a single value.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TReduceInitial
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TReduceReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TReduceInitial|TReduceReturnType, TValue, TKey): TReduceReturnType  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TReduceInitial  $initial
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TReduceReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function reduce(callable $callback, $initial = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $result = $initial;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($this as $key =&gt; $value) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $result = $callback($result, $value, $key);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $result;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Reduce the collection to multiple aggregate values.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  ...$initial
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @throws \UnexpectedValueException
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function reduceSpread(callable $callback, ...$initial)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $result = $initial;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($this as $key =&gt; $value) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $result = call_user_func_array($callback, array_merge($result, [$value, $key]));
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            if (! is_array($result)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                throw new UnexpectedValueException(sprintf(
</span></span></span><span class="line"><span class="cl"><span class="err">                    &#34;%s::reduceSpread expects reducer to return an array, but got a &#39;%s&#39; instead.&#34;,
</span></span></span><span class="line"><span class="cl"><span class="err">                    class_basename(static::class), gettype($result)
</span></span></span><span class="line"><span class="cl"><span class="err">                ));
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $result;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Reduce an associative collection to a single value.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TReduceWithKeysInitial
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TReduceWithKeysReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TReduceWithKeysInitial|TReduceWithKeysReturnType, TValue, TKey): TReduceWithKeysReturnType  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TReduceWithKeysInitial  $initial
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TReduceWithKeysReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function reduceWithKeys(callable $callback, $initial = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;reduce($callback, $initial);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Create a collection of all elements that do not pass a given truth test.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): bool)|bool|TValue  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function reject($callback = true)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $useAsCallable = $this-&gt;useAsCallable($callback);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;filter(function ($value, $key) use ($callback, $useAsCallable) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return $useAsCallable
</span></span></span><span class="line"><span class="cl"><span class="err">                ? ! $callback($value, $key)
</span></span></span><span class="line"><span class="cl"><span class="err">                : $value != $callback;
</span></span></span><span class="line"><span class="cl"><span class="err">        });
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Pass the collection to the given callback and then return it.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable($this): mixed  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return $this
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function tap(callable $callback)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $callback($this);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Return only unique items from the collection array.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): mixed)|string|null  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $strict
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function unique($key = null, $strict = false)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $callback = $this-&gt;valueRetriever($key);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $exists = [];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;reject(function ($item, $key) use ($callback, $strict, &amp;$exists) {
</span></span></span><span class="line"><span class="cl"><span class="err">            if (in_array($id = $callback($item, $key), $exists, $strict)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                return true;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            $exists[] = $id;
</span></span></span><span class="line"><span class="cl"><span class="err">        });
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Return only unique items from the collection array using strict comparison.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): mixed)|string|null  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function uniqueStrict($key = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;unique($key, true);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Collect the values into a collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return \Illuminate\Support\Collection&lt;TKey, TValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function collect()
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new Collection($this-&gt;all());
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the collection of items as a plain array.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array&lt;TKey, mixed&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function toArray()
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;map(fn ($value) =&gt; $value instanceof Arrayable ? $value-&gt;toArray() : $value)-&gt;all();
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Convert the object into something JSON serializable.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array&lt;TKey, mixed&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function jsonSerialize(): array
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return array_map(function ($value) {
</span></span></span><span class="line"><span class="cl"><span class="err">            if ($value instanceof JsonSerializable) {
</span></span></span><span class="line"><span class="cl"><span class="err">                return $value-&gt;jsonSerialize();
</span></span></span><span class="line"><span class="cl"><span class="err">            } elseif ($value instanceof Jsonable) {
</span></span></span><span class="line"><span class="cl"><span class="err">                return json_decode($value-&gt;toJson(), true);
</span></span></span><span class="line"><span class="cl"><span class="err">            } elseif ($value instanceof Arrayable) {
</span></span></span><span class="line"><span class="cl"><span class="err">                return $value-&gt;toArray();
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            return $value;
</span></span></span><span class="line"><span class="cl"><span class="err">        }, $this-&gt;all());
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the collection of items as JSON.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $options
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return string
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function toJson($options = 0)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return json_encode($this-&gt;jsonSerialize(), $options);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get a CachingIterator instance.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $flags
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return \CachingIterator
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function getCachingIterator($flags = CachingIterator::CALL_TOSTRING)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new CachingIterator($this-&gt;getIterator(), $flags);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Convert the collection to its string representation.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return string
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function __toString()
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;escapeWhenCastingToString
</span></span></span><span class="line"><span class="cl"><span class="err">            ? e($this-&gt;toJson())
</span></span></span><span class="line"><span class="cl"><span class="err">            : $this-&gt;toJson();
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Indicate that the model&#39;s string representation should be escaped when __toString is invoked.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $escape
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return $this
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function escapeWhenCastingToString($escape = true)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $this-&gt;escapeWhenCastingToString = $escape;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Add a method to the list of proxied methods.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $method
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return void
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function proxy($method)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        static::$proxies[] = $method;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Dynamically access collection proxies.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return mixed
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @throws \Exception
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function __get($key)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if (! in_array($key, static::$proxies)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            throw new Exception(&#34;Property [{$key}] does not exist on this collection instance.&#34;);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return new HigherOrderCollectionProxy($this, $key);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Results array of items from Collection or Arrayable.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array&lt;TKey, TValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    protected function getArrayableItems($items)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if (is_array($items)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return $items;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return match (true) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $items instanceof WeakMap =&gt; throw new InvalidArgumentException(&#39;Collections can not be created using instances of WeakMap.&#39;),
</span></span></span><span class="line"><span class="cl"><span class="err">            $items instanceof Enumerable =&gt; $items-&gt;all(),
</span></span></span><span class="line"><span class="cl"><span class="err">            $items instanceof Arrayable =&gt; $items-&gt;toArray(),
</span></span></span><span class="line"><span class="cl"><span class="err">            $items instanceof \Traversable =&gt; iterator_to_array($items),
</span></span></span><span class="line"><span class="cl"><span class="err">            $items instanceof Jsonable =&gt; json_decode($items-&gt;toJson(), true),
</span></span></span><span class="line"><span class="cl"><span class="err">            $items instanceof JsonSerializable =&gt; (array) $items-&gt;jsonSerialize(),
</span></span></span><span class="line"><span class="cl"><span class="err">            $items instanceof UnitEnum =&gt; [$items],
</span></span></span><span class="line"><span class="cl"><span class="err">            default =&gt; (array) $items,
</span></span></span><span class="line"><span class="cl"><span class="err">        };
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get an operator checker callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable|string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string|null  $operator
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return \Closure
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    protected function operatorForWhere($key, $operator = null, $value = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($this-&gt;useAsCallable($key)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return $key;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if (func_num_args() === 1) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $value = true;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            $operator = &#39;=&#39;;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if (func_num_args() === 2) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $value = $operator;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            $operator = &#39;=&#39;;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return function ($item) use ($key, $operator, $value) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $retrieved = data_get($item, $key);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            $strings = array_filter([$retrieved, $value], function ($value) {
</span></span></span><span class="line"><span class="cl"><span class="err">                return is_string($value) || (is_object($value) &amp;&amp; method_exists($value, &#39;__toString&#39;));
</span></span></span><span class="line"><span class="cl"><span class="err">            });
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            if (count($strings) &lt; 2 &amp;&amp; count(array_filter([$retrieved, $value], &#39;is_object&#39;)) == 1) {
</span></span></span><span class="line"><span class="cl"><span class="err">                return in_array($operator, [&#39;!=&#39;, &#39;&lt;&gt;&#39;, &#39;!==&#39;]);
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            switch ($operator) {
</span></span></span><span class="line"><span class="cl"><span class="err">                default:
</span></span></span><span class="line"><span class="cl"><span class="err">                case &#39;=&#39;:
</span></span></span><span class="line"><span class="cl"><span class="err">                case &#39;==&#39;:  return $retrieved == $value;
</span></span></span><span class="line"><span class="cl"><span class="err">                case &#39;!=&#39;:
</span></span></span><span class="line"><span class="cl"><span class="err">                case &#39;&lt;&gt;&#39;:  return $retrieved != $value;
</span></span></span><span class="line"><span class="cl"><span class="err">                case &#39;&lt;&#39;:   return $retrieved &lt; $value;
</span></span></span><span class="line"><span class="cl"><span class="err">                case &#39;&gt;&#39;:   return $retrieved &gt; $value;
</span></span></span><span class="line"><span class="cl"><span class="err">                case &#39;&lt;=&#39;:  return $retrieved &lt;= $value;
</span></span></span><span class="line"><span class="cl"><span class="err">                case &#39;&gt;=&#39;:  return $retrieved &gt;= $value;
</span></span></span><span class="line"><span class="cl"><span class="err">                case &#39;===&#39;: return $retrieved === $value;
</span></span></span><span class="line"><span class="cl"><span class="err">                case &#39;!==&#39;: return $retrieved !== $value;
</span></span></span><span class="line"><span class="cl"><span class="err">                case &#39;&lt;=&gt;&#39;: return $retrieved &lt;=&gt; $value;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">        };
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Determine if the given value is callable, but not a string.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    protected function useAsCallable($value)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return ! is_string($value) &amp;&amp; is_callable($value);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get a value retrieving callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable|string|null  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return callable
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    protected function valueRetriever($value)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($this-&gt;useAsCallable($value)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return $value;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return fn ($item) =&gt; data_get($item, $value);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Make a function to check an item&#39;s equality.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return \Closure(mixed): bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    protected function equality($value)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return fn ($item) =&gt; $item === $value;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Make a function using another function, by negating its result.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Closure  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return \Closure
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    protected function negate(Closure $callback)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return fn (...$params) =&gt; ! $callback(...$params);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Make a function that returns what&#39;s passed to it.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return \Closure(TValue): TValue
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    protected function identity()
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return fn ($value) =&gt; $value;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">}
</span></span></span><span class="line"><span class="cl"><span class="err">?&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">&lt;?php
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">namespace Illuminate\Support;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">use ArrayIterator;
</span></span></span><span class="line"><span class="cl"><span class="err">use Illuminate\Contracts\Support\CanBeEscapedWhenCastToString;
</span></span></span><span class="line"><span class="cl"><span class="err">use Illuminate\Support\Traits\EnumeratesValues;
</span></span></span><span class="line"><span class="cl"><span class="err">use stdClass;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">/**
</span></span></span><span class="line"><span class="cl"><span class="err"> * @template TKey of array-key
</span></span></span><span class="line"><span class="cl"><span class="err"> *
</span></span></span><span class="line"><span class="cl"><span class="err"> * @template-covariant TValue
</span></span></span><span class="line"><span class="cl"><span class="err"> *
</span></span></span><span class="line"><span class="cl"><span class="err"> * @implements \ArrayAccess&lt;TKey, TValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err"> * @implements \Illuminate\Support\Enumerable&lt;TKey, TValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err"> */
</span></span></span><span class="line"><span class="cl"><span class="err">class Collection implements \ArrayAccess, CanBeEscapedWhenCastToString, Enumerable
</span></span></span><span class="line"><span class="cl"><span class="err">{
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * @use \Illuminate\Support\Traits\EnumeratesValues&lt;TKey, TValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    use EnumeratesValues, Traits\Macroable;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * The items contained in the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @var array&lt;TKey, TValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    protected $items = [];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Create a new collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;TKey, TValue&gt;|iterable&lt;TKey, TValue&gt;|null  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return void
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function __construct($items = [])
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $this-&gt;items = $this-&gt;getArrayableItems($items);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Create a collection with the given range.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $from
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $to
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $step
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int, int&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function range($from, $to, $step = 1)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(range($from, $to, $step));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get all of the items in the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array&lt;TKey, TValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function all()
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;items;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get a lazy collection for the items in this collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return \Illuminate\Support\LazyCollection&lt;TKey, TValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function lazy()
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new LazyCollection($this-&gt;items);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the median of a given key.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string|array&lt;array-key, string&gt;|null  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return float|int|null
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function median($key = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $values = (isset($key) ? $this-&gt;pluck($key) : $this)
</span></span></span><span class="line"><span class="cl"><span class="err">            -&gt;filter(fn ($item) =&gt; ! is_null($item))
</span></span></span><span class="line"><span class="cl"><span class="err">            -&gt;sort()-&gt;values();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $count = $values-&gt;count();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($count === 0) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $middle = (int) ($count / 2);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($count % 2) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return $values-&gt;get($middle);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return (new static([
</span></span></span><span class="line"><span class="cl"><span class="err">            $values-&gt;get($middle - 1), $values-&gt;get($middle),
</span></span></span><span class="line"><span class="cl"><span class="err">        ]))-&gt;average();
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the mode of a given key.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string|array&lt;array-key, string&gt;|null  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array&lt;int, float|int&gt;|null
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function mode($key = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($this-&gt;count() === 0) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $collection = isset($key) ? $this-&gt;pluck($key) : $this;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $counts = new static;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $collection-&gt;each(fn ($value) =&gt; $counts[$value] = isset($counts[$value]) ? $counts[$value] + 1 : 1);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $sorted = $counts-&gt;sort();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $highestValue = $sorted-&gt;last();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $sorted-&gt;filter(fn ($value) =&gt; $value == $highestValue)
</span></span></span><span class="line"><span class="cl"><span class="err">            -&gt;sort()-&gt;keys()-&gt;all();
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Collapse the collection of items into a single array.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int, mixed&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function collapse()
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(Arr::collapse($this-&gt;items));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Collapse the collection of items into a single array while preserving its keys.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;mixed, mixed&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function collapseWithKeys()
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $results = [];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($this-&gt;items as $key =&gt; $values) {
</span></span></span><span class="line"><span class="cl"><span class="err">            if ($values instanceof Collection) {
</span></span></span><span class="line"><span class="cl"><span class="err">                $values = $values-&gt;all();
</span></span></span><span class="line"><span class="cl"><span class="err">            } elseif (! is_array($values)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                continue;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            $results[$key] = $values;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(array_replace(...$results));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Determine if an item exists in the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): bool)|TValue|string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $operator
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function contains($key, $operator = null, $value = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if (func_num_args() === 1) {
</span></span></span><span class="line"><span class="cl"><span class="err">            if ($this-&gt;useAsCallable($key)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                $placeholder = new stdClass;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">                return $this-&gt;first($key, $placeholder) !== $placeholder;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            return in_array($key, $this-&gt;items);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;contains($this-&gt;operatorForWhere(...func_get_args()));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Determine if an item exists, using strict comparison.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue): bool)|TValue|array-key  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TValue|null  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function containsStrict($key, $value = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if (func_num_args() === 2) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return $this-&gt;contains(fn ($item) =&gt; data_get($item, $key) === $value);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($this-&gt;useAsCallable($key)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return ! is_null($this-&gt;first($key));
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return in_array($key, $this-&gt;items, true);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Determine if an item is not contained in the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $operator
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function doesntContain($key, $operator = null, $value = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return ! $this-&gt;contains(...func_get_args());
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Cross join with the given lists, returning all possible permutations.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TCrossJoinKey
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TCrossJoinValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;TCrossJoinKey, TCrossJoinValue&gt;|iterable&lt;TCrossJoinKey, TCrossJoinValue&gt;  ...$lists
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int, array&lt;int, TValue|TCrossJoinValue&gt;&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function crossJoin(...$lists)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(Arr::crossJoin(
</span></span></span><span class="line"><span class="cl"><span class="err">            $this-&gt;items, ...array_map([$this, &#39;getArrayableItems&#39;], $lists)
</span></span></span><span class="line"><span class="cl"><span class="err">        ));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the items in the collection that are not present in the given items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;array-key, TValue&gt;|iterable&lt;array-key, TValue&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function diff($items)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(array_diff($this-&gt;items, $this-&gt;getArrayableItems($items)));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the items in the collection that are not present in the given items, using the callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;array-key, TValue&gt;|iterable&lt;array-key, TValue&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TValue, TValue): int  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function diffUsing($items, callable $callback)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(array_udiff($this-&gt;items, $this-&gt;getArrayableItems($items), $callback));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the items in the collection whose keys and values are not present in the given items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;TKey, TValue&gt;|iterable&lt;TKey, TValue&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function diffAssoc($items)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(array_diff_assoc($this-&gt;items, $this-&gt;getArrayableItems($items)));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the items in the collection whose keys and values are not present in the given items, using the callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;TKey, TValue&gt;|iterable&lt;TKey, TValue&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TKey, TKey): int  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function diffAssocUsing($items, callable $callback)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(array_diff_uassoc($this-&gt;items, $this-&gt;getArrayableItems($items), $callback));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the items in the collection whose keys are not present in the given items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;TKey, mixed&gt;|iterable&lt;TKey, mixed&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function diffKeys($items)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(array_diff_key($this-&gt;items, $this-&gt;getArrayableItems($items)));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the items in the collection whose keys are not present in the given items, using the callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;TKey, mixed&gt;|iterable&lt;TKey, mixed&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TKey, TKey): int  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function diffKeysUsing($items, callable $callback)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(array_diff_ukey($this-&gt;items, $this-&gt;getArrayableItems($items), $callback));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Retrieve duplicate items from the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TMapValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue): TMapValue)|string|null  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $strict
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function duplicates($callback = null, $strict = false)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $items = $this-&gt;map($this-&gt;valueRetriever($callback));
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $uniqueItems = $items-&gt;unique(null, $strict);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $compare = $this-&gt;duplicateComparator($strict);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $duplicates = new static;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($items as $key =&gt; $value) {
</span></span></span><span class="line"><span class="cl"><span class="err">            if ($uniqueItems-&gt;isNotEmpty() &amp;&amp; $compare($value, $uniqueItems-&gt;first())) {
</span></span></span><span class="line"><span class="cl"><span class="err">                $uniqueItems-&gt;shift();
</span></span></span><span class="line"><span class="cl"><span class="err">            } else {
</span></span></span><span class="line"><span class="cl"><span class="err">                $duplicates[$key] = $value;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $duplicates;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Retrieve duplicate items from the collection using strict comparison.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TMapValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue): TMapValue)|string|null  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function duplicatesStrict($callback = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;duplicates($callback, true);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the comparison function to detect duplicates.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $strict
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return callable(TValue, TValue): bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    protected function duplicateComparator($strict)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($strict) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return fn ($a, $b) =&gt; $a === $b;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return fn ($a, $b) =&gt; $a == $b;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get all items except for those with the specified keys.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Support\Enumerable&lt;array-key, TKey&gt;|array&lt;array-key, TKey&gt;|string  $keys
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function except($keys)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if (is_null($keys)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return new static($this-&gt;items);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($keys instanceof Enumerable) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $keys = $keys-&gt;all();
</span></span></span><span class="line"><span class="cl"><span class="err">        } elseif (! is_array($keys)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $keys = func_get_args();
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(Arr::except($this-&gt;items, $keys));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Run a filter over each of the items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): bool)|null  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function filter(?callable $callback = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($callback) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return new static(Arr::where($this-&gt;items, $callback));
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(array_filter($this-&gt;items));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the first item from the collection passing the given truth test.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TFirstDefault
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): bool)|null  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TFirstDefault|(\Closure(): TFirstDefault)  $default
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TValue|TFirstDefault
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function first(?callable $callback = null, $default = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return Arr::first($this-&gt;items, $callback, $default);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get a flattened array of the items in the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $depth
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int, mixed&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function flatten($depth = INF)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(Arr::flatten($this-&gt;items, $depth));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Flip the items in the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;TValue, TKey&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function flip()
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(array_flip($this-&gt;items));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Remove an item from the collection by key.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * \Illuminate\Contracts\Support\Arrayable&lt;array-key, TValue&gt;|iterable&lt;array-key, TKey&gt;|TKey  $keys
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return $this
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function forget($keys)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($this-&gt;getArrayableItems($keys) as $key) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $this-&gt;offsetUnset($key);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get an item from the collection by key.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TGetDefault
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TKey  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TGetDefault|(\Closure(): TGetDefault)  $default
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TValue|TGetDefault
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function get($key, $default = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if (array_key_exists($key, $this-&gt;items)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return $this-&gt;items[$key];
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return value($default);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get an item from the collection by key or add it to collection if it does not exist.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TGetOrPutValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TGetOrPutValue|(\Closure(): TGetOrPutValue)  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TValue|TGetOrPutValue
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function getOrPut($key, $value)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if (array_key_exists($key, $this-&gt;items)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return $this-&gt;items[$key];
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $this-&gt;offsetSet($key, $value = value($value));
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $value;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Group an associative array by a field or using a callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TGroupKey of array-key
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): TGroupKey)|array|string  $groupBy
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $preserveKeys
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;($groupBy is string ? array-key : ($groupBy is array ? array-key : TGroupKey)), static&lt;($preserveKeys is true ? TKey : int), TValue&gt;&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function groupBy($groupBy, $preserveKeys = false)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if (! $this-&gt;useAsCallable($groupBy) &amp;&amp; is_array($groupBy)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $nextGroups = $groupBy;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            $groupBy = array_shift($nextGroups);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $groupBy = $this-&gt;valueRetriever($groupBy);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $results = [];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($this-&gt;items as $key =&gt; $value) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $groupKeys = $groupBy($value, $key);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            if (! is_array($groupKeys)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                $groupKeys = [$groupKeys];
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            foreach ($groupKeys as $groupKey) {
</span></span></span><span class="line"><span class="cl"><span class="err">                $groupKey = match (true) {
</span></span></span><span class="line"><span class="cl"><span class="err">                    is_bool($groupKey) =&gt; (int) $groupKey,
</span></span></span><span class="line"><span class="cl"><span class="err">                    $groupKey instanceof \BackedEnum =&gt; $groupKey-&gt;value,
</span></span></span><span class="line"><span class="cl"><span class="err">                    $groupKey instanceof \Stringable =&gt; (string) $groupKey,
</span></span></span><span class="line"><span class="cl"><span class="err">                    default =&gt; $groupKey,
</span></span></span><span class="line"><span class="cl"><span class="err">                };
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">                if (! array_key_exists($groupKey, $results)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                    $results[$groupKey] = new static;
</span></span></span><span class="line"><span class="cl"><span class="err">                }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">                $results[$groupKey]-&gt;offsetSet($preserveKeys ? $key : null, $value);
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $result = new static($results);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if (! empty($nextGroups)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return $result-&gt;map-&gt;groupBy($nextGroups, $preserveKeys);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $result;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Key an associative array by a field or using a callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TNewKey of array-key
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): TNewKey)|array|string  $keyBy
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;($keyBy is string ? array-key : ($keyBy is array ? array-key : TNewKey)), TValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function keyBy($keyBy)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $keyBy = $this-&gt;valueRetriever($keyBy);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $results = [];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($this-&gt;items as $key =&gt; $item) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $resolvedKey = $keyBy($item, $key);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            if (is_object($resolvedKey)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                $resolvedKey = (string) $resolvedKey;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            $results[$resolvedKey] = $item;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static($results);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Determine if an item exists in the collection by key.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TKey|array&lt;array-key, TKey&gt;  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function has($key)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $keys = is_array($key) ? $key : func_get_args();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($keys as $value) {
</span></span></span><span class="line"><span class="cl"><span class="err">            if (! array_key_exists($value, $this-&gt;items)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                return false;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return true;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Determine if any of the keys exist in the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function hasAny($key)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($this-&gt;isEmpty()) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return false;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $keys = is_array($key) ? $key : func_get_args();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($keys as $value) {
</span></span></span><span class="line"><span class="cl"><span class="err">            if ($this-&gt;has($value)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                return true;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return false;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Concatenate values of a given key as a string.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): mixed)|string|null  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string|null  $glue
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return string
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function implode($value, $glue = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($this-&gt;useAsCallable($value)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return implode($glue ?? &#39;&#39;, $this-&gt;map($value)-&gt;all());
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $first = $this-&gt;first();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if (is_array($first) || (is_object($first) &amp;&amp; ! $first instanceof Stringable)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return implode($glue ?? &#39;&#39;, $this-&gt;pluck($value)-&gt;all());
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return implode($value ?? &#39;&#39;, $this-&gt;items);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Intersect the collection with the given items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;TKey, TValue&gt;|iterable&lt;TKey, TValue&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function intersect($items)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(array_intersect($this-&gt;items, $this-&gt;getArrayableItems($items)));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Intersect the collection with the given items, using the callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;array-key, TValue&gt;|iterable&lt;array-key, TValue&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TValue, TValue): int  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function intersectUsing($items, callable $callback)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(array_uintersect($this-&gt;items, $this-&gt;getArrayableItems($items), $callback));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Intersect the collection with the given items with additional index check.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;TKey, TValue&gt;|iterable&lt;TKey, TValue&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function intersectAssoc($items)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(array_intersect_assoc($this-&gt;items, $this-&gt;getArrayableItems($items)));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Intersect the collection with the given items with additional index check, using the callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;array-key, TValue&gt;|iterable&lt;array-key, TValue&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TValue, TValue): int  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function intersectAssocUsing($items, callable $callback)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(array_intersect_uassoc($this-&gt;items, $this-&gt;getArrayableItems($items), $callback));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Intersect the collection with the given items by key.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;TKey, mixed&gt;|iterable&lt;TKey, mixed&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function intersectByKeys($items)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(array_intersect_key(
</span></span></span><span class="line"><span class="cl"><span class="err">            $this-&gt;items, $this-&gt;getArrayableItems($items)
</span></span></span><span class="line"><span class="cl"><span class="err">        ));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Determine if the collection is empty or not.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @phpstan-assert-if-true null $this-&gt;first()
</span></span></span><span class="line"><span class="cl"><span class="err">     * @phpstan-assert-if-true null $this-&gt;last()
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @phpstan-assert-if-false TValue $this-&gt;first()
</span></span></span><span class="line"><span class="cl"><span class="err">     * @phpstan-assert-if-false TValue $this-&gt;last()
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function isEmpty()
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return empty($this-&gt;items);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Determine if the collection contains a single item.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function containsOneItem()
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;count() === 1;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Join all items from the collection using a string. The final items can use a separate glue string.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $glue
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $finalGlue
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return string
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function join($glue, $finalGlue = &#39;&#39;)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($finalGlue === &#39;&#39;) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return $this-&gt;implode($glue);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $count = $this-&gt;count();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($count === 0) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return &#39;&#39;;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($count === 1) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return $this-&gt;last();
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $collection = new static($this-&gt;items);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $finalItem = $collection-&gt;pop();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $collection-&gt;implode($glue).$finalGlue.$finalItem;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the keys of the collection items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int, TKey&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function keys()
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(array_keys($this-&gt;items));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the last item from the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TLastDefault
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): bool)|null  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TLastDefault|(\Closure(): TLastDefault)  $default
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TValue|TLastDefault
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function last(?callable $callback = null, $default = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return Arr::last($this-&gt;items, $callback, $default);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the values of a given key.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string|int|array&lt;array-key, string&gt;|null  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string|null  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;array-key, mixed&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function pluck($value, $key = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(Arr::pluck($this-&gt;items, $value, $key));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Run a map over each of the items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TMapValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TValue, TKey): TMapValue  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;TKey, TMapValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function map(callable $callback)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(Arr::map($this-&gt;items, $callback));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Run a dictionary map over the items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * The callback should return an associative array with a single key/value pair.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TMapToDictionaryKey of array-key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TMapToDictionaryValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TValue, TKey): array&lt;TMapToDictionaryKey, TMapToDictionaryValue&gt;  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;TMapToDictionaryKey, array&lt;int, TMapToDictionaryValue&gt;&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function mapToDictionary(callable $callback)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $dictionary = [];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($this-&gt;items as $key =&gt; $item) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $pair = $callback($item, $key);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            $key = key($pair);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            $value = reset($pair);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            if (! isset($dictionary[$key])) {
</span></span></span><span class="line"><span class="cl"><span class="err">                $dictionary[$key] = [];
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            $dictionary[$key][] = $value;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static($dictionary);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Run an associative map over each of the items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * The callback should return an associative array with a single key/value pair.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TMapWithKeysKey of array-key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TMapWithKeysValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TValue, TKey): array&lt;TMapWithKeysKey, TMapWithKeysValue&gt;  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;TMapWithKeysKey, TMapWithKeysValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function mapWithKeys(callable $callback)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(Arr::mapWithKeys($this-&gt;items, $callback));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Merge the collection with the given items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;TKey, TValue&gt;|iterable&lt;TKey, TValue&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function merge($items)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(array_merge($this-&gt;items, $this-&gt;getArrayableItems($items)));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Recursively merge the collection with the given items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TMergeRecursiveValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;TKey, TMergeRecursiveValue&gt;|iterable&lt;TKey, TMergeRecursiveValue&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;TKey, TValue|TMergeRecursiveValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function mergeRecursive($items)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(array_merge_recursive($this-&gt;items, $this-&gt;getArrayableItems($items)));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Multiply the items in the collection by the multiplier.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $multiplier
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function multiply(int $multiplier)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $new = new static;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        for ($i = 0; $i &lt; $multiplier; $i++) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $new-&gt;push(...$this-&gt;items);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $new;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Create a collection by using this collection for keys and another for its values.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TCombineValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;array-key, TCombineValue&gt;|iterable&lt;array-key, TCombineValue&gt;  $values
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;TValue, TCombineValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function combine($values)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(array_combine($this-&gt;all(), $this-&gt;getArrayableItems($values)));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Union the collection with the given items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;TKey, TValue&gt;|iterable&lt;TKey, TValue&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function union($items)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static($this-&gt;items + $this-&gt;getArrayableItems($items));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Create a new collection consisting of every n-th element.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $step
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $offset
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function nth($step, $offset = 0)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $new = [];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $position = 0;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($this-&gt;slice($offset)-&gt;items as $item) {
</span></span></span><span class="line"><span class="cl"><span class="err">            if ($position % $step === 0) {
</span></span></span><span class="line"><span class="cl"><span class="err">                $new[] = $item;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            $position++;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static($new);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the items with the specified keys.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Support\Enumerable&lt;array-key, TKey&gt;|array&lt;array-key, TKey&gt;|string|null  $keys
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function only($keys)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if (is_null($keys)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return new static($this-&gt;items);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($keys instanceof Enumerable) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $keys = $keys-&gt;all();
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $keys = is_array($keys) ? $keys : func_get_args();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(Arr::only($this-&gt;items, $keys));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Select specific values from the items within the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Support\Enumerable&lt;array-key, TKey&gt;|array&lt;array-key, TKey&gt;|string|null  $keys
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function select($keys)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if (is_null($keys)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return new static($this-&gt;items);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($keys instanceof Enumerable) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $keys = $keys-&gt;all();
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $keys = is_array($keys) ? $keys : func_get_args();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(Arr::select($this-&gt;items, $keys));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get and remove the last N items from the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $count
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int, TValue&gt;|TValue|null
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function pop($count = 1)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($count === 1) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return array_pop($this-&gt;items);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($this-&gt;isEmpty()) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return new static;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $results = [];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $collectionCount = $this-&gt;count();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach (range(1, min($count, $collectionCount)) as $item) {
</span></span></span><span class="line"><span class="cl"><span class="err">            array_push($results, array_pop($this-&gt;items));
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static($results);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Push an item onto the beginning of the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TValue  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TKey  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return $this
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function prepend($value, $key = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $this-&gt;items = Arr::prepend($this-&gt;items, ...func_get_args());
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Push one or more items onto the end of the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TValue  ...$values
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return $this
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function push(...$values)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($values as $value) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $this-&gt;items[] = $value;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Prepend one or more items to the beginning of the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TValue  ...$values
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return $this
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function unshift(...$values)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        array_unshift($this-&gt;items, ...$values);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Push all of the given items onto the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TConcatKey of array-key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TConcatValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  iterable&lt;TConcatKey, TConcatValue&gt;  $source
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;TKey|TConcatKey, TValue|TConcatValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function concat($source)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $result = new static($this);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($source as $item) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $result-&gt;push($item);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $result;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get and remove an item from the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TPullDefault
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TKey  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TPullDefault|(\Closure(): TPullDefault)  $default
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TValue|TPullDefault
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function pull($key, $default = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return Arr::pull($this-&gt;items, $key, $default);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Put an item in the collection by key.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TKey  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TValue  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return $this
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function put($key, $value)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $this-&gt;offsetSet($key, $value);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get one or a specified number of items randomly from the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(self&lt;TKey, TValue&gt;): int)|int|null  $number
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $preserveKeys
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int, TValue&gt;|TValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @throws \InvalidArgumentException
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function random($number = null, $preserveKeys = false)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if (is_null($number)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return Arr::random($this-&gt;items);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if (is_callable($number)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return new static(Arr::random($this-&gt;items, $number($this), $preserveKeys));
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(Arr::random($this-&gt;items, $number, $preserveKeys));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Replace the collection items with the given items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;TKey, TValue&gt;|iterable&lt;TKey, TValue&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function replace($items)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(array_replace($this-&gt;items, $this-&gt;getArrayableItems($items)));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Recursively replace the collection items with the given items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;TKey, TValue&gt;|iterable&lt;TKey, TValue&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function replaceRecursive($items)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(array_replace_recursive($this-&gt;items, $this-&gt;getArrayableItems($items)));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Reverse items order.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function reverse()
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(array_reverse($this-&gt;items, true));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Search the collection for a given value and return the corresponding key if successful.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TValue|(callable(TValue,TKey): bool)  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $strict
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TKey|false
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function search($value, $strict = false)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if (! $this-&gt;useAsCallable($value)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return array_search($value, $this-&gt;items, $strict);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($this-&gt;items as $key =&gt; $item) {
</span></span></span><span class="line"><span class="cl"><span class="err">            if ($value($item, $key)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                return $key;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return false;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the item before the given item.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TValue|(callable(TValue,TKey): bool)  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $strict
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TValue|null
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function before($value, $strict = false)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $key = $this-&gt;search($value, $strict);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($key === false) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return null;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $position = ($keys = $this-&gt;keys())-&gt;search($key);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($position === 0) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return null;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;get($keys-&gt;get($position - 1));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the item after the given item.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TValue|(callable(TValue,TKey): bool)  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $strict
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TValue|null
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function after($value, $strict = false)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $key = $this-&gt;search($value, $strict);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($key === false) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return null;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $position = ($keys = $this-&gt;keys())-&gt;search($key);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($position === $keys-&gt;count() - 1) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return null;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;get($keys-&gt;get($position + 1));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get and remove the first N items from the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $count
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int, TValue&gt;|TValue|null
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @throws \InvalidArgumentException
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function shift($count = 1)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($count &lt; 0) {
</span></span></span><span class="line"><span class="cl"><span class="err">            throw new InvalidArgumentException(&#39;Number of shifted items may not be less than zero.&#39;);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($this-&gt;isEmpty()) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return null;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($count === 0) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return new static;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($count === 1) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return array_shift($this-&gt;items);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $results = [];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $collectionCount = $this-&gt;count();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach (range(1, min($count, $collectionCount)) as $item) {
</span></span></span><span class="line"><span class="cl"><span class="err">            array_push($results, array_shift($this-&gt;items));
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static($results);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Shuffle the items in the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function shuffle()
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(Arr::shuffle($this-&gt;items));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Create chunks representing a &#34;sliding window&#34; view of the items in the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $size
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $step
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int, static&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function sliding($size = 2, $step = 1)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $chunks = floor(($this-&gt;count() - $size) / $step) + 1;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return static::times($chunks, fn ($number) =&gt; $this-&gt;slice(($number - 1) * $step, $size));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Skip the first {$count} items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $count
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function skip($count)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;slice($count);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Skip items in the collection until the given condition is met.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TValue|callable(TValue,TKey): bool  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function skipUntil($value)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static($this-&gt;lazy()-&gt;skipUntil($value)-&gt;all());
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Skip items in the collection while the given condition is met.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TValue|callable(TValue,TKey): bool  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function skipWhile($value)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static($this-&gt;lazy()-&gt;skipWhile($value)-&gt;all());
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Slice the underlying collection array.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $offset
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int|null  $length
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function slice($offset, $length = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(array_slice($this-&gt;items, $offset, $length, true));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Split a collection into a certain number of groups.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $numberOfGroups
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int, static&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function split($numberOfGroups)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($this-&gt;isEmpty()) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return new static;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $groups = new static;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $groupSize = floor($this-&gt;count() / $numberOfGroups);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $remain = $this-&gt;count() % $numberOfGroups;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $start = 0;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        for ($i = 0; $i &lt; $numberOfGroups; $i++) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $size = $groupSize;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            if ($i &lt; $remain) {
</span></span></span><span class="line"><span class="cl"><span class="err">                $size++;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            if ($size) {
</span></span></span><span class="line"><span class="cl"><span class="err">                $groups-&gt;push(new static(array_slice($this-&gt;items, $start, $size)));
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">                $start += $size;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $groups;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Split a collection into a certain number of groups, and fill the first groups completely.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $numberOfGroups
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int, static&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function splitIn($numberOfGroups)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;chunk((int) ceil($this-&gt;count() / $numberOfGroups));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the first item in the collection, but only if exactly one item exists. Otherwise, throw an exception.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): bool)|string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $operator
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @throws \Illuminate\Support\ItemNotFoundException
</span></span></span><span class="line"><span class="cl"><span class="err">     * @throws \Illuminate\Support\MultipleItemsFoundException
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function sole($key = null, $operator = null, $value = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $filter = func_num_args() &gt; 1
</span></span></span><span class="line"><span class="cl"><span class="err">            ? $this-&gt;operatorForWhere(...func_get_args())
</span></span></span><span class="line"><span class="cl"><span class="err">            : $key;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $items = $this-&gt;unless($filter == null)-&gt;filter($filter);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $count = $items-&gt;count();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($count === 0) {
</span></span></span><span class="line"><span class="cl"><span class="err">            throw new ItemNotFoundException;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($count &gt; 1) {
</span></span></span><span class="line"><span class="cl"><span class="err">            throw new MultipleItemsFoundException($count);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $items-&gt;first();
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the first item in the collection but throw an exception if no matching items exist.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): bool)|string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $operator
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @throws \Illuminate\Support\ItemNotFoundException
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function firstOrFail($key = null, $operator = null, $value = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $filter = func_num_args() &gt; 1
</span></span></span><span class="line"><span class="cl"><span class="err">            ? $this-&gt;operatorForWhere(...func_get_args())
</span></span></span><span class="line"><span class="cl"><span class="err">            : $key;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $placeholder = new stdClass();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $item = $this-&gt;first($filter, $placeholder);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($item === $placeholder) {
</span></span></span><span class="line"><span class="cl"><span class="err">            throw new ItemNotFoundException;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $item;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Chunk the collection into chunks of the given size.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $size
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int, static&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function chunk($size)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($size &lt;= 0) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return new static;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $chunks = [];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach (array_chunk($this-&gt;items, $size, true) as $chunk) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $chunks[] = new static($chunk);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static($chunks);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Chunk the collection into chunks with a callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TValue, TKey, static&lt;int, TValue&gt;): bool  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int, static&lt;int, TValue&gt;&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function chunkWhile(callable $callback)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(
</span></span></span><span class="line"><span class="cl"><span class="err">            $this-&gt;lazy()-&gt;chunkWhile($callback)-&gt;mapInto(static::class)
</span></span></span><span class="line"><span class="cl"><span class="err">        );
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Sort through each item with a callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TValue): int)|null|int  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function sort($callback = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $items = $this-&gt;items;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $callback &amp;&amp; is_callable($callback)
</span></span></span><span class="line"><span class="cl"><span class="err">            ? uasort($items, $callback)
</span></span></span><span class="line"><span class="cl"><span class="err">            : asort($items, $callback ?? SORT_REGULAR);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static($items);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Sort items in descending order.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $options
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function sortDesc($options = SORT_REGULAR)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $items = $this-&gt;items;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        arsort($items, $options);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static($items);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Sort the collection using the given callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array&lt;array-key, (callable(TValue, TValue): mixed)|(callable(TValue, TKey): mixed)|string|array{string, string}&gt;|(callable(TValue, TKey): mixed)|string  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $options
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $descending
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function sortBy($callback, $options = SORT_REGULAR, $descending = false)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if (is_array($callback) &amp;&amp; ! is_callable($callback)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return $this-&gt;sortByMany($callback, $options);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $results = [];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $callback = $this-&gt;valueRetriever($callback);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        // First we will loop through the items and get the comparator from a callback
</span></span></span><span class="line"><span class="cl"><span class="err">        // function which we were given. Then, we will sort the returned values and
</span></span></span><span class="line"><span class="cl"><span class="err">        // grab all the corresponding values for the sorted keys from this array.
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($this-&gt;items as $key =&gt; $value) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $results[$key] = $callback($value, $key);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $descending ? arsort($results, $options)
</span></span></span><span class="line"><span class="cl"><span class="err">            : asort($results, $options);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        // Once we have sorted all of the keys in the array, we will loop through them
</span></span></span><span class="line"><span class="cl"><span class="err">        // and grab the corresponding model so we can set the underlying items list
</span></span></span><span class="line"><span class="cl"><span class="err">        // to the sorted version. Then we&#39;ll just return the collection instance.
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach (array_keys($results) as $key) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $results[$key] = $this-&gt;items[$key];
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static($results);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Sort the collection using multiple comparisons.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array&lt;array-key, (callable(TValue, TValue): mixed)|(callable(TValue, TKey): mixed)|string|array{string, string}&gt;  $comparisons
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $options
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    protected function sortByMany(array $comparisons = [], int $options = SORT_REGULAR)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $items = $this-&gt;items;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        uasort($items, function ($a, $b) use ($comparisons, $options) {
</span></span></span><span class="line"><span class="cl"><span class="err">            foreach ($comparisons as $comparison) {
</span></span></span><span class="line"><span class="cl"><span class="err">                $comparison = Arr::wrap($comparison);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">                $prop = $comparison[0];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">                $ascending = Arr::get($comparison, 1, true) === true ||
</span></span></span><span class="line"><span class="cl"><span class="err">                    Arr::get($comparison, 1, true) === &#39;asc&#39;;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">                if (! is_string($prop) &amp;&amp; is_callable($prop)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                    $result = $prop($a, $b);
</span></span></span><span class="line"><span class="cl"><span class="err">                } else {
</span></span></span><span class="line"><span class="cl"><span class="err">                    $values = [data_get($a, $prop), data_get($b, $prop)];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">                    if (! $ascending) {
</span></span></span><span class="line"><span class="cl"><span class="err">                        $values = array_reverse($values);
</span></span></span><span class="line"><span class="cl"><span class="err">                    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">                    if (($options &amp; SORT_FLAG_CASE) === SORT_FLAG_CASE) {
</span></span></span><span class="line"><span class="cl"><span class="err">                        if (($options &amp; SORT_NATURAL) === SORT_NATURAL) {
</span></span></span><span class="line"><span class="cl"><span class="err">                            $result = strnatcasecmp($values[0], $values[1]);
</span></span></span><span class="line"><span class="cl"><span class="err">                        } else {
</span></span></span><span class="line"><span class="cl"><span class="err">                            $result = strcasecmp($values[0], $values[1]);
</span></span></span><span class="line"><span class="cl"><span class="err">                        }
</span></span></span><span class="line"><span class="cl"><span class="err">                    } else {
</span></span></span><span class="line"><span class="cl"><span class="err">                        $result = match ($options) {
</span></span></span><span class="line"><span class="cl"><span class="err">                            SORT_NUMERIC =&gt; intval($values[0]) &lt;=&gt; intval($values[1]),
</span></span></span><span class="line"><span class="cl"><span class="err">                            SORT_STRING =&gt; strcmp($values[0], $values[1]),
</span></span></span><span class="line"><span class="cl"><span class="err">                            SORT_NATURAL =&gt; strnatcmp((string) $values[0], (string) $values[1]),
</span></span></span><span class="line"><span class="cl"><span class="err">                            SORT_LOCALE_STRING =&gt; strcoll($values[0], $values[1]),
</span></span></span><span class="line"><span class="cl"><span class="err">                            default =&gt; $values[0] &lt;=&gt; $values[1],
</span></span></span><span class="line"><span class="cl"><span class="err">                        };
</span></span></span><span class="line"><span class="cl"><span class="err">                    }
</span></span></span><span class="line"><span class="cl"><span class="err">                }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">                if ($result === 0) {
</span></span></span><span class="line"><span class="cl"><span class="err">                    continue;
</span></span></span><span class="line"><span class="cl"><span class="err">                }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">                return $result;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">        });
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static($items);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Sort the collection in descending order using the given callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array&lt;array-key, (callable(TValue, TValue): mixed)|(callable(TValue, TKey): mixed)|string|array{string, string}&gt;|(callable(TValue, TKey): mixed)|string  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $options
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function sortByDesc($callback, $options = SORT_REGULAR)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if (is_array($callback) &amp;&amp; ! is_callable($callback)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            foreach ($callback as $index =&gt; $key) {
</span></span></span><span class="line"><span class="cl"><span class="err">                $comparison = Arr::wrap($key);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">                $comparison[1] = &#39;desc&#39;;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">                $callback[$index] = $comparison;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;sortBy($callback, $options, true);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Sort the collection keys.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $options
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $descending
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function sortKeys($options = SORT_REGULAR, $descending = false)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $items = $this-&gt;items;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $descending ? krsort($items, $options) : ksort($items, $options);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static($items);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Sort the collection keys in descending order.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $options
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function sortKeysDesc($options = SORT_REGULAR)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;sortKeys($options, true);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Sort the collection keys using a callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TKey, TKey): int  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function sortKeysUsing(callable $callback)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $items = $this-&gt;items;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        uksort($items, $callback);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static($items);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Splice a portion of the underlying collection array.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $offset
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int|null  $length
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array&lt;array-key, TValue&gt;  $replacement
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function splice($offset, $length = null, $replacement = [])
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if (func_num_args() === 1) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return new static(array_splice($this-&gt;items, $offset));
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(array_splice($this-&gt;items, $offset, $length, $this-&gt;getArrayableItems($replacement)));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Take the first or last {$limit} items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $limit
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function take($limit)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($limit &lt; 0) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return $this-&gt;slice($limit, abs($limit));
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;slice(0, $limit);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Take items in the collection until the given condition is met.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TValue|callable(TValue,TKey): bool  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function takeUntil($value)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static($this-&gt;lazy()-&gt;takeUntil($value)-&gt;all());
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Take items in the collection while the given condition is met.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TValue|callable(TValue,TKey): bool  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function takeWhile($value)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static($this-&gt;lazy()-&gt;takeWhile($value)-&gt;all());
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Transform each item in the collection using a callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TValue, TKey): TValue  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return $this
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function transform(callable $callback)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $this-&gt;items = $this-&gt;map($callback)-&gt;all();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Flatten a multi-dimensional associative array with dots.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function dot()
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(Arr::dot($this-&gt;all()));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Convert a flatten &#34;dot&#34; notation array into an expanded array.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function undot()
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(Arr::undot($this-&gt;all()));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Return only unique items from the collection array.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): mixed)|string|null  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $strict
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function unique($key = null, $strict = false)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if (is_null($key) &amp;&amp; $strict === false) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return new static(array_unique($this-&gt;items, SORT_REGULAR));
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $callback = $this-&gt;valueRetriever($key);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $exists = [];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;reject(function ($item, $key) use ($callback, $strict, &amp;$exists) {
</span></span></span><span class="line"><span class="cl"><span class="err">            if (in_array($id = $callback($item, $key), $exists, $strict)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                return true;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            $exists[] = $id;
</span></span></span><span class="line"><span class="cl"><span class="err">        });
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Reset the keys on the underlying array.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int, TValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function values()
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(array_values($this-&gt;items));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Zip the collection together with one or more arrays.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * e.g. new Collection([1, 2, 3])-&gt;zip([4, 5, 6]);
</span></span></span><span class="line"><span class="cl"><span class="err">     *      =&gt; [[1, 4], [2, 5], [3, 6]]
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TZipValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;array-key, TZipValue&gt;|iterable&lt;array-key, TZipValue&gt;  ...$items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int, static&lt;int, TValue|TZipValue&gt;&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function zip($items)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $arrayableItems = array_map(fn ($items) =&gt; $this-&gt;getArrayableItems($items), func_get_args());
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $params = array_merge([fn () =&gt; new static(func_get_args()), $this-&gt;items], $arrayableItems);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(array_map(...$params));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Pad collection to the specified length with a value.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TPadValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $size
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TPadValue  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int, TValue|TPadValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function pad($size, $value)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(array_pad($this-&gt;items, $size, $value));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get an iterator for the items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return \ArrayIterator&lt;TKey, TValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function getIterator(): \Traversable
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new ArrayIterator($this-&gt;items);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Count the number of items in the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return int
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function count(): int
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return count($this-&gt;items);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Count the number of items in the collection by a field or using a callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): array-key)|string|null  $countBy
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;array-key, int&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function countBy($countBy = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static($this-&gt;lazy()-&gt;countBy($countBy)-&gt;all());
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Add an item to the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TValue  $item
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return $this
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function add($item)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $this-&gt;items[] = $item;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get a base Support collection instance from this collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return \Illuminate\Support\Collection&lt;TKey, TValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function toBase()
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new self($this);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Determine if an item exists at an offset.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TKey  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function offsetExists($key): bool
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return isset($this-&gt;items[$key]);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get an item at a given offset.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TKey  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TValue
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function offsetGet($key): mixed
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;items[$key];
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Set the item at a given offset.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TKey|null  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TValue  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return void
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function offsetSet($key, $value): void
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if (is_null($key)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $this-&gt;items[] = $value;
</span></span></span><span class="line"><span class="cl"><span class="err">        } else {
</span></span></span><span class="line"><span class="cl"><span class="err">            $this-&gt;items[$key] = $value;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Unset the item at a given offset.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TKey  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return void
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function offsetUnset($key): void
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        unset($this-&gt;items[$key]);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">}
</span></span></span><span class="line"><span class="cl"><span class="err">?&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">&lt;?php
</span></span></span><span class="line"><span class="cl"><span class="err">$start = microtime(true);
</span></span></span><span class="line"><span class="cl"><span class="err">$product = [];
</span></span></span><span class="line"><span class="cl"><span class="err">for ($k = 0; $k &lt;= 1000; $k++) {
</span></span></span><span class="line"><span class="cl"><span class="err">    $options = [];
</span></span></span><span class="line"><span class="cl"><span class="err">    for ($j = 0; $j &lt;= 10; $j++) {
</span></span></span><span class="line"><span class="cl"><span class="err">        $optionItems = [];
</span></span></span><span class="line"><span class="cl"><span class="err">        for ($i = 0; $i &lt;= 100; $i++) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $optionItems[] = new Collection(array(
</span></span></span><span class="line"><span class="cl"><span class="err">                &#39;title&#39; =&gt; &#39;OptionItem&#39; . $i,
</span></span></span><span class="line"><span class="cl"><span class="err">                &#39;description&#39; =&gt; &#39;OptionItem &#39; . $i . &#39; Description&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">                &#39;price&#39; =&gt; random_int(1000, 10000)
</span></span></span><span class="line"><span class="cl"><span class="err">            ));
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $options[] = new Collection(array(
</span></span></span><span class="line"><span class="cl"><span class="err">            &#39;title&#39; =&gt; &#39;Option&#39; . $j,
</span></span></span><span class="line"><span class="cl"><span class="err">            &#39;description&#39; =&gt; &#39;Option &#39; . $j . &#39; Description&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">            &#39;price&#39; =&gt; random_int(1000, 10000),
</span></span></span><span class="line"><span class="cl"><span class="err">            &#39;items&#39; =&gt; $optionItems
</span></span></span><span class="line"><span class="cl"><span class="err">        ));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">    $product[] = new Collection(array(
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;title&#39; =&gt; &#39;Product&#39; . $k,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;description&#39; =&gt; &#39;Product &#39; . $k . &#39; Description&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;price&#39; =&gt; random_int(1000, 10000),
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;currency&#39; =&gt; &#39;USD&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;category&#39; =&gt; &#39;Category&#39; . $k,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;brand&#39; =&gt; &#39;Brand&#39; . $k,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;options&#39; =&gt; $options
</span></span></span><span class="line"><span class="cl"><span class="err">    ));
</span></span></span><span class="line"><span class="cl"><span class="err">}
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">$end = microtime(true);
</span></span></span><span class="line"><span class="cl"><span class="err">echo &#39;Memory Peak Usage: &#39; . (memory_get_peak_usage(true) / 1024 / 1024) . &#39; MB&#39; . &#39;&lt;br&gt;&#39;;
</span></span></span><span class="line"><span class="cl"><span class="err">echo &#39;Execution Time: &#39; . round($end - $start, 2) . &#39; seconds&#39; . &#39;&lt;br&gt;&#39;;
</span></span></span></code></pre>
</div>
<h3 id="collection--class-based-collection" class="headerLink">
    <a href="#collection--class-based-collection" class="header-mark"></a>Collection + Class Based Collection</h3><div class="code-block highlight is-closed show-line-numbers  tw-group tw-my-2">
  <div class="
    code-block-title 
    
    tw-flex 
    tw-flex-row 
    tw-justify-between 
    tw-w-full tw-bg-bgColor-secondary
    ">      
    <button 
      class="
        tw-select-none 
        tw-mx-2 
        tw-block
        group-[.is-open]:tw-rotate-90
        tw-transition-[transform] 
        tw-duration-500 
        tw-ease-in-out
        print:!tw-hidden"
      disabled
      aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z"/></svg></button>

    <div class="code-block-title-bar tw-w-full">
      <p class="tw-select-none !tw-my-1">PHP</p>
    </div>
    <div class="tw-flex">
      <button 
        class="
          line-number-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.show-line-numbers]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle line numbers"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M61.77 401l17.5-20.15a19.92 19.92 0 0 0 5.07-14.19v-3.31C84.34 356 80.5 352 73 352H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8h22.83a157.41 157.41 0 0 0-11 12.31l-5.61 7c-4 5.07-5.25 10.13-2.8 14.88l1.05 1.93c3 5.76 6.29 7.88 12.25 7.88h4.73c10.33 0 15.94 2.44 15.94 9.09 0 4.72-4.2 8.22-14.36 8.22a41.54 41.54 0 0 1-15.47-3.12c-6.49-3.88-11.74-3.5-15.6 3.12l-5.59 9.31c-3.72 6.13-3.19 11.72 2.63 15.94 7.71 4.69 20.38 9.44 37 9.44 34.16 0 48.5-22.75 48.5-44.12-.03-14.38-9.12-29.76-28.73-34.88zM496 224H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-160H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16V80a16 16 0 0 0-16-16zm0 320H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM16 160h64a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H64V40a8 8 0 0 0-8-8H32a8 8 0 0 0-7.14 4.42l-8 16A8 8 0 0 0 24 64h8v64H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8zm-3.91 160H80a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H41.32c3.29-10.29 48.34-18.68 48.34-56.44 0-29.06-25-39.56-44.47-39.56-21.36 0-33.8 10-40.46 18.75-4.37 5.59-3 10.84 2.8 15.37l8.58 6.88c5.61 4.56 11 2.47 16.12-2.44a13.44 13.44 0 0 1 9.46-3.84c3.33 0 9.28 1.56 9.28 8.75C51 248.19 0 257.31 0 304.59v4C0 316 5.08 320 12.09 320z"/></svg></button>

      <button 
        class="
          wrap-code-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.is-wrap]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle code wrap"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z"/></svg></button>
      
      <button 
        class="
          copy-code-button
          tw-select-none
          tw-mx-2 
          tw-hidden
          group-[.is-open]:tw-block
          hover:tw-text-fgColor-link 
          print:!tw-hidden"
        title="Copy code">
          <span class="copy-icon tw-block"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z"/></svg></span>
          <span class="check-icon tw-hidden"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"/></svg></span>
      </button>
        
      <button 
        class="
          tw-select-none 
          tw-mx-2 
          tw-block 
          group-[.is-open]:tw-hidden 
          print:!tw-hidden" 
        disabled
        aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M328 256c0 39.8-32.2 72-72 72s-72-32.2-72-72 32.2-72 72-72 72 32.2 72 72zm104-72c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72zm-352 0c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72z"/></svg></button>
    </div>
  </div>
  <pre style="counter-reset: codeblock;" class="tw-block tw-m-0 tw-p-0"><code 
    id="codeblock-id-5" 
    class="
      chroma 
      !tw-block 
      tw-p-0
      tw-m-0
      tw-transition-[max-height] 
      tw-duration-500 
      tw-ease-in-out 
      group-[.is-closed]:!tw-max-h-0 
      group-[.is-wrap]:tw-text-wrap
      tw-overflow-y-hidden
      tw-overflow-x-auto
      tw-scrollbar-thin
      "><span class="line"><span class="cl"> <span class="o">&lt;?</span><span class="nx">php</span>
</span></span><span class="line"><span class="cl"><span class="k">namespace</span> <span class="nx">Illuminate\Contracts\Support</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">ini_set</span><span class="p">(</span><span class="s1">&#39;memory_limit&#39;</span><span class="p">,</span> <span class="s1">&#39;1024M&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="k">interface</span> <span class="nx">CanBeEscapedWhenCastToString</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="sd">/**
</span></span></span><span class="line"><span class="cl"><span class="sd">     * Indicate that the object&#39;s string representation should be escaped when __toString is invoked.
</span></span></span><span class="line"><span class="cl"><span class="sd">     *
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @param  bool  $escape
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @return $this
</span></span></span><span class="line"><span class="cl"><span class="sd">     */</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">function</span> <span class="nf">escapeWhenCastingToString</span><span class="p">(</span><span class="nv">$escape</span> <span class="o">=</span> <span class="k">true</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="cp">?&gt;</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">&lt;?php
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">namespace Illuminate\Support\Traits;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">use Closure;
</span></span></span><span class="line"><span class="cl"><span class="err">use Illuminate\Support\HigherOrderWhenProxy;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">trait Conditionable
</span></span></span><span class="line"><span class="cl"><span class="err">{
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Apply the callback if the given &#34;value&#34; is (or resolves to) truthy.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TWhenParameter
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TWhenReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (\Closure($this): TWhenParameter)|TWhenParameter|null  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable($this, TWhenParameter): TWhenReturnType)|null  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable($this, TWhenParameter): TWhenReturnType)|null  $default
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return $this|TWhenReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function when($value = null, ?callable $callback = null, ?callable $default = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $value = $value instanceof Closure ? $value($this) : $value;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if (func_num_args() === 0) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return new HigherOrderWhenProxy($this);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if (func_num_args() === 1) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return (new HigherOrderWhenProxy($this))-&gt;condition($value);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($value) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return $callback($this, $value) ?? $this;
</span></span></span><span class="line"><span class="cl"><span class="err">        } elseif ($default) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return $default($this, $value) ?? $this;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Apply the callback if the given &#34;value&#34; is (or resolves to) falsy.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TUnlessParameter
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TUnlessReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (\Closure($this): TUnlessParameter)|TUnlessParameter|null  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable($this, TUnlessParameter): TUnlessReturnType)|null  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable($this, TUnlessParameter): TUnlessReturnType)|null  $default
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return $this|TUnlessReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function unless($value = null, ?callable $callback = null, ?callable $default = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $value = $value instanceof Closure ? $value($this) : $value;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if (func_num_args() === 0) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return (new HigherOrderWhenProxy($this))-&gt;negateConditionOnCapture();
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if (func_num_args() === 1) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return (new HigherOrderWhenProxy($this))-&gt;condition(! $value);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if (! $value) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return $callback($this, $value) ?? $this;
</span></span></span><span class="line"><span class="cl"><span class="err">        } elseif ($default) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return $default($this, $value) ?? $this;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">}
</span></span></span><span class="line"><span class="cl"><span class="err">?&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">&lt;?php
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">namespace Illuminate\Support;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">use ArgumentCountError;
</span></span></span><span class="line"><span class="cl"><span class="err">use \ArrayAccess;
</span></span></span><span class="line"><span class="cl"><span class="err">use Illuminate\Support\Traits\Macroable;
</span></span></span><span class="line"><span class="cl"><span class="err">use InvalidArgumentException;
</span></span></span><span class="line"><span class="cl"><span class="err">use Random\Randomizer;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">class Arr
</span></span></span><span class="line"><span class="cl"><span class="err">{
</span></span></span><span class="line"><span class="cl"><span class="err">    use Macroable;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Determine whether the given value is array accessible.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function accessible($value)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return is_array($value) || $value instanceof ArrayAccess;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Add an element to an array using &#34;dot&#34; notation if it doesn&#39;t exist.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string|int|float  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function add($array, $key, $value)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if (is_null(static::get($array, $key))) {
</span></span></span><span class="line"><span class="cl"><span class="err">            static::set($array, $key, $value);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $array;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Collapse an array of arrays into a single array.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  iterable  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function collapse($array)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $results = [];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($array as $values) {
</span></span></span><span class="line"><span class="cl"><span class="err">            if ($values instanceof Collection) {
</span></span></span><span class="line"><span class="cl"><span class="err">                $values = $values-&gt;all();
</span></span></span><span class="line"><span class="cl"><span class="err">            } elseif (! is_array($values)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                continue;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            $results[] = $values;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return array_merge([], ...$results);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Cross join the given arrays, returning all possible permutations.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  iterable  ...$arrays
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function crossJoin(...$arrays)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $results = [[]];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($arrays as $index =&gt; $array) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $append = [];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            foreach ($results as $product) {
</span></span></span><span class="line"><span class="cl"><span class="err">                foreach ($array as $item) {
</span></span></span><span class="line"><span class="cl"><span class="err">                    $product[$index] = $item;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">                    $append[] = $product;
</span></span></span><span class="line"><span class="cl"><span class="err">                }
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            $results = $append;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $results;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Divide an array into two arrays. One with keys and the other with values.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function divide($array)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return [array_keys($array), array_values($array)];
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Flatten a multi-dimensional associative array with dots.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  iterable  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $prepend
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function dot($array, $prepend = &#39;&#39;)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $results = [];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($array as $key =&gt; $value) {
</span></span></span><span class="line"><span class="cl"><span class="err">            if (is_array($value) &amp;&amp; ! empty($value)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                $results = array_merge($results, static::dot($value, $prepend.$key.&#39;.&#39;));
</span></span></span><span class="line"><span class="cl"><span class="err">            } else {
</span></span></span><span class="line"><span class="cl"><span class="err">                $results[$prepend.$key] = $value;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $results;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Convert a flatten &#34;dot&#34; notation array into an expanded array.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  iterable  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function undot($array)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $results = [];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($array as $key =&gt; $value) {
</span></span></span><span class="line"><span class="cl"><span class="err">            static::set($results, $key, $value);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $results;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get all of the given array except for a specified array of keys.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array|string|int|float  $keys
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function except($array, $keys)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        static::forget($array, $keys);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $array;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Determine if the given key exists in the provided array.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \ArrayAccess|array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string|int|float  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function exists($array, $key)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($array instanceof Enumerable) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return $array-&gt;has($key);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($array instanceof ArrayAccess) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return $array-&gt;offsetExists($key);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if (is_float($key)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $key = (string) $key;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return array_key_exists($key, $array);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Return the first element in an array passing a given truth test.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TKey
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TValue
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TFirstDefault
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  iterable&lt;TKey, TValue&gt;  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): bool)|null  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TFirstDefault|(\Closure(): TFirstDefault)  $default
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TValue|TFirstDefault
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function first($array, ?callable $callback = null, $default = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if (is_null($callback)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            if (empty($array)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                return value($default);
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            foreach ($array as $item) {
</span></span></span><span class="line"><span class="cl"><span class="err">                return $item;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            return value($default);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($array as $key =&gt; $value) {
</span></span></span><span class="line"><span class="cl"><span class="err">            if ($callback($value, $key)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                return $value;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return value($default);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Return the last element in an array passing a given truth test.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable|null  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $default
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return mixed
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function last($array, ?callable $callback = null, $default = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if (is_null($callback)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return empty($array) ? value($default) : end($array);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return static::first(array_reverse($array, true), $callback, $default);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Take the first or last {$limit} items from an array.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $limit
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function take($array, $limit)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($limit &lt; 0) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return array_slice($array, $limit, abs($limit));
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return array_slice($array, 0, $limit);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Flatten a multi-dimensional array into a single level.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  iterable  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $depth
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function flatten($array, $depth = INF)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $result = [];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($array as $item) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $item = $item instanceof Collection ? $item-&gt;all() : $item;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            if (! is_array($item)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                $result[] = $item;
</span></span></span><span class="line"><span class="cl"><span class="err">            } else {
</span></span></span><span class="line"><span class="cl"><span class="err">                $values = $depth === 1
</span></span></span><span class="line"><span class="cl"><span class="err">                    ? array_values($item)
</span></span></span><span class="line"><span class="cl"><span class="err">                    : static::flatten($item, $depth - 1);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">                foreach ($values as $value) {
</span></span></span><span class="line"><span class="cl"><span class="err">                    $result[] = $value;
</span></span></span><span class="line"><span class="cl"><span class="err">                }
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $result;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Remove one or many array items from a given array using &#34;dot&#34; notation.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array|string|int|float  $keys
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return void
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function forget(&amp;$array, $keys)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $original = &amp;$array;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $keys = (array) $keys;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if (count($keys) === 0) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($keys as $key) {
</span></span></span><span class="line"><span class="cl"><span class="err">            // if the exact key exists in the top-level, remove it
</span></span></span><span class="line"><span class="cl"><span class="err">            if (static::exists($array, $key)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                unset($array[$key]);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">                continue;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            $parts = explode(&#39;.&#39;, $key);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            // clean up before each pass
</span></span></span><span class="line"><span class="cl"><span class="err">            $array = &amp;$original;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            while (count($parts) &gt; 1) {
</span></span></span><span class="line"><span class="cl"><span class="err">                $part = array_shift($parts);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">                if (isset($array[$part]) &amp;&amp; static::accessible($array[$part])) {
</span></span></span><span class="line"><span class="cl"><span class="err">                    $array = &amp;$array[$part];
</span></span></span><span class="line"><span class="cl"><span class="err">                } else {
</span></span></span><span class="line"><span class="cl"><span class="err">                    continue 2;
</span></span></span><span class="line"><span class="cl"><span class="err">                }
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            unset($array[array_shift($parts)]);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get an item from an array using &#34;dot&#34; notation.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \ArrayAccess|array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string|int|null  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $default
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return mixed
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function get($array, $key, $default = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if (! static::accessible($array)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return value($default);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if (is_null($key)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return $array;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if (static::exists($array, $key)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return $array[$key];
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if (! str_contains($key, &#39;.&#39;)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return $array[$key] ?? value($default);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach (explode(&#39;.&#39;, $key) as $segment) {
</span></span></span><span class="line"><span class="cl"><span class="err">            if (static::accessible($array) &amp;&amp; static::exists($array, $segment)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                $array = $array[$segment];
</span></span></span><span class="line"><span class="cl"><span class="err">            } else {
</span></span></span><span class="line"><span class="cl"><span class="err">                return value($default);
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $array;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Check if an item or items exist in an array using &#34;dot&#34; notation.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \ArrayAccess|array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string|array  $keys
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function has($array, $keys)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $keys = (array) $keys;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if (! $array || $keys === []) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return false;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($keys as $key) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $subKeyArray = $array;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            if (static::exists($array, $key)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                continue;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            foreach (explode(&#39;.&#39;, $key) as $segment) {
</span></span></span><span class="line"><span class="cl"><span class="err">                if (static::accessible($subKeyArray) &amp;&amp; static::exists($subKeyArray, $segment)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                    $subKeyArray = $subKeyArray[$segment];
</span></span></span><span class="line"><span class="cl"><span class="err">                } else {
</span></span></span><span class="line"><span class="cl"><span class="err">                    return false;
</span></span></span><span class="line"><span class="cl"><span class="err">                }
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return true;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Determine if any of the keys exist in an array using &#34;dot&#34; notation.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \ArrayAccess|array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string|array  $keys
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function hasAny($array, $keys)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if (is_null($keys)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return false;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $keys = (array) $keys;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if (! $array) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return false;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($keys === []) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return false;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($keys as $key) {
</span></span></span><span class="line"><span class="cl"><span class="err">            if (static::has($array, $key)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                return true;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return false;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Determines if an array is associative.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * An array is &#34;associative&#34; if it doesn&#39;t have sequential numerical keys beginning with zero.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function isAssoc(array $array)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return ! array_is_list($array);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Determines if an array is a list.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * An array is a &#34;list&#34; if all array keys are sequential integers starting from 0 with no gaps in between.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function isList($array)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return array_is_list($array);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Join all items using a string. The final items can use a separate glue string.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $glue
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $finalGlue
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return string
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function join($array, $glue, $finalGlue = &#39;&#39;)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($finalGlue === &#39;&#39;) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return implode($glue, $array);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if (count($array) === 0) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return &#39;&#39;;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if (count($array) === 1) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return end($array);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $finalItem = array_pop($array);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return implode($glue, $array).$finalGlue.$finalItem;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Key an associative array by a field or using a callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable|array|string  $keyBy
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function keyBy($array, $keyBy)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return Collection::make($array)-&gt;keyBy($keyBy)-&gt;all();
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Prepend the key names of an associative array.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $prependWith
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function prependKeysWith($array, $prependWith)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return static::mapWithKeys($array, fn ($item, $key) =&gt; [$prependWith.$key =&gt; $item]);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get a subset of the items from the given array.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array|string  $keys
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function only($array, $keys)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return array_intersect_key($array, array_flip((array) $keys));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Select an array of values from an array.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array|string  $keys
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function select($array, $keys)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $keys = static::wrap($keys);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return static::map($array, function ($item) use ($keys) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $result = [];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            foreach ($keys as $key) {
</span></span></span><span class="line"><span class="cl"><span class="err">                if (Arr::accessible($item) &amp;&amp; Arr::exists($item, $key)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                    $result[$key] = $item[$key];
</span></span></span><span class="line"><span class="cl"><span class="err">                } elseif (is_object($item) &amp;&amp; isset($item-&gt;{$key})) {
</span></span></span><span class="line"><span class="cl"><span class="err">                    $result[$key] = $item-&gt;{$key};
</span></span></span><span class="line"><span class="cl"><span class="err">                }
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            return $result;
</span></span></span><span class="line"><span class="cl"><span class="err">        });
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Pluck an array of values from an array.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  iterable  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string|array|int|null  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string|array|null  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function pluck($array, $value, $key = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $results = [];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        [$value, $key] = static::explodePluckParameters($value, $key);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($array as $item) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $itemValue = data_get($item, $value);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            // If the key is &#34;null&#34;, we will just append the value to the array and keep
</span></span></span><span class="line"><span class="cl"><span class="err">            // looping. Otherwise we will key the array using the value of the key we
</span></span></span><span class="line"><span class="cl"><span class="err">            // received from the developer. Then we&#39;ll return the final array form.
</span></span></span><span class="line"><span class="cl"><span class="err">            if (is_null($key)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                $results[] = $itemValue;
</span></span></span><span class="line"><span class="cl"><span class="err">            } else {
</span></span></span><span class="line"><span class="cl"><span class="err">                $itemKey = data_get($item, $key);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">                if (is_object($itemKey) &amp;&amp; method_exists($itemKey, &#39;__toString&#39;)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                    $itemKey = (string) $itemKey;
</span></span></span><span class="line"><span class="cl"><span class="err">                }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">                $results[$itemKey] = $itemValue;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $results;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Explode the &#34;value&#34; and &#34;key&#34; arguments passed to &#34;pluck&#34;.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string|array  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string|array|null  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    protected static function explodePluckParameters($value, $key)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $value = is_string($value) ? explode(&#39;.&#39;, $value) : $value;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $key = is_null($key) || is_array($key) ? $key : explode(&#39;.&#39;, $key);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return [$value, $key];
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Run a map over each of the items in the array.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function map(array $array, callable $callback)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $keys = array_keys($array);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        try {
</span></span></span><span class="line"><span class="cl"><span class="err">            $items = array_map($callback, $array, $keys);
</span></span></span><span class="line"><span class="cl"><span class="err">        } catch (ArgumentCountError) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $items = array_map($callback, $array);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return array_combine($keys, $items);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Run an associative map over each of the items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * The callback should return an associative array with a single key/value pair.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TKey
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TValue
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TMapWithKeysKey of array-key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TMapWithKeysValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array&lt;TKey, TValue&gt;  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TValue, TKey): array&lt;TMapWithKeysKey, TMapWithKeysValue&gt;  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function mapWithKeys(array $array, callable $callback)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $result = [];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($array as $key =&gt; $value) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $assoc = $callback($value, $key);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            foreach ($assoc as $mapKey =&gt; $mapValue) {
</span></span></span><span class="line"><span class="cl"><span class="err">                $result[$mapKey] = $mapValue;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $result;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Run a map over each nested chunk of items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TKey
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array&lt;TKey, array&gt;  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(mixed...): TValue  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array&lt;TKey, TValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function mapSpread(array $array, callable $callback)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return static::map($array, function ($chunk, $key) use ($callback) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $chunk[] = $key;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            return $callback(...$chunk);
</span></span></span><span class="line"><span class="cl"><span class="err">        });
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Push an item onto the beginning of an array.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function prepend($array, $value, $key = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if (func_num_args() == 2) {
</span></span></span><span class="line"><span class="cl"><span class="err">            array_unshift($array, $value);
</span></span></span><span class="line"><span class="cl"><span class="err">        } else {
</span></span></span><span class="line"><span class="cl"><span class="err">            $array = [$key =&gt; $value] + $array;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $array;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get a value from the array, and remove it.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string|int  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $default
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return mixed
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function pull(&amp;$array, $key, $default = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $value = static::get($array, $key, $default);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        static::forget($array, $key);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $value;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Convert the array into a query string.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return string
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function query($array)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return http_build_query($array, &#39;&#39;, &#39;&amp;&#39;, PHP_QUERY_RFC3986);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get one or a specified number of random values from an array.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int|null  $number
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $preserveKeys
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return mixed
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @throws \InvalidArgumentException
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function random($array, $number = null, $preserveKeys = false)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $requested = is_null($number) ? 1 : $number;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $count = count($array);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($requested &gt; $count) {
</span></span></span><span class="line"><span class="cl"><span class="err">            throw new InvalidArgumentException(
</span></span></span><span class="line"><span class="cl"><span class="err">                &#34;You requested {$requested} items, but there are only {$count} items available.&#34;
</span></span></span><span class="line"><span class="cl"><span class="err">            );
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if (empty($array) || (! is_null($number) &amp;&amp; $number &lt;= 0)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return is_null($number) ? null : [];
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $keys = (new Randomizer)-&gt;pickArrayKeys($array, $requested);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if (is_null($number)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return $array[$keys[0]];
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $results = [];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($preserveKeys) {
</span></span></span><span class="line"><span class="cl"><span class="err">            foreach ($keys as $key) {
</span></span></span><span class="line"><span class="cl"><span class="err">                $results[$key] = $array[$key];
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">        } else {
</span></span></span><span class="line"><span class="cl"><span class="err">            foreach ($keys as $key) {
</span></span></span><span class="line"><span class="cl"><span class="err">                $results[] = $array[$key];
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $results;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Set an array item to a given value using &#34;dot&#34; notation.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * If no key is given to the method, the entire array will be replaced.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string|int|null  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function set(&amp;$array, $key, $value)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if (is_null($key)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return $array = $value;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $keys = explode(&#39;.&#39;, $key);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($keys as $i =&gt; $key) {
</span></span></span><span class="line"><span class="cl"><span class="err">            if (count($keys) === 1) {
</span></span></span><span class="line"><span class="cl"><span class="err">                break;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            unset($keys[$i]);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            // If the key doesn&#39;t exist at this depth, we will just create an empty array
</span></span></span><span class="line"><span class="cl"><span class="err">            // to hold the next value, allowing us to create the arrays to hold final
</span></span></span><span class="line"><span class="cl"><span class="err">            // values at the correct depth. Then we&#39;ll keep digging into the array.
</span></span></span><span class="line"><span class="cl"><span class="err">            if (! isset($array[$key]) || ! is_array($array[$key])) {
</span></span></span><span class="line"><span class="cl"><span class="err">                $array[$key] = [];
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            $array = &amp;$array[$key];
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $array[array_shift($keys)] = $value;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $array;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Shuffle the given array and return the result.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function shuffle($array)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return (new Randomizer)-&gt;shuffleArray($array);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Sort the array using the given callback or &#34;dot&#34; notation.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable|array|string|null  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function sort($array, $callback = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return Collection::make($array)-&gt;sortBy($callback)-&gt;all();
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Sort the array in descending order using the given callback or &#34;dot&#34; notation.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable|array|string|null  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function sortDesc($array, $callback = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return Collection::make($array)-&gt;sortByDesc($callback)-&gt;all();
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Recursively sort an array by keys and values.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $options
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $descending
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function sortRecursive($array, $options = SORT_REGULAR, $descending = false)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($array as &amp;$value) {
</span></span></span><span class="line"><span class="cl"><span class="err">            if (is_array($value)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                $value = static::sortRecursive($value, $options, $descending);
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if (! array_is_list($array)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $descending
</span></span></span><span class="line"><span class="cl"><span class="err">                ? krsort($array, $options)
</span></span></span><span class="line"><span class="cl"><span class="err">                : ksort($array, $options);
</span></span></span><span class="line"><span class="cl"><span class="err">        } else {
</span></span></span><span class="line"><span class="cl"><span class="err">            $descending
</span></span></span><span class="line"><span class="cl"><span class="err">                ? rsort($array, $options)
</span></span></span><span class="line"><span class="cl"><span class="err">                : sort($array, $options);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $array;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Recursively sort an array by keys and values in descending order.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $options
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function sortRecursiveDesc($array, $options = SORT_REGULAR)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return static::sortRecursive($array, $options, true);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Conditionally compile classes from an array into a CSS class list.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return string
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function toCssClasses($array)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $classList = static::wrap($array);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $classes = [];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($classList as $class =&gt; $constraint) {
</span></span></span><span class="line"><span class="cl"><span class="err">            if (is_numeric($class)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                $classes[] = $constraint;
</span></span></span><span class="line"><span class="cl"><span class="err">            } elseif ($constraint) {
</span></span></span><span class="line"><span class="cl"><span class="err">                $classes[] = $class;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return implode(&#39; &#39;, $classes);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Conditionally compile styles from an array into a style list.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return string
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function toCssStyles($array)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $styleList = static::wrap($array);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $styles = [];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($styleList as $class =&gt; $constraint) {
</span></span></span><span class="line"><span class="cl"><span class="err">            if (is_numeric($class)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                $styles[] = Str::finish($constraint, &#39;;&#39;);
</span></span></span><span class="line"><span class="cl"><span class="err">            } elseif ($constraint) {
</span></span></span><span class="line"><span class="cl"><span class="err">                $styles[] = Str::finish($class, &#39;;&#39;);
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return implode(&#39; &#39;, $styles);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Filter the array using the given callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function where($array, callable $callback)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return array_filter($array, $callback, ARRAY_FILTER_USE_BOTH);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Filter items where the value is not null.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $array
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function whereNotNull($array)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return static::where($array, fn ($value) =&gt; ! is_null($value));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * If the given value is not an array and not null, wrap it in one.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function wrap($value)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if (is_null($value)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return [];
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return is_array($value) ? $value : [$value];
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">}
</span></span></span><span class="line"><span class="cl"><span class="err">?&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">&lt;?php
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">namespace Illuminate\Contracts\Support;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">interface Jsonable
</span></span></span><span class="line"><span class="cl"><span class="err">{
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Convert the object to its JSON representation.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $options
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return string
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function toJson($options = 0);
</span></span></span><span class="line"><span class="cl"><span class="err">}
</span></span></span><span class="line"><span class="cl"><span class="err">?&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">&lt;?php
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">namespace Illuminate\Contracts\Support;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">/**
</span></span></span><span class="line"><span class="cl"><span class="err"> * @template TKey of array-key
</span></span></span><span class="line"><span class="cl"><span class="err"> * @template TValue
</span></span></span><span class="line"><span class="cl"><span class="err"> */
</span></span></span><span class="line"><span class="cl"><span class="err">interface Arrayable
</span></span></span><span class="line"><span class="cl"><span class="err">{
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the instance as an array.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array&lt;TKey, TValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function toArray();
</span></span></span><span class="line"><span class="cl"><span class="err">}
</span></span></span><span class="line"><span class="cl"><span class="err">?&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">&lt;?php
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">namespace Illuminate\Support\Traits;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">use BadMethodCallException;
</span></span></span><span class="line"><span class="cl"><span class="err">use ReflectionClass;
</span></span></span><span class="line"><span class="cl"><span class="err">use ReflectionMethod;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">trait Macroable
</span></span></span><span class="line"><span class="cl"><span class="err">{
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * The registered string macros.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @var array
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    protected static $macros = [];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Register a custom macro.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $name
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  object|callable  $macro
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param-closure-this static  $macro
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return void
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function macro($name, $macro)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        static::$macros[$name] = $macro;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Mix another object into the class.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  object  $mixin
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $replace
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return void
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @throws \ReflectionException
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function mixin($mixin, $replace = true)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $methods = (new ReflectionClass($mixin))-&gt;getMethods(
</span></span></span><span class="line"><span class="cl"><span class="err">            ReflectionMethod::IS_PUBLIC | ReflectionMethod::IS_PROTECTED
</span></span></span><span class="line"><span class="cl"><span class="err">        );
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($methods as $method) {
</span></span></span><span class="line"><span class="cl"><span class="err">            if ($replace || ! static::hasMacro($method-&gt;name)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                static::macro($method-&gt;name, $method-&gt;invoke($mixin));
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Checks if macro is registered.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $name
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function hasMacro($name)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return isset(static::$macros[$name]);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Flush the existing macros.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return void
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function flushMacros()
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        static::$macros = [];
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Dynamically handle calls to the class.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $method
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $parameters
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return mixed
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @throws \BadMethodCallException
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function __callStatic($method, $parameters)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if (! static::hasMacro($method)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            throw new BadMethodCallException(sprintf(
</span></span></span><span class="line"><span class="cl"><span class="err">                &#39;Method %s::%s does not exist.&#39;, static::class, $method
</span></span></span><span class="line"><span class="cl"><span class="err">            ));
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $macro = static::$macros[$method];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($macro instanceof Closure) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $macro = $macro-&gt;bindTo(null, static::class);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $macro(...$parameters);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Dynamically handle calls to the class.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $method
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array  $parameters
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return mixed
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @throws \BadMethodCallException
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function __call($method, $parameters)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if (! static::hasMacro($method)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            throw new BadMethodCallException(sprintf(
</span></span></span><span class="line"><span class="cl"><span class="err">                &#39;Method %s::%s does not exist.&#39;, static::class, $method
</span></span></span><span class="line"><span class="cl"><span class="err">            ));
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $macro = static::$macros[$method];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($macro instanceof Closure) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $macro = $macro-&gt;bindTo($this, static::class);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $macro(...$parameters);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">}
</span></span></span><span class="line"><span class="cl"><span class="err">?&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">&lt;?php
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">namespace Illuminate\Support;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">use CachingIterator;
</span></span></span><span class="line"><span class="cl"><span class="err">use Countable;
</span></span></span><span class="line"><span class="cl"><span class="err">use Illuminate\Contracts\Support\Arrayable;
</span></span></span><span class="line"><span class="cl"><span class="err">use Illuminate\Contracts\Support\Jsonable;
</span></span></span><span class="line"><span class="cl"><span class="err">use IteratorAggregate;
</span></span></span><span class="line"><span class="cl"><span class="err">use JsonSerializable;
</span></span></span><span class="line"><span class="cl"><span class="err">use \Traversable;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">/**
</span></span></span><span class="line"><span class="cl"><span class="err"> * @template TKey of array-key
</span></span></span><span class="line"><span class="cl"><span class="err"> *
</span></span></span><span class="line"><span class="cl"><span class="err"> * @template-covariant TValue
</span></span></span><span class="line"><span class="cl"><span class="err"> *
</span></span></span><span class="line"><span class="cl"><span class="err"> * @extends \Illuminate\Contracts\Support\Arrayable&lt;TKey, TValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err"> * @extends \IteratorAggregate&lt;TKey, TValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err"> */
</span></span></span><span class="line"><span class="cl"><span class="err">interface Enumerable extends Arrayable, Countable, IteratorAggregate, Jsonable, JsonSerializable
</span></span></span><span class="line"><span class="cl"><span class="err">{
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Create a new collection instance if the value isn&#39;t one already.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TMakeKey of array-key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TMakeValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;TMakeKey, TMakeValue&gt;|iterable&lt;TMakeKey, TMakeValue&gt;|null  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;TMakeKey, TMakeValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function make($items = []);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Create a new instance by invoking the callback a given amount of times.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $number
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable|null  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function times($number, ?callable $callback = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Create a collection with the given range.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $from
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $to
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $step
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function range($from, $to, $step = 1);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Wrap the given value in a collection if applicable.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TWrapValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  iterable&lt;array-key, TWrapValue&gt;|TWrapValue  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;array-key, TWrapValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function wrap($value);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the underlying items from the given collection if applicable.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TUnwrapKey of array-key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TUnwrapValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array&lt;TUnwrapKey, TUnwrapValue&gt;|static&lt;TUnwrapKey, TUnwrapValue&gt;  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array&lt;TUnwrapKey, TUnwrapValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function unwrap($value);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Create a new instance with no items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function empty();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get all items in the enumerable.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function all();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Alias for the &#34;avg&#34; method.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue): float|int)|string|null  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return float|int|null
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function average($callback = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the median of a given key.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string|array&lt;array-key, string&gt;|null  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return float|int|null
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function median($key = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the mode of a given key.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string|array&lt;array-key, string&gt;|null  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array&lt;int, float|int&gt;|null
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function mode($key = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Collapse the items into a single enumerable.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int, mixed&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function collapse();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Alias for the &#34;contains&#34; method.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): bool)|TValue|string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $operator
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function some($key, $operator = null, $value = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Determine if an item exists, using strict comparison.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue): bool)|TValue|array-key  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TValue|null  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function containsStrict($key, $value = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the average value of a given key.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue): float|int)|string|null  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return float|int|null
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function avg($callback = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Determine if an item exists in the enumerable.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): bool)|TValue|string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $operator
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function contains($key, $operator = null, $value = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Determine if an item is not contained in the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $operator
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function doesntContain($key, $operator = null, $value = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Cross join with the given lists, returning all possible permutations.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TCrossJoinKey
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TCrossJoinValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;TCrossJoinKey, TCrossJoinValue&gt;|iterable&lt;TCrossJoinKey, TCrossJoinValue&gt;  ...$lists
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int, array&lt;int, TValue|TCrossJoinValue&gt;&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function crossJoin(...$lists);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Dump the collection and end the script.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  ...$args
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return never
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function dd(...$args);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Dump the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  ...$args
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return $this
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function dump(...$args);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the items that are not present in the given items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;array-key, TValue&gt;|iterable&lt;array-key, TValue&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function diff($items);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the items that are not present in the given items, using the callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;array-key, TValue&gt;|iterable&lt;array-key, TValue&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TValue, TValue): int  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function diffUsing($items, callable $callback);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the items whose keys and values are not present in the given items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;TKey, TValue&gt;|iterable&lt;TKey, TValue&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function diffAssoc($items);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the items whose keys and values are not present in the given items, using the callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;TKey, TValue&gt;|iterable&lt;TKey, TValue&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TKey, TKey): int  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function diffAssocUsing($items, callable $callback);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the items whose keys are not present in the given items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;TKey, mixed&gt;|iterable&lt;TKey, mixed&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function diffKeys($items);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the items whose keys are not present in the given items, using the callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;TKey, mixed&gt;|iterable&lt;TKey, mixed&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TKey, TKey): int  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function diffKeysUsing($items, callable $callback);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Retrieve duplicate items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue): bool)|string|null  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $strict
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function duplicates($callback = null, $strict = false);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Retrieve duplicate items using strict comparison.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue): bool)|string|null  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function duplicatesStrict($callback = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Execute a callback over each item.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TValue, TKey): mixed  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return $this
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function each(callable $callback);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Execute a callback over each nested chunk of items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function eachSpread(callable $callback);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Determine if all items pass the given truth test.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): bool)|TValue|string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $operator
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function every($key, $operator = null, $value = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get all items except for those with the specified keys.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Support\Enumerable&lt;array-key, TKey&gt;|array&lt;array-key, TKey&gt;  $keys
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function except($keys);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Run a filter over each of the items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue): bool)|null  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function filter(?callable $callback = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Apply the callback if the given &#34;value&#34; is (or resolves to) truthy.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TWhenReturnType as null
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable($this): TWhenReturnType)|null  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable($this): TWhenReturnType)|null  $default
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return $this|TWhenReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function when($value, ?callable $callback = null, ?callable $default = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Apply the callback if the collection is empty.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TWhenEmptyReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable($this): TWhenEmptyReturnType)  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable($this): TWhenEmptyReturnType)|null  $default
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return $this|TWhenEmptyReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function whenEmpty(callable $callback, ?callable $default = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Apply the callback if the collection is not empty.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TWhenNotEmptyReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable($this): TWhenNotEmptyReturnType  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable($this): TWhenNotEmptyReturnType)|null  $default
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return $this|TWhenNotEmptyReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function whenNotEmpty(callable $callback, ?callable $default = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Apply the callback if the given &#34;value&#34; is (or resolves to) falsy.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TUnlessReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable($this): TUnlessReturnType)  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable($this): TUnlessReturnType)|null  $default
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return $this|TUnlessReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function unless($value, callable $callback, ?callable $default = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Apply the callback unless the collection is empty.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TUnlessEmptyReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable($this): TUnlessEmptyReturnType  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable($this): TUnlessEmptyReturnType)|null  $default
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return $this|TUnlessEmptyReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function unlessEmpty(callable $callback, ?callable $default = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Apply the callback unless the collection is not empty.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TUnlessNotEmptyReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable($this): TUnlessNotEmptyReturnType  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable($this): TUnlessNotEmptyReturnType)|null  $default
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return $this|TUnlessNotEmptyReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function unlessNotEmpty(callable $callback, ?callable $default = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Filter items by the given key value pair.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $operator
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function where($key, $operator = null, $value = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Filter items where the value for the given key is null.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string|null  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function whereNull($key = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Filter items where the value for the given key is not null.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string|null  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function whereNotNull($key = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Filter items by the given key value pair using strict comparison.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function whereStrict($key, $value);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Filter items by the given key value pair.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable|iterable  $values
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $strict
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function whereIn($key, $values, $strict = false);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Filter items by the given key value pair using strict comparison.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable|iterable  $values
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function whereInStrict($key, $values);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Filter items such that the value of the given key is between the given values.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable|iterable  $values
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function whereBetween($key, $values);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Filter items such that the value of the given key is not between the given values.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable|iterable  $values
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function whereNotBetween($key, $values);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Filter items by the given key value pair.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable|iterable  $values
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $strict
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function whereNotIn($key, $values, $strict = false);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Filter items by the given key value pair using strict comparison.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable|iterable  $values
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function whereNotInStrict($key, $values);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Filter the items, removing any items that don&#39;t match the given type(s).
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TWhereInstanceOf
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  class-string&lt;TWhereInstanceOf&gt;|array&lt;array-key, class-string&lt;TWhereInstanceOf&gt;&gt;  $type
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;TKey, TWhereInstanceOf&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function whereInstanceOf($type);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the first item from the enumerable passing the given truth test.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TFirstDefault
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue,TKey): bool)|null  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TFirstDefault|(\Closure(): TFirstDefault)  $default
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TValue|TFirstDefault
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function first(?callable $callback = null, $default = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the first item by the given key value pair.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $operator
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TValue|null
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function firstWhere($key, $operator = null, $value = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get a flattened array of the items in the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $depth
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function flatten($depth = INF);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Flip the values with their keys.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;TValue, TKey&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function flip();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get an item from the collection by key.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TGetDefault
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TKey  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TGetDefault|(\Closure(): TGetDefault)  $default
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TValue|TGetDefault
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function get($key, $default = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Group an associative array by a field or using a callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TGroupKey of array-key
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): TGroupKey)|array|string  $groupBy
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $preserveKeys
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;($groupBy is string ? array-key : ($groupBy is array ? array-key : TGroupKey)), static&lt;($preserveKeys is true ? TKey : int), TValue&gt;&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function groupBy($groupBy, $preserveKeys = false);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Key an associative array by a field or using a callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TNewKey of array-key
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): TNewKey)|array|string  $keyBy
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;($keyBy is string ? array-key : ($keyBy is array ? array-key : TNewKey)), TValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function keyBy($keyBy);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Determine if an item exists in the collection by key.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TKey|array&lt;array-key, TKey&gt;  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function has($key);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Determine if any of the keys exist in the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function hasAny($key);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Concatenate values of a given key as a string.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): mixed)|string  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string|null  $glue
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return string
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function implode($value, $glue = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Intersect the collection with the given items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;TKey, TValue&gt;|iterable&lt;TKey, TValue&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function intersect($items);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Intersect the collection with the given items, using the callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;array-key, TValue&gt;|iterable&lt;array-key, TValue&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TValue, TValue): int  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function intersectUsing($items, callable $callback);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Intersect the collection with the given items with additional index check.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;TKey, TValue&gt;|iterable&lt;TKey, TValue&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function intersectAssoc($items);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Intersect the collection with the given items with additional index check, using the callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;array-key, TValue&gt;|iterable&lt;array-key, TValue&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TValue, TValue): int  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function intersectAssocUsing($items, callable $callback);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Intersect the collection with the given items by key.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;TKey, mixed&gt;|iterable&lt;TKey, mixed&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function intersectByKeys($items);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Determine if the collection is empty or not.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function isEmpty();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Determine if the collection is not empty.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function isNotEmpty();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Determine if the collection contains a single item.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function containsOneItem();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Join all items from the collection using a string. The final items can use a separate glue string.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $glue
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $finalGlue
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return string
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function join($glue, $finalGlue = &#39;&#39;);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the keys of the collection items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int, TKey&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function keys();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the last item from the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TLastDefault
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): bool)|null  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TLastDefault|(\Closure(): TLastDefault)  $default
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TValue|TLastDefault
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function last(?callable $callback = null, $default = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Run a map over each of the items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TMapValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TValue, TKey): TMapValue  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;TKey, TMapValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function map(callable $callback);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Run a map over each nested chunk of items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function mapSpread(callable $callback);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Run a dictionary map over the items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * The callback should return an associative array with a single key/value pair.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TMapToDictionaryKey of array-key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TMapToDictionaryValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TValue, TKey): array&lt;TMapToDictionaryKey, TMapToDictionaryValue&gt;  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;TMapToDictionaryKey, array&lt;int, TMapToDictionaryValue&gt;&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function mapToDictionary(callable $callback);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Run a grouping map over the items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * The callback should return an associative array with a single key/value pair.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TMapToGroupsKey of array-key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TMapToGroupsValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TValue, TKey): array&lt;TMapToGroupsKey, TMapToGroupsValue&gt;  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;TMapToGroupsKey, static&lt;int, TMapToGroupsValue&gt;&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function mapToGroups(callable $callback);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Run an associative map over each of the items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * The callback should return an associative array with a single key/value pair.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TMapWithKeysKey of array-key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TMapWithKeysValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TValue, TKey): array&lt;TMapWithKeysKey, TMapWithKeysValue&gt;  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;TMapWithKeysKey, TMapWithKeysValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function mapWithKeys(callable $callback);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Map a collection and flatten the result by a single level.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TFlatMapKey of array-key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TFlatMapValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TValue, TKey): (\Illuminate\Support\Collection&lt;TFlatMapKey, TFlatMapValue&gt;|array&lt;TFlatMapKey, TFlatMapValue&gt;)  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;TFlatMapKey, TFlatMapValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function flatMap(callable $callback);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Map the values into a new class.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TMapIntoValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  class-string&lt;TMapIntoValue&gt;  $class
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;TKey, TMapIntoValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function mapInto($class);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Merge the collection with the given items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;TKey, TValue&gt;|iterable&lt;TKey, TValue&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function merge($items);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Recursively merge the collection with the given items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TMergeRecursiveValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;TKey, TMergeRecursiveValue&gt;|iterable&lt;TKey, TMergeRecursiveValue&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;TKey, TValue|TMergeRecursiveValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function mergeRecursive($items);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Create a collection by using this collection for keys and another for its values.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TCombineValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;array-key, TCombineValue&gt;|iterable&lt;array-key, TCombineValue&gt;  $values
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;TValue, TCombineValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function combine($values);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Union the collection with the given items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;TKey, TValue&gt;|iterable&lt;TKey, TValue&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function union($items);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the min value of a given key.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue):mixed)|string|null  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return mixed
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function min($callback = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the max value of a given key.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue):mixed)|string|null  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return mixed
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function max($callback = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Create a new collection consisting of every n-th element.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $step
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $offset
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function nth($step, $offset = 0);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the items with the specified keys.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Support\Enumerable&lt;array-key, TKey&gt;|array&lt;array-key, TKey&gt;|string  $keys
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function only($keys);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * &#34;Paginate&#34; the collection by slicing it into a smaller collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $page
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $perPage
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function forPage($page, $perPage);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Partition the collection into two arrays using the given callback or key.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): bool)|TValue|string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $operator
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int&lt;0, 1&gt;, static&lt;TKey, TValue&gt;&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function partition($key, $operator = null, $value = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Push all of the given items onto the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TConcatKey of array-key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TConcatValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  iterable&lt;TConcatKey, TConcatValue&gt;  $source
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;TKey|TConcatKey, TValue|TConcatValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function concat($source);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get one or a specified number of items randomly from the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int|null  $number
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int, TValue&gt;|TValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @throws \InvalidArgumentException
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function random($number = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Reduce the collection to a single value.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TReduceInitial
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TReduceReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TReduceInitial|TReduceReturnType, TValue, TKey): TReduceReturnType  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TReduceInitial  $initial
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TReduceReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function reduce(callable $callback, $initial = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Reduce the collection to multiple aggregate values.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  ...$initial
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @throws \UnexpectedValueException
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function reduceSpread(callable $callback, ...$initial);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Replace the collection items with the given items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;TKey, TValue&gt;|iterable&lt;TKey, TValue&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function replace($items);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Recursively replace the collection items with the given items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;TKey, TValue&gt;|iterable&lt;TKey, TValue&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function replaceRecursive($items);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Reverse items order.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function reverse();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Search the collection for a given value and return the corresponding key if successful.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TValue|callable(TValue,TKey): bool  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $strict
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TKey|bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function search($value, $strict = false);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the item before the given item.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TValue|(callable(TValue,TKey): bool)  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $strict
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TValue|null
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function before($value, $strict = false);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the item after the given item.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TValue|(callable(TValue,TKey): bool)  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $strict
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TValue|null
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function after($value, $strict = false);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Shuffle the items in the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function shuffle();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Create chunks representing a &#34;sliding window&#34; view of the items in the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $size
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $step
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int, static&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function sliding($size = 2, $step = 1);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Skip the first {$count} items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $count
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function skip($count);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Skip items in the collection until the given condition is met.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TValue|callable(TValue,TKey): bool  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function skipUntil($value);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Skip items in the collection while the given condition is met.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TValue|callable(TValue,TKey): bool  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function skipWhile($value);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get a slice of items from the enumerable.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $offset
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int|null  $length
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function slice($offset, $length = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Split a collection into a certain number of groups.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $numberOfGroups
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int, static&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function split($numberOfGroups);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the first item in the collection, but only if exactly one item exists. Otherwise, throw an exception.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): bool)|string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $operator
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @throws \Illuminate\Support\ItemNotFoundException
</span></span></span><span class="line"><span class="cl"><span class="err">     * @throws \Illuminate\Support\MultipleItemsFoundException
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function sole($key = null, $operator = null, $value = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the first item in the collection but throw an exception if no matching items exist.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): bool)|string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $operator
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @throws \Illuminate\Support\ItemNotFoundException
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function firstOrFail($key = null, $operator = null, $value = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Chunk the collection into chunks of the given size.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $size
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int, static&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function chunk($size);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Chunk the collection into chunks with a callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TValue, TKey, static&lt;int, TValue&gt;): bool  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int, static&lt;int, TValue&gt;&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function chunkWhile(callable $callback);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Split a collection into a certain number of groups, and fill the first groups completely.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $numberOfGroups
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int, static&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function splitIn($numberOfGroups);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Sort through each item with a callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TValue): int)|null|int  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function sort($callback = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Sort items in descending order.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $options
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function sortDesc($options = SORT_REGULAR);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Sort the collection using the given callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array&lt;array-key, (callable(TValue, TValue): mixed)|(callable(TValue, TKey): mixed)|string|array{string, string}&gt;|(callable(TValue, TKey): mixed)|string  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $options
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $descending
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function sortBy($callback, $options = SORT_REGULAR, $descending = false);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Sort the collection in descending order using the given callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array&lt;array-key, (callable(TValue, TValue): mixed)|(callable(TValue, TKey): mixed)|string|array{string, string}&gt;|(callable(TValue, TKey): mixed)|string  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $options
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function sortByDesc($callback, $options = SORT_REGULAR);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Sort the collection keys.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $options
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $descending
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function sortKeys($options = SORT_REGULAR, $descending = false);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Sort the collection keys in descending order.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $options
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function sortKeysDesc($options = SORT_REGULAR);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Sort the collection keys using a callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TKey, TKey): int  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function sortKeysUsing(callable $callback);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the sum of the given values.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue): mixed)|string|null  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return mixed
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function sum($callback = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Take the first or last {$limit} items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $limit
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function take($limit);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Take items in the collection until the given condition is met.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TValue|callable(TValue,TKey): bool  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function takeUntil($value);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Take items in the collection while the given condition is met.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TValue|callable(TValue,TKey): bool  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function takeWhile($value);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Pass the collection to the given callback and then return it.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TValue): mixed  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return $this
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function tap(callable $callback);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Pass the enumerable to the given callback and return the result.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TPipeReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable($this): TPipeReturnType  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TPipeReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function pipe(callable $callback);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Pass the collection into a new class.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TPipeIntoValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  class-string&lt;TPipeIntoValue&gt;  $class
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TPipeIntoValue
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function pipeInto($class);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Pass the collection through a series of callable pipes and return the result.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array&lt;callable&gt;  $pipes
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return mixed
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function pipeThrough($pipes);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the values of a given key.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string|array&lt;array-key, string&gt;  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string|null  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;array-key, mixed&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function pluck($value, $key = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Create a collection of all elements that do not pass a given truth test.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): bool)|bool|TValue  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function reject($callback = true);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Convert a flatten &#34;dot&#34; notation array into an expanded array.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function undot();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Return only unique items from the collection array.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): mixed)|string|null  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $strict
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function unique($key = null, $strict = false);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Return only unique items from the collection array using strict comparison.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): mixed)|string|null  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function uniqueStrict($key = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Reset the keys on the underlying array.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int, TValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function values();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Pad collection to the specified length with a value.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TPadValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $size
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TPadValue  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int, TValue|TPadValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function pad($size, $value);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the values iterator.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return \Traversable&lt;TKey, TValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function getIterator(): \Traversable;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Count the number of items in the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return int
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function count(): int;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Count the number of items in the collection by a field or using a callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): array-key)|string|null  $countBy
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;array-key, int&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function countBy($countBy = null);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Zip the collection together with one or more arrays.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * e.g. new Collection([1, 2, 3])-&gt;zip([4, 5, 6]);
</span></span></span><span class="line"><span class="cl"><span class="err">     *      =&gt; [[1, 4], [2, 5], [3, 6]]
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TZipValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;array-key, TZipValue&gt;|iterable&lt;array-key, TZipValue&gt;  ...$items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int, static&lt;int, TValue|TZipValue&gt;&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function zip($items);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Collect the values into a collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return \Illuminate\Support\Collection&lt;TKey, TValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function collect();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the collection of items as a plain array.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array&lt;TKey, mixed&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function toArray();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Convert the object into something JSON serializable.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return mixed
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function jsonSerialize(): mixed;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the collection of items as JSON.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $options
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return string
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function toJson($options = 0);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get a CachingIterator instance.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $flags
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return \CachingIterator
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function getCachingIterator($flags = CachingIterator::CALL_TOSTRING);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Convert the collection to its string representation.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return string
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function __toString();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Indicate that the model&#39;s string representation should be escaped when __toString is invoked.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $escape
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return $this
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function escapeWhenCastingToString($escape = true);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Add a method to the list of proxied methods.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $method
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return void
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function proxy($method);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Dynamically access collection proxies.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return mixed
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @throws \Exception
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function __get($key);
</span></span></span><span class="line"><span class="cl"><span class="err">}
</span></span></span><span class="line"><span class="cl"><span class="err">?&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">&lt;?php
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">namespace Illuminate\Support\Traits;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">use BackedEnum;
</span></span></span><span class="line"><span class="cl"><span class="err">use CachingIterator;
</span></span></span><span class="line"><span class="cl"><span class="err">use Exception;
</span></span></span><span class="line"><span class="cl"><span class="err">use Illuminate\Contracts\Support\Arrayable;
</span></span></span><span class="line"><span class="cl"><span class="err">use Illuminate\Contracts\Support\Jsonable;
</span></span></span><span class="line"><span class="cl"><span class="err">use Illuminate\Support\Arr;
</span></span></span><span class="line"><span class="cl"><span class="err">use Illuminate\Support\Collection;
</span></span></span><span class="line"><span class="cl"><span class="err">use Illuminate\Support\Enumerable;
</span></span></span><span class="line"><span class="cl"><span class="err">use Illuminate\Support\HigherOrderCollectionProxy;
</span></span></span><span class="line"><span class="cl"><span class="err">use InvalidArgumentException;
</span></span></span><span class="line"><span class="cl"><span class="err">use JsonSerializable;
</span></span></span><span class="line"><span class="cl"><span class="err">use \Traversable;
</span></span></span><span class="line"><span class="cl"><span class="err">use UnexpectedValueException;
</span></span></span><span class="line"><span class="cl"><span class="err">use UnitEnum;
</span></span></span><span class="line"><span class="cl"><span class="err">use WeakMap;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">/**
</span></span></span><span class="line"><span class="cl"><span class="err"> * @template TKey of array-key
</span></span></span><span class="line"><span class="cl"><span class="err"> *
</span></span></span><span class="line"><span class="cl"><span class="err"> * @template-covariant TValue
</span></span></span><span class="line"><span class="cl"><span class="err"> *
</span></span></span><span class="line"><span class="cl"><span class="err"> * @property-read HigherOrderCollectionProxy&lt;TKey, TValue&gt; $average
</span></span></span><span class="line"><span class="cl"><span class="err"> * @property-read HigherOrderCollectionProxy&lt;TKey, TValue&gt; $avg
</span></span></span><span class="line"><span class="cl"><span class="err"> * @property-read HigherOrderCollectionProxy&lt;TKey, TValue&gt; $contains
</span></span></span><span class="line"><span class="cl"><span class="err"> * @property-read HigherOrderCollectionProxy&lt;TKey, TValue&gt; $doesntContain
</span></span></span><span class="line"><span class="cl"><span class="err"> * @property-read HigherOrderCollectionProxy&lt;TKey, TValue&gt; $each
</span></span></span><span class="line"><span class="cl"><span class="err"> * @property-read HigherOrderCollectionProxy&lt;TKey, TValue&gt; $every
</span></span></span><span class="line"><span class="cl"><span class="err"> * @property-read HigherOrderCollectionProxy&lt;TKey, TValue&gt; $filter
</span></span></span><span class="line"><span class="cl"><span class="err"> * @property-read HigherOrderCollectionProxy&lt;TKey, TValue&gt; $first
</span></span></span><span class="line"><span class="cl"><span class="err"> * @property-read HigherOrderCollectionProxy&lt;TKey, TValue&gt; $flatMap
</span></span></span><span class="line"><span class="cl"><span class="err"> * @property-read HigherOrderCollectionProxy&lt;TKey, TValue&gt; $groupBy
</span></span></span><span class="line"><span class="cl"><span class="err"> * @property-read HigherOrderCollectionProxy&lt;TKey, TValue&gt; $keyBy
</span></span></span><span class="line"><span class="cl"><span class="err"> * @property-read HigherOrderCollectionProxy&lt;TKey, TValue&gt; $map
</span></span></span><span class="line"><span class="cl"><span class="err"> * @property-read HigherOrderCollectionProxy&lt;TKey, TValue&gt; $max
</span></span></span><span class="line"><span class="cl"><span class="err"> * @property-read HigherOrderCollectionProxy&lt;TKey, TValue&gt; $min
</span></span></span><span class="line"><span class="cl"><span class="err"> * @property-read HigherOrderCollectionProxy&lt;TKey, TValue&gt; $partition
</span></span></span><span class="line"><span class="cl"><span class="err"> * @property-read HigherOrderCollectionProxy&lt;TKey, TValue&gt; $percentage
</span></span></span><span class="line"><span class="cl"><span class="err"> * @property-read HigherOrderCollectionProxy&lt;TKey, TValue&gt; $reject
</span></span></span><span class="line"><span class="cl"><span class="err"> * @property-read HigherOrderCollectionProxy&lt;TKey, TValue&gt; $skipUntil
</span></span></span><span class="line"><span class="cl"><span class="err"> * @property-read HigherOrderCollectionProxy&lt;TKey, TValue&gt; $skipWhile
</span></span></span><span class="line"><span class="cl"><span class="err"> * @property-read HigherOrderCollectionProxy&lt;TKey, TValue&gt; $some
</span></span></span><span class="line"><span class="cl"><span class="err"> * @property-read HigherOrderCollectionProxy&lt;TKey, TValue&gt; $sortBy
</span></span></span><span class="line"><span class="cl"><span class="err"> * @property-read HigherOrderCollectionProxy&lt;TKey, TValue&gt; $sortByDesc
</span></span></span><span class="line"><span class="cl"><span class="err"> * @property-read HigherOrderCollectionProxy&lt;TKey, TValue&gt; $sum
</span></span></span><span class="line"><span class="cl"><span class="err"> * @property-read HigherOrderCollectionProxy&lt;TKey, TValue&gt; $takeUntil
</span></span></span><span class="line"><span class="cl"><span class="err"> * @property-read HigherOrderCollectionProxy&lt;TKey, TValue&gt; $takeWhile
</span></span></span><span class="line"><span class="cl"><span class="err"> * @property-read HigherOrderCollectionProxy&lt;TKey, TValue&gt; $unique
</span></span></span><span class="line"><span class="cl"><span class="err"> * @property-read HigherOrderCollectionProxy&lt;TKey, TValue&gt; $unless
</span></span></span><span class="line"><span class="cl"><span class="err"> * @property-read HigherOrderCollectionProxy&lt;TKey, TValue&gt; $until
</span></span></span><span class="line"><span class="cl"><span class="err"> * @property-read HigherOrderCollectionProxy&lt;TKey, TValue&gt; $when
</span></span></span><span class="line"><span class="cl"><span class="err"> */
</span></span></span><span class="line"><span class="cl"><span class="err">trait EnumeratesValues
</span></span></span><span class="line"><span class="cl"><span class="err">{
</span></span></span><span class="line"><span class="cl"><span class="err">    use Conditionable;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Indicates that the object&#39;s string representation should be escaped when __toString is invoked.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @var bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    protected $escapeWhenCastingToString = false;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * The methods that can be proxied.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @var array&lt;int, string&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    protected static $proxies = [
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;average&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;avg&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;contains&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;doesntContain&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;each&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;every&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;filter&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;first&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;flatMap&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;groupBy&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;keyBy&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;map&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;max&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;min&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;partition&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;percentage&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;reject&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;skipUntil&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;skipWhile&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;some&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;sortBy&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;sortByDesc&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;sum&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;takeUntil&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;takeWhile&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;unique&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;unless&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;until&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">        &#39;when&#39;,
</span></span></span><span class="line"><span class="cl"><span class="err">    ];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Create a new collection instance if the value isn&#39;t one already.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TMakeKey of array-key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TMakeValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;TMakeKey, TMakeValue&gt;|iterable&lt;TMakeKey, TMakeValue&gt;|null  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;TMakeKey, TMakeValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function make($items = [])
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static($items);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Wrap the given value in a collection if applicable.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TWrapValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  iterable&lt;array-key, TWrapValue&gt;|TWrapValue  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;array-key, TWrapValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function wrap($value)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $value instanceof Enumerable
</span></span></span><span class="line"><span class="cl"><span class="err">            ? new static($value)
</span></span></span><span class="line"><span class="cl"><span class="err">            : new static(Arr::wrap($value));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the underlying items from the given collection if applicable.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TUnwrapKey of array-key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TUnwrapValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array&lt;TUnwrapKey, TUnwrapValue&gt;|static&lt;TUnwrapKey, TUnwrapValue&gt;  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array&lt;TUnwrapKey, TUnwrapValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function unwrap($value)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $value instanceof Enumerable ? $value-&gt;all() : $value;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Create a new instance with no items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function empty()
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static([]);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Create a new collection by invoking the callback a given amount of times.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TTimesValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $number
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(int): TTimesValue)|null  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int, TTimesValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function times($number, ?callable $callback = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($number &lt; 1) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return new static;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return static::range(1, $number)
</span></span></span><span class="line"><span class="cl"><span class="err">            -&gt;unless($callback == null)
</span></span></span><span class="line"><span class="cl"><span class="err">            -&gt;map($callback);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the average value of a given key.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue): float|int)|string|null  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return float|int|null
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function avg($callback = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $callback = $this-&gt;valueRetriever($callback);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $reduced = $this-&gt;reduce(static function (&amp;$reduce, $value) use ($callback) {
</span></span></span><span class="line"><span class="cl"><span class="err">            if (! is_null($resolved = $callback($value))) {
</span></span></span><span class="line"><span class="cl"><span class="err">                $reduce[0] += $resolved;
</span></span></span><span class="line"><span class="cl"><span class="err">                $reduce[1]++;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            return $reduce;
</span></span></span><span class="line"><span class="cl"><span class="err">        }, [0, 0]);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $reduced[1] ? $reduced[0] / $reduced[1] : null;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Alias for the &#34;avg&#34; method.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue): float|int)|string|null  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return float|int|null
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function average($callback = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;avg($callback);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Alias for the &#34;contains&#34; method.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): bool)|TValue|string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $operator
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function some($key, $operator = null, $value = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;contains(...func_get_args());
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Dump the given arguments and terminate execution.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  ...$args
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return never
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function dd(...$args)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        dd($this-&gt;all(), ...$args);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Dump the items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  ...$args
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return $this
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function dump(...$args)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        dump($this-&gt;all(), ...$args);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Execute a callback over each item.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TValue, TKey): mixed  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return $this
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function each(callable $callback)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($this as $key =&gt; $item) {
</span></span></span><span class="line"><span class="cl"><span class="err">            if ($callback($item, $key) === false) {
</span></span></span><span class="line"><span class="cl"><span class="err">                break;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Execute a callback over each nested chunk of items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(...mixed): mixed  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function eachSpread(callable $callback)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;each(function ($chunk, $key) use ($callback) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $chunk[] = $key;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            return $callback(...$chunk);
</span></span></span><span class="line"><span class="cl"><span class="err">        });
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Determine if all items pass the given truth test.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): bool)|TValue|string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $operator
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function every($key, $operator = null, $value = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if (func_num_args() === 1) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $callback = $this-&gt;valueRetriever($key);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            foreach ($this as $k =&gt; $v) {
</span></span></span><span class="line"><span class="cl"><span class="err">                if (! $callback($v, $k)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                    return false;
</span></span></span><span class="line"><span class="cl"><span class="err">                }
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            return true;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;every($this-&gt;operatorForWhere(...func_get_args()));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the first item by the given key value pair.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable|string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $operator
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TValue|null
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function firstWhere($key, $operator = null, $value = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;first($this-&gt;operatorForWhere(...func_get_args()));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get a single key&#39;s value from the first matching item in the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TValueDefault
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TValueDefault|(\Closure(): TValueDefault)  $default
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TValue|TValueDefault
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function value($key, $default = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($value = $this-&gt;firstWhere($key)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return data_get($value, $key, $default);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return value($default);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Ensure that every item in the collection is of the expected type.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TEnsureOfType
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  class-string&lt;TEnsureOfType&gt;|array&lt;array-key, class-string&lt;TEnsureOfType&gt;&gt;  $type
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;TKey, TEnsureOfType&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @throws \UnexpectedValueException
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function ensure($type)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $allowedTypes = is_array($type) ? $type : [$type];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;each(function ($item, $index) use ($allowedTypes) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $itemType = get_debug_type($item);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            foreach ($allowedTypes as $allowedType) {
</span></span></span><span class="line"><span class="cl"><span class="err">                if ($itemType === $allowedType || $item instanceof $allowedType) {
</span></span></span><span class="line"><span class="cl"><span class="err">                    return true;
</span></span></span><span class="line"><span class="cl"><span class="err">                }
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            throw new UnexpectedValueException(
</span></span></span><span class="line"><span class="cl"><span class="err">                sprintf(&#34;Collection should only include [%s] items, but &#39;%s&#39; found at position %d.&#34;, implode(&#39;, &#39;, $allowedTypes), $itemType, $index)
</span></span></span><span class="line"><span class="cl"><span class="err">            );
</span></span></span><span class="line"><span class="cl"><span class="err">        });
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Determine if the collection is not empty.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @phpstan-assert-if-true TValue $this-&gt;first()
</span></span></span><span class="line"><span class="cl"><span class="err">     * @phpstan-assert-if-true TValue $this-&gt;last()
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @phpstan-assert-if-false null $this-&gt;first()
</span></span></span><span class="line"><span class="cl"><span class="err">     * @phpstan-assert-if-false null $this-&gt;last()
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function isNotEmpty()
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return ! $this-&gt;isEmpty();
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Run a map over each nested chunk of items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TMapSpreadValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(mixed...): TMapSpreadValue  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;TKey, TMapSpreadValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function mapSpread(callable $callback)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;map(function ($chunk, $key) use ($callback) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $chunk[] = $key;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            return $callback(...$chunk);
</span></span></span><span class="line"><span class="cl"><span class="err">        });
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Run a grouping map over the items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * The callback should return an associative array with a single key/value pair.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TMapToGroupsKey of array-key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TMapToGroupsValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TValue, TKey): array&lt;TMapToGroupsKey, TMapToGroupsValue&gt;  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;TMapToGroupsKey, static&lt;int, TMapToGroupsValue&gt;&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function mapToGroups(callable $callback)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $groups = $this-&gt;mapToDictionary($callback);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $groups-&gt;map([$this, &#39;make&#39;]);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Map a collection and flatten the result by a single level.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TFlatMapKey of array-key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TFlatMapValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TValue, TKey): (\Illuminate\Support\Collection&lt;TFlatMapKey, TFlatMapValue&gt;|array&lt;TFlatMapKey, TFlatMapValue&gt;)  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;TFlatMapKey, TFlatMapValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function flatMap(callable $callback)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;map($callback)-&gt;collapse();
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Map the values into a new class.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TMapIntoValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  class-string&lt;TMapIntoValue&gt;  $class
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;TKey, TMapIntoValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function mapInto($class)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if (is_subclass_of($class, BackedEnum::class)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return $this-&gt;map(fn ($value, $key) =&gt; $class::from($value));
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;map(fn ($value, $key) =&gt; new $class($value, $key));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the min value of a given key.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue):mixed)|string|null  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return mixed
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function min($callback = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $callback = $this-&gt;valueRetriever($callback);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;map(fn ($value) =&gt; $callback($value))
</span></span></span><span class="line"><span class="cl"><span class="err">            -&gt;filter(fn ($value) =&gt; ! is_null($value))
</span></span></span><span class="line"><span class="cl"><span class="err">            -&gt;reduce(fn ($result, $value) =&gt; is_null($result) || $value &lt; $result ? $value : $result);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the max value of a given key.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue):mixed)|string|null  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return mixed
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function max($callback = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $callback = $this-&gt;valueRetriever($callback);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;filter(fn ($value) =&gt; ! is_null($value))-&gt;reduce(function ($result, $item) use ($callback) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $value = $callback($item);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            return is_null($result) || $value &gt; $result ? $value : $result;
</span></span></span><span class="line"><span class="cl"><span class="err">        });
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * &#34;Paginate&#34; the collection by slicing it into a smaller collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $page
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $perPage
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function forPage($page, $perPage)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $offset = max(0, ($page - 1) * $perPage);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;slice($offset, $perPage);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Partition the collection into two arrays using the given callback or key.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): bool)|TValue|string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TValue|string|null  $operator
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TValue|null  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int&lt;0, 1&gt;, static&lt;TKey, TValue&gt;&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function partition($key, $operator = null, $value = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $passed = [];
</span></span></span><span class="line"><span class="cl"><span class="err">        $failed = [];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $callback = func_num_args() === 1
</span></span></span><span class="line"><span class="cl"><span class="err">            ? $this-&gt;valueRetriever($key)
</span></span></span><span class="line"><span class="cl"><span class="err">            : $this-&gt;operatorForWhere(...func_get_args());
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($this as $key =&gt; $item) {
</span></span></span><span class="line"><span class="cl"><span class="err">            if ($callback($item, $key)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                $passed[$key] = $item;
</span></span></span><span class="line"><span class="cl"><span class="err">            } else {
</span></span></span><span class="line"><span class="cl"><span class="err">                $failed[$key] = $item;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static([new static($passed), new static($failed)]);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Calculate the percentage of items that pass a given truth test.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): bool)  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $precision
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return float|null
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function percentage(callable $callback, int $precision = 2)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($this-&gt;isEmpty()) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return null;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return round(
</span></span></span><span class="line"><span class="cl"><span class="err">            $this-&gt;filter($callback)-&gt;count() / $this-&gt;count() * 100,
</span></span></span><span class="line"><span class="cl"><span class="err">            $precision
</span></span></span><span class="line"><span class="cl"><span class="err">        );
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the sum of the given values.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue): mixed)|string|null  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return mixed
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function sum($callback = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $callback = is_null($callback)
</span></span></span><span class="line"><span class="cl"><span class="err">            ? $this-&gt;identity()
</span></span></span><span class="line"><span class="cl"><span class="err">            : $this-&gt;valueRetriever($callback);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;reduce(fn ($result, $item) =&gt; $result + $callback($item), 0);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Apply the callback if the collection is empty.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TWhenEmptyReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable($this): TWhenEmptyReturnType)  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable($this): TWhenEmptyReturnType)|null  $default
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return $this|TWhenEmptyReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function whenEmpty(callable $callback, ?callable $default = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;when($this-&gt;isEmpty(), $callback, $default);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Apply the callback if the collection is not empty.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TWhenNotEmptyReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable($this): TWhenNotEmptyReturnType  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable($this): TWhenNotEmptyReturnType)|null  $default
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return $this|TWhenNotEmptyReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function whenNotEmpty(callable $callback, ?callable $default = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;when($this-&gt;isNotEmpty(), $callback, $default);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Apply the callback unless the collection is empty.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TUnlessEmptyReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable($this): TUnlessEmptyReturnType  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable($this): TUnlessEmptyReturnType)|null  $default
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return $this|TUnlessEmptyReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function unlessEmpty(callable $callback, ?callable $default = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;whenNotEmpty($callback, $default);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Apply the callback unless the collection is not empty.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TUnlessNotEmptyReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable($this): TUnlessNotEmptyReturnType  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable($this): TUnlessNotEmptyReturnType)|null  $default
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return $this|TUnlessNotEmptyReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function unlessNotEmpty(callable $callback, ?callable $default = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;whenEmpty($callback, $default);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Filter items by the given key value pair.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable|string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $operator
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function where($key, $operator = null, $value = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;filter($this-&gt;operatorForWhere(...func_get_args()));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Filter items where the value for the given key is null.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string|null  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function whereNull($key = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;whereStrict($key, null);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Filter items where the value for the given key is not null.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string|null  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function whereNotNull($key = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;where($key, &#39;!==&#39;, null);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Filter items by the given key value pair using strict comparison.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function whereStrict($key, $value)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;where($key, &#39;===&#39;, $value);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Filter items by the given key value pair.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable|iterable  $values
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $strict
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function whereIn($key, $values, $strict = false)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $values = $this-&gt;getArrayableItems($values);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;filter(fn ($item) =&gt; in_array(data_get($item, $key), $values, $strict));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Filter items by the given key value pair using strict comparison.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable|iterable  $values
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function whereInStrict($key, $values)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;whereIn($key, $values, true);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Filter items such that the value of the given key is between the given values.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable|iterable  $values
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function whereBetween($key, $values)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;where($key, &#39;&gt;=&#39;, reset($values))-&gt;where($key, &#39;&lt;=&#39;, end($values));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Filter items such that the value of the given key is not between the given values.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable|iterable  $values
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function whereNotBetween($key, $values)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;filter(
</span></span></span><span class="line"><span class="cl"><span class="err">            fn ($item) =&gt; data_get($item, $key) &lt; reset($values) || data_get($item, $key) &gt; end($values)
</span></span></span><span class="line"><span class="cl"><span class="err">        );
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Filter items by the given key value pair.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable|iterable  $values
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $strict
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function whereNotIn($key, $values, $strict = false)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $values = $this-&gt;getArrayableItems($values);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;reject(fn ($item) =&gt; in_array(data_get($item, $key), $values, $strict));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Filter items by the given key value pair using strict comparison.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable|iterable  $values
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function whereNotInStrict($key, $values)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;whereNotIn($key, $values, true);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Filter the items, removing any items that don&#39;t match the given type(s).
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TWhereInstanceOf
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  class-string&lt;TWhereInstanceOf&gt;|array&lt;array-key, class-string&lt;TWhereInstanceOf&gt;&gt;  $type
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;TKey, TWhereInstanceOf&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function whereInstanceOf($type)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;filter(function ($value) use ($type) {
</span></span></span><span class="line"><span class="cl"><span class="err">            if (is_array($type)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                foreach ($type as $classType) {
</span></span></span><span class="line"><span class="cl"><span class="err">                    if ($value instanceof $classType) {
</span></span></span><span class="line"><span class="cl"><span class="err">                        return true;
</span></span></span><span class="line"><span class="cl"><span class="err">                    }
</span></span></span><span class="line"><span class="cl"><span class="err">                }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">                return false;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            return $value instanceof $type;
</span></span></span><span class="line"><span class="cl"><span class="err">        });
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Pass the collection to the given callback and return the result.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TPipeReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable($this): TPipeReturnType  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TPipeReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function pipe(callable $callback)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $callback($this);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Pass the collection into a new class.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TPipeIntoValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  class-string&lt;TPipeIntoValue&gt;  $class
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TPipeIntoValue
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function pipeInto($class)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new $class($this);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Pass the collection through a series of callable pipes and return the result.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array&lt;callable&gt;  $callbacks
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return mixed
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function pipeThrough($callbacks)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return Collection::make($callbacks)-&gt;reduce(
</span></span></span><span class="line"><span class="cl"><span class="err">            fn ($carry, $callback) =&gt; $callback($carry),
</span></span></span><span class="line"><span class="cl"><span class="err">            $this,
</span></span></span><span class="line"><span class="cl"><span class="err">        );
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Reduce the collection to a single value.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TReduceInitial
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TReduceReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TReduceInitial|TReduceReturnType, TValue, TKey): TReduceReturnType  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TReduceInitial  $initial
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TReduceReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function reduce(callable $callback, $initial = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $result = $initial;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($this as $key =&gt; $value) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $result = $callback($result, $value, $key);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $result;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Reduce the collection to multiple aggregate values.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  ...$initial
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @throws \UnexpectedValueException
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function reduceSpread(callable $callback, ...$initial)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $result = $initial;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($this as $key =&gt; $value) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $result = call_user_func_array($callback, array_merge($result, [$value, $key]));
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            if (! is_array($result)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                throw new UnexpectedValueException(sprintf(
</span></span></span><span class="line"><span class="cl"><span class="err">                    &#34;%s::reduceSpread expects reducer to return an array, but got a &#39;%s&#39; instead.&#34;,
</span></span></span><span class="line"><span class="cl"><span class="err">                    class_basename(static::class), gettype($result)
</span></span></span><span class="line"><span class="cl"><span class="err">                ));
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $result;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Reduce an associative collection to a single value.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TReduceWithKeysInitial
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TReduceWithKeysReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TReduceWithKeysInitial|TReduceWithKeysReturnType, TValue, TKey): TReduceWithKeysReturnType  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TReduceWithKeysInitial  $initial
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TReduceWithKeysReturnType
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function reduceWithKeys(callable $callback, $initial = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;reduce($callback, $initial);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Create a collection of all elements that do not pass a given truth test.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): bool)|bool|TValue  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function reject($callback = true)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $useAsCallable = $this-&gt;useAsCallable($callback);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;filter(function ($value, $key) use ($callback, $useAsCallable) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return $useAsCallable
</span></span></span><span class="line"><span class="cl"><span class="err">                ? ! $callback($value, $key)
</span></span></span><span class="line"><span class="cl"><span class="err">                : $value != $callback;
</span></span></span><span class="line"><span class="cl"><span class="err">        });
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Pass the collection to the given callback and then return it.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable($this): mixed  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return $this
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function tap(callable $callback)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $callback($this);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Return only unique items from the collection array.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): mixed)|string|null  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $strict
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function unique($key = null, $strict = false)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $callback = $this-&gt;valueRetriever($key);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $exists = [];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;reject(function ($item, $key) use ($callback, $strict, &amp;$exists) {
</span></span></span><span class="line"><span class="cl"><span class="err">            if (in_array($id = $callback($item, $key), $exists, $strict)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                return true;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            $exists[] = $id;
</span></span></span><span class="line"><span class="cl"><span class="err">        });
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Return only unique items from the collection array using strict comparison.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): mixed)|string|null  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function uniqueStrict($key = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;unique($key, true);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Collect the values into a collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return \Illuminate\Support\Collection&lt;TKey, TValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function collect()
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new Collection($this-&gt;all());
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the collection of items as a plain array.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array&lt;TKey, mixed&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function toArray()
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;map(fn ($value) =&gt; $value instanceof Arrayable ? $value-&gt;toArray() : $value)-&gt;all();
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Convert the object into something JSON serializable.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array&lt;TKey, mixed&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function jsonSerialize(): array
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return array_map(function ($value) {
</span></span></span><span class="line"><span class="cl"><span class="err">            if ($value instanceof JsonSerializable) {
</span></span></span><span class="line"><span class="cl"><span class="err">                return $value-&gt;jsonSerialize();
</span></span></span><span class="line"><span class="cl"><span class="err">            } elseif ($value instanceof Jsonable) {
</span></span></span><span class="line"><span class="cl"><span class="err">                return json_decode($value-&gt;toJson(), true);
</span></span></span><span class="line"><span class="cl"><span class="err">            } elseif ($value instanceof Arrayable) {
</span></span></span><span class="line"><span class="cl"><span class="err">                return $value-&gt;toArray();
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            return $value;
</span></span></span><span class="line"><span class="cl"><span class="err">        }, $this-&gt;all());
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the collection of items as JSON.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $options
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return string
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function toJson($options = 0)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return json_encode($this-&gt;jsonSerialize(), $options);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get a CachingIterator instance.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $flags
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return \CachingIterator
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function getCachingIterator($flags = CachingIterator::CALL_TOSTRING)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new CachingIterator($this-&gt;getIterator(), $flags);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Convert the collection to its string representation.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return string
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function __toString()
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;escapeWhenCastingToString
</span></span></span><span class="line"><span class="cl"><span class="err">            ? e($this-&gt;toJson())
</span></span></span><span class="line"><span class="cl"><span class="err">            : $this-&gt;toJson();
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Indicate that the model&#39;s string representation should be escaped when __toString is invoked.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $escape
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return $this
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function escapeWhenCastingToString($escape = true)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $this-&gt;escapeWhenCastingToString = $escape;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Add a method to the list of proxied methods.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $method
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return void
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function proxy($method)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        static::$proxies[] = $method;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Dynamically access collection proxies.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return mixed
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @throws \Exception
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function __get($key)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if (! in_array($key, static::$proxies)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            throw new Exception(&#34;Property [{$key}] does not exist on this collection instance.&#34;);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return new HigherOrderCollectionProxy($this, $key);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Results array of items from Collection or Arrayable.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array&lt;TKey, TValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    protected function getArrayableItems($items)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if (is_array($items)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return $items;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return match (true) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $items instanceof WeakMap =&gt; throw new InvalidArgumentException(&#39;Collections can not be created using instances of WeakMap.&#39;),
</span></span></span><span class="line"><span class="cl"><span class="err">            $items instanceof Enumerable =&gt; $items-&gt;all(),
</span></span></span><span class="line"><span class="cl"><span class="err">            $items instanceof Arrayable =&gt; $items-&gt;toArray(),
</span></span></span><span class="line"><span class="cl"><span class="err">            $items instanceof \Traversable =&gt; iterator_to_array($items),
</span></span></span><span class="line"><span class="cl"><span class="err">            $items instanceof Jsonable =&gt; json_decode($items-&gt;toJson(), true),
</span></span></span><span class="line"><span class="cl"><span class="err">            $items instanceof JsonSerializable =&gt; (array) $items-&gt;jsonSerialize(),
</span></span></span><span class="line"><span class="cl"><span class="err">            $items instanceof UnitEnum =&gt; [$items],
</span></span></span><span class="line"><span class="cl"><span class="err">            default =&gt; (array) $items,
</span></span></span><span class="line"><span class="cl"><span class="err">        };
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get an operator checker callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable|string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string|null  $operator
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return \Closure
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    protected function operatorForWhere($key, $operator = null, $value = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($this-&gt;useAsCallable($key)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return $key;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if (func_num_args() === 1) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $value = true;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            $operator = &#39;=&#39;;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if (func_num_args() === 2) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $value = $operator;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            $operator = &#39;=&#39;;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return function ($item) use ($key, $operator, $value) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $retrieved = data_get($item, $key);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            $strings = array_filter([$retrieved, $value], function ($value) {
</span></span></span><span class="line"><span class="cl"><span class="err">                return is_string($value) || (is_object($value) &amp;&amp; method_exists($value, &#39;__toString&#39;));
</span></span></span><span class="line"><span class="cl"><span class="err">            });
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            if (count($strings) &lt; 2 &amp;&amp; count(array_filter([$retrieved, $value], &#39;is_object&#39;)) == 1) {
</span></span></span><span class="line"><span class="cl"><span class="err">                return in_array($operator, [&#39;!=&#39;, &#39;&lt;&gt;&#39;, &#39;!==&#39;]);
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            switch ($operator) {
</span></span></span><span class="line"><span class="cl"><span class="err">                default:
</span></span></span><span class="line"><span class="cl"><span class="err">                case &#39;=&#39;:
</span></span></span><span class="line"><span class="cl"><span class="err">                case &#39;==&#39;:  return $retrieved == $value;
</span></span></span><span class="line"><span class="cl"><span class="err">                case &#39;!=&#39;:
</span></span></span><span class="line"><span class="cl"><span class="err">                case &#39;&lt;&gt;&#39;:  return $retrieved != $value;
</span></span></span><span class="line"><span class="cl"><span class="err">                case &#39;&lt;&#39;:   return $retrieved &lt; $value;
</span></span></span><span class="line"><span class="cl"><span class="err">                case &#39;&gt;&#39;:   return $retrieved &gt; $value;
</span></span></span><span class="line"><span class="cl"><span class="err">                case &#39;&lt;=&#39;:  return $retrieved &lt;= $value;
</span></span></span><span class="line"><span class="cl"><span class="err">                case &#39;&gt;=&#39;:  return $retrieved &gt;= $value;
</span></span></span><span class="line"><span class="cl"><span class="err">                case &#39;===&#39;: return $retrieved === $value;
</span></span></span><span class="line"><span class="cl"><span class="err">                case &#39;!==&#39;: return $retrieved !== $value;
</span></span></span><span class="line"><span class="cl"><span class="err">                case &#39;&lt;=&gt;&#39;: return $retrieved &lt;=&gt; $value;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">        };
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Determine if the given value is callable, but not a string.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    protected function useAsCallable($value)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return ! is_string($value) &amp;&amp; is_callable($value);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get a value retrieving callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable|string|null  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return callable
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    protected function valueRetriever($value)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($this-&gt;useAsCallable($value)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return $value;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return fn ($item) =&gt; data_get($item, $value);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Make a function to check an item&#39;s equality.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return \Closure(mixed): bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    protected function equality($value)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return fn ($item) =&gt; $item === $value;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Make a function using another function, by negating its result.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Closure  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return \Closure
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    protected function negate(Closure $callback)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return fn (...$params) =&gt; ! $callback(...$params);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Make a function that returns what&#39;s passed to it.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return \Closure(TValue): TValue
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    protected function identity()
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return fn ($value) =&gt; $value;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">}
</span></span></span><span class="line"><span class="cl"><span class="err">?&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">&lt;?php
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">namespace Illuminate\Support;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">use ArrayIterator;
</span></span></span><span class="line"><span class="cl"><span class="err">use Illuminate\Contracts\Support\CanBeEscapedWhenCastToString;
</span></span></span><span class="line"><span class="cl"><span class="err">use Illuminate\Support\Traits\EnumeratesValues;
</span></span></span><span class="line"><span class="cl"><span class="err">use stdClass;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">/**
</span></span></span><span class="line"><span class="cl"><span class="err"> * @template TKey of array-key
</span></span></span><span class="line"><span class="cl"><span class="err"> *
</span></span></span><span class="line"><span class="cl"><span class="err"> * @template-covariant TValue
</span></span></span><span class="line"><span class="cl"><span class="err"> *
</span></span></span><span class="line"><span class="cl"><span class="err"> * @implements \ArrayAccess&lt;TKey, TValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err"> * @implements \Illuminate\Support\Enumerable&lt;TKey, TValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err"> */
</span></span></span><span class="line"><span class="cl"><span class="err">class Collection implements \ArrayAccess, CanBeEscapedWhenCastToString, Enumerable
</span></span></span><span class="line"><span class="cl"><span class="err">{
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * @use \Illuminate\Support\Traits\EnumeratesValues&lt;TKey, TValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    use EnumeratesValues, Traits\Macroable;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * The items contained in the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @var array&lt;TKey, TValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    protected $items = [];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Create a new collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;TKey, TValue&gt;|iterable&lt;TKey, TValue&gt;|null  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return void
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function __construct($items = [])
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $this-&gt;items = $this-&gt;getArrayableItems($items);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Create a collection with the given range.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $from
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $to
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $step
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int, int&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public static function range($from, $to, $step = 1)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(range($from, $to, $step));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get all of the items in the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array&lt;TKey, TValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function all()
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;items;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get a lazy collection for the items in this collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return \Illuminate\Support\LazyCollection&lt;TKey, TValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function lazy()
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new LazyCollection($this-&gt;items);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the median of a given key.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string|array&lt;array-key, string&gt;|null  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return float|int|null
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function median($key = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $values = (isset($key) ? $this-&gt;pluck($key) : $this)
</span></span></span><span class="line"><span class="cl"><span class="err">            -&gt;filter(fn ($item) =&gt; ! is_null($item))
</span></span></span><span class="line"><span class="cl"><span class="err">            -&gt;sort()-&gt;values();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $count = $values-&gt;count();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($count === 0) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $middle = (int) ($count / 2);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($count % 2) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return $values-&gt;get($middle);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return (new static([
</span></span></span><span class="line"><span class="cl"><span class="err">            $values-&gt;get($middle - 1), $values-&gt;get($middle),
</span></span></span><span class="line"><span class="cl"><span class="err">        ]))-&gt;average();
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the mode of a given key.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string|array&lt;array-key, string&gt;|null  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return array&lt;int, float|int&gt;|null
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function mode($key = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($this-&gt;count() === 0) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $collection = isset($key) ? $this-&gt;pluck($key) : $this;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $counts = new static;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $collection-&gt;each(fn ($value) =&gt; $counts[$value] = isset($counts[$value]) ? $counts[$value] + 1 : 1);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $sorted = $counts-&gt;sort();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $highestValue = $sorted-&gt;last();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $sorted-&gt;filter(fn ($value) =&gt; $value == $highestValue)
</span></span></span><span class="line"><span class="cl"><span class="err">            -&gt;sort()-&gt;keys()-&gt;all();
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Collapse the collection of items into a single array.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int, mixed&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function collapse()
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(Arr::collapse($this-&gt;items));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Collapse the collection of items into a single array while preserving its keys.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;mixed, mixed&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function collapseWithKeys()
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $results = [];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($this-&gt;items as $key =&gt; $values) {
</span></span></span><span class="line"><span class="cl"><span class="err">            if ($values instanceof Collection) {
</span></span></span><span class="line"><span class="cl"><span class="err">                $values = $values-&gt;all();
</span></span></span><span class="line"><span class="cl"><span class="err">            } elseif (! is_array($values)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                continue;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            $results[$key] = $values;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(array_replace(...$results));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Determine if an item exists in the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): bool)|TValue|string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $operator
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function contains($key, $operator = null, $value = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if (func_num_args() === 1) {
</span></span></span><span class="line"><span class="cl"><span class="err">            if ($this-&gt;useAsCallable($key)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                $placeholder = new stdClass;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">                return $this-&gt;first($key, $placeholder) !== $placeholder;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            return in_array($key, $this-&gt;items);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;contains($this-&gt;operatorForWhere(...func_get_args()));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Determine if an item exists, using strict comparison.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue): bool)|TValue|array-key  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TValue|null  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function containsStrict($key, $value = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if (func_num_args() === 2) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return $this-&gt;contains(fn ($item) =&gt; data_get($item, $key) === $value);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($this-&gt;useAsCallable($key)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return ! is_null($this-&gt;first($key));
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return in_array($key, $this-&gt;items, true);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Determine if an item is not contained in the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $operator
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function doesntContain($key, $operator = null, $value = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return ! $this-&gt;contains(...func_get_args());
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Cross join with the given lists, returning all possible permutations.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TCrossJoinKey
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TCrossJoinValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;TCrossJoinKey, TCrossJoinValue&gt;|iterable&lt;TCrossJoinKey, TCrossJoinValue&gt;  ...$lists
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int, array&lt;int, TValue|TCrossJoinValue&gt;&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function crossJoin(...$lists)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(Arr::crossJoin(
</span></span></span><span class="line"><span class="cl"><span class="err">            $this-&gt;items, ...array_map([$this, &#39;getArrayableItems&#39;], $lists)
</span></span></span><span class="line"><span class="cl"><span class="err">        ));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the items in the collection that are not present in the given items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;array-key, TValue&gt;|iterable&lt;array-key, TValue&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function diff($items)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(array_diff($this-&gt;items, $this-&gt;getArrayableItems($items)));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the items in the collection that are not present in the given items, using the callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;array-key, TValue&gt;|iterable&lt;array-key, TValue&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TValue, TValue): int  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function diffUsing($items, callable $callback)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(array_udiff($this-&gt;items, $this-&gt;getArrayableItems($items), $callback));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the items in the collection whose keys and values are not present in the given items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;TKey, TValue&gt;|iterable&lt;TKey, TValue&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function diffAssoc($items)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(array_diff_assoc($this-&gt;items, $this-&gt;getArrayableItems($items)));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the items in the collection whose keys and values are not present in the given items, using the callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;TKey, TValue&gt;|iterable&lt;TKey, TValue&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TKey, TKey): int  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function diffAssocUsing($items, callable $callback)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(array_diff_uassoc($this-&gt;items, $this-&gt;getArrayableItems($items), $callback));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the items in the collection whose keys are not present in the given items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;TKey, mixed&gt;|iterable&lt;TKey, mixed&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function diffKeys($items)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(array_diff_key($this-&gt;items, $this-&gt;getArrayableItems($items)));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the items in the collection whose keys are not present in the given items, using the callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;TKey, mixed&gt;|iterable&lt;TKey, mixed&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TKey, TKey): int  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function diffKeysUsing($items, callable $callback)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(array_diff_ukey($this-&gt;items, $this-&gt;getArrayableItems($items), $callback));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Retrieve duplicate items from the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TMapValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue): TMapValue)|string|null  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $strict
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function duplicates($callback = null, $strict = false)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $items = $this-&gt;map($this-&gt;valueRetriever($callback));
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $uniqueItems = $items-&gt;unique(null, $strict);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $compare = $this-&gt;duplicateComparator($strict);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $duplicates = new static;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($items as $key =&gt; $value) {
</span></span></span><span class="line"><span class="cl"><span class="err">            if ($uniqueItems-&gt;isNotEmpty() &amp;&amp; $compare($value, $uniqueItems-&gt;first())) {
</span></span></span><span class="line"><span class="cl"><span class="err">                $uniqueItems-&gt;shift();
</span></span></span><span class="line"><span class="cl"><span class="err">            } else {
</span></span></span><span class="line"><span class="cl"><span class="err">                $duplicates[$key] = $value;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $duplicates;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Retrieve duplicate items from the collection using strict comparison.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TMapValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue): TMapValue)|string|null  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function duplicatesStrict($callback = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;duplicates($callback, true);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the comparison function to detect duplicates.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $strict
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return callable(TValue, TValue): bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    protected function duplicateComparator($strict)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($strict) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return fn ($a, $b) =&gt; $a === $b;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return fn ($a, $b) =&gt; $a == $b;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get all items except for those with the specified keys.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Support\Enumerable&lt;array-key, TKey&gt;|array&lt;array-key, TKey&gt;|string  $keys
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function except($keys)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if (is_null($keys)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return new static($this-&gt;items);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($keys instanceof Enumerable) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $keys = $keys-&gt;all();
</span></span></span><span class="line"><span class="cl"><span class="err">        } elseif (! is_array($keys)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $keys = func_get_args();
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(Arr::except($this-&gt;items, $keys));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Run a filter over each of the items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): bool)|null  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function filter(?callable $callback = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($callback) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return new static(Arr::where($this-&gt;items, $callback));
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(array_filter($this-&gt;items));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the first item from the collection passing the given truth test.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TFirstDefault
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): bool)|null  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TFirstDefault|(\Closure(): TFirstDefault)  $default
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TValue|TFirstDefault
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function first(?callable $callback = null, $default = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return Arr::first($this-&gt;items, $callback, $default);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get a flattened array of the items in the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $depth
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int, mixed&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function flatten($depth = INF)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(Arr::flatten($this-&gt;items, $depth));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Flip the items in the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;TValue, TKey&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function flip()
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(array_flip($this-&gt;items));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Remove an item from the collection by key.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * \Illuminate\Contracts\Support\Arrayable&lt;array-key, TValue&gt;|iterable&lt;array-key, TKey&gt;|TKey  $keys
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return $this
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function forget($keys)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($this-&gt;getArrayableItems($keys) as $key) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $this-&gt;offsetUnset($key);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get an item from the collection by key.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TGetDefault
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TKey  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TGetDefault|(\Closure(): TGetDefault)  $default
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TValue|TGetDefault
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function get($key, $default = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if (array_key_exists($key, $this-&gt;items)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return $this-&gt;items[$key];
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return value($default);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get an item from the collection by key or add it to collection if it does not exist.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TGetOrPutValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TGetOrPutValue|(\Closure(): TGetOrPutValue)  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TValue|TGetOrPutValue
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function getOrPut($key, $value)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if (array_key_exists($key, $this-&gt;items)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return $this-&gt;items[$key];
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $this-&gt;offsetSet($key, $value = value($value));
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $value;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Group an associative array by a field or using a callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TGroupKey of array-key
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): TGroupKey)|array|string  $groupBy
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $preserveKeys
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;($groupBy is string ? array-key : ($groupBy is array ? array-key : TGroupKey)), static&lt;($preserveKeys is true ? TKey : int), TValue&gt;&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function groupBy($groupBy, $preserveKeys = false)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if (! $this-&gt;useAsCallable($groupBy) &amp;&amp; is_array($groupBy)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $nextGroups = $groupBy;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            $groupBy = array_shift($nextGroups);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $groupBy = $this-&gt;valueRetriever($groupBy);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $results = [];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($this-&gt;items as $key =&gt; $value) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $groupKeys = $groupBy($value, $key);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            if (! is_array($groupKeys)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                $groupKeys = [$groupKeys];
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            foreach ($groupKeys as $groupKey) {
</span></span></span><span class="line"><span class="cl"><span class="err">                $groupKey = match (true) {
</span></span></span><span class="line"><span class="cl"><span class="err">                    is_bool($groupKey) =&gt; (int) $groupKey,
</span></span></span><span class="line"><span class="cl"><span class="err">                    $groupKey instanceof \BackedEnum =&gt; $groupKey-&gt;value,
</span></span></span><span class="line"><span class="cl"><span class="err">                    $groupKey instanceof \Stringable =&gt; (string) $groupKey,
</span></span></span><span class="line"><span class="cl"><span class="err">                    default =&gt; $groupKey,
</span></span></span><span class="line"><span class="cl"><span class="err">                };
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">                if (! array_key_exists($groupKey, $results)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                    $results[$groupKey] = new static;
</span></span></span><span class="line"><span class="cl"><span class="err">                }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">                $results[$groupKey]-&gt;offsetSet($preserveKeys ? $key : null, $value);
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $result = new static($results);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if (! empty($nextGroups)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return $result-&gt;map-&gt;groupBy($nextGroups, $preserveKeys);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $result;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Key an associative array by a field or using a callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TNewKey of array-key
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): TNewKey)|array|string  $keyBy
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;($keyBy is string ? array-key : ($keyBy is array ? array-key : TNewKey)), TValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function keyBy($keyBy)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $keyBy = $this-&gt;valueRetriever($keyBy);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $results = [];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($this-&gt;items as $key =&gt; $item) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $resolvedKey = $keyBy($item, $key);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            if (is_object($resolvedKey)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                $resolvedKey = (string) $resolvedKey;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            $results[$resolvedKey] = $item;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static($results);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Determine if an item exists in the collection by key.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TKey|array&lt;array-key, TKey&gt;  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function has($key)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $keys = is_array($key) ? $key : func_get_args();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($keys as $value) {
</span></span></span><span class="line"><span class="cl"><span class="err">            if (! array_key_exists($value, $this-&gt;items)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                return false;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return true;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Determine if any of the keys exist in the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function hasAny($key)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($this-&gt;isEmpty()) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return false;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $keys = is_array($key) ? $key : func_get_args();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($keys as $value) {
</span></span></span><span class="line"><span class="cl"><span class="err">            if ($this-&gt;has($value)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                return true;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return false;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Concatenate values of a given key as a string.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): mixed)|string|null  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string|null  $glue
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return string
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function implode($value, $glue = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($this-&gt;useAsCallable($value)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return implode($glue ?? &#39;&#39;, $this-&gt;map($value)-&gt;all());
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $first = $this-&gt;first();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if (is_array($first) || (is_object($first) &amp;&amp; ! $first instanceof Stringable)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return implode($glue ?? &#39;&#39;, $this-&gt;pluck($value)-&gt;all());
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return implode($value ?? &#39;&#39;, $this-&gt;items);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Intersect the collection with the given items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;TKey, TValue&gt;|iterable&lt;TKey, TValue&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function intersect($items)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(array_intersect($this-&gt;items, $this-&gt;getArrayableItems($items)));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Intersect the collection with the given items, using the callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;array-key, TValue&gt;|iterable&lt;array-key, TValue&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TValue, TValue): int  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function intersectUsing($items, callable $callback)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(array_uintersect($this-&gt;items, $this-&gt;getArrayableItems($items), $callback));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Intersect the collection with the given items with additional index check.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;TKey, TValue&gt;|iterable&lt;TKey, TValue&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function intersectAssoc($items)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(array_intersect_assoc($this-&gt;items, $this-&gt;getArrayableItems($items)));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Intersect the collection with the given items with additional index check, using the callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;array-key, TValue&gt;|iterable&lt;array-key, TValue&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TValue, TValue): int  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function intersectAssocUsing($items, callable $callback)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(array_intersect_uassoc($this-&gt;items, $this-&gt;getArrayableItems($items), $callback));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Intersect the collection with the given items by key.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;TKey, mixed&gt;|iterable&lt;TKey, mixed&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function intersectByKeys($items)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(array_intersect_key(
</span></span></span><span class="line"><span class="cl"><span class="err">            $this-&gt;items, $this-&gt;getArrayableItems($items)
</span></span></span><span class="line"><span class="cl"><span class="err">        ));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Determine if the collection is empty or not.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @phpstan-assert-if-true null $this-&gt;first()
</span></span></span><span class="line"><span class="cl"><span class="err">     * @phpstan-assert-if-true null $this-&gt;last()
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @phpstan-assert-if-false TValue $this-&gt;first()
</span></span></span><span class="line"><span class="cl"><span class="err">     * @phpstan-assert-if-false TValue $this-&gt;last()
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function isEmpty()
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return empty($this-&gt;items);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Determine if the collection contains a single item.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function containsOneItem()
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;count() === 1;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Join all items from the collection using a string. The final items can use a separate glue string.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $glue
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string  $finalGlue
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return string
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function join($glue, $finalGlue = &#39;&#39;)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($finalGlue === &#39;&#39;) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return $this-&gt;implode($glue);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $count = $this-&gt;count();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($count === 0) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return &#39;&#39;;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($count === 1) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return $this-&gt;last();
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $collection = new static($this-&gt;items);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $finalItem = $collection-&gt;pop();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $collection-&gt;implode($glue).$finalGlue.$finalItem;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the keys of the collection items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int, TKey&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function keys()
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(array_keys($this-&gt;items));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the last item from the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TLastDefault
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): bool)|null  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TLastDefault|(\Closure(): TLastDefault)  $default
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TValue|TLastDefault
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function last(?callable $callback = null, $default = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return Arr::last($this-&gt;items, $callback, $default);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the values of a given key.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string|int|array&lt;array-key, string&gt;|null  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  string|null  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;array-key, mixed&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function pluck($value, $key = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(Arr::pluck($this-&gt;items, $value, $key));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Run a map over each of the items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TMapValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TValue, TKey): TMapValue  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;TKey, TMapValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function map(callable $callback)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(Arr::map($this-&gt;items, $callback));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Run a dictionary map over the items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * The callback should return an associative array with a single key/value pair.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TMapToDictionaryKey of array-key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TMapToDictionaryValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TValue, TKey): array&lt;TMapToDictionaryKey, TMapToDictionaryValue&gt;  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;TMapToDictionaryKey, array&lt;int, TMapToDictionaryValue&gt;&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function mapToDictionary(callable $callback)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $dictionary = [];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($this-&gt;items as $key =&gt; $item) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $pair = $callback($item, $key);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            $key = key($pair);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            $value = reset($pair);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            if (! isset($dictionary[$key])) {
</span></span></span><span class="line"><span class="cl"><span class="err">                $dictionary[$key] = [];
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            $dictionary[$key][] = $value;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static($dictionary);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Run an associative map over each of the items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * The callback should return an associative array with a single key/value pair.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TMapWithKeysKey of array-key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TMapWithKeysValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TValue, TKey): array&lt;TMapWithKeysKey, TMapWithKeysValue&gt;  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;TMapWithKeysKey, TMapWithKeysValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function mapWithKeys(callable $callback)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(Arr::mapWithKeys($this-&gt;items, $callback));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Merge the collection with the given items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;TKey, TValue&gt;|iterable&lt;TKey, TValue&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function merge($items)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(array_merge($this-&gt;items, $this-&gt;getArrayableItems($items)));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Recursively merge the collection with the given items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TMergeRecursiveValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;TKey, TMergeRecursiveValue&gt;|iterable&lt;TKey, TMergeRecursiveValue&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;TKey, TValue|TMergeRecursiveValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function mergeRecursive($items)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(array_merge_recursive($this-&gt;items, $this-&gt;getArrayableItems($items)));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Multiply the items in the collection by the multiplier.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $multiplier
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function multiply(int $multiplier)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $new = new static;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        for ($i = 0; $i &lt; $multiplier; $i++) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $new-&gt;push(...$this-&gt;items);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $new;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Create a collection by using this collection for keys and another for its values.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TCombineValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;array-key, TCombineValue&gt;|iterable&lt;array-key, TCombineValue&gt;  $values
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;TValue, TCombineValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function combine($values)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(array_combine($this-&gt;all(), $this-&gt;getArrayableItems($values)));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Union the collection with the given items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;TKey, TValue&gt;|iterable&lt;TKey, TValue&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function union($items)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static($this-&gt;items + $this-&gt;getArrayableItems($items));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Create a new collection consisting of every n-th element.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $step
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $offset
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function nth($step, $offset = 0)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $new = [];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $position = 0;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($this-&gt;slice($offset)-&gt;items as $item) {
</span></span></span><span class="line"><span class="cl"><span class="err">            if ($position % $step === 0) {
</span></span></span><span class="line"><span class="cl"><span class="err">                $new[] = $item;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            $position++;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static($new);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the items with the specified keys.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Support\Enumerable&lt;array-key, TKey&gt;|array&lt;array-key, TKey&gt;|string|null  $keys
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function only($keys)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if (is_null($keys)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return new static($this-&gt;items);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($keys instanceof Enumerable) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $keys = $keys-&gt;all();
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $keys = is_array($keys) ? $keys : func_get_args();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(Arr::only($this-&gt;items, $keys));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Select specific values from the items within the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Support\Enumerable&lt;array-key, TKey&gt;|array&lt;array-key, TKey&gt;|string|null  $keys
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function select($keys)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if (is_null($keys)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return new static($this-&gt;items);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($keys instanceof Enumerable) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $keys = $keys-&gt;all();
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $keys = is_array($keys) ? $keys : func_get_args();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(Arr::select($this-&gt;items, $keys));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get and remove the last N items from the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $count
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int, TValue&gt;|TValue|null
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function pop($count = 1)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($count === 1) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return array_pop($this-&gt;items);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($this-&gt;isEmpty()) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return new static;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $results = [];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $collectionCount = $this-&gt;count();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach (range(1, min($count, $collectionCount)) as $item) {
</span></span></span><span class="line"><span class="cl"><span class="err">            array_push($results, array_pop($this-&gt;items));
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static($results);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Push an item onto the beginning of the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TValue  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TKey  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return $this
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function prepend($value, $key = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $this-&gt;items = Arr::prepend($this-&gt;items, ...func_get_args());
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Push one or more items onto the end of the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TValue  ...$values
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return $this
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function push(...$values)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($values as $value) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $this-&gt;items[] = $value;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Prepend one or more items to the beginning of the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TValue  ...$values
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return $this
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function unshift(...$values)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        array_unshift($this-&gt;items, ...$values);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Push all of the given items onto the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TConcatKey of array-key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TConcatValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  iterable&lt;TConcatKey, TConcatValue&gt;  $source
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;TKey|TConcatKey, TValue|TConcatValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function concat($source)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $result = new static($this);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($source as $item) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $result-&gt;push($item);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $result;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get and remove an item from the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TPullDefault
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TKey  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TPullDefault|(\Closure(): TPullDefault)  $default
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TValue|TPullDefault
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function pull($key, $default = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return Arr::pull($this-&gt;items, $key, $default);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Put an item in the collection by key.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TKey  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TValue  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return $this
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function put($key, $value)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $this-&gt;offsetSet($key, $value);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get one or a specified number of items randomly from the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(self&lt;TKey, TValue&gt;): int)|int|null  $number
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $preserveKeys
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int, TValue&gt;|TValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @throws \InvalidArgumentException
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function random($number = null, $preserveKeys = false)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if (is_null($number)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return Arr::random($this-&gt;items);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if (is_callable($number)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return new static(Arr::random($this-&gt;items, $number($this), $preserveKeys));
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(Arr::random($this-&gt;items, $number, $preserveKeys));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Replace the collection items with the given items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;TKey, TValue&gt;|iterable&lt;TKey, TValue&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function replace($items)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(array_replace($this-&gt;items, $this-&gt;getArrayableItems($items)));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Recursively replace the collection items with the given items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;TKey, TValue&gt;|iterable&lt;TKey, TValue&gt;  $items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function replaceRecursive($items)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(array_replace_recursive($this-&gt;items, $this-&gt;getArrayableItems($items)));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Reverse items order.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function reverse()
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(array_reverse($this-&gt;items, true));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Search the collection for a given value and return the corresponding key if successful.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TValue|(callable(TValue,TKey): bool)  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $strict
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TKey|false
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function search($value, $strict = false)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if (! $this-&gt;useAsCallable($value)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return array_search($value, $this-&gt;items, $strict);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($this-&gt;items as $key =&gt; $item) {
</span></span></span><span class="line"><span class="cl"><span class="err">            if ($value($item, $key)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                return $key;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return false;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the item before the given item.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TValue|(callable(TValue,TKey): bool)  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $strict
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TValue|null
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function before($value, $strict = false)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $key = $this-&gt;search($value, $strict);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($key === false) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return null;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $position = ($keys = $this-&gt;keys())-&gt;search($key);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($position === 0) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return null;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;get($keys-&gt;get($position - 1));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the item after the given item.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TValue|(callable(TValue,TKey): bool)  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $strict
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TValue|null
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function after($value, $strict = false)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $key = $this-&gt;search($value, $strict);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($key === false) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return null;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $position = ($keys = $this-&gt;keys())-&gt;search($key);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($position === $keys-&gt;count() - 1) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return null;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;get($keys-&gt;get($position + 1));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get and remove the first N items from the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $count
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int, TValue&gt;|TValue|null
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @throws \InvalidArgumentException
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function shift($count = 1)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($count &lt; 0) {
</span></span></span><span class="line"><span class="cl"><span class="err">            throw new InvalidArgumentException(&#39;Number of shifted items may not be less than zero.&#39;);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($this-&gt;isEmpty()) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return null;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($count === 0) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return new static;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($count === 1) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return array_shift($this-&gt;items);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $results = [];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $collectionCount = $this-&gt;count();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach (range(1, min($count, $collectionCount)) as $item) {
</span></span></span><span class="line"><span class="cl"><span class="err">            array_push($results, array_shift($this-&gt;items));
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static($results);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Shuffle the items in the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function shuffle()
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(Arr::shuffle($this-&gt;items));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Create chunks representing a &#34;sliding window&#34; view of the items in the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $size
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $step
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int, static&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function sliding($size = 2, $step = 1)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $chunks = floor(($this-&gt;count() - $size) / $step) + 1;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return static::times($chunks, fn ($number) =&gt; $this-&gt;slice(($number - 1) * $step, $size));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Skip the first {$count} items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $count
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function skip($count)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;slice($count);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Skip items in the collection until the given condition is met.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TValue|callable(TValue,TKey): bool  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function skipUntil($value)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static($this-&gt;lazy()-&gt;skipUntil($value)-&gt;all());
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Skip items in the collection while the given condition is met.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TValue|callable(TValue,TKey): bool  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function skipWhile($value)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static($this-&gt;lazy()-&gt;skipWhile($value)-&gt;all());
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Slice the underlying collection array.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $offset
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int|null  $length
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function slice($offset, $length = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(array_slice($this-&gt;items, $offset, $length, true));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Split a collection into a certain number of groups.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $numberOfGroups
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int, static&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function split($numberOfGroups)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($this-&gt;isEmpty()) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return new static;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $groups = new static;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $groupSize = floor($this-&gt;count() / $numberOfGroups);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $remain = $this-&gt;count() % $numberOfGroups;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $start = 0;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        for ($i = 0; $i &lt; $numberOfGroups; $i++) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $size = $groupSize;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            if ($i &lt; $remain) {
</span></span></span><span class="line"><span class="cl"><span class="err">                $size++;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            if ($size) {
</span></span></span><span class="line"><span class="cl"><span class="err">                $groups-&gt;push(new static(array_slice($this-&gt;items, $start, $size)));
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">                $start += $size;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $groups;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Split a collection into a certain number of groups, and fill the first groups completely.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $numberOfGroups
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int, static&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function splitIn($numberOfGroups)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;chunk((int) ceil($this-&gt;count() / $numberOfGroups));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the first item in the collection, but only if exactly one item exists. Otherwise, throw an exception.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): bool)|string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $operator
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @throws \Illuminate\Support\ItemNotFoundException
</span></span></span><span class="line"><span class="cl"><span class="err">     * @throws \Illuminate\Support\MultipleItemsFoundException
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function sole($key = null, $operator = null, $value = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $filter = func_num_args() &gt; 1
</span></span></span><span class="line"><span class="cl"><span class="err">            ? $this-&gt;operatorForWhere(...func_get_args())
</span></span></span><span class="line"><span class="cl"><span class="err">            : $key;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $items = $this-&gt;unless($filter == null)-&gt;filter($filter);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $count = $items-&gt;count();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($count === 0) {
</span></span></span><span class="line"><span class="cl"><span class="err">            throw new ItemNotFoundException;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($count &gt; 1) {
</span></span></span><span class="line"><span class="cl"><span class="err">            throw new MultipleItemsFoundException($count);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $items-&gt;first();
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get the first item in the collection but throw an exception if no matching items exist.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): bool)|string  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $operator
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  mixed  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @throws \Illuminate\Support\ItemNotFoundException
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function firstOrFail($key = null, $operator = null, $value = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $filter = func_num_args() &gt; 1
</span></span></span><span class="line"><span class="cl"><span class="err">            ? $this-&gt;operatorForWhere(...func_get_args())
</span></span></span><span class="line"><span class="cl"><span class="err">            : $key;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $placeholder = new stdClass();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $item = $this-&gt;first($filter, $placeholder);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($item === $placeholder) {
</span></span></span><span class="line"><span class="cl"><span class="err">            throw new ItemNotFoundException;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $item;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Chunk the collection into chunks of the given size.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $size
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int, static&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function chunk($size)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($size &lt;= 0) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return new static;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $chunks = [];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach (array_chunk($this-&gt;items, $size, true) as $chunk) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $chunks[] = new static($chunk);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static($chunks);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Chunk the collection into chunks with a callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TValue, TKey, static&lt;int, TValue&gt;): bool  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int, static&lt;int, TValue&gt;&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function chunkWhile(callable $callback)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(
</span></span></span><span class="line"><span class="cl"><span class="err">            $this-&gt;lazy()-&gt;chunkWhile($callback)-&gt;mapInto(static::class)
</span></span></span><span class="line"><span class="cl"><span class="err">        );
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Sort through each item with a callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TValue): int)|null|int  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function sort($callback = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $items = $this-&gt;items;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $callback &amp;&amp; is_callable($callback)
</span></span></span><span class="line"><span class="cl"><span class="err">            ? uasort($items, $callback)
</span></span></span><span class="line"><span class="cl"><span class="err">            : asort($items, $callback ?? SORT_REGULAR);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static($items);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Sort items in descending order.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $options
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function sortDesc($options = SORT_REGULAR)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $items = $this-&gt;items;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        arsort($items, $options);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static($items);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Sort the collection using the given callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array&lt;array-key, (callable(TValue, TValue): mixed)|(callable(TValue, TKey): mixed)|string|array{string, string}&gt;|(callable(TValue, TKey): mixed)|string  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $options
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $descending
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function sortBy($callback, $options = SORT_REGULAR, $descending = false)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if (is_array($callback) &amp;&amp; ! is_callable($callback)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return $this-&gt;sortByMany($callback, $options);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $results = [];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $callback = $this-&gt;valueRetriever($callback);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        // First we will loop through the items and get the comparator from a callback
</span></span></span><span class="line"><span class="cl"><span class="err">        // function which we were given. Then, we will sort the returned values and
</span></span></span><span class="line"><span class="cl"><span class="err">        // grab all the corresponding values for the sorted keys from this array.
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach ($this-&gt;items as $key =&gt; $value) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $results[$key] = $callback($value, $key);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $descending ? arsort($results, $options)
</span></span></span><span class="line"><span class="cl"><span class="err">            : asort($results, $options);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        // Once we have sorted all of the keys in the array, we will loop through them
</span></span></span><span class="line"><span class="cl"><span class="err">        // and grab the corresponding model so we can set the underlying items list
</span></span></span><span class="line"><span class="cl"><span class="err">        // to the sorted version. Then we&#39;ll just return the collection instance.
</span></span></span><span class="line"><span class="cl"><span class="err">        foreach (array_keys($results) as $key) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $results[$key] = $this-&gt;items[$key];
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static($results);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Sort the collection using multiple comparisons.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array&lt;array-key, (callable(TValue, TValue): mixed)|(callable(TValue, TKey): mixed)|string|array{string, string}&gt;  $comparisons
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $options
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    protected function sortByMany(array $comparisons = [], int $options = SORT_REGULAR)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $items = $this-&gt;items;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        uasort($items, function ($a, $b) use ($comparisons, $options) {
</span></span></span><span class="line"><span class="cl"><span class="err">            foreach ($comparisons as $comparison) {
</span></span></span><span class="line"><span class="cl"><span class="err">                $comparison = Arr::wrap($comparison);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">                $prop = $comparison[0];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">                $ascending = Arr::get($comparison, 1, true) === true ||
</span></span></span><span class="line"><span class="cl"><span class="err">                    Arr::get($comparison, 1, true) === &#39;asc&#39;;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">                if (! is_string($prop) &amp;&amp; is_callable($prop)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                    $result = $prop($a, $b);
</span></span></span><span class="line"><span class="cl"><span class="err">                } else {
</span></span></span><span class="line"><span class="cl"><span class="err">                    $values = [data_get($a, $prop), data_get($b, $prop)];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">                    if (! $ascending) {
</span></span></span><span class="line"><span class="cl"><span class="err">                        $values = array_reverse($values);
</span></span></span><span class="line"><span class="cl"><span class="err">                    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">                    if (($options &amp; SORT_FLAG_CASE) === SORT_FLAG_CASE) {
</span></span></span><span class="line"><span class="cl"><span class="err">                        if (($options &amp; SORT_NATURAL) === SORT_NATURAL) {
</span></span></span><span class="line"><span class="cl"><span class="err">                            $result = strnatcasecmp($values[0], $values[1]);
</span></span></span><span class="line"><span class="cl"><span class="err">                        } else {
</span></span></span><span class="line"><span class="cl"><span class="err">                            $result = strcasecmp($values[0], $values[1]);
</span></span></span><span class="line"><span class="cl"><span class="err">                        }
</span></span></span><span class="line"><span class="cl"><span class="err">                    } else {
</span></span></span><span class="line"><span class="cl"><span class="err">                        $result = match ($options) {
</span></span></span><span class="line"><span class="cl"><span class="err">                            SORT_NUMERIC =&gt; intval($values[0]) &lt;=&gt; intval($values[1]),
</span></span></span><span class="line"><span class="cl"><span class="err">                            SORT_STRING =&gt; strcmp($values[0], $values[1]),
</span></span></span><span class="line"><span class="cl"><span class="err">                            SORT_NATURAL =&gt; strnatcmp((string) $values[0], (string) $values[1]),
</span></span></span><span class="line"><span class="cl"><span class="err">                            SORT_LOCALE_STRING =&gt; strcoll($values[0], $values[1]),
</span></span></span><span class="line"><span class="cl"><span class="err">                            default =&gt; $values[0] &lt;=&gt; $values[1],
</span></span></span><span class="line"><span class="cl"><span class="err">                        };
</span></span></span><span class="line"><span class="cl"><span class="err">                    }
</span></span></span><span class="line"><span class="cl"><span class="err">                }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">                if ($result === 0) {
</span></span></span><span class="line"><span class="cl"><span class="err">                    continue;
</span></span></span><span class="line"><span class="cl"><span class="err">                }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">                return $result;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">        });
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static($items);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Sort the collection in descending order using the given callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array&lt;array-key, (callable(TValue, TValue): mixed)|(callable(TValue, TKey): mixed)|string|array{string, string}&gt;|(callable(TValue, TKey): mixed)|string  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $options
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function sortByDesc($callback, $options = SORT_REGULAR)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if (is_array($callback) &amp;&amp; ! is_callable($callback)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            foreach ($callback as $index =&gt; $key) {
</span></span></span><span class="line"><span class="cl"><span class="err">                $comparison = Arr::wrap($key);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">                $comparison[1] = &#39;desc&#39;;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">                $callback[$index] = $comparison;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;sortBy($callback, $options, true);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Sort the collection keys.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $options
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $descending
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function sortKeys($options = SORT_REGULAR, $descending = false)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $items = $this-&gt;items;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $descending ? krsort($items, $options) : ksort($items, $options);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static($items);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Sort the collection keys in descending order.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $options
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function sortKeysDesc($options = SORT_REGULAR)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;sortKeys($options, true);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Sort the collection keys using a callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TKey, TKey): int  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function sortKeysUsing(callable $callback)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $items = $this-&gt;items;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        uksort($items, $callback);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static($items);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Splice a portion of the underlying collection array.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $offset
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int|null  $length
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  array&lt;array-key, TValue&gt;  $replacement
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function splice($offset, $length = null, $replacement = [])
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if (func_num_args() === 1) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return new static(array_splice($this-&gt;items, $offset));
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(array_splice($this-&gt;items, $offset, $length, $this-&gt;getArrayableItems($replacement)));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Take the first or last {$limit} items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $limit
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function take($limit)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if ($limit &lt; 0) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return $this-&gt;slice($limit, abs($limit));
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;slice(0, $limit);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Take items in the collection until the given condition is met.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TValue|callable(TValue,TKey): bool  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function takeUntil($value)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static($this-&gt;lazy()-&gt;takeUntil($value)-&gt;all());
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Take items in the collection while the given condition is met.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TValue|callable(TValue,TKey): bool  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function takeWhile($value)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static($this-&gt;lazy()-&gt;takeWhile($value)-&gt;all());
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Transform each item in the collection using a callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  callable(TValue, TKey): TValue  $callback
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return $this
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function transform(callable $callback)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $this-&gt;items = $this-&gt;map($callback)-&gt;all();
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Flatten a multi-dimensional associative array with dots.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function dot()
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(Arr::dot($this-&gt;all()));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Convert a flatten &#34;dot&#34; notation array into an expanded array.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function undot()
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(Arr::undot($this-&gt;all()));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Return only unique items from the collection array.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): mixed)|string|null  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  bool  $strict
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function unique($key = null, $strict = false)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if (is_null($key) &amp;&amp; $strict === false) {
</span></span></span><span class="line"><span class="cl"><span class="err">            return new static(array_unique($this-&gt;items, SORT_REGULAR));
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $callback = $this-&gt;valueRetriever($key);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $exists = [];
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;reject(function ($item, $key) use ($callback, $strict, &amp;$exists) {
</span></span></span><span class="line"><span class="cl"><span class="err">            if (in_array($id = $callback($item, $key), $exists, $strict)) {
</span></span></span><span class="line"><span class="cl"><span class="err">                return true;
</span></span></span><span class="line"><span class="cl"><span class="err">            }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">            $exists[] = $id;
</span></span></span><span class="line"><span class="cl"><span class="err">        });
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Reset the keys on the underlying array.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int, TValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function values()
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(array_values($this-&gt;items));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Zip the collection together with one or more arrays.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * e.g. new Collection([1, 2, 3])-&gt;zip([4, 5, 6]);
</span></span></span><span class="line"><span class="cl"><span class="err">     *      =&gt; [[1, 4], [2, 5], [3, 6]]
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TZipValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  \Illuminate\Contracts\Support\Arrayable&lt;array-key, TZipValue&gt;|iterable&lt;array-key, TZipValue&gt;  ...$items
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int, static&lt;int, TValue|TZipValue&gt;&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function zip($items)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $arrayableItems = array_map(fn ($items) =&gt; $this-&gt;getArrayableItems($items), func_get_args());
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $params = array_merge([fn () =&gt; new static(func_get_args()), $this-&gt;items], $arrayableItems);
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(array_map(...$params));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Pad collection to the specified length with a value.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @template TPadValue
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  int  $size
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TPadValue  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;int, TValue|TPadValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function pad($size, $value)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static(array_pad($this-&gt;items, $size, $value));
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get an iterator for the items.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return \ArrayIterator&lt;TKey, TValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function getIterator(): \Traversable
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new ArrayIterator($this-&gt;items);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Count the number of items in the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return int
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function count(): int
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return count($this-&gt;items);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Count the number of items in the collection by a field or using a callback.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  (callable(TValue, TKey): array-key)|string|null  $countBy
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return static&lt;array-key, int&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function countBy($countBy = null)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new static($this-&gt;lazy()-&gt;countBy($countBy)-&gt;all());
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Add an item to the collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TValue  $item
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return $this
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function add($item)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $this-&gt;items[] = $item;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get a base Support collection instance from this collection.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return \Illuminate\Support\Collection&lt;TKey, TValue&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function toBase()
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return new self($this);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Determine if an item exists at an offset.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TKey  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return bool
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function offsetExists($key): bool
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return isset($this-&gt;items[$key]);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Get an item at a given offset.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TKey  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return TValue
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function offsetGet($key): mixed
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;items[$key];
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Set the item at a given offset.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TKey|null  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TValue  $value
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return void
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function offsetSet($key, $value): void
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        if (is_null($key)) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $this-&gt;items[] = $value;
</span></span></span><span class="line"><span class="cl"><span class="err">        } else {
</span></span></span><span class="line"><span class="cl"><span class="err">            $this-&gt;items[$key] = $value;
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * Unset the item at a given offset.
</span></span></span><span class="line"><span class="cl"><span class="err">     *
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param  TKey  $key
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return void
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function offsetUnset($key): void
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        unset($this-&gt;items[$key]);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">}
</span></span></span><span class="line"><span class="cl"><span class="err">?&gt;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">&lt;?php
</span></span></span><span class="line"><span class="cl"><span class="err">class Product {
</span></span></span><span class="line"><span class="cl"><span class="err">    private string $title;
</span></span></span><span class="line"><span class="cl"><span class="err">    private string $description;
</span></span></span><span class="line"><span class="cl"><span class="err">    private int $price;
</span></span></span><span class="line"><span class="cl"><span class="err">    private string $currency;
</span></span></span><span class="line"><span class="cl"><span class="err">    private string $category;
</span></span></span><span class="line"><span class="cl"><span class="err">    private string $brand;
</span></span></span><span class="line"><span class="cl"><span class="err">    private Collection $options;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param string $title
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param string $description
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param int $price
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param string $currency
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param string $category
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param string $brand
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param Collection $options
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function __construct(string $title, string $description, int $price, string $currency, string $category, string $brand, Collection $options)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $this-&gt;title = $title;
</span></span></span><span class="line"><span class="cl"><span class="err">        $this-&gt;description = $description;
</span></span></span><span class="line"><span class="cl"><span class="err">        $this-&gt;price = $price;
</span></span></span><span class="line"><span class="cl"><span class="err">        $this-&gt;currency = $currency;
</span></span></span><span class="line"><span class="cl"><span class="err">        $this-&gt;category = $category;
</span></span></span><span class="line"><span class="cl"><span class="err">        $this-&gt;brand = $brand;
</span></span></span><span class="line"><span class="cl"><span class="err">        $this-&gt;options = $options;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return string
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function getTitle(): string
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;title;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param string $title
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function setTitle(string $title): void
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $this-&gt;title = $title;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return string
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function getDescription(): string
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;description;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param string $description
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function setDescription(string $description): void
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $this-&gt;description = $description;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return int
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function getPrice(): int
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;price;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param int $price
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function setPrice(int $price): void
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $this-&gt;price = $price;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return string
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function getCurrency(): string
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;currency;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param string $currency
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function setCurrency(string $currency): void
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $this-&gt;currency = $currency;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return string
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function getCategory(): string
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;category;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param string $category
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function setCategory(string $category): void
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $this-&gt;category = $category;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return string
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function getBrand(): string
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;brand;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param string $brand
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function setBrand(string $brand): void
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $this-&gt;brand = $brand;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * @return Collection
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function getOptions(): array
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        return $this-&gt;options;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param Collection $options
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function setOptions(Collection $options): void
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $this-&gt;options = $options;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">}
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">class Option {
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    private string $title;
</span></span></span><span class="line"><span class="cl"><span class="err">    private string $description;
</span></span></span><span class="line"><span class="cl"><span class="err">    private int $price;
</span></span></span><span class="line"><span class="cl"><span class="err">    private Collection $items;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param string $title
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param string $description
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param int $price
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param Collection $items
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function __construct(string $title, string $description, int $price, Collection $items)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $this-&gt;title = $title;
</span></span></span><span class="line"><span class="cl"><span class="err">        $this-&gt;description = $description;
</span></span></span><span class="line"><span class="cl"><span class="err">        $this-&gt;price = $price;
</span></span></span><span class="line"><span class="cl"><span class="err">        $this-&gt;items = $items;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param string $title
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function setTitle(string $title): void
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $this-&gt;title = $title;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param string $description
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function setDescription(string $description): void
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $this-&gt;description = $description;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param int $price
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function setPrice(int $price): void
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $this-&gt;price = $price;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param Collection $items
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function setItems(Collection $items): void
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $this-&gt;items = $items;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">}
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">class OptionItem {
</span></span></span><span class="line"><span class="cl"><span class="err">    private string $title;
</span></span></span><span class="line"><span class="cl"><span class="err">    private string $description;
</span></span></span><span class="line"><span class="cl"><span class="err">    private int $price;
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param string $title
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param string $description
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param int $price
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function __construct(string $title, string $description, int $price)
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $this-&gt;title = $title;
</span></span></span><span class="line"><span class="cl"><span class="err">        $this-&gt;description = $description;
</span></span></span><span class="line"><span class="cl"><span class="err">        $this-&gt;price = $price;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param string $title
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function setTitle(string $title): void
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $this-&gt;title = $title;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param string $description
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function setDescription(string $description): void
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $this-&gt;description = $description;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">    /**
</span></span></span><span class="line"><span class="cl"><span class="err">     * @param int $price
</span></span></span><span class="line"><span class="cl"><span class="err">     */
</span></span></span><span class="line"><span class="cl"><span class="err">    public function setPrice(int $price): void
</span></span></span><span class="line"><span class="cl"><span class="err">    {
</span></span></span><span class="line"><span class="cl"><span class="err">        $this-&gt;price = $price;
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">}
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">$products = new Collection();
</span></span></span><span class="line"><span class="cl"><span class="err">$start = microtime(true);
</span></span></span><span class="line"><span class="cl"><span class="err">for ($k = 0; $k &lt;= 1000; $k++) {
</span></span></span><span class="line"><span class="cl"><span class="err">    $options = new Collection();
</span></span></span><span class="line"><span class="cl"><span class="err">    for ($j = 0; $j &lt;= 10; $j++) {
</span></span></span><span class="line"><span class="cl"><span class="err">        $optionItems = new Collection();
</span></span></span><span class="line"><span class="cl"><span class="err">        for ($i = 0; $i &lt;= 100; $i++) {
</span></span></span><span class="line"><span class="cl"><span class="err">            $optionItem = new Collection(new OptionItem(title: &#39;OptionItem&#39; . $i, description: &#39;OptionItem &#39; . $i . &#39; Description&#39;, price: random_int(1000, 10000)));
</span></span></span><span class="line"><span class="cl"><span class="err">            $optionItems-&gt;add($optionItem);
</span></span></span><span class="line"><span class="cl"><span class="err">        }
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">        $option = new Collection(new Option(title: &#39;Option&#39; . $j, description: &#39;Option &#39; . $j . &#39; Description&#39;, price: random_int(1000, 10000), items: $optionItems));
</span></span></span><span class="line"><span class="cl"><span class="err">        $options-&gt;add($option);
</span></span></span><span class="line"><span class="cl"><span class="err">    }
</span></span></span><span class="line"><span class="cl"><span class="err">    $products-&gt;add(new Collection(new Product(title: &#39;Product&#39; . $k, description: &#39;Product &#39; . $k . &#39; Description&#39;, price: random_int(1000, 10000), currency: &#39;USD&#39;, category: &#39;Category&#39; . $k, brand: &#39;Brand&#39; . $k, options: $options)));
</span></span></span><span class="line"><span class="cl"><span class="err">}
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">$end = microtime(true);
</span></span></span><span class="line"><span class="cl"><span class="err">echo &#39;Memory Peak Usage: &#39; . (memory_get_peak_usage(true) / 1024 / 1024) . &#39; MB&#39; . &#39;&lt;br&gt;&#39;;
</span></span></span><span class="line"><span class="cl"><span class="err">echo &#39;Execution Time: &#39; . round($end - $start, 2) . &#39; seconds&#39; . &#39;&lt;br&gt;&#39;;
</span></span></span></code></pre>
</div>]]></description></item><item><title>윈도우 컴포저 패키지 설치시 오류 처리 방법</title><link>http://blog.hodory.dev/2020/04/14/composer-error-on-windows/</link><pubDate>Tue, 14 Apr 2020 23:38:07 +0000</pubDate><author><name>hodory</name></author><guid>http://blog.hodory.dev/2020/04/14/composer-error-on-windows/</guid><description><![CDATA[<h2 id="your-requirements-could-not-be-resolved-to-an-installable-set-of-packages" class="headerLink">
    <a href="#your-requirements-could-not-be-resolved-to-an-installable-set-of-packages" class="header-mark"></a>Your requirements could not be resolved to an installable set of packages.</h2><div class="code-block highlight is-closed show-line-numbers  tw-group tw-my-2">
  <div class="
    code-block-title 
    
    tw-flex 
    tw-flex-row 
    tw-justify-between 
    tw-w-full tw-bg-bgColor-secondary
    ">      
    <button 
      class="
        tw-select-none 
        tw-mx-2 
        tw-block
        group-[.is-open]:tw-rotate-90
        tw-transition-[transform] 
        tw-duration-500 
        tw-ease-in-out
        print:!tw-hidden"
      disabled
      aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z"/></svg></button>

    <div class="code-block-title-bar tw-w-full">
      <p class="tw-select-none !tw-my-1">shell</p>
    </div>
    <div class="tw-flex">
      <button 
        class="
          line-number-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.show-line-numbers]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle line numbers"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M61.77 401l17.5-20.15a19.92 19.92 0 0 0 5.07-14.19v-3.31C84.34 356 80.5 352 73 352H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8h22.83a157.41 157.41 0 0 0-11 12.31l-5.61 7c-4 5.07-5.25 10.13-2.8 14.88l1.05 1.93c3 5.76 6.29 7.88 12.25 7.88h4.73c10.33 0 15.94 2.44 15.94 9.09 0 4.72-4.2 8.22-14.36 8.22a41.54 41.54 0 0 1-15.47-3.12c-6.49-3.88-11.74-3.5-15.6 3.12l-5.59 9.31c-3.72 6.13-3.19 11.72 2.63 15.94 7.71 4.69 20.38 9.44 37 9.44 34.16 0 48.5-22.75 48.5-44.12-.03-14.38-9.12-29.76-28.73-34.88zM496 224H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-160H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16V80a16 16 0 0 0-16-16zm0 320H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM16 160h64a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H64V40a8 8 0 0 0-8-8H32a8 8 0 0 0-7.14 4.42l-8 16A8 8 0 0 0 24 64h8v64H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8zm-3.91 160H80a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H41.32c3.29-10.29 48.34-18.68 48.34-56.44 0-29.06-25-39.56-44.47-39.56-21.36 0-33.8 10-40.46 18.75-4.37 5.59-3 10.84 2.8 15.37l8.58 6.88c5.61 4.56 11 2.47 16.12-2.44a13.44 13.44 0 0 1 9.46-3.84c3.33 0 9.28 1.56 9.28 8.75C51 248.19 0 257.31 0 304.59v4C0 316 5.08 320 12.09 320z"/></svg></button>

      <button 
        class="
          wrap-code-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.is-wrap]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle code wrap"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z"/></svg></button>
      
      <button 
        class="
          copy-code-button
          tw-select-none
          tw-mx-2 
          tw-hidden
          group-[.is-open]:tw-block
          hover:tw-text-fgColor-link 
          print:!tw-hidden"
        title="Copy code">
          <span class="copy-icon tw-block"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z"/></svg></span>
          <span class="check-icon tw-hidden"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"/></svg></span>
      </button>
        
      <button 
        class="
          tw-select-none 
          tw-mx-2 
          tw-block 
          group-[.is-open]:tw-hidden 
          print:!tw-hidden" 
        disabled
        aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M328 256c0 39.8-32.2 72-72 72s-72-32.2-72-72 32.2-72 72-72 72 32.2 72 72zm104-72c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72zm-352 0c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72z"/></svg></button>
    </div>
  </div>
  <pre style="counter-reset: codeblock;" class="tw-block tw-m-0 tw-p-0"><code 
    id="codeblock-id-1" 
    class="
      chroma 
      !tw-block 
      tw-p-0
      tw-m-0
      tw-transition-[max-height] 
      tw-duration-500 
      tw-ease-in-out 
      group-[.is-closed]:!tw-max-h-0 
      group-[.is-wrap]:tw-text-wrap
      tw-overflow-y-hidden
      tw-overflow-x-auto
      tw-scrollbar-thin
      "><span class="line"><span class="cl">Your requirements could not be resolved to an installable <span class="nb">set</span> of packages.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  Problem <span class="m">1</span>
</span></span><span class="line"><span class="cl">    - laravel/horizon v4.2.1 requires ext-pcntl * -&gt; the requested PHP extension pcntl is missing from your system.
</span></span><span class="line"><span class="cl">    - laravel/horizon v4.2.0 requires ext-pcntl * -&gt; the requested PHP extension pcntl is missing from your system.
</span></span><span class="line"><span class="cl">    - laravel/horizon 4.x-dev requires ext-pcntl * -&gt; the requested PHP extension pcntl is missing from your system.
</span></span><span class="line"><span class="cl">    - Installation request <span class="k">for</span> laravel/horizon ^4.2 -&gt; satisfiable by laravel/horizon<span class="o">[</span>4.x-dev, v4.2.0, v4.2.1<span class="o">]</span>.</span></span></code></pre>
</div>
<p>Laravel Horizon을 windows에서 설치하려 할 때 위와 같은 오류가 발생하였습니다.</p>
<h2 id="해결방안" class="headerLink">
    <a href="#%ed%95%b4%ea%b2%b0%eb%b0%a9%ec%95%88" class="header-mark"></a>해결방안</h2><p>pcntl은 윈도우에서 지원이 되지 않으므로 Docker 또는 Vargrant와 같은 가상환경을 사용해야 합니다.
<a href="https://www.php.net/manual/en/pcntl.installation.php" target="_blank" rel="noopener noreferrer">Link</a></p>
<p>또는 아래와 같이 실행하여 설치를 완료 할 수 있습니다.</p>
<div class="code-block highlight is-closed show-line-numbers  tw-group tw-my-2">
  <div class="
    code-block-title 
    
    tw-flex 
    tw-flex-row 
    tw-justify-between 
    tw-w-full tw-bg-bgColor-secondary
    ">      
    <button 
      class="
        tw-select-none 
        tw-mx-2 
        tw-block
        group-[.is-open]:tw-rotate-90
        tw-transition-[transform] 
        tw-duration-500 
        tw-ease-in-out
        print:!tw-hidden"
      disabled
      aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z"/></svg></button>

    <div class="code-block-title-bar tw-w-full">
      <p class="tw-select-none !tw-my-1">shell</p>
    </div>
    <div class="tw-flex">
      <button 
        class="
          line-number-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.show-line-numbers]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle line numbers"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M61.77 401l17.5-20.15a19.92 19.92 0 0 0 5.07-14.19v-3.31C84.34 356 80.5 352 73 352H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8h22.83a157.41 157.41 0 0 0-11 12.31l-5.61 7c-4 5.07-5.25 10.13-2.8 14.88l1.05 1.93c3 5.76 6.29 7.88 12.25 7.88h4.73c10.33 0 15.94 2.44 15.94 9.09 0 4.72-4.2 8.22-14.36 8.22a41.54 41.54 0 0 1-15.47-3.12c-6.49-3.88-11.74-3.5-15.6 3.12l-5.59 9.31c-3.72 6.13-3.19 11.72 2.63 15.94 7.71 4.69 20.38 9.44 37 9.44 34.16 0 48.5-22.75 48.5-44.12-.03-14.38-9.12-29.76-28.73-34.88zM496 224H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-160H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16V80a16 16 0 0 0-16-16zm0 320H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM16 160h64a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H64V40a8 8 0 0 0-8-8H32a8 8 0 0 0-7.14 4.42l-8 16A8 8 0 0 0 24 64h8v64H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8zm-3.91 160H80a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H41.32c3.29-10.29 48.34-18.68 48.34-56.44 0-29.06-25-39.56-44.47-39.56-21.36 0-33.8 10-40.46 18.75-4.37 5.59-3 10.84 2.8 15.37l8.58 6.88c5.61 4.56 11 2.47 16.12-2.44a13.44 13.44 0 0 1 9.46-3.84c3.33 0 9.28 1.56 9.28 8.75C51 248.19 0 257.31 0 304.59v4C0 316 5.08 320 12.09 320z"/></svg></button>

      <button 
        class="
          wrap-code-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.is-wrap]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle code wrap"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z"/></svg></button>
      
      <button 
        class="
          copy-code-button
          tw-select-none
          tw-mx-2 
          tw-hidden
          group-[.is-open]:tw-block
          hover:tw-text-fgColor-link 
          print:!tw-hidden"
        title="Copy code">
          <span class="copy-icon tw-block"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z"/></svg></span>
          <span class="check-icon tw-hidden"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"/></svg></span>
      </button>
        
      <button 
        class="
          tw-select-none 
          tw-mx-2 
          tw-block 
          group-[.is-open]:tw-hidden 
          print:!tw-hidden" 
        disabled
        aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M328 256c0 39.8-32.2 72-72 72s-72-32.2-72-72 32.2-72 72-72 72 32.2 72 72zm104-72c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72zm-352 0c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72z"/></svg></button>
    </div>
  </div>
  <pre style="counter-reset: codeblock;" class="tw-block tw-m-0 tw-p-0"><code 
    id="codeblock-id-2" 
    class="
      chroma 
      !tw-block 
      tw-p-0
      tw-m-0
      tw-transition-[max-height] 
      tw-duration-500 
      tw-ease-in-out 
      group-[.is-closed]:!tw-max-h-0 
      group-[.is-wrap]:tw-text-wrap
      tw-overflow-y-hidden
      tw-overflow-x-auto
      tw-scrollbar-thin
      "><span class="line"><span class="cl">composer require laravel/horizon --ignore-platform-reqs</span></span></code></pre>
</div>
<p><code>--ignore-platform-reqs</code> 옵션의 설명은
해당 링크에서 확인할 수 있습니다. <a href="https://getcomposer.org/doc/03-cli.md" target="_blank" rel="noopener noreferrer">Link</a></p>
<div class="code-block highlight is-closed show-line-numbers  tw-group tw-my-2">
  <div class="
    code-block-title 
    
    tw-flex 
    tw-flex-row 
    tw-justify-between 
    tw-w-full tw-bg-bgColor-secondary
    ">      
    <button 
      class="
        tw-select-none 
        tw-mx-2 
        tw-block
        group-[.is-open]:tw-rotate-90
        tw-transition-[transform] 
        tw-duration-500 
        tw-ease-in-out
        print:!tw-hidden"
      disabled
      aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z"/></svg></button>

    <div class="code-block-title-bar tw-w-full">
      <p class="tw-select-none !tw-my-1">plaintext</p>
    </div>
    <div class="tw-flex">
      <button 
        class="
          line-number-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.show-line-numbers]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle line numbers"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M61.77 401l17.5-20.15a19.92 19.92 0 0 0 5.07-14.19v-3.31C84.34 356 80.5 352 73 352H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8h22.83a157.41 157.41 0 0 0-11 12.31l-5.61 7c-4 5.07-5.25 10.13-2.8 14.88l1.05 1.93c3 5.76 6.29 7.88 12.25 7.88h4.73c10.33 0 15.94 2.44 15.94 9.09 0 4.72-4.2 8.22-14.36 8.22a41.54 41.54 0 0 1-15.47-3.12c-6.49-3.88-11.74-3.5-15.6 3.12l-5.59 9.31c-3.72 6.13-3.19 11.72 2.63 15.94 7.71 4.69 20.38 9.44 37 9.44 34.16 0 48.5-22.75 48.5-44.12-.03-14.38-9.12-29.76-28.73-34.88zM496 224H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-160H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16V80a16 16 0 0 0-16-16zm0 320H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM16 160h64a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H64V40a8 8 0 0 0-8-8H32a8 8 0 0 0-7.14 4.42l-8 16A8 8 0 0 0 24 64h8v64H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8zm-3.91 160H80a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H41.32c3.29-10.29 48.34-18.68 48.34-56.44 0-29.06-25-39.56-44.47-39.56-21.36 0-33.8 10-40.46 18.75-4.37 5.59-3 10.84 2.8 15.37l8.58 6.88c5.61 4.56 11 2.47 16.12-2.44a13.44 13.44 0 0 1 9.46-3.84c3.33 0 9.28 1.56 9.28 8.75C51 248.19 0 257.31 0 304.59v4C0 316 5.08 320 12.09 320z"/></svg></button>

      <button 
        class="
          wrap-code-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.is-wrap]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle code wrap"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z"/></svg></button>
      
      <button 
        class="
          copy-code-button
          tw-select-none
          tw-mx-2 
          tw-hidden
          group-[.is-open]:tw-block
          hover:tw-text-fgColor-link 
          print:!tw-hidden"
        title="Copy code">
          <span class="copy-icon tw-block"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z"/></svg></span>
          <span class="check-icon tw-hidden"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"/></svg></span>
      </button>
        
      <button 
        class="
          tw-select-none 
          tw-mx-2 
          tw-block 
          group-[.is-open]:tw-hidden 
          print:!tw-hidden" 
        disabled
        aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M328 256c0 39.8-32.2 72-72 72s-72-32.2-72-72 32.2-72 72-72 72 32.2 72 72zm104-72c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72zm-352 0c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72z"/></svg></button>
    </div>
  </div>
  <pre style="counter-reset: codeblock;" class="tw-block tw-m-0 tw-p-0"><code 
    id="codeblock-id-3" 
    class="
      chroma 
      !tw-block 
      tw-p-0
      tw-m-0
      tw-transition-[max-height] 
      tw-duration-500 
      tw-ease-in-out 
      group-[.is-closed]:!tw-max-h-0 
      group-[.is-wrap]:tw-text-wrap
      tw-overflow-y-hidden
      tw-overflow-x-auto
      tw-scrollbar-thin
      "><span class="line"><span class="cl">ignore php, hhvm, lib-* and ext-* requirements and force the installation even if the local machine does not fulfill these. See also the platform config option.</span></span></code></pre>
</div>
<p>패키지를 설치하는데 필요한 조건을 충족하지 못하더라도 무시하고 설치를 실행하는 옵션입니다.</p>
<p>필요 조건을 모두 충족하지 않은 경우이므로 정상동작에 실패 할 수 있습니다.</p>
]]></description></item><item><title>[PHP] InvalidArgumentException : Unable to locate factory with name [default]</title><link>http://blog.hodory.dev/2020/01/10/unable-to-locale-factory-with-name-default/</link><pubDate>Fri, 10 Jan 2020 00:36:54 +0000</pubDate><author><name>hodory</name></author><guid>http://blog.hodory.dev/2020/01/10/unable-to-locale-factory-with-name-default/</guid><description><![CDATA[<h2 id="발단" class="headerLink">
    <a href="#%eb%b0%9c%eb%8b%a8" class="header-mark"></a>발단</h2><p>Laravel Framework로 TDD를 진행중에 Unit Test를 하기 위해 artisan 콘솔을 이용하여 <code>TaskTest</code> 라는 이름의 테스트 클래스를 생성하였습니다.</p>
<div class="code-block highlight is-closed show-line-numbers  tw-group tw-my-2">
  <div class="
    code-block-title 
    
    tw-flex 
    tw-flex-row 
    tw-justify-between 
    tw-w-full tw-bg-bgColor-secondary
    ">      
    <button 
      class="
        tw-select-none 
        tw-mx-2 
        tw-block
        group-[.is-open]:tw-rotate-90
        tw-transition-[transform] 
        tw-duration-500 
        tw-ease-in-out
        print:!tw-hidden"
      disabled
      aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z"/></svg></button>

    <div class="code-block-title-bar tw-w-full">
      <p class="tw-select-none !tw-my-1">shellscript</p>
    </div>
    <div class="tw-flex">
      <button 
        class="
          line-number-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.show-line-numbers]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle line numbers"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M61.77 401l17.5-20.15a19.92 19.92 0 0 0 5.07-14.19v-3.31C84.34 356 80.5 352 73 352H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8h22.83a157.41 157.41 0 0 0-11 12.31l-5.61 7c-4 5.07-5.25 10.13-2.8 14.88l1.05 1.93c3 5.76 6.29 7.88 12.25 7.88h4.73c10.33 0 15.94 2.44 15.94 9.09 0 4.72-4.2 8.22-14.36 8.22a41.54 41.54 0 0 1-15.47-3.12c-6.49-3.88-11.74-3.5-15.6 3.12l-5.59 9.31c-3.72 6.13-3.19 11.72 2.63 15.94 7.71 4.69 20.38 9.44 37 9.44 34.16 0 48.5-22.75 48.5-44.12-.03-14.38-9.12-29.76-28.73-34.88zM496 224H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-160H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16V80a16 16 0 0 0-16-16zm0 320H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM16 160h64a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H64V40a8 8 0 0 0-8-8H32a8 8 0 0 0-7.14 4.42l-8 16A8 8 0 0 0 24 64h8v64H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8zm-3.91 160H80a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H41.32c3.29-10.29 48.34-18.68 48.34-56.44 0-29.06-25-39.56-44.47-39.56-21.36 0-33.8 10-40.46 18.75-4.37 5.59-3 10.84 2.8 15.37l8.58 6.88c5.61 4.56 11 2.47 16.12-2.44a13.44 13.44 0 0 1 9.46-3.84c3.33 0 9.28 1.56 9.28 8.75C51 248.19 0 257.31 0 304.59v4C0 316 5.08 320 12.09 320z"/></svg></button>

      <button 
        class="
          wrap-code-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.is-wrap]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle code wrap"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z"/></svg></button>
      
      <button 
        class="
          copy-code-button
          tw-select-none
          tw-mx-2 
          tw-hidden
          group-[.is-open]:tw-block
          hover:tw-text-fgColor-link 
          print:!tw-hidden"
        title="Copy code">
          <span class="copy-icon tw-block"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z"/></svg></span>
          <span class="check-icon tw-hidden"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"/></svg></span>
      </button>
        
      <button 
        class="
          tw-select-none 
          tw-mx-2 
          tw-block 
          group-[.is-open]:tw-hidden 
          print:!tw-hidden" 
        disabled
        aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M328 256c0 39.8-32.2 72-72 72s-72-32.2-72-72 32.2-72 72-72 72 32.2 72 72zm104-72c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72zm-352 0c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72z"/></svg></button>
    </div>
  </div>
  <pre style="counter-reset: codeblock;" class="tw-block tw-m-0 tw-p-0"><code 
    id="codeblock-id-1" 
    class="
      chroma 
      !tw-block 
      tw-p-0
      tw-m-0
      tw-transition-[max-height] 
      tw-duration-500 
      tw-ease-in-out 
      group-[.is-closed]:!tw-max-h-0 
      group-[.is-wrap]:tw-text-wrap
      tw-overflow-y-hidden
      tw-overflow-x-auto
      tw-scrollbar-thin
      "><pre tabindex="0"><code class="language-shellscript" data-lang="shellscript">$ php artisan make:test TaskTest --unit</code></pre></code></pre>
</div>
<p>코드는 간단했습니다.</p>
<div class="code-block highlight is-closed show-line-numbers  tw-group tw-my-2">
  <div class="
    code-block-title 
    
    tw-flex 
    tw-flex-row 
    tw-justify-between 
    tw-w-full tw-bg-bgColor-secondary
    ">      
    <button 
      class="
        tw-select-none 
        tw-mx-2 
        tw-block
        group-[.is-open]:tw-rotate-90
        tw-transition-[transform] 
        tw-duration-500 
        tw-ease-in-out
        print:!tw-hidden"
      disabled
      aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z"/></svg></button>

    <div class="code-block-title-bar tw-w-full">
      <p class="tw-select-none !tw-my-1">php</p>
    </div>
    <div class="tw-flex">
      <button 
        class="
          line-number-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.show-line-numbers]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle line numbers"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M61.77 401l17.5-20.15a19.92 19.92 0 0 0 5.07-14.19v-3.31C84.34 356 80.5 352 73 352H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8h22.83a157.41 157.41 0 0 0-11 12.31l-5.61 7c-4 5.07-5.25 10.13-2.8 14.88l1.05 1.93c3 5.76 6.29 7.88 12.25 7.88h4.73c10.33 0 15.94 2.44 15.94 9.09 0 4.72-4.2 8.22-14.36 8.22a41.54 41.54 0 0 1-15.47-3.12c-6.49-3.88-11.74-3.5-15.6 3.12l-5.59 9.31c-3.72 6.13-3.19 11.72 2.63 15.94 7.71 4.69 20.38 9.44 37 9.44 34.16 0 48.5-22.75 48.5-44.12-.03-14.38-9.12-29.76-28.73-34.88zM496 224H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-160H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16V80a16 16 0 0 0-16-16zm0 320H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM16 160h64a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H64V40a8 8 0 0 0-8-8H32a8 8 0 0 0-7.14 4.42l-8 16A8 8 0 0 0 24 64h8v64H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8zm-3.91 160H80a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H41.32c3.29-10.29 48.34-18.68 48.34-56.44 0-29.06-25-39.56-44.47-39.56-21.36 0-33.8 10-40.46 18.75-4.37 5.59-3 10.84 2.8 15.37l8.58 6.88c5.61 4.56 11 2.47 16.12-2.44a13.44 13.44 0 0 1 9.46-3.84c3.33 0 9.28 1.56 9.28 8.75C51 248.19 0 257.31 0 304.59v4C0 316 5.08 320 12.09 320z"/></svg></button>

      <button 
        class="
          wrap-code-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.is-wrap]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle code wrap"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z"/></svg></button>
      
      <button 
        class="
          copy-code-button
          tw-select-none
          tw-mx-2 
          tw-hidden
          group-[.is-open]:tw-block
          hover:tw-text-fgColor-link 
          print:!tw-hidden"
        title="Copy code">
          <span class="copy-icon tw-block"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z"/></svg></span>
          <span class="check-icon tw-hidden"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"/></svg></span>
      </button>
        
      <button 
        class="
          tw-select-none 
          tw-mx-2 
          tw-block 
          group-[.is-open]:tw-hidden 
          print:!tw-hidden" 
        disabled
        aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M328 256c0 39.8-32.2 72-72 72s-72-32.2-72-72 32.2-72 72-72 72 32.2 72 72zm104-72c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72zm-352 0c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72z"/></svg></button>
    </div>
  </div>
  <pre style="counter-reset: codeblock;" class="tw-block tw-m-0 tw-p-0"><code 
    id="codeblock-id-2" 
    class="
      chroma 
      !tw-block 
      tw-p-0
      tw-m-0
      tw-transition-[max-height] 
      tw-duration-500 
      tw-ease-in-out 
      group-[.is-closed]:!tw-max-h-0 
      group-[.is-wrap]:tw-text-wrap
      tw-overflow-y-hidden
      tw-overflow-x-auto
      tw-scrollbar-thin
      "><span class="line"><span class="cl"><span class="o">&lt;?</span><span class="nx">php</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">namespace</span> <span class="nx">Tests\Unit</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nx">App\Project</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nx">Illuminate\Foundation\Testing\RefreshDatabase</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nx">PHPUnit\Framework\TestCase</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">TaskTest</span> <span class="k">extends</span> <span class="nx">TestCase</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">use</span> <span class="nx">RefreshDatabase</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="sd">/**
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @test
</span></span></span><span class="line"><span class="cl"><span class="sd">     */</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">function</span> <span class="nf">it_belongs_to_a_project</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$task</span> <span class="o">=</span> <span class="nx">factory</span><span class="p">(</span><span class="s1">&#39;App\Task&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">create</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertInstanceOf</span><span class="p">(</span><span class="nx">Project</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="nv">$task</span><span class="o">-&gt;</span><span class="na">project</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</div>
<p>해당 테스트를 생성 후 아래와 같이 PHPUnit으로 해당 테스트를 실행하였더니</p>
<div class="code-block highlight is-closed show-line-numbers  tw-group tw-my-2">
  <div class="
    code-block-title 
    
    tw-flex 
    tw-flex-row 
    tw-justify-between 
    tw-w-full tw-bg-bgColor-secondary
    ">      
    <button 
      class="
        tw-select-none 
        tw-mx-2 
        tw-block
        group-[.is-open]:tw-rotate-90
        tw-transition-[transform] 
        tw-duration-500 
        tw-ease-in-out
        print:!tw-hidden"
      disabled
      aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z"/></svg></button>

    <div class="code-block-title-bar tw-w-full">
      <p class="tw-select-none !tw-my-1">shellscript</p>
    </div>
    <div class="tw-flex">
      <button 
        class="
          line-number-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.show-line-numbers]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle line numbers"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M61.77 401l17.5-20.15a19.92 19.92 0 0 0 5.07-14.19v-3.31C84.34 356 80.5 352 73 352H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8h22.83a157.41 157.41 0 0 0-11 12.31l-5.61 7c-4 5.07-5.25 10.13-2.8 14.88l1.05 1.93c3 5.76 6.29 7.88 12.25 7.88h4.73c10.33 0 15.94 2.44 15.94 9.09 0 4.72-4.2 8.22-14.36 8.22a41.54 41.54 0 0 1-15.47-3.12c-6.49-3.88-11.74-3.5-15.6 3.12l-5.59 9.31c-3.72 6.13-3.19 11.72 2.63 15.94 7.71 4.69 20.38 9.44 37 9.44 34.16 0 48.5-22.75 48.5-44.12-.03-14.38-9.12-29.76-28.73-34.88zM496 224H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-160H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16V80a16 16 0 0 0-16-16zm0 320H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM16 160h64a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H64V40a8 8 0 0 0-8-8H32a8 8 0 0 0-7.14 4.42l-8 16A8 8 0 0 0 24 64h8v64H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8zm-3.91 160H80a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H41.32c3.29-10.29 48.34-18.68 48.34-56.44 0-29.06-25-39.56-44.47-39.56-21.36 0-33.8 10-40.46 18.75-4.37 5.59-3 10.84 2.8 15.37l8.58 6.88c5.61 4.56 11 2.47 16.12-2.44a13.44 13.44 0 0 1 9.46-3.84c3.33 0 9.28 1.56 9.28 8.75C51 248.19 0 257.31 0 304.59v4C0 316 5.08 320 12.09 320z"/></svg></button>

      <button 
        class="
          wrap-code-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.is-wrap]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle code wrap"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z"/></svg></button>
      
      <button 
        class="
          copy-code-button
          tw-select-none
          tw-mx-2 
          tw-hidden
          group-[.is-open]:tw-block
          hover:tw-text-fgColor-link 
          print:!tw-hidden"
        title="Copy code">
          <span class="copy-icon tw-block"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z"/></svg></span>
          <span class="check-icon tw-hidden"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"/></svg></span>
      </button>
        
      <button 
        class="
          tw-select-none 
          tw-mx-2 
          tw-block 
          group-[.is-open]:tw-hidden 
          print:!tw-hidden" 
        disabled
        aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M328 256c0 39.8-32.2 72-72 72s-72-32.2-72-72 32.2-72 72-72 72 32.2 72 72zm104-72c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72zm-352 0c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72z"/></svg></button>
    </div>
  </div>
  <pre style="counter-reset: codeblock;" class="tw-block tw-m-0 tw-p-0"><code 
    id="codeblock-id-3" 
    class="
      chroma 
      !tw-block 
      tw-p-0
      tw-m-0
      tw-transition-[max-height] 
      tw-duration-500 
      tw-ease-in-out 
      group-[.is-closed]:!tw-max-h-0 
      group-[.is-wrap]:tw-text-wrap
      tw-overflow-y-hidden
      tw-overflow-x-auto
      tw-scrollbar-thin
      "><pre tabindex="0"><code class="language-shellscript" data-lang="shellscript">$ ./vendor/bin/phpunit --filter it_belongs_to_a_project</code></pre></code></pre>
</div>
<p>아래 이미지와 같은 에러가 나왔습니다.
<img class="tw-inline" loading="lazy" src=http://blog.hodory.dev/images/Unable-to-locale-factory-with-name-default/1.jpg     ></p>
<h2 id="invalidargumentexception--unable-to-locate-factory-with-name-default-apptask" class="headerLink">
    <a href="#invalidargumentexception--unable-to-locate-factory-with-name-default-apptask" class="header-mark"></a><code>InvalidArgumentException : Unable to locate factory with name [default] [App\Task]</code></h2><p>과연 무엇이 문제일까 싶어 해당 모델의 migration이 제대로 안된걸까요?</p>
<p>migrate 명령어도 실행해보았고, Controller Test에서 사용할때에는 문제가 없었지만 factory 코드도 다시 작성 해보았습니다.</p>
<p>구글링으로 <a href="https://www.lesstif.com/pages/viewpage.action?pageId=26084077" target="_blank" rel="noopener noreferrer">정광섭님의 위키</a>를 참고했을때는 factory에 클래스가 제대로 설정된게 아닌 경우라 하여,<!-- raw HTML omitted -->
<code>factory('App\Task')</code> 와 <code>factory(Task::class)</code> 와 <code>factory(\App\Task::class)</code> 모두 테스트 해보았는데 모두 동작을 안했고,<!-- raw HTML omitted --></p>
<p>Laracast와 StackoverFlow에서는 phpunit의 setup 메소드를 상속하여,<!-- raw HTML omitted -->
<code>parent::setup()</code> 을 호출하고, factory를 호출하면 해결된다는 답변들도 확인하였으나, 제게 맞는 해결 방법은 아니였습니다.</p>
<p>하지만 라라캐스트 질문의 <a href="https://laracasts.com/discuss/channels/testing/unable-to-locate-factory-with-name-default?page=1#reply=400775" target="_blank" rel="noopener noreferrer">어떤 답변</a>에서는
<code>--unit</code>으로 생성한 테스트 클래스가 상속하는 TestCase 클래스가 <code>\Tests\TestCase</code> 가 아닌 <code>\PHPUnit\Framework\TestCase</code>여서 발생했다는 내용이 있었습니다.</p>
<h2 id="해결" class="headerLink">
    <a href="#%ed%95%b4%ea%b2%b0" class="header-mark"></a>해결</h2><p>저도 이걸 확인하고 바로 위의 코드를 아래와 같이 변경하였습니다.</p>
<div class="code-block highlight is-closed show-line-numbers  tw-group tw-my-2">
  <div class="
    code-block-title 
    
    tw-flex 
    tw-flex-row 
    tw-justify-between 
    tw-w-full tw-bg-bgColor-secondary
    ">      
    <button 
      class="
        tw-select-none 
        tw-mx-2 
        tw-block
        group-[.is-open]:tw-rotate-90
        tw-transition-[transform] 
        tw-duration-500 
        tw-ease-in-out
        print:!tw-hidden"
      disabled
      aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z"/></svg></button>

    <div class="code-block-title-bar tw-w-full">
      <p class="tw-select-none !tw-my-1">php</p>
    </div>
    <div class="tw-flex">
      <button 
        class="
          line-number-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.show-line-numbers]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle line numbers"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M61.77 401l17.5-20.15a19.92 19.92 0 0 0 5.07-14.19v-3.31C84.34 356 80.5 352 73 352H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8h22.83a157.41 157.41 0 0 0-11 12.31l-5.61 7c-4 5.07-5.25 10.13-2.8 14.88l1.05 1.93c3 5.76 6.29 7.88 12.25 7.88h4.73c10.33 0 15.94 2.44 15.94 9.09 0 4.72-4.2 8.22-14.36 8.22a41.54 41.54 0 0 1-15.47-3.12c-6.49-3.88-11.74-3.5-15.6 3.12l-5.59 9.31c-3.72 6.13-3.19 11.72 2.63 15.94 7.71 4.69 20.38 9.44 37 9.44 34.16 0 48.5-22.75 48.5-44.12-.03-14.38-9.12-29.76-28.73-34.88zM496 224H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-160H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16V80a16 16 0 0 0-16-16zm0 320H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM16 160h64a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H64V40a8 8 0 0 0-8-8H32a8 8 0 0 0-7.14 4.42l-8 16A8 8 0 0 0 24 64h8v64H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8zm-3.91 160H80a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H41.32c3.29-10.29 48.34-18.68 48.34-56.44 0-29.06-25-39.56-44.47-39.56-21.36 0-33.8 10-40.46 18.75-4.37 5.59-3 10.84 2.8 15.37l8.58 6.88c5.61 4.56 11 2.47 16.12-2.44a13.44 13.44 0 0 1 9.46-3.84c3.33 0 9.28 1.56 9.28 8.75C51 248.19 0 257.31 0 304.59v4C0 316 5.08 320 12.09 320z"/></svg></button>

      <button 
        class="
          wrap-code-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.is-wrap]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle code wrap"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z"/></svg></button>
      
      <button 
        class="
          copy-code-button
          tw-select-none
          tw-mx-2 
          tw-hidden
          group-[.is-open]:tw-block
          hover:tw-text-fgColor-link 
          print:!tw-hidden"
        title="Copy code">
          <span class="copy-icon tw-block"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z"/></svg></span>
          <span class="check-icon tw-hidden"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"/></svg></span>
      </button>
        
      <button 
        class="
          tw-select-none 
          tw-mx-2 
          tw-block 
          group-[.is-open]:tw-hidden 
          print:!tw-hidden" 
        disabled
        aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M328 256c0 39.8-32.2 72-72 72s-72-32.2-72-72 32.2-72 72-72 72 32.2 72 72zm104-72c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72zm-352 0c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72z"/></svg></button>
    </div>
  </div>
  <pre style="counter-reset: codeblock;" class="tw-block tw-m-0 tw-p-0"><code 
    id="codeblock-id-4" 
    class="
      chroma 
      !tw-block 
      tw-p-0
      tw-m-0
      tw-transition-[max-height] 
      tw-duration-500 
      tw-ease-in-out 
      group-[.is-closed]:!tw-max-h-0 
      group-[.is-wrap]:tw-text-wrap
      tw-overflow-y-hidden
      tw-overflow-x-auto
      tw-scrollbar-thin
      "><span class="line"><span class="cl"><span class="o">&lt;?</span><span class="nx">php</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">namespace</span> <span class="nx">Tests\Unit</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nx">App\Project</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nx">Illuminate\Foundation\Testing\RefreshDatabase</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="o">-</span> <span class="k">use</span> <span class="nx">PHPUnit\Framework\TestCase</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="o">+</span> <span class="k">use</span> <span class="nx">Tests\TestCase</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">TaskTest</span> <span class="k">extends</span> <span class="nx">TestCase</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">use</span> <span class="nx">RefreshDatabase</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="sd">/**
</span></span></span><span class="line"><span class="cl"><span class="sd">     * @test
</span></span></span><span class="line"><span class="cl"><span class="sd">     */</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">function</span> <span class="nf">it_belongs_to_a_project</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$task</span> <span class="o">=</span> <span class="nx">factory</span><span class="p">(</span><span class="s1">&#39;App\Task&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">create</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertInstanceOf</span><span class="p">(</span><span class="nx">Project</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="nv">$task</span><span class="o">-&gt;</span><span class="na">project</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</div>
<p>네임스페이스를 확인할 생각은 전혀 하지 못했는데, 일반적인 테스트 클래스는 모두 <code>use Tests\TestCase;</code> 이렇게 선언되어있었으나<!-- raw HTML omitted -->
<code>--unit</code>으로 선언했을때는 <code>use PHPUnit\Framework\TestCase;</code>으로 자동 설정되어있었습니다.</p>
<p>아직까지 artisan에서 <code>--unit</code> 옵션을 사용하여 테스트 클래스를 만들었을때 namespace 변경 없이 하는 방법은 찾지 못하였는데,<!-- raw HTML omitted -->
<code>Illuminate\Foundation\Testing\TestCase</code> 에서 무언가 factory 메소드의 파라미터로 모델을 주입해주는 설정해주는것으로 보입니다.</p>
<blockquote>
  <p>참고자료</p>

</blockquote><ul>
<li><a href="https://www.lesstif.com/pages/viewpage.action?pageId=26084077" target="_blank" rel="noopener noreferrer">정광섭님의 위키</a></li>
<li><a href="https://laracasts.com/discuss/channels/testing/unable-to-locate-factory-with-name-default?page=1#reply=400775" target="_blank" rel="noopener noreferrer">Laracast &ldquo;Unable to locate factory with name [default]??&rdquo;- amcsi</a></li>
</ul>]]></description></item><item><title>PHPUnit Annotation 정리</title><link>http://blog.hodory.dev/2019/11/25/phpunit-annotations/</link><pubDate>Mon, 25 Nov 2019 01:18:24 +0000</pubDate><author><name>hodory</name></author><guid>http://blog.hodory.dev/2019/11/25/phpunit-annotations/</guid><description><![CDATA[<h2 id="서론" class="headerLink">
    <a href="#%ec%84%9c%eb%a1%a0" class="header-mark"></a>서론</h2><hr>
<p>PHP Unit을 사용하면서도 잘 모르는 어노테이션을 PHPUnit v8.4 기준(2019-11-19 최신버전)으로 정리하였습니다.</p>
<h2 id="author" class="headerLink">
    <a href="#author" class="header-mark"></a>@author</h2><h3 id="테스트를-작성자별-그룹화-필터링-할-때" class="headerLink">
    <a href="#%ed%85%8c%ec%8a%a4%ed%8a%b8%eb%a5%bc-%ec%9e%91%ec%84%b1%ec%9e%90%eb%b3%84-%ea%b7%b8%eb%a3%b9%ed%99%94-%ed%95%84%ed%84%b0%eb%a7%81-%ed%95%a0-%eb%95%8c" class="header-mark"></a>테스트를 작성자별 그룹화 필터링 할 때</h3><hr>
<p><code>@group</code> 어노테이션의 별칭으로, 테스트를 작성자별로 그룹화하여 필터링 하는데 사용할 수 있습니다.</p>
<h2 id="after" class="headerLink">
    <a href="#after" class="header-mark"></a>@after</h2><h3 id="각-테스트가-끝난-뒤-실행-하려-할-때" class="headerLink">
    <a href="#%ea%b0%81-%ed%85%8c%ec%8a%a4%ed%8a%b8%ea%b0%80-%eb%81%9d%eb%82%9c-%eb%92%a4-%ec%8b%a4%ed%96%89-%ed%95%98%eb%a0%a4-%ed%95%a0-%eb%95%8c" class="header-mark"></a>각 테스트가 끝난 뒤 실행 하려 할 때</h3><hr>
<p>각 테스트 메소드들이 실행 된 후, 특정 메소드를 실행하고자 할때 사용할 수 있습니다.</p>
<p>각 테스트가 끝난 뒤 트랜잭션 커밋or롤백을 한다거나, 생성된 파일을 삭제하는 등의 처리를 하는데 사용하면 좋을 것 같습니다.</p>
<!-- raw HTML omitted -->
<pre><code>namespace Tests;

use PHPUnit\Framework\TestCase;

class MyTest extends TestCase
{
    /**
     * @after
     */
    public function afterDo()
    {
        echo &quot;After Method Called&quot; . PHP_EOL;
    }

    public function test1()
    {
        echo &quot;test1 Method Called&quot; . PHP_EOL;
        self::assertTrue(true);
    }

    public function test2()
    {
        echo &quot;test2 Method Called&quot; . PHP_EOL;
        self::assertTrue(true);
    }
}

// 출력 결과
test1 Method Called
After Method Called
test2 Method Called
After Method Called
```
</code></pre>
<!-- raw HTML omitted -->
<h2 id="afterclass" class="headerLink">
    <a href="#afterclass" class="header-mark"></a>@afterClass</h2><h3 id="모든-테스트가-끝난-후-실행-하려-할-때" class="headerLink">
    <a href="#%eb%aa%a8%eb%93%a0-%ed%85%8c%ec%8a%a4%ed%8a%b8%ea%b0%80-%eb%81%9d%eb%82%9c-%ed%9b%84-%ec%8b%a4%ed%96%89-%ed%95%98%eb%a0%a4-%ed%95%a0-%eb%95%8c" class="header-mark"></a>모든 테스트가 끝난 후 실행 하려 할 때</h3><hr>
<p>모든 테스트가 끝난 후, 공유된 자원들을 정리하기 위해 호출할 정적 메소드를 지정 할 수 있습니다.</p>
<p>해당 부분에서 테스트 실행시 만든 DB 커넥션을 회수하거나, 전체 트랜잭션을 처리 하거나, 소켓을 닫는 등의 처리를 할 수 있을것 같습니다.</p>
<!-- raw HTML omitted -->
<pre><code>namespace Tests;

use PHPUnit\Framework\TestCase;

class MyTest extends TestCase
{
    /**
     * @afterClass
     */
    public static function afterClassDo()
    {
        echo &quot;After Class Method Called&quot; . PHP_EOL;
    }

    public function test1()
    {
        echo &quot;test1 Method Called&quot; . PHP_EOL;
        self::assertTrue(true);
    }

    public function test2()
    {
        echo &quot;test2 Method Called&quot; . PHP_EOL;
        self::assertTrue(true);
    }
}

// 출력 결과
test1 Method Called
test2 Method Called
After Class Method Called
```
</code></pre>
<!-- raw HTML omitted -->
<h2 id="backupglobals" class="headerLink">
    <a href="#backupglobals" class="header-mark"></a>@backupGlobals</h2><h3 id="글로벌-변수를-유지하고-싶다면" class="headerLink">
    <a href="#%ea%b8%80%eb%a1%9c%eb%b2%8c-%eb%b3%80%ec%88%98%eb%a5%bc-%ec%9c%a0%ec%a7%80%ed%95%98%ea%b3%a0-%ec%8b%b6%eb%8b%a4%eb%a9%b4" class="header-mark"></a>글로벌 변수를 유지하고 싶다면</h3><hr>
<p>모든 글로벌 변수를 각 테스트 전에 백업하고, 각 테스트 이후 해당 백업을 복원시킵니다.</p>
<p>메소드 레벨에서 재정의가 가능합니다.</p>
<p>해당 설명만으로는 이해가 잘 되지 않아서 직접 예제 코드를 만들어 보았습니다.
클래스 스코프 밖에 정의된 글로벌 변수인 <code>$className</code>을 <code>@backupGlobals</code> 어노테이션이 enabled 되어 있는 테스트 코드에서는 실행이전 값을 백업하여두고 테스트가 끝나면 복원이 되어,
두번째 테스트코드에서도 &ldquo;MyTest&quot;라는 값을 가지고 있게됩니다.</p>
<!-- raw HTML omitted -->
<pre><code>namespace Tests;

use PHPUnit\Framework\TestCase;

$className = &quot;MyTest&quot;;

/**
 * @backupGlobals enabled
 */
class MyTest extends TestCase
{
    public function test_글로벌변수를_백업하고_변경()
    {
        global $className;
        $this-&gt;assertEquals($className, &quot;MyTest&quot;);
        $className = &quot;Foo&quot;;
    }

    /**
     * @backupGlobals disabled
     */
    public function test_글로벌변수를_백업하지_않고_변경()
    {
        global $className;
        $this-&gt;assertEquals($className, &quot;MyTest&quot;);
        $className = &quot;Bar&quot;;
    }

    public function test_글로벌변수를_백업되어있는지_체크()
    {
        global $className;
        $this-&gt;assertEquals($className, &quot;Bar&quot;);
    }
}
```
</code></pre>
<!-- raw HTML omitted -->
<h2 id="backupstaticattributes" class="headerLink">
    <a href="#backupstaticattributes" class="header-mark"></a>@backupStaticAttributes</h2><h3 id="정적-속성을-사용하려-할-때" class="headerLink">
    <a href="#%ec%a0%95%ec%a0%81-%ec%86%8d%ec%84%b1%ec%9d%84-%ec%82%ac%ec%9a%a9%ed%95%98%eb%a0%a4-%ed%95%a0-%eb%95%8c" class="header-mark"></a><del>정적 속성을 사용하려 할 때</del></h3><hr>
<p><del>선언된 클래스들 안의 모든 정적 속성을 각 테스트 전에 백업하고, 각 테스트 후에 해당 백업을 복원 시킵니다.</del></p>
<p><del>클래스 레벨에도 선언 가능하며, 각 테스트 메소드에서 추가 제어 가능합니다.</del></p>
<!-- raw HTML omitted -->
<pre><code>use PHPUnit\Framework\TestCase;
        
/**
 * @backupStaticAttributes enabled
 */
class MyTest extends TestCase
{
    public function test_정적속성을_사용하는_테스트()
    {
        // ...
    }

    /**
     * @backupStaticAttributes disabled
     */
    public function test_정적속성을_사용하지_않는_테스트()
    {
        // ...
    }
}
```
</code></pre>
<!-- raw HTML omitted -->
<h2 id="before" class="headerLink">
    <a href="#before" class="header-mark"></a>@before</h2><h3 id="각-테스트-실행전에-실행-하려-할-때" class="headerLink">
    <a href="#%ea%b0%81-%ed%85%8c%ec%8a%a4%ed%8a%b8-%ec%8b%a4%ed%96%89%ec%a0%84%ec%97%90-%ec%8b%a4%ed%96%89-%ed%95%98%eb%a0%a4-%ed%95%a0-%eb%95%8c" class="header-mark"></a>각 테스트 실행전에 실행 하려 할 때</h3><hr>
<p>각 테스트 메소드가 호출되기 전에 실행할 메소드를 지정할 수 있습니다.</p>
<p>아래와 같이 beforeMethod는 각 메소드 호출전에 실행되지만,
users 배열의 값이 증가되지는 않습니다.</p>
<!-- raw HTML omitted -->
<pre><code>class MyTest extends TestCase
{
    protected $users = [];

    /**
     * @before
     */
    public function beforeMethod()
    {
        echo &quot;Before Method Called&quot; . PHP_EOL;
        $this-&gt;users[] = [
            'name' =&gt; '홍길동'
        ];
    }

    public function test1()
    {
        echo &quot;test1 Method Called&quot; . PHP_EOL;
        self::assertCount(1, $this-&gt;users);
    }

    public function test2()
    {
        echo &quot;test2 Method Called&quot; . PHP_EOL;
        self::assertCount(1, $this-&gt;users);
    }
}

// 출력 결과
Before Method Called
test1 Method Called
Before Method Called
test2 Method Called
```
</code></pre>
<!-- raw HTML omitted -->
<h2 id="beforeclass" class="headerLink">
    <a href="#beforeclass" class="header-mark"></a>@beforeClass</h2><h3 id="테스트-실행전-공유-속성을-만들-때" class="headerLink">
    <a href="#%ed%85%8c%ec%8a%a4%ed%8a%b8-%ec%8b%a4%ed%96%89%ec%a0%84-%ea%b3%b5%ec%9c%a0-%ec%86%8d%ec%84%b1%ec%9d%84-%eb%a7%8c%eb%93%a4-%eb%95%8c" class="header-mark"></a>테스트 실행전 공유 속성을 만들 때</h3><hr>
<p>해당 클래스에서 테스트가 실행되기전 공유 하기 위한 정보를 설정하기 위해 호출 할 static 메소드에 지정하여 사용할 수 있습니다.</p>
<!-- raw HTML omitted -->
<pre><code>class MyTest extends TestCase
{
    protected $users = [];

    /**
     * @beforeClass
     */
    public static function beforeClass()
    {
        echo &quot;Before Class Called&quot; . PHP_EOL;
    }

    /**
     * @before
     */
    public function beforeMethod()
    {
        echo &quot;Before Method Called&quot; . PHP_EOL;
        $this-&gt;users[] = [
            'name' =&gt; '홍길동'
        ];
    }

    public function test1()
    {
        echo &quot;test1 Method Called&quot; . PHP_EOL;
        self::assertCount(1, $this-&gt;users);
    }

    public function test2()
    {
        echo &quot;test2 Method Called&quot; . PHP_EOL;
        self::assertCount(1, $this-&gt;users);
    }
}

// 출력 결과
Before Class Called
Before Method Called
test1 Method Called
Before Method Called
test2 Method Called
```
</code></pre>
<!-- raw HTML omitted -->
<h2 id="codecoverageignore" class="headerLink">
    <a href="#codecoverageignore" class="header-mark"></a>@codeCoverageIgnore*</h2><hr>
<p>코드 커버리지 분석시 제외할 라인에 사용할 수 있습니다.</p>
<!-- raw HTML omitted -->
<pre><code>/**
 * @codeCoverageIgnore
 */
class Foo
{
    public function bar()
    {
    }
}

class Bar
{
    /**
     * @codeCoverageIgnore
     */
    public function foo()
    {
    }
}

if (false) {
    // @codeCoverageIgnoreStart
    print '*';
    // @codeCoverageIgnoreEnd
}

exit; // @codeCoverageIgnore
```
</code></pre>
<!-- raw HTML omitted -->
<h2 id="covers" class="headerLink">
    <a href="#covers" class="header-mark"></a>@covers</h2><h3 id="테스트-영역을-명시하려-할-때" class="headerLink">
    <a href="#%ed%85%8c%ec%8a%a4%ed%8a%b8-%ec%98%81%ec%97%ad%ec%9d%84-%eb%aa%85%ec%8b%9c%ed%95%98%eb%a0%a4-%ed%95%a0-%eb%95%8c" class="header-mark"></a>테스트 영역을 명시하려 할 때</h3><hr>
<p>어떤 영역을 테스트 하고자 하는지 명시하고자 할 때 사용합니다.</p>
<p>이와 같이 명시 하면 IDE(PHPStorm)에서 연결되어 있어 ctrl+shift+T 를 이용해 테스트로 바로 이동이 가능해지고, usage로 찾을 수 있어 메소드명 수정시 같이 반영됩니다.</p>
<!-- raw HTML omitted -->
<h2 id="coversdefaultclass" class="headerLink">
    <a href="#coversdefaultclass" class="header-mark"></a>@coversDefaultClass</h2><h3 id="너무-긴-네임스페이스와-클래스명을-반복해서-쓰고-싶지-않을-때" class="headerLink">
    <a href="#%eb%84%88%eb%ac%b4-%ea%b8%b4-%eb%84%a4%ec%9e%84%ec%8a%a4%ed%8e%98%ec%9d%b4%ec%8a%a4%ec%99%80-%ed%81%b4%eb%9e%98%ec%8a%a4%eb%aa%85%ec%9d%84-%eb%b0%98%eb%b3%b5%ed%95%b4%ec%84%9c-%ec%93%b0%ea%b3%a0-%ec%8b%b6%ec%a7%80-%ec%95%8a%ec%9d%84-%eb%95%8c" class="header-mark"></a>너무 긴 네임스페이스와 클래스명을 반복해서 쓰고 싶지 않을 때</h3><hr>
<p>기본 네임스페이스나 클래스명을 명시하는데 사용할 수 있어, <code>@covers</code> 어노테이션에 긴 네임스페이스나, 클래스명을 반복해서 사용할 필요가 없어집니다.</p>
<p>해당 어노테이션에는 정규화 된 클래스명을 사용해야하기때문에,
모호하지 않도록 클래스명 맨 앞에 <code>\</code> 로 시작하는것을 추천합니다.</p>
<p>아래 예제 코드와 같이 <code>@covers \Foo\CoveredClass::publicMethod</code> 를 <code>@covers ::publicMethod</code>로 줄여 쓸 수 있는 이점을 얻게 됩니다.</p>
<!-- raw HTML omitted -->
<pre><code>/**
 * @coversDefaultClass \Foo\CoveredClass
 */
class CoversDefaultClassTest extends TestCase
{
    /**
     * @covers ::publicMethod
     */
    public function testSomething()
    {
        $o = new Foo\CoveredClass;
        $o-&gt;publicMethod();
    }
}
```
</code></pre>
<!-- raw HTML omitted -->
<h2 id="coversnothing" class="headerLink">
    <a href="#coversnothing" class="header-mark"></a>@coversNothing</h2><h3 id="작성예정" class="headerLink">
    <a href="#%ec%9e%91%ec%84%b1%ec%98%88%ec%a0%95" class="header-mark"></a>작성예정</h3><hr>
<p>클래스나 메소드레벨에서 사용할 수 있고 <code>@covers</code> 어노테이션을 덮어 씁니다.</p>
<h2 id="dataprovider" class="headerLink">
    <a href="#dataprovider" class="header-mark"></a>@DataProvider</h2><h3 id="메소드를-이용해-파라미터를-주입하고-싶을때" class="headerLink">
    <a href="#%eb%a9%94%ec%86%8c%eb%93%9c%eb%a5%bc-%ec%9d%b4%ec%9a%a9%ed%95%b4-%ed%8c%8c%eb%9d%bc%eb%af%b8%ed%84%b0%eb%a5%bc-%ec%a3%bc%ec%9e%85%ed%95%98%ea%b3%a0-%ec%8b%b6%ec%9d%84%eb%95%8c" class="header-mark"></a>메소드를 이용해 파라미터를 주입하고 싶을때</h3><hr>
<p><code>@dataProvider</code> 를 사용하면 메소드의 파라미터로 전달할 수 있습니다.
Java Junit 패키지에서 JunitParams를 이용하여 <code>@Parameters</code> 어노테이션을 사용하는것과 동일한 효과를 얻을 수 있습니다.</p>
<ul>
<li>예제 코드
<ul>
<li>
<p>아래 예제 코드와 같은 테스트는 배열의 각 값 들이 <code>$a</code>, <code>$b</code>, <code>$expected</code> 로 바인딩 되며,
총 4개의 배열이 자동 주입되어 테스트가 4회 수행됩니다.</p>
<ul>
<li>
<div class="code-block highlight is-closed show-line-numbers  tw-group tw-my-2">
  <div class="
    code-block-title 
    
    tw-flex 
    tw-flex-row 
    tw-justify-between 
    tw-w-full tw-bg-bgColor-secondary
    ">      
    <button 
      class="
        tw-select-none 
        tw-mx-2 
        tw-block
        group-[.is-open]:tw-rotate-90
        tw-transition-[transform] 
        tw-duration-500 
        tw-ease-in-out
        print:!tw-hidden"
      disabled
      aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z"/></svg></button>

    <div class="code-block-title-bar tw-w-full">
      <p class="tw-select-none !tw-my-1">php</p>
    </div>
    <div class="tw-flex">
      <button 
        class="
          line-number-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.show-line-numbers]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle line numbers"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M61.77 401l17.5-20.15a19.92 19.92 0 0 0 5.07-14.19v-3.31C84.34 356 80.5 352 73 352H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8h22.83a157.41 157.41 0 0 0-11 12.31l-5.61 7c-4 5.07-5.25 10.13-2.8 14.88l1.05 1.93c3 5.76 6.29 7.88 12.25 7.88h4.73c10.33 0 15.94 2.44 15.94 9.09 0 4.72-4.2 8.22-14.36 8.22a41.54 41.54 0 0 1-15.47-3.12c-6.49-3.88-11.74-3.5-15.6 3.12l-5.59 9.31c-3.72 6.13-3.19 11.72 2.63 15.94 7.71 4.69 20.38 9.44 37 9.44 34.16 0 48.5-22.75 48.5-44.12-.03-14.38-9.12-29.76-28.73-34.88zM496 224H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-160H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16V80a16 16 0 0 0-16-16zm0 320H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM16 160h64a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H64V40a8 8 0 0 0-8-8H32a8 8 0 0 0-7.14 4.42l-8 16A8 8 0 0 0 24 64h8v64H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8zm-3.91 160H80a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H41.32c3.29-10.29 48.34-18.68 48.34-56.44 0-29.06-25-39.56-44.47-39.56-21.36 0-33.8 10-40.46 18.75-4.37 5.59-3 10.84 2.8 15.37l8.58 6.88c5.61 4.56 11 2.47 16.12-2.44a13.44 13.44 0 0 1 9.46-3.84c3.33 0 9.28 1.56 9.28 8.75C51 248.19 0 257.31 0 304.59v4C0 316 5.08 320 12.09 320z"/></svg></button>

      <button 
        class="
          wrap-code-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.is-wrap]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle code wrap"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z"/></svg></button>
      
      <button 
        class="
          copy-code-button
          tw-select-none
          tw-mx-2 
          tw-hidden
          group-[.is-open]:tw-block
          hover:tw-text-fgColor-link 
          print:!tw-hidden"
        title="Copy code">
          <span class="copy-icon tw-block"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z"/></svg></span>
          <span class="check-icon tw-hidden"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"/></svg></span>
      </button>
        
      <button 
        class="
          tw-select-none 
          tw-mx-2 
          tw-block 
          group-[.is-open]:tw-hidden 
          print:!tw-hidden" 
        disabled
        aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M328 256c0 39.8-32.2 72-72 72s-72-32.2-72-72 32.2-72 72-72 72 32.2 72 72zm104-72c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72zm-352 0c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72z"/></svg></button>
    </div>
  </div>
  <pre style="counter-reset: codeblock;" class="tw-block tw-m-0 tw-p-0"><code 
    id="codeblock-id-1" 
    class="
      chroma 
      !tw-block 
      tw-p-0
      tw-m-0
      tw-transition-[max-height] 
      tw-duration-500 
      tw-ease-in-out 
      group-[.is-closed]:!tw-max-h-0 
      group-[.is-wrap]:tw-text-wrap
      tw-overflow-y-hidden
      tw-overflow-x-auto
      tw-scrollbar-thin
      "><span class="line"><span class="cl">  <span class="o">&lt;?</span><span class="nx">php</span>
</span></span><span class="line"><span class="cl">  <span class="k">use</span> <span class="nx">PHPUnit\Framework\TestCase</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">class</span> <span class="nc">DataTest</span> <span class="k">extends</span> <span class="nx">TestCase</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="sd">/**
</span></span></span><span class="line"><span class="cl"><span class="sd">       * @dataProvider additionProvider
</span></span></span><span class="line"><span class="cl"><span class="sd">       */</span>
</span></span><span class="line"><span class="cl">      <span class="k">public</span> <span class="k">function</span> <span class="nf">testAdd</span><span class="p">(</span><span class="nv">$a</span><span class="p">,</span> <span class="nv">$b</span><span class="p">,</span> <span class="nv">$expected</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertSame</span><span class="p">(</span><span class="nv">$expected</span><span class="p">,</span> <span class="nv">$a</span> <span class="o">+</span> <span class="nv">$b</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="k">public</span> <span class="k">function</span> <span class="nf">additionProvider</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="k">return</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">              <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">              <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">              <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">              <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">          <span class="p">];</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span></span></span></code></pre>
</div>
</li>
</ul>
</li>
<li>
<p>아래와 같이 이름이 정의된 dataset을 사용할 수도 있습니다.</p>
<ul>
<li>
<div class="code-block highlight is-closed show-line-numbers  tw-group tw-my-2">
  <div class="
    code-block-title 
    
    tw-flex 
    tw-flex-row 
    tw-justify-between 
    tw-w-full tw-bg-bgColor-secondary
    ">      
    <button 
      class="
        tw-select-none 
        tw-mx-2 
        tw-block
        group-[.is-open]:tw-rotate-90
        tw-transition-[transform] 
        tw-duration-500 
        tw-ease-in-out
        print:!tw-hidden"
      disabled
      aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z"/></svg></button>

    <div class="code-block-title-bar tw-w-full">
      <p class="tw-select-none !tw-my-1">php</p>
    </div>
    <div class="tw-flex">
      <button 
        class="
          line-number-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.show-line-numbers]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle line numbers"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M61.77 401l17.5-20.15a19.92 19.92 0 0 0 5.07-14.19v-3.31C84.34 356 80.5 352 73 352H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8h22.83a157.41 157.41 0 0 0-11 12.31l-5.61 7c-4 5.07-5.25 10.13-2.8 14.88l1.05 1.93c3 5.76 6.29 7.88 12.25 7.88h4.73c10.33 0 15.94 2.44 15.94 9.09 0 4.72-4.2 8.22-14.36 8.22a41.54 41.54 0 0 1-15.47-3.12c-6.49-3.88-11.74-3.5-15.6 3.12l-5.59 9.31c-3.72 6.13-3.19 11.72 2.63 15.94 7.71 4.69 20.38 9.44 37 9.44 34.16 0 48.5-22.75 48.5-44.12-.03-14.38-9.12-29.76-28.73-34.88zM496 224H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-160H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16V80a16 16 0 0 0-16-16zm0 320H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM16 160h64a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H64V40a8 8 0 0 0-8-8H32a8 8 0 0 0-7.14 4.42l-8 16A8 8 0 0 0 24 64h8v64H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8zm-3.91 160H80a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H41.32c3.29-10.29 48.34-18.68 48.34-56.44 0-29.06-25-39.56-44.47-39.56-21.36 0-33.8 10-40.46 18.75-4.37 5.59-3 10.84 2.8 15.37l8.58 6.88c5.61 4.56 11 2.47 16.12-2.44a13.44 13.44 0 0 1 9.46-3.84c3.33 0 9.28 1.56 9.28 8.75C51 248.19 0 257.31 0 304.59v4C0 316 5.08 320 12.09 320z"/></svg></button>

      <button 
        class="
          wrap-code-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.is-wrap]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle code wrap"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z"/></svg></button>
      
      <button 
        class="
          copy-code-button
          tw-select-none
          tw-mx-2 
          tw-hidden
          group-[.is-open]:tw-block
          hover:tw-text-fgColor-link 
          print:!tw-hidden"
        title="Copy code">
          <span class="copy-icon tw-block"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z"/></svg></span>
          <span class="check-icon tw-hidden"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"/></svg></span>
      </button>
        
      <button 
        class="
          tw-select-none 
          tw-mx-2 
          tw-block 
          group-[.is-open]:tw-hidden 
          print:!tw-hidden" 
        disabled
        aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M328 256c0 39.8-32.2 72-72 72s-72-32.2-72-72 32.2-72 72-72 72 32.2 72 72zm104-72c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72zm-352 0c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72z"/></svg></button>
    </div>
  </div>
  <pre style="counter-reset: codeblock;" class="tw-block tw-m-0 tw-p-0"><code 
    id="codeblock-id-2" 
    class="
      chroma 
      !tw-block 
      tw-p-0
      tw-m-0
      tw-transition-[max-height] 
      tw-duration-500 
      tw-ease-in-out 
      group-[.is-closed]:!tw-max-h-0 
      group-[.is-wrap]:tw-text-wrap
      tw-overflow-y-hidden
      tw-overflow-x-auto
      tw-scrollbar-thin
      "><span class="line"><span class="cl">  <span class="o">&lt;?</span><span class="nx">php</span>
</span></span><span class="line"><span class="cl">  <span class="k">use</span> <span class="nx">PHPUnit\Framework\TestCase</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">class</span> <span class="nc">DataTest</span> <span class="k">extends</span> <span class="nx">TestCase</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="sd">/**
</span></span></span><span class="line"><span class="cl"><span class="sd">       * @dataProvider additionProvider
</span></span></span><span class="line"><span class="cl"><span class="sd">       */</span>
</span></span><span class="line"><span class="cl">      <span class="k">public</span> <span class="k">function</span> <span class="nf">testAdd</span><span class="p">(</span><span class="nv">$a</span><span class="p">,</span> <span class="nv">$b</span><span class="p">,</span> <span class="nv">$expected</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertSame</span><span class="p">(</span><span class="nv">$expected</span><span class="p">,</span> <span class="nv">$a</span> <span class="o">+</span> <span class="nv">$b</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="k">public</span> <span class="k">function</span> <span class="nf">additionProvider</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="k">return</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">              <span class="s1">&#39;adding zeros&#39;</span>  <span class="o">=&gt;</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">              <span class="s1">&#39;zero plus one&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">              <span class="s1">&#39;one plus zero&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">              <span class="s1">&#39;one plus one&#39;</span>  <span class="o">=&gt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">          <span class="p">];</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span></span></span></code></pre>
</div>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="depends" class="headerLink">
    <a href="#depends" class="header-mark"></a>@depends</h2><h3 id="테스트-코드간의-종속성-정의" class="headerLink">
    <a href="#%ed%85%8c%ec%8a%a4%ed%8a%b8-%ec%bd%94%eb%93%9c%ea%b0%84%ec%9d%98-%ec%a2%85%ec%86%8d%ec%84%b1-%ec%a0%95%ec%9d%98" class="header-mark"></a>테스트 코드간의 종속성 정의</h3><hr>
<p><code>@depends</code> 어노테이션 사용시 테스트 코드간의 종속성을 선언 할 수 있습니다.</p>
<p>실행순서를 정의하는것은 아니지만, <code>@depends</code>에 정의된 테스트의 리턴값의 레퍼런스를 전달합니다.</p>
<p>레퍼런스 전달이 아닌 값의 깊은 복사를 원할 경우  <code>@depends clone</code> 를 이용하고,
PHP에서 clone으로 불리는 얕은 복사를 원할 경우 <code>@depends shallowClone</code> 를 이용하면 됩니다.</p>
<h2 id="doesnotperformassertions" class="headerLink">
    <a href="#doesnotperformassertions" class="header-mark"></a>@doesNotPerformAssertions</h2><h3 id="값에-대한-assertion-없이-테스트-코드를-실행만-하고자-할때" class="headerLink">
    <a href="#%ea%b0%92%ec%97%90-%eb%8c%80%ed%95%9c-assertion-%ec%97%86%ec%9d%b4-%ed%85%8c%ec%8a%a4%ed%8a%b8-%ec%bd%94%eb%93%9c%eb%a5%bc-%ec%8b%a4%ed%96%89%eb%a7%8c-%ed%95%98%ea%b3%a0%ec%9e%90-%ed%95%a0%eb%95%8c" class="header-mark"></a>값에 대한 assertion 없이 테스트 코드를 실행만 하고자 할때</h3><hr>
<p>아래와 같이 테스트를 수행하지 않을 경우 <code>This test did not perform any assertions</code>와 같은 Warning이 발생됩니다.</p>
<p>해당 어노테이션을 사용하면 Risky 없이 <code>OK (1 test, 0 assertions)</code>로 성공 처리됩니다.</p>
<!-- raw HTML omitted -->
<pre><code>namespace Tests;

use PHPUnit\Framework\TestCase;

class MyTest extends TestCase
{
    public function testAddSlashes()
    {
        echo addslashes(&quot;name='1'&quot;);
    }
}

// 출력 결과

This test did not perform any assertions

/opt/project/tests/MyTest.php:9
name=\'1\'

OK, but incomplete, skipped, or risky tests!
Tests: 1, Assertions: 0, Risky: 1.

&lt;?php

namespace Tests;

use PHPUnit\Framework\TestCase;

class MyTest extends TestCase
{
    /**
     * @doesNotPerformAssertions
     */
    public function testAddSlashes()
    {
        echo addslashes(&quot;name='1'&quot;);
    }
}
```
</code></pre>
<!-- raw HTML omitted -->
<h2 id="group" class="headerLink">
    <a href="#group" class="header-mark"></a>@group</h2><h3 id="테스트-코드에-태그를-달고-싶을때" class="headerLink">
    <a href="#%ed%85%8c%ec%8a%a4%ed%8a%b8-%ec%bd%94%eb%93%9c%ec%97%90-%ed%83%9c%ea%b7%b8%eb%a5%bc-%eb%8b%ac%ea%b3%a0-%ec%8b%b6%ec%9d%84%eb%95%8c" class="header-mark"></a>테스트 코드에 태그를 달고 싶을때</h3><hr>
<p><code>@group</code>어노테이션을 이용하여, 테스트 코드에 1개 이상의 태그와 같이 묶음 필터를 추가할 수 있습니다.</p>
<p>XML 설정 파일 주입을 이용 하거나 CLI에서 실행시 <code>--group</code> 과 <code>--exclude-group</code> 를 이용해서 테스트 실행 대상 또는 제외그룹을 설정할 수 있습니다.</p>
<h2 id="large" class="headerLink">
    <a href="#large" class="header-mark"></a>@large</h2><h3 id="60초-이상-실행-되면-실패-처리-하고자-할-때" class="headerLink">
    <a href="#60%ec%b4%88-%ec%9d%b4%ec%83%81-%ec%8b%a4%ed%96%89-%eb%90%98%eb%a9%b4-%ec%8b%a4%ed%8c%a8-%ec%b2%98%eb%a6%ac-%ed%95%98%ea%b3%a0%ec%9e%90-%ed%95%a0-%eb%95%8c" class="header-mark"></a>60초 이상 실행 되면 실패 처리 하고자 할 때</h3><hr>
<p><code>@group large</code>의 별칭으로,<code>PHP_Invoker</code> 패키지가 설치되어 있고, strict mode가 실행되어 있으면 <strong>60초</strong> 이상 실행 될 경우 실패 처리됩니다.
해당 타임아웃에 관한 정보는 설정 정보 XML의 <code>timeoutForLargeTests</code>속성을 통해 설정 할 수 있습니다.</p>
<h2 id="medium" class="headerLink">
    <a href="#medium" class="header-mark"></a>@medium</h2><h3 id="10초-이상-실행-되면-실패-처리-하고자-할-때" class="headerLink">
    <a href="#10%ec%b4%88-%ec%9d%b4%ec%83%81-%ec%8b%a4%ed%96%89-%eb%90%98%eb%a9%b4-%ec%8b%a4%ed%8c%a8-%ec%b2%98%eb%a6%ac-%ed%95%98%ea%b3%a0%ec%9e%90-%ed%95%a0-%eb%95%8c" class="header-mark"></a>10초 이상 실행 되면 실패 처리 하고자 할 때</h3><hr>
<p><code>@group medium</code>의 별칭으로, <code>PHP_Invoker</code> 패키지가 설치되어 있고, strict mode가 실행되어 있으면 <strong>10초</strong> 이상 실행 될 경우 실패 처리됩니다.
해당 타임아웃에 관한 정보는 설정 정보 XML의 <code>timeoutForMediumTests</code>속성을 통해 설정 할 수 있습니다.</p>
<p>Medium 테스트는 <code>@large</code> 테스트에 의존적이여서는 안됩니다.</p>
<h2 id="preserveglobalstate" class="headerLink">
    <a href="#preserveglobalstate" class="header-mark"></a>@preserveGlobalState</h2><h3 id="테스트가-별도의-프로세스에서-실행될때-직렬화-오류-방지" class="headerLink">
    <a href="#%ed%85%8c%ec%8a%a4%ed%8a%b8%ea%b0%80-%eb%b3%84%eb%8f%84%ec%9d%98-%ed%94%84%eb%a1%9c%ec%84%b8%ec%8a%a4%ec%97%90%ec%84%9c-%ec%8b%a4%ed%96%89%eb%90%a0%eb%95%8c-%ec%a7%81%eb%a0%ac%ed%99%94-%ec%98%a4%eb%a5%98-%eb%b0%a9%ec%a7%80" class="header-mark"></a>테스트가 별도의 프로세스에서 실행될때 직렬화 오류 방지</h3><hr>
<p>테스트가 별도의 프로세스에서 실행될 때, PHPUnit은부모 프로세스에서 글로벌 state를 직렬화 한 값을 자식 프로세스에서 역직렬화하여 상태를 보존합니다.</p>
<p>부모 프로세스에서 직렬화 할 수 없는 글로벌 state가 있는 경우, 해당 옵션을 <code>disable</code> 처리하여 방지할 수 있습니다.</p>
<h2 id="requires" class="headerLink">
    <a href="#requires" class="header-mark"></a>@requires</h2><h3 id="특정-조건일때만-테스트를-수행하고자-할-때" class="headerLink">
    <a href="#%ed%8a%b9%ec%a0%95-%ec%a1%b0%ea%b1%b4%ec%9d%bc%eb%95%8c%eb%a7%8c-%ed%85%8c%ec%8a%a4%ed%8a%b8%eb%a5%bc-%ec%88%98%ed%96%89%ed%95%98%ea%b3%a0%ec%9e%90-%ed%95%a0-%eb%95%8c" class="header-mark"></a>특정 조건일때만 테스트를 수행하고자 할 때</h3><hr>
<p>PHP의 버전이나 extensions 설치여부 등 전제 조건을 체크하여 테스트를 건너뛸 수 있습니다.</p>
<p><code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code>, <code>=</code>, <code>==</code>, <code>!=</code>, <code>&lt;&gt;</code> 등의 비교 연산자를 사용하여 버전을 비교할 수 있습니다.</p>
<p>해당 어노테이션을 이용해 체크 가능한 항목은 아래와 같습니다.</p>
<ul>
<li>체크 가능한 조건
<ul>
<li>PHP
<ul>
<li>PHP 버전</li>
</ul>
</li>
<li>PHPUnit
<ul>
<li>PHP Unit 버전</li>
</ul>
</li>
<li>OS
<ul>
<li><code>PHP_OS</code> 상수와 정규식으로 매칭되는 값입니다.
ex) WIN32|WINNT</li>
</ul>
</li>
<li>OSFAMILY
<ul>
<li><code>PHP_OS_FAMILY</code> 상수와 매칭되는 값으로 PHP 7.2.0부터 사용가능합니다.
ex) Windows</li>
</ul>
</li>
<li>function
<ul>
<li>함수 존재 여부 → function_exists()</li>
</ul>
</li>
<li>extension
<ul>
<li>extension 설치 여부 및 버전 체크</li>
</ul>
</li>
</ul>
</li>
</ul>
<!-- raw HTML omitted -->
<pre><code>/**
 * @requires extension mysqli
 */
class DatabaseTest extends TestCase
{
    /**
     * @requires PHP &gt;= 5.3
     */
    public function testConnection()
    {
                // 해당 테스트는 mysqli 확장프로그램이 설치되어 있고, PHP 버전이 5.3 이상일때 실행됩니다.
    }

    // 추가적인 테스트를 작성하였을때에도 mysqli 확장프로그램이 필요합니다.
}
```
</code></pre>
<!-- raw HTML omitted -->
<h2 id="runtestsinseparateprocesses" class="headerLink">
    <a href="#runtestsinseparateprocesses" class="header-mark"></a>@runTestsInSeparateProcesses</h2><h3 id="테스트-클래스-내의-모든-테스트-메소드가-별도-php프로세스에서-테스트코드를-실행-하는것을-명시할-때" class="headerLink">
    <a href="#%ed%85%8c%ec%8a%a4%ed%8a%b8-%ed%81%b4%eb%9e%98%ec%8a%a4-%eb%82%b4%ec%9d%98-%eb%aa%a8%eb%93%a0-%ed%85%8c%ec%8a%a4%ed%8a%b8-%eb%a9%94%ec%86%8c%eb%93%9c%ea%b0%80-%eb%b3%84%eb%8f%84-php%ed%94%84%eb%a1%9c%ec%84%b8%ec%8a%a4%ec%97%90%ec%84%9c-%ed%85%8c%ec%8a%a4%ed%8a%b8%ec%bd%94%eb%93%9c%eb%a5%bc-%ec%8b%a4%ed%96%89-%ed%95%98%eb%8a%94%ea%b2%83%ec%9d%84-%eb%aa%85%ec%8b%9c%ed%95%a0-%eb%95%8c" class="header-mark"></a>테스트 클래스 내의 모든 테스트 메소드가 별도 PHP프로세스에서 테스트코드를 실행 하는것을 명시할 때</h3><hr>
<p>해당 테스트 클래스 내의 모든 테스트 메소드들이 별도의 PHP 프로세스에서 실행되어야 함을 표시 할 때 사용합니다.</p>
<p>PHPUnit은 직렬화를 통해 Global state를 유지하려 하기 때문에, 직렬화가 불가능한 부분은 <code>@preserveGlobalState</code>를 참조하세요.</p>
<h2 id="runinseparateprocess" class="headerLink">
    <a href="#runinseparateprocess" class="header-mark"></a>@runInSeparateProcess</h2><hr>
<p>해당 테스트 메소드가 별도의 PHP 프로세스에서 실행되어야 함을 표시 할 때 사용합니다.</p>
<p>PHPUnit은 직렬화를 통해 Global state를 유지하려 하기 때문에, 직렬화가 불가능한 부분은 <code>@preserveGlobalState</code>를 참조하세요.</p>
<h2 id="small" class="headerLink">
    <a href="#small" class="header-mark"></a>@small</h2><hr>
<p><code>@group small</code>의 별칭으로, <code>PHP_Invoker</code> 패키지가 설치되어 있고, strict mode가 실행되어 있으면 <strong>1초</strong> 이상 실행 될 경우 실패 처리됩니다.
해당 타임아웃에 관한 정보는 설정 정보 XML의 <code>timeoutForSmallTests</code>속성을 통해 설정 할 수 있습니다.</p>
<p>Medium 테스트는 <code>@large</code> 와 <code>@medium</code>로 마킹된 테스트에 의존적이여서는 안됩니다.</p>
<p>※ <strong>테스트의 실행 시간 제어를 하고자 할 때, <code>@small</code>, <code>@medium</code>, <code>@large</code> 와 같은 어노테이션을 명시적으로 사용해야합니다.</strong></p>
<h2 id="test" class="headerLink">
    <a href="#test" class="header-mark"></a>@test</h2><h3 id="테스트-메소드명을-test로-시작하고싶지-않을-때" class="headerLink">
    <a href="#%ed%85%8c%ec%8a%a4%ed%8a%b8-%eb%a9%94%ec%86%8c%eb%93%9c%eb%aa%85%ec%9d%84-test%eb%a1%9c-%ec%8b%9c%ec%9e%91%ed%95%98%ea%b3%a0%ec%8b%b6%ec%a7%80-%ec%95%8a%ec%9d%84-%eb%95%8c" class="header-mark"></a>테스트 메소드명을 test로 시작하고싶지 않을 때</h3><hr>
<p>테스트 메소드는 메소드명의 prefix로 test를 사용합니다.</p>
<p>테스트 메소드명의 prefix로 <code>test</code>를 사용하지 않는 대안으로, 주석에 <code>@test</code> 어노테이션을 사용하면 테스트 메소드라고 인식됩니다.</p>
<p><img class="tw-inline" loading="lazy" src=http://blog.hodory.dev/images/phpunit-annotations/eeb49a85-fdd7-40ee-99df-60579993b1a3.png     ></p>
<p><img class="tw-inline" loading="lazy" src=http://blog.hodory.dev/images/phpunit-annotations/cbdae160-7e46-49e4-9d93-0a3584597625.png     ></p>
<h2 id="testdox" class="headerLink">
    <a href="#testdox" class="header-mark"></a>@testdox</h2><h3 id="testdox-옵션으로-생성되는-문서의-설명을-대체하려-할-때" class="headerLink">
    <a href="#testdox-%ec%98%b5%ec%85%98%ec%9c%bc%eb%a1%9c-%ec%83%9d%ec%84%b1%eb%90%98%eb%8a%94-%eb%ac%b8%ec%84%9c%ec%9d%98-%ec%84%a4%eb%aa%85%ec%9d%84-%eb%8c%80%ec%b2%b4%ed%95%98%eb%a0%a4-%ed%95%a0-%eb%95%8c" class="header-mark"></a>testdox 옵션으로 생성되는 문서의 설명을 대체하려 할 때</h3><hr>
<p><code>--testdox</code>를 옵션으로 주었을때, 메소드의 이름으로부터 만들어진 설명을 오버라이딩 할 수 있습니다.</p>
<p>클래스 또는 메소드의 설명을 더 명확히 만들어 agile document를 만들 수 있습니다.</p>
<p><strong>주의할 점으로는 PHPUnit v7.0까지는 어노테이션 파싱 오류로, @test로 인식되어 동작합니다.</strong></p>
<h2 id="testwith" class="headerLink">
    <a href="#testwith" class="header-mark"></a>@testWith</h2><h3 id="주석을-이용해-파라미터를-주입하고-싶을때" class="headerLink">
    <a href="#%ec%a3%bc%ec%84%9d%ec%9d%84-%ec%9d%b4%ec%9a%a9%ed%95%b4-%ed%8c%8c%eb%9d%bc%eb%af%b8%ed%84%b0%eb%a5%bc-%ec%a3%bc%ec%9e%85%ed%95%98%ea%b3%a0-%ec%8b%b6%ec%9d%84%eb%95%8c" class="header-mark"></a>주석을 이용해 파라미터를 주입하고 싶을때</h3><hr>
<p><code>@dataProvider</code>는 호출될 메소드를 필요로 하지만, 주석만을 이용해 테스트하고자 할 때에는
<code>@testWith</code>를 사용할 수 있습니다.</p>
<p>JSON 포맷은 연관배열로 주입됩니다.</p>
<p><strong>주의 할 점은 여러개의 dataset을 정의할 때에는 라인당 하나씩 지정해야합니다.</strong></p>
<p>아래의 두개의 코드는 동일하게 동작합니다.</p>
<!-- raw HTML omitted -->
<pre><code>/**
 * @param string    $input
 * @param int       $expectedLength
 *
 * @testWith        [&quot;test&quot;, 4]
 *                  [&quot;longer-string&quot;, 13]
 */
public function testStringLength(string $input, int $expectedLength)
{
    $this-&gt;assertSame($expectedLength, strlen($input));
}

/**
 * @param string    $input
 * @param int       $expectedLength
 *
 * @dataProvider    additionProvider
 */
public function testStringLengthWithDataProvider(string $input, int $expectedLength)
{
    $this-&gt;assertSame($expectedLength, strlen($input));
}

public function additionProvider()
{
        return [
                [&quot;test&quot;, 4],
                [&quot;longer-string&quot;, 13]
        ];
}

/**
 * @param array     $array
 * @param array     $keys
 *
 * @testWith        [{&quot;day&quot;: &quot;monday&quot;, &quot;conditions&quot;: &quot;sunny&quot;}, [&quot;day&quot;, &quot;conditions&quot;]]
 */
public function testArrayKeys($array, $keys)
{
    $this-&gt;assertSame($keys, array_keys($array));
}

/**
 * @param array     $array
 * @param array     $keys
 *
 * @dataProvider    additionProvider
 */
public function testArrayKeysWithDataProvider($array, $keys)
{
    $this-&gt;assertSame($keys, array_keys($array));
}

public function additionProvider()
{
        return [
                [[&quot;day&quot; =&gt; &quot;monday&quot;, &quot;conditions&quot; =&gt; &quot;sunny&quot;], [&quot;day&quot;, &quot;conditions&quot;]]
        ];
}
```
</code></pre>
<!-- raw HTML omitted -->
<h2 id="ticket" class="headerLink">
    <a href="#ticket" class="header-mark"></a>@ticket</h2><h3 id="ticket-idjira-이슈-코드와-같은로-테스트를-필터링-할-때" class="headerLink">
    <a href="#ticket-idjira-%ec%9d%b4%ec%8a%88-%ec%bd%94%eb%93%9c%ec%99%80-%ea%b0%99%ec%9d%80%eb%a1%9c-%ed%85%8c%ec%8a%a4%ed%8a%b8%eb%a5%bc-%ed%95%84%ed%84%b0%eb%a7%81-%ed%95%a0-%eb%95%8c" class="header-mark"></a>Ticket ID(JIRA 이슈 코드와 같은)로 테스트를 필터링 할 때</h3><hr>
<p><code>@group</code> 어노테이션의 별칭. ticket ID를 이용하여 테스트를 필터링 할 수 있도록 하여줍니다.</p>
<h2 id="uses" class="headerLink">
    <a href="#uses" class="header-mark"></a>@uses</h2><hr>
<p>테스트에 의해 실행될 코드를 지정합니다.</p>
<p>좋은 예제는 아래와 같이 유닛 테스트 코드에 필요한 Object 값 입니다.</p>
<!-- raw HTML omitted -->
<p>해당 어노테이션에는 정규화 된 클래스명을 사용해야하기때문에,
모호하지 않도록 클래스명 맨 앞에 <code>\</code> 로 시작하는것을 추천합니다.</p>]]></description></item><item><title>［PHP］Monolog와 함께 로그를 시작하자 - 1</title><link>http://blog.hodory.dev/2019/05/10/php-logging-with-monolog-1/</link><pubDate>Fri, 10 May 2019 00:27:05 +0000</pubDate><author><name>hodory</name></author><guid>http://blog.hodory.dev/2019/05/10/php-logging-with-monolog-1/</guid><description><![CDATA[<h3 id="php에서-로그-남기기" class="headerLink">
    <a href="#php%ec%97%90%ec%84%9c-%eb%a1%9c%ea%b7%b8-%eb%82%a8%ea%b8%b0%ea%b8%b0" class="header-mark"></a>PHP에서 로그 남기기</h3><p>PHP에서는 주로 JS에서 <code>console.log | console.debug</code> 와 유사하게 <!-- raw HTML omitted -->
<code>var_dump | print_r | echo | sys_log | error_log</code> 등 다양한 방식으로 로그를 남기고 있습니다.</p>
<h3 id="monolog란" class="headerLink">
    <a href="#monolog%eb%9e%80" class="header-mark"></a>Monolog란?</h3><p><a href="https://hodory.github.io/2018/04/18/what-is-psr/#PSR-3-Logger-Interface" target="_blank" rel="noopener noreferrer">PSR-3</a>을 준수하고 있는 로깅 프레임워크로,<!-- raw HTML omitted -->
거의 대부분의 로깅 플랫폼과 연결할 수 있는 핸들러(Slack, ElasticSearch, Mail, NewRelic 등)를 제공하고 있습니다.</p>
<p><a href="http://tools.ietf.org/html/rfc5424" target="_blank" rel="noopener noreferrer">RFC 5424</a>(Syslog Protocol이라고 하는데 더 공부해봐야할 것 같습니다.)에 정의된 로그 레벨을 모두 지원하고 있습니다.</p>
<ul>
<li>DEBUG(100)</li>
<li>INFO(200)</li>
<li>NOTICE(250)</li>
<li>WARNING(300)</li>
<li>ERROR(400)</li>
<li>CRITICAL(500)</li>
<li>ALERT(550)</li>
<li>EMERGENCY(600)</li>
</ul>
<h3 id="코어-컨셉httpsgithubcomseldaekmonologblobmasterdoc01-usagemdcore-concepts" class="headerLink">
    <a href="#%ec%bd%94%ec%96%b4-%ec%bb%a8%ec%85%89httpsgithubcomseldaekmonologblobmasterdoc01-usagemdcore-concepts" class="header-mark"></a><a href="https://github.com/Seldaek/monolog/blob/master/doc/01-usage.md#core-concepts" target="_blank" rel="noopener noreferrer">코어 컨셉</a></h3><p>간단하게 Logger Instance에 Record를 추가하면,<!-- raw HTML omitted -->
해당 인스턴스에 추가 해두었던 핸들러에 이벤트를 전파하는 것으로 보입니다.(한개의 로그를 여러곳에 저장할 수 있는 이점을 가지고 있습니다.)</p>
<h3 id="설치-방법" class="headerLink">
    <a href="#%ec%84%a4%ec%b9%98-%eb%b0%a9%eb%b2%95" class="header-mark"></a>설치 방법</h3><p>PHP Composer로 관리할 수 있는 라이브러리이므로 Composer를 이용하여 설치합니다.</p>
<div class="code-block highlight is-closed show-line-numbers  tw-group tw-my-2">
  <div class="
    code-block-title 
    
    tw-flex 
    tw-flex-row 
    tw-justify-between 
    tw-w-full tw-bg-bgColor-secondary
    ">      
    <button 
      class="
        tw-select-none 
        tw-mx-2 
        tw-block
        group-[.is-open]:tw-rotate-90
        tw-transition-[transform] 
        tw-duration-500 
        tw-ease-in-out
        print:!tw-hidden"
      disabled
      aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z"/></svg></button>

    <div class="code-block-title-bar tw-w-full">
      <p class="tw-select-none !tw-my-1">perl</p>
    </div>
    <div class="tw-flex">
      <button 
        class="
          line-number-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.show-line-numbers]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle line numbers"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M61.77 401l17.5-20.15a19.92 19.92 0 0 0 5.07-14.19v-3.31C84.34 356 80.5 352 73 352H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8h22.83a157.41 157.41 0 0 0-11 12.31l-5.61 7c-4 5.07-5.25 10.13-2.8 14.88l1.05 1.93c3 5.76 6.29 7.88 12.25 7.88h4.73c10.33 0 15.94 2.44 15.94 9.09 0 4.72-4.2 8.22-14.36 8.22a41.54 41.54 0 0 1-15.47-3.12c-6.49-3.88-11.74-3.5-15.6 3.12l-5.59 9.31c-3.72 6.13-3.19 11.72 2.63 15.94 7.71 4.69 20.38 9.44 37 9.44 34.16 0 48.5-22.75 48.5-44.12-.03-14.38-9.12-29.76-28.73-34.88zM496 224H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-160H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16V80a16 16 0 0 0-16-16zm0 320H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM16 160h64a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H64V40a8 8 0 0 0-8-8H32a8 8 0 0 0-7.14 4.42l-8 16A8 8 0 0 0 24 64h8v64H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8zm-3.91 160H80a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H41.32c3.29-10.29 48.34-18.68 48.34-56.44 0-29.06-25-39.56-44.47-39.56-21.36 0-33.8 10-40.46 18.75-4.37 5.59-3 10.84 2.8 15.37l8.58 6.88c5.61 4.56 11 2.47 16.12-2.44a13.44 13.44 0 0 1 9.46-3.84c3.33 0 9.28 1.56 9.28 8.75C51 248.19 0 257.31 0 304.59v4C0 316 5.08 320 12.09 320z"/></svg></button>

      <button 
        class="
          wrap-code-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.is-wrap]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle code wrap"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z"/></svg></button>
      
      <button 
        class="
          copy-code-button
          tw-select-none
          tw-mx-2 
          tw-hidden
          group-[.is-open]:tw-block
          hover:tw-text-fgColor-link 
          print:!tw-hidden"
        title="Copy code">
          <span class="copy-icon tw-block"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z"/></svg></span>
          <span class="check-icon tw-hidden"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"/></svg></span>
      </button>
        
      <button 
        class="
          tw-select-none 
          tw-mx-2 
          tw-block 
          group-[.is-open]:tw-hidden 
          print:!tw-hidden" 
        disabled
        aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M328 256c0 39.8-32.2 72-72 72s-72-32.2-72-72 32.2-72 72-72 72 32.2 72 72zm104-72c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72zm-352 0c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72z"/></svg></button>
    </div>
  </div>
  <pre style="counter-reset: codeblock;" class="tw-block tw-m-0 tw-p-0"><code 
    id="codeblock-id-1" 
    class="
      chroma 
      !tw-block 
      tw-p-0
      tw-m-0
      tw-transition-[max-height] 
      tw-duration-500 
      tw-ease-in-out 
      group-[.is-closed]:!tw-max-h-0 
      group-[.is-wrap]:tw-text-wrap
      tw-overflow-y-hidden
      tw-overflow-x-auto
      tw-scrollbar-thin
      "><span class="line"><span class="cl"><span class="n">composer</span> <span class="k">require</span> <span class="nn">monolog</span><span class="o">/</span><span class="n">monolog</span></span></span></code></pre>
</div>
<h3 id="사용방법" class="headerLink">
    <a href="#%ec%82%ac%ec%9a%a9%eb%b0%a9%eb%b2%95" class="header-mark"></a>사용방법</h3><p>우선적으로 use를 사용하여 사용할 Namespace를 추가합니다.</p>
<div class="code-block highlight is-closed show-line-numbers  tw-group tw-my-2">
  <div class="
    code-block-title 
    
    tw-flex 
    tw-flex-row 
    tw-justify-between 
    tw-w-full tw-bg-bgColor-secondary
    ">      
    <button 
      class="
        tw-select-none 
        tw-mx-2 
        tw-block
        group-[.is-open]:tw-rotate-90
        tw-transition-[transform] 
        tw-duration-500 
        tw-ease-in-out
        print:!tw-hidden"
      disabled
      aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z"/></svg></button>

    <div class="code-block-title-bar tw-w-full">
      <p class="tw-select-none !tw-my-1">php</p>
    </div>
    <div class="tw-flex">
      <button 
        class="
          line-number-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.show-line-numbers]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle line numbers"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M61.77 401l17.5-20.15a19.92 19.92 0 0 0 5.07-14.19v-3.31C84.34 356 80.5 352 73 352H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8h22.83a157.41 157.41 0 0 0-11 12.31l-5.61 7c-4 5.07-5.25 10.13-2.8 14.88l1.05 1.93c3 5.76 6.29 7.88 12.25 7.88h4.73c10.33 0 15.94 2.44 15.94 9.09 0 4.72-4.2 8.22-14.36 8.22a41.54 41.54 0 0 1-15.47-3.12c-6.49-3.88-11.74-3.5-15.6 3.12l-5.59 9.31c-3.72 6.13-3.19 11.72 2.63 15.94 7.71 4.69 20.38 9.44 37 9.44 34.16 0 48.5-22.75 48.5-44.12-.03-14.38-9.12-29.76-28.73-34.88zM496 224H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-160H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16V80a16 16 0 0 0-16-16zm0 320H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM16 160h64a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H64V40a8 8 0 0 0-8-8H32a8 8 0 0 0-7.14 4.42l-8 16A8 8 0 0 0 24 64h8v64H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8zm-3.91 160H80a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H41.32c3.29-10.29 48.34-18.68 48.34-56.44 0-29.06-25-39.56-44.47-39.56-21.36 0-33.8 10-40.46 18.75-4.37 5.59-3 10.84 2.8 15.37l8.58 6.88c5.61 4.56 11 2.47 16.12-2.44a13.44 13.44 0 0 1 9.46-3.84c3.33 0 9.28 1.56 9.28 8.75C51 248.19 0 257.31 0 304.59v4C0 316 5.08 320 12.09 320z"/></svg></button>

      <button 
        class="
          wrap-code-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.is-wrap]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle code wrap"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z"/></svg></button>
      
      <button 
        class="
          copy-code-button
          tw-select-none
          tw-mx-2 
          tw-hidden
          group-[.is-open]:tw-block
          hover:tw-text-fgColor-link 
          print:!tw-hidden"
        title="Copy code">
          <span class="copy-icon tw-block"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z"/></svg></span>
          <span class="check-icon tw-hidden"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"/></svg></span>
      </button>
        
      <button 
        class="
          tw-select-none 
          tw-mx-2 
          tw-block 
          group-[.is-open]:tw-hidden 
          print:!tw-hidden" 
        disabled
        aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M328 256c0 39.8-32.2 72-72 72s-72-32.2-72-72 32.2-72 72-72 72 32.2 72 72zm104-72c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72zm-352 0c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72z"/></svg></button>
    </div>
  </div>
  <pre style="counter-reset: codeblock;" class="tw-block tw-m-0 tw-p-0"><code 
    id="codeblock-id-2" 
    class="
      chroma 
      !tw-block 
      tw-p-0
      tw-m-0
      tw-transition-[max-height] 
      tw-duration-500 
      tw-ease-in-out 
      group-[.is-closed]:!tw-max-h-0 
      group-[.is-wrap]:tw-text-wrap
      tw-overflow-y-hidden
      tw-overflow-x-auto
      tw-scrollbar-thin
      "><span class="line"><span class="cl"><span class="o">&lt;?</span><span class="nx">php</span>
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nx">Monolog\Logger</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nx">Monolog\Handler\StreamHandler</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nx">Monolog\Handler\FirePHPHandler</span><span class="p">;</span></span></span></code></pre>
</div>
<p>Logging Channel의 이름을 설정하여 객체를 생성합니다.</p>
<div class="code-block highlight is-closed show-line-numbers  tw-group tw-my-2">
  <div class="
    code-block-title 
    
    tw-flex 
    tw-flex-row 
    tw-justify-between 
    tw-w-full tw-bg-bgColor-secondary
    ">      
    <button 
      class="
        tw-select-none 
        tw-mx-2 
        tw-block
        group-[.is-open]:tw-rotate-90
        tw-transition-[transform] 
        tw-duration-500 
        tw-ease-in-out
        print:!tw-hidden"
      disabled
      aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z"/></svg></button>

    <div class="code-block-title-bar tw-w-full">
      <p class="tw-select-none !tw-my-1">text</p>
    </div>
    <div class="tw-flex">
      <button 
        class="
          line-number-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.show-line-numbers]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle line numbers"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M61.77 401l17.5-20.15a19.92 19.92 0 0 0 5.07-14.19v-3.31C84.34 356 80.5 352 73 352H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8h22.83a157.41 157.41 0 0 0-11 12.31l-5.61 7c-4 5.07-5.25 10.13-2.8 14.88l1.05 1.93c3 5.76 6.29 7.88 12.25 7.88h4.73c10.33 0 15.94 2.44 15.94 9.09 0 4.72-4.2 8.22-14.36 8.22a41.54 41.54 0 0 1-15.47-3.12c-6.49-3.88-11.74-3.5-15.6 3.12l-5.59 9.31c-3.72 6.13-3.19 11.72 2.63 15.94 7.71 4.69 20.38 9.44 37 9.44 34.16 0 48.5-22.75 48.5-44.12-.03-14.38-9.12-29.76-28.73-34.88zM496 224H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-160H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16V80a16 16 0 0 0-16-16zm0 320H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM16 160h64a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H64V40a8 8 0 0 0-8-8H32a8 8 0 0 0-7.14 4.42l-8 16A8 8 0 0 0 24 64h8v64H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8zm-3.91 160H80a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H41.32c3.29-10.29 48.34-18.68 48.34-56.44 0-29.06-25-39.56-44.47-39.56-21.36 0-33.8 10-40.46 18.75-4.37 5.59-3 10.84 2.8 15.37l8.58 6.88c5.61 4.56 11 2.47 16.12-2.44a13.44 13.44 0 0 1 9.46-3.84c3.33 0 9.28 1.56 9.28 8.75C51 248.19 0 257.31 0 304.59v4C0 316 5.08 320 12.09 320z"/></svg></button>

      <button 
        class="
          wrap-code-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.is-wrap]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle code wrap"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z"/></svg></button>
      
      <button 
        class="
          copy-code-button
          tw-select-none
          tw-mx-2 
          tw-hidden
          group-[.is-open]:tw-block
          hover:tw-text-fgColor-link 
          print:!tw-hidden"
        title="Copy code">
          <span class="copy-icon tw-block"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z"/></svg></span>
          <span class="check-icon tw-hidden"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"/></svg></span>
      </button>
        
      <button 
        class="
          tw-select-none 
          tw-mx-2 
          tw-block 
          group-[.is-open]:tw-hidden 
          print:!tw-hidden" 
        disabled
        aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M328 256c0 39.8-32.2 72-72 72s-72-32.2-72-72 32.2-72 72-72 72 32.2 72 72zm104-72c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72zm-352 0c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72z"/></svg></button>
    </div>
  </div>
  <pre style="counter-reset: codeblock;" class="tw-block tw-m-0 tw-p-0"><code 
    id="codeblock-id-3" 
    class="
      chroma 
      !tw-block 
      tw-p-0
      tw-m-0
      tw-transition-[max-height] 
      tw-duration-500 
      tw-ease-in-out 
      group-[.is-closed]:!tw-max-h-0 
      group-[.is-wrap]:tw-text-wrap
      tw-overflow-y-hidden
      tw-overflow-x-auto
      tw-scrollbar-thin
      "><pre tabindex="0"><code>// Create the logger
$logger = new Logger(&#39;Application&#39;);</code></pre></code></pre>
</div>
<p>로그를 전파할 핸들러를 추가합니다.</p>
<ul>
<li>php:stderr 또는 원격이나 로컬 파일 기타에 사용할 <code>Stream Handler</code>를 설정합니다.</li>
<li>Slack Webhook Url으로 보내기 위해 <code>Slack WebHook Handler</code>를 설정합니다.</li>
</ul>
<div class="code-block highlight is-closed show-line-numbers  tw-group tw-my-2">
  <div class="
    code-block-title 
    
    tw-flex 
    tw-flex-row 
    tw-justify-between 
    tw-w-full tw-bg-bgColor-secondary
    ">      
    <button 
      class="
        tw-select-none 
        tw-mx-2 
        tw-block
        group-[.is-open]:tw-rotate-90
        tw-transition-[transform] 
        tw-duration-500 
        tw-ease-in-out
        print:!tw-hidden"
      disabled
      aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z"/></svg></button>

    <div class="code-block-title-bar tw-w-full">
      <p class="tw-select-none !tw-my-1">php</p>
    </div>
    <div class="tw-flex">
      <button 
        class="
          line-number-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.show-line-numbers]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle line numbers"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M61.77 401l17.5-20.15a19.92 19.92 0 0 0 5.07-14.19v-3.31C84.34 356 80.5 352 73 352H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8h22.83a157.41 157.41 0 0 0-11 12.31l-5.61 7c-4 5.07-5.25 10.13-2.8 14.88l1.05 1.93c3 5.76 6.29 7.88 12.25 7.88h4.73c10.33 0 15.94 2.44 15.94 9.09 0 4.72-4.2 8.22-14.36 8.22a41.54 41.54 0 0 1-15.47-3.12c-6.49-3.88-11.74-3.5-15.6 3.12l-5.59 9.31c-3.72 6.13-3.19 11.72 2.63 15.94 7.71 4.69 20.38 9.44 37 9.44 34.16 0 48.5-22.75 48.5-44.12-.03-14.38-9.12-29.76-28.73-34.88zM496 224H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-160H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16V80a16 16 0 0 0-16-16zm0 320H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM16 160h64a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H64V40a8 8 0 0 0-8-8H32a8 8 0 0 0-7.14 4.42l-8 16A8 8 0 0 0 24 64h8v64H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8zm-3.91 160H80a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H41.32c3.29-10.29 48.34-18.68 48.34-56.44 0-29.06-25-39.56-44.47-39.56-21.36 0-33.8 10-40.46 18.75-4.37 5.59-3 10.84 2.8 15.37l8.58 6.88c5.61 4.56 11 2.47 16.12-2.44a13.44 13.44 0 0 1 9.46-3.84c3.33 0 9.28 1.56 9.28 8.75C51 248.19 0 257.31 0 304.59v4C0 316 5.08 320 12.09 320z"/></svg></button>

      <button 
        class="
          wrap-code-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.is-wrap]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle code wrap"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z"/></svg></button>
      
      <button 
        class="
          copy-code-button
          tw-select-none
          tw-mx-2 
          tw-hidden
          group-[.is-open]:tw-block
          hover:tw-text-fgColor-link 
          print:!tw-hidden"
        title="Copy code">
          <span class="copy-icon tw-block"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z"/></svg></span>
          <span class="check-icon tw-hidden"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"/></svg></span>
      </button>
        
      <button 
        class="
          tw-select-none 
          tw-mx-2 
          tw-block 
          group-[.is-open]:tw-hidden 
          print:!tw-hidden" 
        disabled
        aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M328 256c0 39.8-32.2 72-72 72s-72-32.2-72-72 32.2-72 72-72 72 32.2 72 72zm104-72c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72zm-352 0c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72z"/></svg></button>
    </div>
  </div>
  <pre style="counter-reset: codeblock;" class="tw-block tw-m-0 tw-p-0"><code 
    id="codeblock-id-4" 
    class="
      chroma 
      !tw-block 
      tw-p-0
      tw-m-0
      tw-transition-[max-height] 
      tw-duration-500 
      tw-ease-in-out 
      group-[.is-closed]:!tw-max-h-0 
      group-[.is-wrap]:tw-text-wrap
      tw-overflow-y-hidden
      tw-overflow-x-auto
      tw-scrollbar-thin
      "><span class="line"><span class="cl"><span class="c1">// Now add some handlers
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nv">$logger</span><span class="o">-&gt;</span><span class="na">pushHandler</span><span class="p">(</span><span class="k">new</span> <span class="nx">StreamHandler</span><span class="p">(</span><span class="no">__DIR__</span> <span class="o">.</span> <span class="s1">&#39;/app.log&#39;</span><span class="p">,</span> <span class="nx">Logger</span><span class="o">::</span><span class="na">DEBUG</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="nv">$logger</span><span class="o">-&gt;</span><span class="na">pushHandler</span><span class="p">(</span><span class="k">new</span> <span class="nx">SlackWebhookHandler</span><span class="p">({{</span><span class="nx">WEBHOOK_URL</span><span class="p">}},</span> <span class="p">{{</span><span class="nx">CHANNEL</span><span class="p">}},</span> <span class="p">{{</span><span class="nx">USERNAME</span><span class="p">}},</span> <span class="k">false</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">false</span><span class="p">,</span> <span class="k">false</span><span class="p">,</span> <span class="nx">Logger</span><span class="o">::</span><span class="na">INFO</span><span class="p">));</span></span></span></code></pre>
</div>
<p>아래와 같은 함수를 호출하여 로그를 쌓을 수 있습니다.</p>
<div class="code-block highlight is-closed show-line-numbers  tw-group tw-my-2">
  <div class="
    code-block-title 
    
    tw-flex 
    tw-flex-row 
    tw-justify-between 
    tw-w-full tw-bg-bgColor-secondary
    ">      
    <button 
      class="
        tw-select-none 
        tw-mx-2 
        tw-block
        group-[.is-open]:tw-rotate-90
        tw-transition-[transform] 
        tw-duration-500 
        tw-ease-in-out
        print:!tw-hidden"
      disabled
      aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z"/></svg></button>

    <div class="code-block-title-bar tw-w-full">
      <p class="tw-select-none !tw-my-1">php</p>
    </div>
    <div class="tw-flex">
      <button 
        class="
          line-number-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.show-line-numbers]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle line numbers"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M61.77 401l17.5-20.15a19.92 19.92 0 0 0 5.07-14.19v-3.31C84.34 356 80.5 352 73 352H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8h22.83a157.41 157.41 0 0 0-11 12.31l-5.61 7c-4 5.07-5.25 10.13-2.8 14.88l1.05 1.93c3 5.76 6.29 7.88 12.25 7.88h4.73c10.33 0 15.94 2.44 15.94 9.09 0 4.72-4.2 8.22-14.36 8.22a41.54 41.54 0 0 1-15.47-3.12c-6.49-3.88-11.74-3.5-15.6 3.12l-5.59 9.31c-3.72 6.13-3.19 11.72 2.63 15.94 7.71 4.69 20.38 9.44 37 9.44 34.16 0 48.5-22.75 48.5-44.12-.03-14.38-9.12-29.76-28.73-34.88zM496 224H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-160H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16V80a16 16 0 0 0-16-16zm0 320H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM16 160h64a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H64V40a8 8 0 0 0-8-8H32a8 8 0 0 0-7.14 4.42l-8 16A8 8 0 0 0 24 64h8v64H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8zm-3.91 160H80a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H41.32c3.29-10.29 48.34-18.68 48.34-56.44 0-29.06-25-39.56-44.47-39.56-21.36 0-33.8 10-40.46 18.75-4.37 5.59-3 10.84 2.8 15.37l8.58 6.88c5.61 4.56 11 2.47 16.12-2.44a13.44 13.44 0 0 1 9.46-3.84c3.33 0 9.28 1.56 9.28 8.75C51 248.19 0 257.31 0 304.59v4C0 316 5.08 320 12.09 320z"/></svg></button>

      <button 
        class="
          wrap-code-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.is-wrap]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle code wrap"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z"/></svg></button>
      
      <button 
        class="
          copy-code-button
          tw-select-none
          tw-mx-2 
          tw-hidden
          group-[.is-open]:tw-block
          hover:tw-text-fgColor-link 
          print:!tw-hidden"
        title="Copy code">
          <span class="copy-icon tw-block"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z"/></svg></span>
          <span class="check-icon tw-hidden"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"/></svg></span>
      </button>
        
      <button 
        class="
          tw-select-none 
          tw-mx-2 
          tw-block 
          group-[.is-open]:tw-hidden 
          print:!tw-hidden" 
        disabled
        aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M328 256c0 39.8-32.2 72-72 72s-72-32.2-72-72 32.2-72 72-72 72 32.2 72 72zm104-72c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72zm-352 0c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72z"/></svg></button>
    </div>
  </div>
  <pre style="counter-reset: codeblock;" class="tw-block tw-m-0 tw-p-0"><code 
    id="codeblock-id-5" 
    class="
      chroma 
      !tw-block 
      tw-p-0
      tw-m-0
      tw-transition-[max-height] 
      tw-duration-500 
      tw-ease-in-out 
      group-[.is-closed]:!tw-max-h-0 
      group-[.is-wrap]:tw-text-wrap
      tw-overflow-y-hidden
      tw-overflow-x-auto
      tw-scrollbar-thin
      "><span class="line"><span class="cl"><span class="c1">// You can now use your logger
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nv">$logger</span><span class="o">-&gt;</span><span class="na">info</span><span class="p">(</span><span class="s1">&#39;Welcome To Monolog&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="sd">/*********
</span></span></span><span class="line"><span class="cl"><span class="sd"> * app.log
</span></span></span><span class="line"><span class="cl"><span class="sd"> *********/</span>
</span></span><span class="line"><span class="cl"><span class="c1">// [2019-05-10 17:03:10] Application.INFO: Welcome To Monolog [] []
</span></span></span></code></pre>
</div>
<p>Legacy한 프로젝트에서는 주로 컨테이너 객체라는 개념이 없는 경우가 많은데,<!-- raw HTML omitted -->
프로젝트 내부에서도 글로벌 변수에 담아서 Logger 객체를 사용해야하나 고민하였습니다.
문서를 확인하다보니 이를 위한 <code>Monolog\Registry</code>라는 유틸 클래스가 있었고,
이와 같이 사용할 수 있습니다.</p>
<div class="code-block highlight is-closed show-line-numbers  tw-group tw-my-2">
  <div class="
    code-block-title 
    
    tw-flex 
    tw-flex-row 
    tw-justify-between 
    tw-w-full tw-bg-bgColor-secondary
    ">      
    <button 
      class="
        tw-select-none 
        tw-mx-2 
        tw-block
        group-[.is-open]:tw-rotate-90
        tw-transition-[transform] 
        tw-duration-500 
        tw-ease-in-out
        print:!tw-hidden"
      disabled
      aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z"/></svg></button>

    <div class="code-block-title-bar tw-w-full">
      <p class="tw-select-none !tw-my-1">php</p>
    </div>
    <div class="tw-flex">
      <button 
        class="
          line-number-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.show-line-numbers]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle line numbers"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M61.77 401l17.5-20.15a19.92 19.92 0 0 0 5.07-14.19v-3.31C84.34 356 80.5 352 73 352H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8h22.83a157.41 157.41 0 0 0-11 12.31l-5.61 7c-4 5.07-5.25 10.13-2.8 14.88l1.05 1.93c3 5.76 6.29 7.88 12.25 7.88h4.73c10.33 0 15.94 2.44 15.94 9.09 0 4.72-4.2 8.22-14.36 8.22a41.54 41.54 0 0 1-15.47-3.12c-6.49-3.88-11.74-3.5-15.6 3.12l-5.59 9.31c-3.72 6.13-3.19 11.72 2.63 15.94 7.71 4.69 20.38 9.44 37 9.44 34.16 0 48.5-22.75 48.5-44.12-.03-14.38-9.12-29.76-28.73-34.88zM496 224H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-160H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16V80a16 16 0 0 0-16-16zm0 320H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM16 160h64a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H64V40a8 8 0 0 0-8-8H32a8 8 0 0 0-7.14 4.42l-8 16A8 8 0 0 0 24 64h8v64H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8zm-3.91 160H80a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H41.32c3.29-10.29 48.34-18.68 48.34-56.44 0-29.06-25-39.56-44.47-39.56-21.36 0-33.8 10-40.46 18.75-4.37 5.59-3 10.84 2.8 15.37l8.58 6.88c5.61 4.56 11 2.47 16.12-2.44a13.44 13.44 0 0 1 9.46-3.84c3.33 0 9.28 1.56 9.28 8.75C51 248.19 0 257.31 0 304.59v4C0 316 5.08 320 12.09 320z"/></svg></button>

      <button 
        class="
          wrap-code-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.is-wrap]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle code wrap"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z"/></svg></button>
      
      <button 
        class="
          copy-code-button
          tw-select-none
          tw-mx-2 
          tw-hidden
          group-[.is-open]:tw-block
          hover:tw-text-fgColor-link 
          print:!tw-hidden"
        title="Copy code">
          <span class="copy-icon tw-block"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z"/></svg></span>
          <span class="check-icon tw-hidden"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"/></svg></span>
      </button>
        
      <button 
        class="
          tw-select-none 
          tw-mx-2 
          tw-block 
          group-[.is-open]:tw-hidden 
          print:!tw-hidden" 
        disabled
        aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M328 256c0 39.8-32.2 72-72 72s-72-32.2-72-72 32.2-72 72-72 72 32.2 72 72zm104-72c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72zm-352 0c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72z"/></svg></button>
    </div>
  </div>
  <pre style="counter-reset: codeblock;" class="tw-block tw-m-0 tw-p-0"><code 
    id="codeblock-id-6" 
    class="
      chroma 
      !tw-block 
      tw-p-0
      tw-m-0
      tw-transition-[max-height] 
      tw-duration-500 
      tw-ease-in-out 
      group-[.is-closed]:!tw-max-h-0 
      group-[.is-wrap]:tw-text-wrap
      tw-overflow-y-hidden
      tw-overflow-x-auto
      tw-scrollbar-thin
      "><span class="line"><span class="cl"><span class="sd">/****************
</span></span></span><span class="line"><span class="cl"><span class="sd"> * bootstrap.php
</span></span></span><span class="line"><span class="cl"><span class="sd"> ****************/</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="o">&lt;?</span><span class="nx">php</span>
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nx">Monolog\Handler\StreamHandler</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nx">Monolog\Logger</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nx">Monolog\Registry</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$logger</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Logger</span><span class="p">(</span><span class="s1">&#39;Application&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nv">$logger</span><span class="o">-&gt;</span><span class="na">pushHandler</span><span class="p">(</span><span class="k">new</span> <span class="nx">StreamHandler</span><span class="p">(</span><span class="no">__DIR__</span> <span class="o">.</span> <span class="s1">&#39;/app.log&#39;</span><span class="p">,</span> <span class="nx">Logger</span><span class="o">::</span><span class="na">DEBUG</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="nx">Registry</span><span class="o">::</span><span class="na">addLogger</span><span class="p">(</span><span class="nv">$logger</span><span class="p">,</span><span class="s1">&#39;ApplicationLog&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="sd">/****************
</span></span></span><span class="line"><span class="cl"><span class="sd"> * foo.php
</span></span></span><span class="line"><span class="cl"><span class="sd"> ****************/</span>
</span></span><span class="line"><span class="cl"><span class="o">&lt;?</span><span class="nx">php</span>
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nx">Monolog\Registry</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">require_once</span> <span class="no">__DIR__</span> <span class="o">.</span> <span class="s2">&#34;/bootstrap.php&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">function</span> <span class="nf">logInfo</span><span class="p">(</span><span class="nv">$message</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$logger</span> <span class="o">=</span> <span class="nx">Registry</span><span class="o">::</span><span class="na">getInstance</span><span class="p">(</span><span class="s1">&#39;ApplicationLog&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$logger</span><span class="o">-&gt;</span><span class="na">info</span><span class="p">(</span><span class="nv">$message</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">logInfo</span><span class="p">(</span><span class="s1">&#39;I am Global Logging&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="sd">/*********
</span></span></span><span class="line"><span class="cl"><span class="sd"> * app.log
</span></span></span><span class="line"><span class="cl"><span class="sd"> *********/</span>
</span></span><span class="line"><span class="cl"><span class="c1">// [2019-05-10 17:03:10] Application.INFO: I am Global Logging [] []
</span></span></span></code></pre>
</div>
<p>이와 같이 bootstrap.php 파일에서 Register에 등록한 Logger 객체는<!-- raw HTML omitted -->
global 변수를 사용하지 않아도 클래스 / 함수 상관 없이 어디에서든지 사용 가능해집니다.</p>
<p>더 좋은 활용 방법이 있으시다면 공유 부탁드리겠습니다.</p>
<p>자세한 사항은 <a href="https://github.com/Seldaek/monolog/blob/master/doc/01-usage.md" target="_blank" rel="noopener noreferrer">Monolog-Usage</a>에서 확인 하실 수 있습니다.</p>]]></description></item><item><title>［Laravel］with() | has() | whereHas() 뭐가 다를까</title><link>http://blog.hodory.dev/2019/04/27/eloquent-orm-with-has-where-has/</link><pubDate>Sat, 27 Apr 2019 00:15:24 +0000</pubDate><author><name>hodory</name></author><guid>http://blog.hodory.dev/2019/04/27/eloquent-orm-with-has-where-has/</guid><description><![CDATA[<p>ORM도 익숙하지 않지만, Eloquent ORM은 처음 접해보면서,</p>
<p>쿼리빌더를 사용하는것은 ORM스럽지 못하다 느껴 최대한 ORM으로 풀고 싶었습니다</p>
<p>검색으로 알아보던중 <a href="https://laravel.kr/docs/5.8/eloquent-relationships" target="_blank" rel="noopener noreferrer">Eloquent:Relations</a>에 대해 알게되었습니다.</p>
<p><a href="https://laravel.kr/docs/5.8/eloquent-relationships#%EA%B4%80%EA%B3%84%EC%9D%98%20%EC%A1%B4%EC%9E%AC%20%EC%97%AC%EB%B6%80%20%EC%BF%BC%EB%A6%AC%20%EC%A7%88%EC%9D%98%ED%95%98%EA%B8%B0" target="_blank" rel="noopener noreferrer">라라벨 공식 문서 : 관계의 존재 여부 쿼리 질의하기</a></p>
<p>예를들어 <code>User</code>가 여러개의 <code>Post</code> 를 가지고 있다면,<!-- raw HTML omitted -->
<code>User</code> 클래스에 <code>$this-&gt;hasMany('App\Post');</code>를 설정해 두었을 것이라는 가정하에 설명을 진행하도록 하겠습니다.</p>
<h2 id="with" class="headerLink">
    <a href="#with" class="header-mark"></a>with()</h2><ul>
<li>user
<ul>
<li>id</li>
<li>name</li>
</ul>
</li>
<li>post
<ul>
<li>id</li>
<li>user_id</li>
<li>title
이와 같은 테이블 구조에서 유저가 작성한 글의 제목을 조회하려면</li>
</ul>
</li>
</ul>
<div class="code-block highlight is-closed show-line-numbers  tw-group tw-my-2">
  <div class="
    code-block-title 
    
    tw-flex 
    tw-flex-row 
    tw-justify-between 
    tw-w-full tw-bg-bgColor-secondary
    ">      
    <button 
      class="
        tw-select-none 
        tw-mx-2 
        tw-block
        group-[.is-open]:tw-rotate-90
        tw-transition-[transform] 
        tw-duration-500 
        tw-ease-in-out
        print:!tw-hidden"
      disabled
      aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z"/></svg></button>

    <div class="code-block-title-bar tw-w-full">
      <p class="tw-select-none !tw-my-1">php</p>
    </div>
    <div class="tw-flex">
      <button 
        class="
          line-number-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.show-line-numbers]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle line numbers"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M61.77 401l17.5-20.15a19.92 19.92 0 0 0 5.07-14.19v-3.31C84.34 356 80.5 352 73 352H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8h22.83a157.41 157.41 0 0 0-11 12.31l-5.61 7c-4 5.07-5.25 10.13-2.8 14.88l1.05 1.93c3 5.76 6.29 7.88 12.25 7.88h4.73c10.33 0 15.94 2.44 15.94 9.09 0 4.72-4.2 8.22-14.36 8.22a41.54 41.54 0 0 1-15.47-3.12c-6.49-3.88-11.74-3.5-15.6 3.12l-5.59 9.31c-3.72 6.13-3.19 11.72 2.63 15.94 7.71 4.69 20.38 9.44 37 9.44 34.16 0 48.5-22.75 48.5-44.12-.03-14.38-9.12-29.76-28.73-34.88zM496 224H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-160H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16V80a16 16 0 0 0-16-16zm0 320H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM16 160h64a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H64V40a8 8 0 0 0-8-8H32a8 8 0 0 0-7.14 4.42l-8 16A8 8 0 0 0 24 64h8v64H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8zm-3.91 160H80a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H41.32c3.29-10.29 48.34-18.68 48.34-56.44 0-29.06-25-39.56-44.47-39.56-21.36 0-33.8 10-40.46 18.75-4.37 5.59-3 10.84 2.8 15.37l8.58 6.88c5.61 4.56 11 2.47 16.12-2.44a13.44 13.44 0 0 1 9.46-3.84c3.33 0 9.28 1.56 9.28 8.75C51 248.19 0 257.31 0 304.59v4C0 316 5.08 320 12.09 320z"/></svg></button>

      <button 
        class="
          wrap-code-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.is-wrap]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle code wrap"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z"/></svg></button>
      
      <button 
        class="
          copy-code-button
          tw-select-none
          tw-mx-2 
          tw-hidden
          group-[.is-open]:tw-block
          hover:tw-text-fgColor-link 
          print:!tw-hidden"
        title="Copy code">
          <span class="copy-icon tw-block"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z"/></svg></span>
          <span class="check-icon tw-hidden"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"/></svg></span>
      </button>
        
      <button 
        class="
          tw-select-none 
          tw-mx-2 
          tw-block 
          group-[.is-open]:tw-hidden 
          print:!tw-hidden" 
        disabled
        aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M328 256c0 39.8-32.2 72-72 72s-72-32.2-72-72 32.2-72 72-72 72 32.2 72 72zm104-72c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72zm-352 0c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72z"/></svg></button>
    </div>
  </div>
  <pre style="counter-reset: codeblock;" class="tw-block tw-m-0 tw-p-0"><code 
    id="codeblock-id-1" 
    class="
      chroma 
      !tw-block 
      tw-p-0
      tw-m-0
      tw-transition-[max-height] 
      tw-duration-500 
      tw-ease-in-out 
      group-[.is-closed]:!tw-max-h-0 
      group-[.is-wrap]:tw-text-wrap
      tw-overflow-y-hidden
      tw-overflow-x-auto
      tw-scrollbar-thin
      "><span class="line"><span class="cl"><span class="nv">$users</span> <span class="o">=</span> <span class="nx">selectAll</span><span class="p">(</span><span class="s2">&#34;select * from `user`);
</span></span></span><span class="line"><span class="cl"><span class="s2">foreach (</span><span class="si">$users</span><span class="s2"> as </span><span class="si">$user</span><span class="s2">) {
</span></span></span><span class="line"><span class="cl"><span class="s2">    </span><span class="si">$user[&#39;post_title&#39;]</span><span class="s2"> = selectOne(&#34;</span><span class="nx">select</span> <span class="sb">`title`</span> <span class="nx">from</span> <span class="sb">`post`</span> <span class="nx">where</span> <span class="sb">`post`</span><span class="o">.</span><span class="sb">`user_id`</span> <span class="o">=</span> <span class="p">{</span><span class="nv">$user</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">]}</span><span class="s2">&#34;);
</span></span></span><span class="line"><span class="cl"><span class="s2">}
</span></span></span></code></pre>
</div>
<p>회원을 조회하고, 회원들을 순회하며 게시물을 조회하는 코드입니다.<!-- raw HTML omitted -->
이 경우 회원이 1000명일 경우 쿼리는 1001번 실행하게 됩니다.<!-- raw HTML omitted -->
이것을 <a href="https://zetawiki.com/wiki/N%2B1_%EC%BF%BC%EB%A6%AC_%EB%AC%B8%EC%A0%9C" target="_blank" rel="noopener noreferrer">N+1쿼리 문제</a> 라고 합니다.</p>
<p>사람들에 따라 직관적이여서 선호하기도 하고,<!-- raw HTML omitted -->
join으로 실행시 쿼리가 오래 걸리면 이와 같이 분리하여 사용하기도 합니다.
또는 join으로 해결할 수 없는 상황에서도 사용합니다.</p>
<p>이 문제를 해결 하기 위해</p>
<div class="code-block highlight is-closed show-line-numbers  tw-group tw-my-2">
  <div class="
    code-block-title 
    
    tw-flex 
    tw-flex-row 
    tw-justify-between 
    tw-w-full tw-bg-bgColor-secondary
    ">      
    <button 
      class="
        tw-select-none 
        tw-mx-2 
        tw-block
        group-[.is-open]:tw-rotate-90
        tw-transition-[transform] 
        tw-duration-500 
        tw-ease-in-out
        print:!tw-hidden"
      disabled
      aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z"/></svg></button>

    <div class="code-block-title-bar tw-w-full">
      <p class="tw-select-none !tw-my-1">sql</p>
    </div>
    <div class="tw-flex">
      <button 
        class="
          line-number-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.show-line-numbers]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle line numbers"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M61.77 401l17.5-20.15a19.92 19.92 0 0 0 5.07-14.19v-3.31C84.34 356 80.5 352 73 352H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8h22.83a157.41 157.41 0 0 0-11 12.31l-5.61 7c-4 5.07-5.25 10.13-2.8 14.88l1.05 1.93c3 5.76 6.29 7.88 12.25 7.88h4.73c10.33 0 15.94 2.44 15.94 9.09 0 4.72-4.2 8.22-14.36 8.22a41.54 41.54 0 0 1-15.47-3.12c-6.49-3.88-11.74-3.5-15.6 3.12l-5.59 9.31c-3.72 6.13-3.19 11.72 2.63 15.94 7.71 4.69 20.38 9.44 37 9.44 34.16 0 48.5-22.75 48.5-44.12-.03-14.38-9.12-29.76-28.73-34.88zM496 224H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-160H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16V80a16 16 0 0 0-16-16zm0 320H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM16 160h64a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H64V40a8 8 0 0 0-8-8H32a8 8 0 0 0-7.14 4.42l-8 16A8 8 0 0 0 24 64h8v64H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8zm-3.91 160H80a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H41.32c3.29-10.29 48.34-18.68 48.34-56.44 0-29.06-25-39.56-44.47-39.56-21.36 0-33.8 10-40.46 18.75-4.37 5.59-3 10.84 2.8 15.37l8.58 6.88c5.61 4.56 11 2.47 16.12-2.44a13.44 13.44 0 0 1 9.46-3.84c3.33 0 9.28 1.56 9.28 8.75C51 248.19 0 257.31 0 304.59v4C0 316 5.08 320 12.09 320z"/></svg></button>

      <button 
        class="
          wrap-code-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.is-wrap]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle code wrap"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z"/></svg></button>
      
      <button 
        class="
          copy-code-button
          tw-select-none
          tw-mx-2 
          tw-hidden
          group-[.is-open]:tw-block
          hover:tw-text-fgColor-link 
          print:!tw-hidden"
        title="Copy code">
          <span class="copy-icon tw-block"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z"/></svg></span>
          <span class="check-icon tw-hidden"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"/></svg></span>
      </button>
        
      <button 
        class="
          tw-select-none 
          tw-mx-2 
          tw-block 
          group-[.is-open]:tw-hidden 
          print:!tw-hidden" 
        disabled
        aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M328 256c0 39.8-32.2 72-72 72s-72-32.2-72-72 32.2-72 72-72 72 32.2 72 72zm104-72c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72zm-352 0c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72z"/></svg></button>
    </div>
  </div>
  <pre style="counter-reset: codeblock;" class="tw-block tw-m-0 tw-p-0"><code 
    id="codeblock-id-2" 
    class="
      chroma 
      !tw-block 
      tw-p-0
      tw-m-0
      tw-transition-[max-height] 
      tw-duration-500 
      tw-ease-in-out 
      group-[.is-closed]:!tw-max-h-0 
      group-[.is-wrap]:tw-text-wrap
      tw-overflow-y-hidden
      tw-overflow-x-auto
      tw-scrollbar-thin
      "><span class="line"><span class="cl"><span class="err">$</span><span class="n">users</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">selectAll</span><span class="p">(</span><span class="s2">&#34;select `user`.*,`post`.`title` as post_title from `user` left join `post` on `post`.`user_id` = `user`.`id`&#34;</span><span class="p">);</span><span class="w"> </span></span></span></code></pre>
</div>
<p>join으로 해결할 수 없는 경우를 제외 하고는 위와 같이 join을 사용해서 조회 할 수 있습니다.</p>
<p>또한 이 문제는 ORM에서 주로 발생 합니다.<!-- raw HTML omitted -->
ORM을 사용하면 user와 post의 관계를 설정하고, 아래와 같이 사용할 수 있습니다.</p>
<div class="code-block highlight is-closed show-line-numbers  tw-group tw-my-2">
  <div class="
    code-block-title 
    
    tw-flex 
    tw-flex-row 
    tw-justify-between 
    tw-w-full tw-bg-bgColor-secondary
    ">      
    <button 
      class="
        tw-select-none 
        tw-mx-2 
        tw-block
        group-[.is-open]:tw-rotate-90
        tw-transition-[transform] 
        tw-duration-500 
        tw-ease-in-out
        print:!tw-hidden"
      disabled
      aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z"/></svg></button>

    <div class="code-block-title-bar tw-w-full">
      <p class="tw-select-none !tw-my-1">php</p>
    </div>
    <div class="tw-flex">
      <button 
        class="
          line-number-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.show-line-numbers]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle line numbers"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M61.77 401l17.5-20.15a19.92 19.92 0 0 0 5.07-14.19v-3.31C84.34 356 80.5 352 73 352H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8h22.83a157.41 157.41 0 0 0-11 12.31l-5.61 7c-4 5.07-5.25 10.13-2.8 14.88l1.05 1.93c3 5.76 6.29 7.88 12.25 7.88h4.73c10.33 0 15.94 2.44 15.94 9.09 0 4.72-4.2 8.22-14.36 8.22a41.54 41.54 0 0 1-15.47-3.12c-6.49-3.88-11.74-3.5-15.6 3.12l-5.59 9.31c-3.72 6.13-3.19 11.72 2.63 15.94 7.71 4.69 20.38 9.44 37 9.44 34.16 0 48.5-22.75 48.5-44.12-.03-14.38-9.12-29.76-28.73-34.88zM496 224H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-160H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16V80a16 16 0 0 0-16-16zm0 320H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM16 160h64a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H64V40a8 8 0 0 0-8-8H32a8 8 0 0 0-7.14 4.42l-8 16A8 8 0 0 0 24 64h8v64H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8zm-3.91 160H80a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H41.32c3.29-10.29 48.34-18.68 48.34-56.44 0-29.06-25-39.56-44.47-39.56-21.36 0-33.8 10-40.46 18.75-4.37 5.59-3 10.84 2.8 15.37l8.58 6.88c5.61 4.56 11 2.47 16.12-2.44a13.44 13.44 0 0 1 9.46-3.84c3.33 0 9.28 1.56 9.28 8.75C51 248.19 0 257.31 0 304.59v4C0 316 5.08 320 12.09 320z"/></svg></button>

      <button 
        class="
          wrap-code-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.is-wrap]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle code wrap"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z"/></svg></button>
      
      <button 
        class="
          copy-code-button
          tw-select-none
          tw-mx-2 
          tw-hidden
          group-[.is-open]:tw-block
          hover:tw-text-fgColor-link 
          print:!tw-hidden"
        title="Copy code">
          <span class="copy-icon tw-block"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z"/></svg></span>
          <span class="check-icon tw-hidden"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"/></svg></span>
      </button>
        
      <button 
        class="
          tw-select-none 
          tw-mx-2 
          tw-block 
          group-[.is-open]:tw-hidden 
          print:!tw-hidden" 
        disabled
        aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M328 256c0 39.8-32.2 72-72 72s-72-32.2-72-72 32.2-72 72-72 72 32.2 72 72zm104-72c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72zm-352 0c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72z"/></svg></button>
    </div>
  </div>
  <pre style="counter-reset: codeblock;" class="tw-block tw-m-0 tw-p-0"><code 
    id="codeblock-id-3" 
    class="
      chroma 
      !tw-block 
      tw-p-0
      tw-m-0
      tw-transition-[max-height] 
      tw-duration-500 
      tw-ease-in-out 
      group-[.is-closed]:!tw-max-h-0 
      group-[.is-wrap]:tw-text-wrap
      tw-overflow-y-hidden
      tw-overflow-x-auto
      tw-scrollbar-thin
      "><span class="line"><span class="cl"><span class="k">foreach</span> <span class="p">(</span><span class="nx">User</span><span class="o">::</span><span class="na">all</span><span class="p">()</span> <span class="k">as</span> <span class="nv">$user</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">echo</span> <span class="nv">$user</span><span class="o">-&gt;</span><span class="na">post</span><span class="o">-&gt;</span><span class="na">title</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</div>
<p>해당 코드는</p>
<div class="code-block highlight is-closed show-line-numbers  tw-group tw-my-2">
  <div class="
    code-block-title 
    
    tw-flex 
    tw-flex-row 
    tw-justify-between 
    tw-w-full tw-bg-bgColor-secondary
    ">      
    <button 
      class="
        tw-select-none 
        tw-mx-2 
        tw-block
        group-[.is-open]:tw-rotate-90
        tw-transition-[transform] 
        tw-duration-500 
        tw-ease-in-out
        print:!tw-hidden"
      disabled
      aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z"/></svg></button>

    <div class="code-block-title-bar tw-w-full">
      <p class="tw-select-none !tw-my-1">sql</p>
    </div>
    <div class="tw-flex">
      <button 
        class="
          line-number-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.show-line-numbers]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle line numbers"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M61.77 401l17.5-20.15a19.92 19.92 0 0 0 5.07-14.19v-3.31C84.34 356 80.5 352 73 352H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8h22.83a157.41 157.41 0 0 0-11 12.31l-5.61 7c-4 5.07-5.25 10.13-2.8 14.88l1.05 1.93c3 5.76 6.29 7.88 12.25 7.88h4.73c10.33 0 15.94 2.44 15.94 9.09 0 4.72-4.2 8.22-14.36 8.22a41.54 41.54 0 0 1-15.47-3.12c-6.49-3.88-11.74-3.5-15.6 3.12l-5.59 9.31c-3.72 6.13-3.19 11.72 2.63 15.94 7.71 4.69 20.38 9.44 37 9.44 34.16 0 48.5-22.75 48.5-44.12-.03-14.38-9.12-29.76-28.73-34.88zM496 224H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-160H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16V80a16 16 0 0 0-16-16zm0 320H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM16 160h64a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H64V40a8 8 0 0 0-8-8H32a8 8 0 0 0-7.14 4.42l-8 16A8 8 0 0 0 24 64h8v64H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8zm-3.91 160H80a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H41.32c3.29-10.29 48.34-18.68 48.34-56.44 0-29.06-25-39.56-44.47-39.56-21.36 0-33.8 10-40.46 18.75-4.37 5.59-3 10.84 2.8 15.37l8.58 6.88c5.61 4.56 11 2.47 16.12-2.44a13.44 13.44 0 0 1 9.46-3.84c3.33 0 9.28 1.56 9.28 8.75C51 248.19 0 257.31 0 304.59v4C0 316 5.08 320 12.09 320z"/></svg></button>

      <button 
        class="
          wrap-code-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.is-wrap]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle code wrap"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z"/></svg></button>
      
      <button 
        class="
          copy-code-button
          tw-select-none
          tw-mx-2 
          tw-hidden
          group-[.is-open]:tw-block
          hover:tw-text-fgColor-link 
          print:!tw-hidden"
        title="Copy code">
          <span class="copy-icon tw-block"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z"/></svg></span>
          <span class="check-icon tw-hidden"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"/></svg></span>
      </button>
        
      <button 
        class="
          tw-select-none 
          tw-mx-2 
          tw-block 
          group-[.is-open]:tw-hidden 
          print:!tw-hidden" 
        disabled
        aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M328 256c0 39.8-32.2 72-72 72s-72-32.2-72-72 32.2-72 72-72 72 32.2 72 72zm104-72c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72zm-352 0c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72z"/></svg></button>
    </div>
  </div>
  <pre style="counter-reset: codeblock;" class="tw-block tw-m-0 tw-p-0"><code 
    id="codeblock-id-4" 
    class="
      chroma 
      !tw-block 
      tw-p-0
      tw-m-0
      tw-transition-[max-height] 
      tw-duration-500 
      tw-ease-in-out 
      group-[.is-closed]:!tw-max-h-0 
      group-[.is-wrap]:tw-text-wrap
      tw-overflow-y-hidden
      tw-overflow-x-auto
      tw-scrollbar-thin
      "><span class="line"><span class="cl"><span class="k">select</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">;</span><span class="w"> </span><span class="o">#</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p">,</span><span class="w"> </span><span class="mi">4</span><span class="p">,</span><span class="w"> </span><span class="mi">5</span><span class="p">,</span><span class="w"> </span><span class="mi">6</span><span class="p">....</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">select</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="o">`</span><span class="n">post</span><span class="o">`</span><span class="w"> </span><span class="k">where</span><span class="w"> </span><span class="n">id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">select</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="o">`</span><span class="n">post</span><span class="o">`</span><span class="w"> </span><span class="k">where</span><span class="w"> </span><span class="n">id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">2</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">select</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="o">`</span><span class="n">post</span><span class="o">`</span><span class="w"> </span><span class="k">where</span><span class="w"> </span><span class="n">id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">3</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">select</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="o">`</span><span class="n">post</span><span class="o">`</span><span class="w"> </span><span class="k">where</span><span class="w"> </span><span class="n">id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">4</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">...</span></span></span></code></pre>
</div>
<p>user를 조회하고, user의 수 만큼 post를 조회합니다.<!-- raw HTML omitted -->
위의 N+1 문제와 같은 문제입니다.</p>
<p>이 문제를 해결 하기 위한 방안으로는 <a href="https://zetawiki.com/wiki/%EC%A6%89%EC%8B%9C_%EB%A1%9C%EB%94%A9" target="_blank" rel="noopener noreferrer">즉시 로딩(Eager Loading)</a>이 있습니다.</p>
<div class="code-block highlight is-closed show-line-numbers  tw-group tw-my-2">
  <div class="
    code-block-title 
    
    tw-flex 
    tw-flex-row 
    tw-justify-between 
    tw-w-full tw-bg-bgColor-secondary
    ">      
    <button 
      class="
        tw-select-none 
        tw-mx-2 
        tw-block
        group-[.is-open]:tw-rotate-90
        tw-transition-[transform] 
        tw-duration-500 
        tw-ease-in-out
        print:!tw-hidden"
      disabled
      aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z"/></svg></button>

    <div class="code-block-title-bar tw-w-full">
      <p class="tw-select-none !tw-my-1">php</p>
    </div>
    <div class="tw-flex">
      <button 
        class="
          line-number-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.show-line-numbers]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle line numbers"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M61.77 401l17.5-20.15a19.92 19.92 0 0 0 5.07-14.19v-3.31C84.34 356 80.5 352 73 352H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8h22.83a157.41 157.41 0 0 0-11 12.31l-5.61 7c-4 5.07-5.25 10.13-2.8 14.88l1.05 1.93c3 5.76 6.29 7.88 12.25 7.88h4.73c10.33 0 15.94 2.44 15.94 9.09 0 4.72-4.2 8.22-14.36 8.22a41.54 41.54 0 0 1-15.47-3.12c-6.49-3.88-11.74-3.5-15.6 3.12l-5.59 9.31c-3.72 6.13-3.19 11.72 2.63 15.94 7.71 4.69 20.38 9.44 37 9.44 34.16 0 48.5-22.75 48.5-44.12-.03-14.38-9.12-29.76-28.73-34.88zM496 224H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-160H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16V80a16 16 0 0 0-16-16zm0 320H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM16 160h64a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H64V40a8 8 0 0 0-8-8H32a8 8 0 0 0-7.14 4.42l-8 16A8 8 0 0 0 24 64h8v64H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8zm-3.91 160H80a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H41.32c3.29-10.29 48.34-18.68 48.34-56.44 0-29.06-25-39.56-44.47-39.56-21.36 0-33.8 10-40.46 18.75-4.37 5.59-3 10.84 2.8 15.37l8.58 6.88c5.61 4.56 11 2.47 16.12-2.44a13.44 13.44 0 0 1 9.46-3.84c3.33 0 9.28 1.56 9.28 8.75C51 248.19 0 257.31 0 304.59v4C0 316 5.08 320 12.09 320z"/></svg></button>

      <button 
        class="
          wrap-code-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.is-wrap]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle code wrap"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z"/></svg></button>
      
      <button 
        class="
          copy-code-button
          tw-select-none
          tw-mx-2 
          tw-hidden
          group-[.is-open]:tw-block
          hover:tw-text-fgColor-link 
          print:!tw-hidden"
        title="Copy code">
          <span class="copy-icon tw-block"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z"/></svg></span>
          <span class="check-icon tw-hidden"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"/></svg></span>
      </button>
        
      <button 
        class="
          tw-select-none 
          tw-mx-2 
          tw-block 
          group-[.is-open]:tw-hidden 
          print:!tw-hidden" 
        disabled
        aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M328 256c0 39.8-32.2 72-72 72s-72-32.2-72-72 32.2-72 72-72 72 32.2 72 72zm104-72c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72zm-352 0c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72z"/></svg></button>
    </div>
  </div>
  <pre style="counter-reset: codeblock;" class="tw-block tw-m-0 tw-p-0"><code 
    id="codeblock-id-5" 
    class="
      chroma 
      !tw-block 
      tw-p-0
      tw-m-0
      tw-transition-[max-height] 
      tw-duration-500 
      tw-ease-in-out 
      group-[.is-closed]:!tw-max-h-0 
      group-[.is-wrap]:tw-text-wrap
      tw-overflow-y-hidden
      tw-overflow-x-auto
      tw-scrollbar-thin
      "><span class="line"><span class="cl"><span class="k">foreach</span> <span class="p">(</span><span class="nx">User</span><span class="o">::</span><span class="na">with</span><span class="p">(</span><span class="s1">&#39;posts&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">()</span> <span class="k">as</span> <span class="nv">$user</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">echo</span> <span class="nv">$user</span><span class="o">-&gt;</span><span class="na">post</span><span class="o">-&gt;</span><span class="na">title</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</div>
<p>이와같이 <code>with()</code>를 사용하면 미리 선언한 관계를 사용하여 같이 가져올수있습니다.<!-- raw HTML omitted -->
언뜻 보기엔 별 다를바 없어 보이는 코드이지만 with 메소드를 사용하면, user와 연관된 post를 미리 로드합니다.</p>
<p>실행되는 쿼리는</p>
<div class="code-block highlight is-closed show-line-numbers  tw-group tw-my-2">
  <div class="
    code-block-title 
    
    tw-flex 
    tw-flex-row 
    tw-justify-between 
    tw-w-full tw-bg-bgColor-secondary
    ">      
    <button 
      class="
        tw-select-none 
        tw-mx-2 
        tw-block
        group-[.is-open]:tw-rotate-90
        tw-transition-[transform] 
        tw-duration-500 
        tw-ease-in-out
        print:!tw-hidden"
      disabled
      aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z"/></svg></button>

    <div class="code-block-title-bar tw-w-full">
      <p class="tw-select-none !tw-my-1">sql</p>
    </div>
    <div class="tw-flex">
      <button 
        class="
          line-number-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.show-line-numbers]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle line numbers"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M61.77 401l17.5-20.15a19.92 19.92 0 0 0 5.07-14.19v-3.31C84.34 356 80.5 352 73 352H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8h22.83a157.41 157.41 0 0 0-11 12.31l-5.61 7c-4 5.07-5.25 10.13-2.8 14.88l1.05 1.93c3 5.76 6.29 7.88 12.25 7.88h4.73c10.33 0 15.94 2.44 15.94 9.09 0 4.72-4.2 8.22-14.36 8.22a41.54 41.54 0 0 1-15.47-3.12c-6.49-3.88-11.74-3.5-15.6 3.12l-5.59 9.31c-3.72 6.13-3.19 11.72 2.63 15.94 7.71 4.69 20.38 9.44 37 9.44 34.16 0 48.5-22.75 48.5-44.12-.03-14.38-9.12-29.76-28.73-34.88zM496 224H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-160H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16V80a16 16 0 0 0-16-16zm0 320H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM16 160h64a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H64V40a8 8 0 0 0-8-8H32a8 8 0 0 0-7.14 4.42l-8 16A8 8 0 0 0 24 64h8v64H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8zm-3.91 160H80a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H41.32c3.29-10.29 48.34-18.68 48.34-56.44 0-29.06-25-39.56-44.47-39.56-21.36 0-33.8 10-40.46 18.75-4.37 5.59-3 10.84 2.8 15.37l8.58 6.88c5.61 4.56 11 2.47 16.12-2.44a13.44 13.44 0 0 1 9.46-3.84c3.33 0 9.28 1.56 9.28 8.75C51 248.19 0 257.31 0 304.59v4C0 316 5.08 320 12.09 320z"/></svg></button>

      <button 
        class="
          wrap-code-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.is-wrap]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle code wrap"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z"/></svg></button>
      
      <button 
        class="
          copy-code-button
          tw-select-none
          tw-mx-2 
          tw-hidden
          group-[.is-open]:tw-block
          hover:tw-text-fgColor-link 
          print:!tw-hidden"
        title="Copy code">
          <span class="copy-icon tw-block"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z"/></svg></span>
          <span class="check-icon tw-hidden"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"/></svg></span>
      </button>
        
      <button 
        class="
          tw-select-none 
          tw-mx-2 
          tw-block 
          group-[.is-open]:tw-hidden 
          print:!tw-hidden" 
        disabled
        aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M328 256c0 39.8-32.2 72-72 72s-72-32.2-72-72 32.2-72 72-72 72 32.2 72 72zm104-72c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72zm-352 0c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72z"/></svg></button>
    </div>
  </div>
  <pre style="counter-reset: codeblock;" class="tw-block tw-m-0 tw-p-0"><code 
    id="codeblock-id-6" 
    class="
      chroma 
      !tw-block 
      tw-p-0
      tw-m-0
      tw-transition-[max-height] 
      tw-duration-500 
      tw-ease-in-out 
      group-[.is-closed]:!tw-max-h-0 
      group-[.is-wrap]:tw-text-wrap
      tw-overflow-y-hidden
      tw-overflow-x-auto
      tw-scrollbar-thin
      "><span class="line"><span class="cl"><span class="k">select</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">;</span><span class="w"> </span><span class="o">#</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p">,</span><span class="w"> </span><span class="mi">4</span><span class="p">,</span><span class="w"> </span><span class="mi">5</span><span class="p">,</span><span class="w"> </span><span class="mi">6</span><span class="p">....</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">select</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="o">`</span><span class="n">post</span><span class="o">`</span><span class="w"> </span><span class="k">where</span><span class="w"> </span><span class="o">`</span><span class="n">id</span><span class="o">`</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p">,</span><span class="w"> </span><span class="mi">4</span><span class="p">,</span><span class="w"> </span><span class="mi">5</span><span class="p">,</span><span class="w"> </span><span class="mi">6</span><span class="p">,</span><span class="w"> </span><span class="p">...);</span></span></span></code></pre>
</div>
<p>위와 같이 쿼리 2개만 실행이 되어 쿼리 실행을 최소화 할 수 있습니다.</p>
<p><code>with()</code> 메소드의 2번째 파라미터를 사용해 제한 할 수도 있습니다.</p>
<div class="code-block highlight is-closed show-line-numbers  tw-group tw-my-2">
  <div class="
    code-block-title 
    
    tw-flex 
    tw-flex-row 
    tw-justify-between 
    tw-w-full tw-bg-bgColor-secondary
    ">      
    <button 
      class="
        tw-select-none 
        tw-mx-2 
        tw-block
        group-[.is-open]:tw-rotate-90
        tw-transition-[transform] 
        tw-duration-500 
        tw-ease-in-out
        print:!tw-hidden"
      disabled
      aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z"/></svg></button>

    <div class="code-block-title-bar tw-w-full">
      <p class="tw-select-none !tw-my-1">php</p>
    </div>
    <div class="tw-flex">
      <button 
        class="
          line-number-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.show-line-numbers]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle line numbers"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M61.77 401l17.5-20.15a19.92 19.92 0 0 0 5.07-14.19v-3.31C84.34 356 80.5 352 73 352H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8h22.83a157.41 157.41 0 0 0-11 12.31l-5.61 7c-4 5.07-5.25 10.13-2.8 14.88l1.05 1.93c3 5.76 6.29 7.88 12.25 7.88h4.73c10.33 0 15.94 2.44 15.94 9.09 0 4.72-4.2 8.22-14.36 8.22a41.54 41.54 0 0 1-15.47-3.12c-6.49-3.88-11.74-3.5-15.6 3.12l-5.59 9.31c-3.72 6.13-3.19 11.72 2.63 15.94 7.71 4.69 20.38 9.44 37 9.44 34.16 0 48.5-22.75 48.5-44.12-.03-14.38-9.12-29.76-28.73-34.88zM496 224H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-160H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16V80a16 16 0 0 0-16-16zm0 320H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM16 160h64a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H64V40a8 8 0 0 0-8-8H32a8 8 0 0 0-7.14 4.42l-8 16A8 8 0 0 0 24 64h8v64H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8zm-3.91 160H80a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H41.32c3.29-10.29 48.34-18.68 48.34-56.44 0-29.06-25-39.56-44.47-39.56-21.36 0-33.8 10-40.46 18.75-4.37 5.59-3 10.84 2.8 15.37l8.58 6.88c5.61 4.56 11 2.47 16.12-2.44a13.44 13.44 0 0 1 9.46-3.84c3.33 0 9.28 1.56 9.28 8.75C51 248.19 0 257.31 0 304.59v4C0 316 5.08 320 12.09 320z"/></svg></button>

      <button 
        class="
          wrap-code-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.is-wrap]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle code wrap"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z"/></svg></button>
      
      <button 
        class="
          copy-code-button
          tw-select-none
          tw-mx-2 
          tw-hidden
          group-[.is-open]:tw-block
          hover:tw-text-fgColor-link 
          print:!tw-hidden"
        title="Copy code">
          <span class="copy-icon tw-block"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z"/></svg></span>
          <span class="check-icon tw-hidden"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"/></svg></span>
      </button>
        
      <button 
        class="
          tw-select-none 
          tw-mx-2 
          tw-block 
          group-[.is-open]:tw-hidden 
          print:!tw-hidden" 
        disabled
        aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M328 256c0 39.8-32.2 72-72 72s-72-32.2-72-72 32.2-72 72-72 72 32.2 72 72zm104-72c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72zm-352 0c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72z"/></svg></button>
    </div>
  </div>
  <pre style="counter-reset: codeblock;" class="tw-block tw-m-0 tw-p-0"><code 
    id="codeblock-id-7" 
    class="
      chroma 
      !tw-block 
      tw-p-0
      tw-m-0
      tw-transition-[max-height] 
      tw-duration-500 
      tw-ease-in-out 
      group-[.is-closed]:!tw-max-h-0 
      group-[.is-wrap]:tw-text-wrap
      tw-overflow-y-hidden
      tw-overflow-x-auto
      tw-scrollbar-thin
      "><span class="line"><span class="cl"><span class="k">foreach</span><span class="p">(</span><span class="nx">User</span><span class="o">::</span><span class="na">with</span><span class="p">([</span><span class="s1">&#39;posts&#39;</span> <span class="o">=&gt;</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$query</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$query</span><span class="o">-&gt;</span><span class="na">where</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span> <span class="s1">&#39;like&#39;</span><span class="p">,</span> <span class="s1">&#39;치킨%&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">])</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">()</span> <span class="k">as</span> <span class="nv">$user</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">echo</span> <span class="nv">$user</span><span class="o">-&gt;</span><span class="na">post</span><span class="o">-&gt;</span><span class="na">title</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">;</span></span></span></code></pre>
</div>
<p><code>user</code>를 조회할 때, <code>치킨</code>으로 시작하는 <code>post</code>를 같이 미리 로드 할 수 있습니다.</p>
<h2 id="has" class="headerLink">
    <a href="#has" class="header-mark"></a>has()</h2><p><code>has()</code> 메소드를 이용하면, 해당 관계에서 최소 한개를 가지고 있는 결과를 조회합니다</p>
<p><code>User::has('posts')-&gt;get();</code>을 사용하면 post를 한개라도 작성한 회원을 조회할것입니다.</p>
<p>쿼리로 표현한다면, 아래와 비슷할것 같습니다.</p>
<div class="code-block highlight is-closed show-line-numbers  tw-group tw-my-2">
  <div class="
    code-block-title 
    
    tw-flex 
    tw-flex-row 
    tw-justify-between 
    tw-w-full tw-bg-bgColor-secondary
    ">      
    <button 
      class="
        tw-select-none 
        tw-mx-2 
        tw-block
        group-[.is-open]:tw-rotate-90
        tw-transition-[transform] 
        tw-duration-500 
        tw-ease-in-out
        print:!tw-hidden"
      disabled
      aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z"/></svg></button>

    <div class="code-block-title-bar tw-w-full">
      <p class="tw-select-none !tw-my-1">sql</p>
    </div>
    <div class="tw-flex">
      <button 
        class="
          line-number-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.show-line-numbers]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle line numbers"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M61.77 401l17.5-20.15a19.92 19.92 0 0 0 5.07-14.19v-3.31C84.34 356 80.5 352 73 352H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8h22.83a157.41 157.41 0 0 0-11 12.31l-5.61 7c-4 5.07-5.25 10.13-2.8 14.88l1.05 1.93c3 5.76 6.29 7.88 12.25 7.88h4.73c10.33 0 15.94 2.44 15.94 9.09 0 4.72-4.2 8.22-14.36 8.22a41.54 41.54 0 0 1-15.47-3.12c-6.49-3.88-11.74-3.5-15.6 3.12l-5.59 9.31c-3.72 6.13-3.19 11.72 2.63 15.94 7.71 4.69 20.38 9.44 37 9.44 34.16 0 48.5-22.75 48.5-44.12-.03-14.38-9.12-29.76-28.73-34.88zM496 224H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-160H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16V80a16 16 0 0 0-16-16zm0 320H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM16 160h64a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H64V40a8 8 0 0 0-8-8H32a8 8 0 0 0-7.14 4.42l-8 16A8 8 0 0 0 24 64h8v64H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8zm-3.91 160H80a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H41.32c3.29-10.29 48.34-18.68 48.34-56.44 0-29.06-25-39.56-44.47-39.56-21.36 0-33.8 10-40.46 18.75-4.37 5.59-3 10.84 2.8 15.37l8.58 6.88c5.61 4.56 11 2.47 16.12-2.44a13.44 13.44 0 0 1 9.46-3.84c3.33 0 9.28 1.56 9.28 8.75C51 248.19 0 257.31 0 304.59v4C0 316 5.08 320 12.09 320z"/></svg></button>

      <button 
        class="
          wrap-code-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.is-wrap]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle code wrap"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z"/></svg></button>
      
      <button 
        class="
          copy-code-button
          tw-select-none
          tw-mx-2 
          tw-hidden
          group-[.is-open]:tw-block
          hover:tw-text-fgColor-link 
          print:!tw-hidden"
        title="Copy code">
          <span class="copy-icon tw-block"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z"/></svg></span>
          <span class="check-icon tw-hidden"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"/></svg></span>
      </button>
        
      <button 
        class="
          tw-select-none 
          tw-mx-2 
          tw-block 
          group-[.is-open]:tw-hidden 
          print:!tw-hidden" 
        disabled
        aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M328 256c0 39.8-32.2 72-72 72s-72-32.2-72-72 32.2-72 72-72 72 32.2 72 72zm104-72c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72zm-352 0c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72z"/></svg></button>
    </div>
  </div>
  <pre style="counter-reset: codeblock;" class="tw-block tw-m-0 tw-p-0"><code 
    id="codeblock-id-8" 
    class="
      chroma 
      !tw-block 
      tw-p-0
      tw-m-0
      tw-transition-[max-height] 
      tw-duration-500 
      tw-ease-in-out 
      group-[.is-closed]:!tw-max-h-0 
      group-[.is-wrap]:tw-text-wrap
      tw-overflow-y-hidden
      tw-overflow-x-auto
      tw-scrollbar-thin
      "><span class="line"><span class="cl"><span class="k">select</span><span class="w"> </span><span class="o">*</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">from</span><span class="w"> </span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="k">join</span><span class="w"> </span><span class="o">`</span><span class="n">post</span><span class="o">`</span><span class="w"> </span><span class="k">on</span><span class="w"> </span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">id</span><span class="o">`</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">`</span><span class="n">post</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">user_id</span><span class="o">`</span></span></span></code></pre>
</div>
<p>has 메소드는 2번째 파라미터에 <code>operator</code> 와 3번째 파라미터에 <code>count</code>를 사용할 수 있습니다.<!-- raw HTML omitted --></p>
<p>이 파라미터를 사용하면 예로 5개 이상의 글을 작성한 회원을 찾을 수 있습니다.
Eloquent를 사용하면 이와같이 작성 할 수 있습니다.<!-- raw HTML omitted -->
<code>User::has('posts', '&gt;=', 5)-&gt;get();</code></p>
<h2 id="wherehas" class="headerLink">
    <a href="#wherehas" class="header-mark"></a>whereHas()</h2><p>그렇다면 <code>whereHas()</code>는 뭐가 다를까요? <!-- raw HTML omitted -->
<code>whereHas()</code> 메소드는 두번째 파라미터로 콜백을 받아 더 복잡한 쿼리를 처리할 수 있습니다.</p>
<p>위와 같은 모델링에서 게시글의 제목이 <code>치킨</code>으로 시작하는 글을 작성한 회원을 찾는다면 아래와 같을것 입니다.</p>
<div class="code-block highlight is-closed show-line-numbers  tw-group tw-my-2">
  <div class="
    code-block-title 
    
    tw-flex 
    tw-flex-row 
    tw-justify-between 
    tw-w-full tw-bg-bgColor-secondary
    ">      
    <button 
      class="
        tw-select-none 
        tw-mx-2 
        tw-block
        group-[.is-open]:tw-rotate-90
        tw-transition-[transform] 
        tw-duration-500 
        tw-ease-in-out
        print:!tw-hidden"
      disabled
      aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z"/></svg></button>

    <div class="code-block-title-bar tw-w-full">
      <p class="tw-select-none !tw-my-1">php</p>
    </div>
    <div class="tw-flex">
      <button 
        class="
          line-number-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.show-line-numbers]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle line numbers"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M61.77 401l17.5-20.15a19.92 19.92 0 0 0 5.07-14.19v-3.31C84.34 356 80.5 352 73 352H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8h22.83a157.41 157.41 0 0 0-11 12.31l-5.61 7c-4 5.07-5.25 10.13-2.8 14.88l1.05 1.93c3 5.76 6.29 7.88 12.25 7.88h4.73c10.33 0 15.94 2.44 15.94 9.09 0 4.72-4.2 8.22-14.36 8.22a41.54 41.54 0 0 1-15.47-3.12c-6.49-3.88-11.74-3.5-15.6 3.12l-5.59 9.31c-3.72 6.13-3.19 11.72 2.63 15.94 7.71 4.69 20.38 9.44 37 9.44 34.16 0 48.5-22.75 48.5-44.12-.03-14.38-9.12-29.76-28.73-34.88zM496 224H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-160H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16V80a16 16 0 0 0-16-16zm0 320H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM16 160h64a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H64V40a8 8 0 0 0-8-8H32a8 8 0 0 0-7.14 4.42l-8 16A8 8 0 0 0 24 64h8v64H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8zm-3.91 160H80a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H41.32c3.29-10.29 48.34-18.68 48.34-56.44 0-29.06-25-39.56-44.47-39.56-21.36 0-33.8 10-40.46 18.75-4.37 5.59-3 10.84 2.8 15.37l8.58 6.88c5.61 4.56 11 2.47 16.12-2.44a13.44 13.44 0 0 1 9.46-3.84c3.33 0 9.28 1.56 9.28 8.75C51 248.19 0 257.31 0 304.59v4C0 316 5.08 320 12.09 320z"/></svg></button>

      <button 
        class="
          wrap-code-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.is-wrap]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle code wrap"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z"/></svg></button>
      
      <button 
        class="
          copy-code-button
          tw-select-none
          tw-mx-2 
          tw-hidden
          group-[.is-open]:tw-block
          hover:tw-text-fgColor-link 
          print:!tw-hidden"
        title="Copy code">
          <span class="copy-icon tw-block"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z"/></svg></span>
          <span class="check-icon tw-hidden"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"/></svg></span>
      </button>
        
      <button 
        class="
          tw-select-none 
          tw-mx-2 
          tw-block 
          group-[.is-open]:tw-hidden 
          print:!tw-hidden" 
        disabled
        aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M328 256c0 39.8-32.2 72-72 72s-72-32.2-72-72 32.2-72 72-72 72 32.2 72 72zm104-72c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72zm-352 0c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72z"/></svg></button>
    </div>
  </div>
  <pre style="counter-reset: codeblock;" class="tw-block tw-m-0 tw-p-0"><code 
    id="codeblock-id-9" 
    class="
      chroma 
      !tw-block 
      tw-p-0
      tw-m-0
      tw-transition-[max-height] 
      tw-duration-500 
      tw-ease-in-out 
      group-[.is-closed]:!tw-max-h-0 
      group-[.is-wrap]:tw-text-wrap
      tw-overflow-y-hidden
      tw-overflow-x-auto
      tw-scrollbar-thin
      "><span class="line"><span class="cl"><span class="nx">User</span><span class="o">::</span><span class="na">whereHas</span><span class="p">(</span><span class="s1">&#39;posts&#39;</span><span class="p">,</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$query</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$query</span><span class="o">-&gt;</span><span class="na">where</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span> <span class="s1">&#39;like&#39;</span><span class="p">,</span> <span class="s1">&#39;치킨%&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">();</span></span></span></code></pre>
</div>
<p>쿼리로 표현한다면</p>
<div class="code-block highlight is-closed show-line-numbers  tw-group tw-my-2">
  <div class="
    code-block-title 
    
    tw-flex 
    tw-flex-row 
    tw-justify-between 
    tw-w-full tw-bg-bgColor-secondary
    ">      
    <button 
      class="
        tw-select-none 
        tw-mx-2 
        tw-block
        group-[.is-open]:tw-rotate-90
        tw-transition-[transform] 
        tw-duration-500 
        tw-ease-in-out
        print:!tw-hidden"
      disabled
      aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z"/></svg></button>

    <div class="code-block-title-bar tw-w-full">
      <p class="tw-select-none !tw-my-1">sql</p>
    </div>
    <div class="tw-flex">
      <button 
        class="
          line-number-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.show-line-numbers]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle line numbers"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M61.77 401l17.5-20.15a19.92 19.92 0 0 0 5.07-14.19v-3.31C84.34 356 80.5 352 73 352H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8h22.83a157.41 157.41 0 0 0-11 12.31l-5.61 7c-4 5.07-5.25 10.13-2.8 14.88l1.05 1.93c3 5.76 6.29 7.88 12.25 7.88h4.73c10.33 0 15.94 2.44 15.94 9.09 0 4.72-4.2 8.22-14.36 8.22a41.54 41.54 0 0 1-15.47-3.12c-6.49-3.88-11.74-3.5-15.6 3.12l-5.59 9.31c-3.72 6.13-3.19 11.72 2.63 15.94 7.71 4.69 20.38 9.44 37 9.44 34.16 0 48.5-22.75 48.5-44.12-.03-14.38-9.12-29.76-28.73-34.88zM496 224H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-160H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16V80a16 16 0 0 0-16-16zm0 320H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM16 160h64a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H64V40a8 8 0 0 0-8-8H32a8 8 0 0 0-7.14 4.42l-8 16A8 8 0 0 0 24 64h8v64H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8zm-3.91 160H80a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H41.32c3.29-10.29 48.34-18.68 48.34-56.44 0-29.06-25-39.56-44.47-39.56-21.36 0-33.8 10-40.46 18.75-4.37 5.59-3 10.84 2.8 15.37l8.58 6.88c5.61 4.56 11 2.47 16.12-2.44a13.44 13.44 0 0 1 9.46-3.84c3.33 0 9.28 1.56 9.28 8.75C51 248.19 0 257.31 0 304.59v4C0 316 5.08 320 12.09 320z"/></svg></button>

      <button 
        class="
          wrap-code-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.is-wrap]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle code wrap"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z"/></svg></button>
      
      <button 
        class="
          copy-code-button
          tw-select-none
          tw-mx-2 
          tw-hidden
          group-[.is-open]:tw-block
          hover:tw-text-fgColor-link 
          print:!tw-hidden"
        title="Copy code">
          <span class="copy-icon tw-block"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z"/></svg></span>
          <span class="check-icon tw-hidden"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"/></svg></span>
      </button>
        
      <button 
        class="
          tw-select-none 
          tw-mx-2 
          tw-block 
          group-[.is-open]:tw-hidden 
          print:!tw-hidden" 
        disabled
        aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M328 256c0 39.8-32.2 72-72 72s-72-32.2-72-72 32.2-72 72-72 72 32.2 72 72zm104-72c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72zm-352 0c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72z"/></svg></button>
    </div>
  </div>
  <pre style="counter-reset: codeblock;" class="tw-block tw-m-0 tw-p-0"><code 
    id="codeblock-id-10" 
    class="
      chroma 
      !tw-block 
      tw-p-0
      tw-m-0
      tw-transition-[max-height] 
      tw-duration-500 
      tw-ease-in-out 
      group-[.is-closed]:!tw-max-h-0 
      group-[.is-wrap]:tw-text-wrap
      tw-overflow-y-hidden
      tw-overflow-x-auto
      tw-scrollbar-thin
      "><span class="line"><span class="cl"><span class="k">select</span><span class="w"> </span><span class="o">*</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">from</span><span class="w"> </span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="k">join</span><span class="w"> </span><span class="o">`</span><span class="n">post</span><span class="o">`</span><span class="w"> </span><span class="k">on</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">id</span><span class="o">`</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">`</span><span class="n">post</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">user_id</span><span class="o">`</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">and</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">`</span><span class="n">post</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">title</span><span class="o">`</span><span class="w"> </span><span class="k">like</span><span class="w"> </span><span class="s1">&#39;치킨%&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">OR</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">select</span><span class="w"> </span><span class="o">*</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">from</span><span class="w"> </span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">       </span><span class="k">join</span><span class="w"> </span><span class="o">`</span><span class="n">post</span><span class="o">`</span><span class="w"> </span><span class="k">on</span><span class="w"> </span><span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">id</span><span class="o">`</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">`</span><span class="n">post</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">user_id</span><span class="o">`</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">where</span><span class="w"> </span><span class="o">`</span><span class="n">post</span><span class="o">`</span><span class="p">.</span><span class="o">`</span><span class="n">title</span><span class="o">`</span><span class="w"> </span><span class="k">like</span><span class="w"> </span><span class="s1">&#39;치킨%&#39;</span></span></span></code></pre>
</div>
<p>이와 같이 표현할 수 있을것 같습니다.</p>
<blockquote>
  <p>참고자료</p>

</blockquote><ul>
<li><a href="https://stackoverflow.com/questions/30231862/laravel-eloquent-has-with-wherehas-what-do-they-mean?answertab=votes#tab-top" title="해당 링크로 이동" target="_blank" rel="noopener noreferrer">Stack Overflow -&gt; Laravel - Eloquent “Has”, “With”, “WhereHas” - What do they mean?</a></li>
<li><a href="https://laravel.kr/docs/5.8/eloquent-relationships" title="해당 링크로 이동" target="_blank" rel="noopener noreferrer">Laravel 공식 문서 -&gt; Eloquent: Relationships - 관계</a></li>
</ul>]]></description></item><item><title>［PHP］배열 key의 min 또는 max 구하기</title><link>http://blog.hodory.dev/2018/10/27/php-array-column/</link><pubDate>Sat, 27 Oct 2018 15:23:32 +0000</pubDate><author><name>hodory</name></author><guid>http://blog.hodory.dev/2018/10/27/php-array-column/</guid><description><![CDATA[<p>PHP로 개발을 하다보면, 연관 배열을 많이 쓰게되는데요</p>
<p>아래와 같은 배열에서 cnt의 max값과 min값을 구하려면 어떻게 해야할까요?</p>
<p>또는 이러한 배열에서 특정 키값의 값만 뽑아 배열로 만들고싶다면 어떻게 해야할까요?</p>
<div class="code-block highlight is-closed show-line-numbers  tw-group tw-my-2">
  <div class="
    code-block-title 
    
    tw-flex 
    tw-flex-row 
    tw-justify-between 
    tw-w-full tw-bg-bgColor-secondary
    ">      
    <button 
      class="
        tw-select-none 
        tw-mx-2 
        tw-block
        group-[.is-open]:tw-rotate-90
        tw-transition-[transform] 
        tw-duration-500 
        tw-ease-in-out
        print:!tw-hidden"
      disabled
      aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z"/></svg></button>

    <div class="code-block-title-bar tw-w-full">
      <p class="tw-select-none !tw-my-1">text</p>
    </div>
    <div class="tw-flex">
      <button 
        class="
          line-number-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.show-line-numbers]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle line numbers"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M61.77 401l17.5-20.15a19.92 19.92 0 0 0 5.07-14.19v-3.31C84.34 356 80.5 352 73 352H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8h22.83a157.41 157.41 0 0 0-11 12.31l-5.61 7c-4 5.07-5.25 10.13-2.8 14.88l1.05 1.93c3 5.76 6.29 7.88 12.25 7.88h4.73c10.33 0 15.94 2.44 15.94 9.09 0 4.72-4.2 8.22-14.36 8.22a41.54 41.54 0 0 1-15.47-3.12c-6.49-3.88-11.74-3.5-15.6 3.12l-5.59 9.31c-3.72 6.13-3.19 11.72 2.63 15.94 7.71 4.69 20.38 9.44 37 9.44 34.16 0 48.5-22.75 48.5-44.12-.03-14.38-9.12-29.76-28.73-34.88zM496 224H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-160H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16V80a16 16 0 0 0-16-16zm0 320H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM16 160h64a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H64V40a8 8 0 0 0-8-8H32a8 8 0 0 0-7.14 4.42l-8 16A8 8 0 0 0 24 64h8v64H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8zm-3.91 160H80a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H41.32c3.29-10.29 48.34-18.68 48.34-56.44 0-29.06-25-39.56-44.47-39.56-21.36 0-33.8 10-40.46 18.75-4.37 5.59-3 10.84 2.8 15.37l8.58 6.88c5.61 4.56 11 2.47 16.12-2.44a13.44 13.44 0 0 1 9.46-3.84c3.33 0 9.28 1.56 9.28 8.75C51 248.19 0 257.31 0 304.59v4C0 316 5.08 320 12.09 320z"/></svg></button>

      <button 
        class="
          wrap-code-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.is-wrap]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle code wrap"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z"/></svg></button>
      
      <button 
        class="
          copy-code-button
          tw-select-none
          tw-mx-2 
          tw-hidden
          group-[.is-open]:tw-block
          hover:tw-text-fgColor-link 
          print:!tw-hidden"
        title="Copy code">
          <span class="copy-icon tw-block"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z"/></svg></span>
          <span class="check-icon tw-hidden"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"/></svg></span>
      </button>
        
      <button 
        class="
          tw-select-none 
          tw-mx-2 
          tw-block 
          group-[.is-open]:tw-hidden 
          print:!tw-hidden" 
        disabled
        aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M328 256c0 39.8-32.2 72-72 72s-72-32.2-72-72 32.2-72 72-72 72 32.2 72 72zm104-72c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72zm-352 0c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72z"/></svg></button>
    </div>
  </div>
  <pre style="counter-reset: codeblock;" class="tw-block tw-m-0 tw-p-0"><code 
    id="codeblock-id-1" 
    class="
      chroma 
      !tw-block 
      tw-p-0
      tw-m-0
      tw-transition-[max-height] 
      tw-duration-500 
      tw-ease-in-out 
      group-[.is-closed]:!tw-max-h-0 
      group-[.is-wrap]:tw-text-wrap
      tw-overflow-y-hidden
      tw-overflow-x-auto
      tw-scrollbar-thin
      "><pre tabindex="0"><code>array(3) {
  [0]=&gt;
  array(3) {
    [&#34;title&#34;]=&gt;
    string(5) &#34;apple&#34;
    [&#34;cnt&#34;]=&gt;
    int(1) &#34;5&#34;
    [&#34;color&#34;]=&gt;
    string(5) &#34;green&#34;
  }
  [1]=&gt;
  array(3) {
    [&#34;name&#34;]=&gt;
    string(4) &#34;pear&#34;
    [&#34;cnt&#34;]=&gt;
    int(1) &#34;8&#34;
    [&#34;color&#34;]=&gt;
    string(6) &#34;yellow&#34;
  }</code></pre></code></pre>
</div>
<p>배열을 순회하여 해당 키의 값을 뽑아 배열을 만들고,</p>
<p>최소 또는 최대값이 필요하면 min 또는 max 함수를 적용해야 한다 생각했습니다.</p>
<p>그런 코드는 만들고 싶지 않아 검색을 하다보니</p>
<p>PHP 5.5버전부터는 <a href="http://php.net/manual/en/function.array-column.php" title="해당 링크로 이동" target="_blank" rel="noopener noreferrer">array_column</a>을 사용하면 쉽게 처리할 수 있었습니다.</p>
<p><code>array array_column ( array $input , mixed $column_key [, mixed $index_key = NULL ] )</code> 와 같은 구조로</p>
<p>첫번째 파라미터에 해당 배열을 넣고, 두번째 파라미터에 뽑아낼 key를 넣으면 됩니다.</p>
<p>예를들어 아래와 같은 연관 배열에서 cnt로만 배열을 만들려면 이와 같이 할 수 있습니다.</p>
<div class="code-block highlight is-closed show-line-numbers  tw-group tw-my-2">
  <div class="
    code-block-title 
    
    tw-flex 
    tw-flex-row 
    tw-justify-between 
    tw-w-full tw-bg-bgColor-secondary
    ">      
    <button 
      class="
        tw-select-none 
        tw-mx-2 
        tw-block
        group-[.is-open]:tw-rotate-90
        tw-transition-[transform] 
        tw-duration-500 
        tw-ease-in-out
        print:!tw-hidden"
      disabled
      aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z"/></svg></button>

    <div class="code-block-title-bar tw-w-full">
      <p class="tw-select-none !tw-my-1">php</p>
    </div>
    <div class="tw-flex">
      <button 
        class="
          line-number-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.show-line-numbers]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle line numbers"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M61.77 401l17.5-20.15a19.92 19.92 0 0 0 5.07-14.19v-3.31C84.34 356 80.5 352 73 352H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8h22.83a157.41 157.41 0 0 0-11 12.31l-5.61 7c-4 5.07-5.25 10.13-2.8 14.88l1.05 1.93c3 5.76 6.29 7.88 12.25 7.88h4.73c10.33 0 15.94 2.44 15.94 9.09 0 4.72-4.2 8.22-14.36 8.22a41.54 41.54 0 0 1-15.47-3.12c-6.49-3.88-11.74-3.5-15.6 3.12l-5.59 9.31c-3.72 6.13-3.19 11.72 2.63 15.94 7.71 4.69 20.38 9.44 37 9.44 34.16 0 48.5-22.75 48.5-44.12-.03-14.38-9.12-29.76-28.73-34.88zM496 224H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-160H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16V80a16 16 0 0 0-16-16zm0 320H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM16 160h64a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H64V40a8 8 0 0 0-8-8H32a8 8 0 0 0-7.14 4.42l-8 16A8 8 0 0 0 24 64h8v64H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8zm-3.91 160H80a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H41.32c3.29-10.29 48.34-18.68 48.34-56.44 0-29.06-25-39.56-44.47-39.56-21.36 0-33.8 10-40.46 18.75-4.37 5.59-3 10.84 2.8 15.37l8.58 6.88c5.61 4.56 11 2.47 16.12-2.44a13.44 13.44 0 0 1 9.46-3.84c3.33 0 9.28 1.56 9.28 8.75C51 248.19 0 257.31 0 304.59v4C0 316 5.08 320 12.09 320z"/></svg></button>

      <button 
        class="
          wrap-code-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.is-wrap]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle code wrap"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z"/></svg></button>
      
      <button 
        class="
          copy-code-button
          tw-select-none
          tw-mx-2 
          tw-hidden
          group-[.is-open]:tw-block
          hover:tw-text-fgColor-link 
          print:!tw-hidden"
        title="Copy code">
          <span class="copy-icon tw-block"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z"/></svg></span>
          <span class="check-icon tw-hidden"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"/></svg></span>
      </button>
        
      <button 
        class="
          tw-select-none 
          tw-mx-2 
          tw-block 
          group-[.is-open]:tw-hidden 
          print:!tw-hidden" 
        disabled
        aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M328 256c0 39.8-32.2 72-72 72s-72-32.2-72-72 32.2-72 72-72 72 32.2 72 72zm104-72c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72zm-352 0c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72z"/></svg></button>
    </div>
  </div>
  <pre style="counter-reset: codeblock;" class="tw-block tw-m-0 tw-p-0"><code 
    id="codeblock-id-2" 
    class="
      chroma 
      !tw-block 
      tw-p-0
      tw-m-0
      tw-transition-[max-height] 
      tw-duration-500 
      tw-ease-in-out 
      group-[.is-closed]:!tw-max-h-0 
      group-[.is-wrap]:tw-text-wrap
      tw-overflow-y-hidden
      tw-overflow-x-auto
      tw-scrollbar-thin
      "><span class="line"><span class="cl"><span class="o">&lt;?</span><span class="nx">php</span>
</span></span><span class="line"><span class="cl"><span class="nv">$arr</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;title&#39;</span><span class="o">=&gt;</span><span class="s1">&#39;title1&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;cnt&#39;</span><span class="o">=&gt;</span><span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;color&#39;</span><span class="o">=&gt;</span><span class="s1">&#39;blue&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;title&#39;</span><span class="o">=&gt;</span><span class="s1">&#39;title2&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;cnt&#39;</span><span class="o">=&gt;</span><span class="mi">3</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;color&#39;</span><span class="o">=&gt;</span><span class="s1">&#39;blue&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">],</span>
</span></span><span class="line"><span class="cl"><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$cntArr</span> <span class="o">=</span> <span class="nx">array_column</span><span class="p">(</span><span class="nv">$arr</span><span class="p">,</span> <span class="s1">&#39;cnt&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">var_dump</span><span class="p">(</span><span class="nv">$cntArr</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">### Result 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">array</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">int</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">int</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</div>
<p>또한 세번째 파라미터로는 index_key를 넣을 수 있는데요</p>
<p>return 할 배열의 키로 사용할 값을 넣으면 됩니다 예를들어 이렇게 쓸 수 있을것 같았습니다.</p>
<div class="code-block highlight is-closed show-line-numbers  tw-group tw-my-2">
  <div class="
    code-block-title 
    
    tw-flex 
    tw-flex-row 
    tw-justify-between 
    tw-w-full tw-bg-bgColor-secondary
    ">      
    <button 
      class="
        tw-select-none 
        tw-mx-2 
        tw-block
        group-[.is-open]:tw-rotate-90
        tw-transition-[transform] 
        tw-duration-500 
        tw-ease-in-out
        print:!tw-hidden"
      disabled
      aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z"/></svg></button>

    <div class="code-block-title-bar tw-w-full">
      <p class="tw-select-none !tw-my-1">php</p>
    </div>
    <div class="tw-flex">
      <button 
        class="
          line-number-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.show-line-numbers]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle line numbers"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M61.77 401l17.5-20.15a19.92 19.92 0 0 0 5.07-14.19v-3.31C84.34 356 80.5 352 73 352H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8h22.83a157.41 157.41 0 0 0-11 12.31l-5.61 7c-4 5.07-5.25 10.13-2.8 14.88l1.05 1.93c3 5.76 6.29 7.88 12.25 7.88h4.73c10.33 0 15.94 2.44 15.94 9.09 0 4.72-4.2 8.22-14.36 8.22a41.54 41.54 0 0 1-15.47-3.12c-6.49-3.88-11.74-3.5-15.6 3.12l-5.59 9.31c-3.72 6.13-3.19 11.72 2.63 15.94 7.71 4.69 20.38 9.44 37 9.44 34.16 0 48.5-22.75 48.5-44.12-.03-14.38-9.12-29.76-28.73-34.88zM496 224H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-160H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16V80a16 16 0 0 0-16-16zm0 320H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM16 160h64a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H64V40a8 8 0 0 0-8-8H32a8 8 0 0 0-7.14 4.42l-8 16A8 8 0 0 0 24 64h8v64H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8zm-3.91 160H80a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H41.32c3.29-10.29 48.34-18.68 48.34-56.44 0-29.06-25-39.56-44.47-39.56-21.36 0-33.8 10-40.46 18.75-4.37 5.59-3 10.84 2.8 15.37l8.58 6.88c5.61 4.56 11 2.47 16.12-2.44a13.44 13.44 0 0 1 9.46-3.84c3.33 0 9.28 1.56 9.28 8.75C51 248.19 0 257.31 0 304.59v4C0 316 5.08 320 12.09 320z"/></svg></button>

      <button 
        class="
          wrap-code-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.is-wrap]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle code wrap"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z"/></svg></button>
      
      <button 
        class="
          copy-code-button
          tw-select-none
          tw-mx-2 
          tw-hidden
          group-[.is-open]:tw-block
          hover:tw-text-fgColor-link 
          print:!tw-hidden"
        title="Copy code">
          <span class="copy-icon tw-block"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z"/></svg></span>
          <span class="check-icon tw-hidden"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"/></svg></span>
      </button>
        
      <button 
        class="
          tw-select-none 
          tw-mx-2 
          tw-block 
          group-[.is-open]:tw-hidden 
          print:!tw-hidden" 
        disabled
        aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M328 256c0 39.8-32.2 72-72 72s-72-32.2-72-72 32.2-72 72-72 72 32.2 72 72zm104-72c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72zm-352 0c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72z"/></svg></button>
    </div>
  </div>
  <pre style="counter-reset: codeblock;" class="tw-block tw-m-0 tw-p-0"><code 
    id="codeblock-id-3" 
    class="
      chroma 
      !tw-block 
      tw-p-0
      tw-m-0
      tw-transition-[max-height] 
      tw-duration-500 
      tw-ease-in-out 
      group-[.is-closed]:!tw-max-h-0 
      group-[.is-wrap]:tw-text-wrap
      tw-overflow-y-hidden
      tw-overflow-x-auto
      tw-scrollbar-thin
      "><span class="line"><span class="cl"><span class="o">&lt;?</span><span class="nx">php</span>
</span></span><span class="line"><span class="cl"><span class="c1">// example code
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nv">$arr</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;idx&#39;</span> <span class="o">=&gt;</span> <span class="mi">2555</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;title&#39;</span><span class="o">=&gt;</span><span class="s1">&#39;title1&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;cnt&#39;</span><span class="o">=&gt;</span><span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;color&#39;</span><span class="o">=&gt;</span><span class="s1">&#39;blue&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;idx&#39;</span> <span class="o">=&gt;</span> <span class="mi">2982</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;title&#39;</span><span class="o">=&gt;</span><span class="s1">&#39;title2&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;cnt&#39;</span><span class="o">=&gt;</span><span class="mi">3</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;color&#39;</span><span class="o">=&gt;</span><span class="s1">&#39;blue&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">],</span>
</span></span><span class="line"><span class="cl"><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$cntArr</span> <span class="o">=</span> <span class="nx">array_column</span><span class="p">(</span><span class="nv">$arr</span><span class="p">,</span> <span class="s1">&#39;cnt&#39;</span><span class="p">,</span> <span class="s1">&#39;idx&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">var_dump</span><span class="p">(</span><span class="nv">$cntArr</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">### Result
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">array</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="p">[</span><span class="mi">2555</span><span class="p">]</span><span class="o">=&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">int</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">[</span><span class="mi">2982</span><span class="p">]</span><span class="o">=&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">int</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</div>
<p>이와같이 사용하면 해당 idx의 cnt를 뽑을 수 있어 더 효율적으로 사용할 수 있을거 같습니다.</p>
<p>더 좋은 사용 방안 있으시면 댓글로 부탁드리겠습니다.</p>
<blockquote>
  <p>참고자료</p>

</blockquote><ul>
<li><a href="https://stackoverflow.com/questions/17339421/find-highest-value-in-multidimensional-array" title="해당 링크로 이동" target="_blank" rel="noopener noreferrer">StackOverFlow - Find highest value in multidimensional array</a></li>
<li><a href="https://secure.php.net/manual/en/function.array-column.php" title="해당 링크로 이동" target="_blank" rel="noopener noreferrer">PHP 공식문서 - array_column()</a></li>
</ul>]]></description></item><item><title>［PHP］ PHP4.x 버전과 PHP 5.x 버전 비교(Comparison between PHP4 and PHP5)</title><link>http://blog.hodory.dev/2018/04/20/php4-vs-php5/</link><pubDate>Fri, 20 Apr 2018 02:04:12 +0000</pubDate><author><name>hodory</name></author><guid>http://blog.hodory.dev/2018/04/20/php4-vs-php5/</guid><description><![CDATA[<h3 id="php5에서-무엇이-바뀌었을까" class="headerLink">
    <a href="#php5%ec%97%90%ec%84%9c-%eb%ac%b4%ec%97%87%ec%9d%b4-%eb%b0%94%eb%80%8c%ec%97%88%ec%9d%84%ea%b9%8c" class="header-mark"></a>PHP5에서 무엇이 바뀌었을까?</h3><ul>
<li>젠드엔진2가 내장되었습니다.</li>
<li>PHP GCI 버전이 <code>php.exe</code> 에서 <code>php-cgi.exe</code> 로 변경되었습니다.</li>
<li>PHP CLI 버전이 <code>cli/php.exe</code> 에서 주 디렉토리로 변경되었습니다.</li>
<li>PHP CLI 버전은 <code>php.ini</code> 지시어 설정과 상관없이 항상 전역 <code>$argv</code>(Array of arguments passed to script) 와 <code>$argc</code>(The number of arguments passed to script) 변수를 가지며, <code>register_argc_argv</code>(argv와 argc 변수를 선언할지 여부 설정)를 <code>off</code>로 설정해도 영향을 미치지 않습니다.</li>
</ul>
<ul>
<li>ISAPI 모듈들의 이름이 php4xxx에서 php5xxx로 바뀌었습니다.</li>
<li>프로퍼티가 없는 객체를 &ldquo;빈&rdquo; 것으로 판단하지 않습니다.</li>
<li>인터페이스 등을 사용할 경우, 사용 전 선언해야합니다.</li>
<li>포함한 파일에 함수정의가 있을경우, 그 파일이 두번 포함 되었을 때,PHP5에서는 치명적인 오류가 발생합니다. include_once를 사용하길 권장합니다.</li>
<li>키워드
<ul>
<li>예외처리(try()-catch()-finally()[v5.5~])</li>
<li>네임스페이스[v5.3~]</li>
<li>인터페이스(interface,implements)</li>
<li>추상클래스(abstract)</li>
<li>접근제어자(private,protected,public)</li>
<li>instanceof : 객체의 클래스 확인</li>
<li>clone : 객체 복제</li>
<li>컴파일 상수
<ul>
<li><code>__NAMESPACE__</code> [v5.3~]</li>
<li><code>__DIR__</code> [v5.3~]</li>
</ul>
</li>
</ul>
</li>
<li>DataBase
<ul>
<li>MySQL 클라이언트 라이브러리를 포함하지 않습니다.</li>
<li>MySQL 4.1 이상에서 동작하는 <a href="https://php.net/manual/kr/ref.mysqli.php" title="공식 문서로 이동" target="_blank" rel="noopener noreferrer">MySQLi</a>가 추가되었습니다.</li>
<li><a href="https://php.net/manual/kr/ref.sqlite.php" target="_blank" rel="noopener noreferrer">SQLite</a> 확장 모듈이 포함됩니다.</li>
</ul>
</li>
<li>새로운 함수가 추가되었습니다.(New Functions)
<ul>
<li>배열 (9개)
<ul>
<li><a href="https://php.net/manual/kr/function.array-combine.php" target="_blank" rel="noopener noreferrer">array_combine()</a> : 하나의 배열은 키로, 하나의 배열은 값으로 가지는 배열 생성 합니다.</li>
<li><a href="https://php.net/manual/kr/function.array-walk-recursive.php" target="_blank" rel="noopener noreferrer">array_walk_recursive()</a> : 배열의 모든 원소에 사용자 함수를 적용합니다.</li>
<li>이 외의 7개 함수</li>
</ul>
</li>
<li>iconv (7개)
<ul>
<li><a href="https://php.net/manual/kr/function.iconv-strlen.php" target="_blank" rel="noopener noreferrer">iconv_strlen()</a> : 문자열의 문자 수를 반환 합니다.</li>
<li><a href="https://php.net/manual/kr/function.iconv-strpos.php" target="_blank" rel="noopener noreferrer">iconv_strpos()</a> : haystack에서 needle이 처음으로 나타나는 위치를 찾습니다.</li>
<li><a href="https://php.net/manual/kr/function.iconv-strrpos.php" target="_blank" rel="noopener noreferrer">iconv_strrpos()</a> : haystack에서 needle이 마지막으로 나타나는 위치를 찾습니다.</li>
<li><a href="https://php.net/manual/kr/function.iconv-substr.php" target="_blank" rel="noopener noreferrer">iconv_substr()</a> : 문자열의 일부를 잘라냅니다.</li>
<li>이 외의 3개 함수</li>
</ul>
</li>
<li>스트림 (8개)
<ul>
<li><a href="https://php.net/manual/kr/function.stream-copy-to-stream.php" target="_blank" rel="noopener noreferrer">stream_copy_to_stream()</a> : 한 스트림의 데이터를 다른 스트림으로 복제합니다.</li>
<li><a href="https://php.net/manual/kr/function.stream-get-line.php" target="_blank" rel="noopener noreferrer">stream_get_line()</a> : 스트림 자원에서 주어진 구분자로 나타나는 열을 얻습니다.</li>
<li>이 외의 6개 함수</li>
</ul>
</li>
<li>날짜와 시간 관련 (4개)
<ul>
<li><a href="https://php.net/manual/kr/function.idate.php" target="_blank" rel="noopener noreferrer">idate()</a> : 지역 날짜/시간을 정수로 바꿉니다.</li>
<li><a href="https://php.net/manual/kr/function.date-sunset.php" target="_blank" rel="noopener noreferrer">date_sunset()</a> : 주어진 날짜와 위치의 일몰 시간을 반환합니다.</li>
<li><a href="https://php.net/manual/kr/function.date-sunrise.php" target="_blank" rel="noopener noreferrer">date_sunrise()</a> : 주어진 날짜와 위치의 일출 시간을 반환합니다.</li>
<li><a href="https://php.net/manual/kr/function.time-nanosleep.php" target="_blank" rel="noopener noreferrer">time_nanosleep()</a> : 초와 나노초의 수만큼 지연합니다.</li>
</ul>
</li>
<li>문자열 (3개)
<ul>
<li><a href="https://php.net/manual/kr/function.str-split.php" target="_blank" rel="noopener noreferrer">str_split()</a> : 문자열을 배열로 변환합니다.</li>
<li><a href="https://php.net/manual/kr/function.strpbrk.php" target="_blank" rel="noopener noreferrer">strbrk()</a> : 문자열에서 문자 세트에 있는 문자를 검색합니다.(대소문자 구분하여 세트중 한글자라도 먼저 나오는것을 찾습니다.)</li>
<li><a href="https://php.net/manual/kr/function.substr-compare.php" target="_blank" rel="noopener noreferrer">substr_compare()</a> : 두 문자열을 offset부터 length까지(대소문자 구분없이:옵션) 바이너리로 안전하게 비교합니다.</li>
</ul>
</li>
<li>인터베이스 (19개)</li>
<li>기타 (30개)
<ul>
<li><a href="https://php.net/manual/kr/function.file-put-contents.php" target="_blank" rel="noopener noreferrer">file_put_contents()</a> : 문자열을 파일로 씁니다.</li>
<li><a href="https://php.net/manual/kr/function.get-headers.php" target="_blank" rel="noopener noreferrer">get_headers()</a> : HTTP 요청의 응답으로 서버가 보낸 모든 헤더를 가져옵니다.</li>
<li><a href="https://php.net/manual/kr/function.http-build-query.php" target="_blank" rel="noopener noreferrer">http_build_query()</a> : 배열을 이용하여 URL-encode한 쿼리 문자열을 생성합니다.</li>
<li><a href="https://php.net/manual/kr/function.scandir.php" target="_blank" rel="noopener noreferrer">scandir()</a> : 지정한 경로 안에 파일과 디렉토리 목록을 배열로 반환합니다.</li>
<li>이 외의 27개 함수</li>
</ul>
</li>
<li>자세한 내용은 <a href="https://php.net/manual/kr/migration5.functions.php" target="_blank" rel="noopener noreferrer">해당링크</a>에서 확인 하실 수 있습니다.</li>
</ul>
</li>
<li>새로운 지시어 (<code>php.ini</code> 지시어)
<ul>
<li>mail.force_extra_parameter</li>
<li><a href="https://php.net/manual/kr/ini.core.php#ini.register-long-arrays" target="_blank" rel="noopener noreferrer">register_long_arrays</a></li>
<li><a href="https://php.net/manual/kr/session.configuration.php#ini.session.hash-function" target="_blank" rel="noopener noreferrer">session.hash_function</a> : 해시 함수 선택(MD5 or SHA-1)</li>
<li><a href="https://php.net/manual/kr/session.configuration.php#ini.session.hash-bits-per-character" target="_blank" rel="noopener noreferrer">session.hash_bits_per_character</a></li>
<li><a href="https://php.net/manual/kr/ini.core.php#ini.zend.ze1-compatibility-mode" target="_blank" rel="noopener noreferrer">zend.ze1_compatibility_mode</a> : 젠드엔진1 (PHP 4)호환모드 활성화</li>
</ul>
</li>
</ul>
<h5 id="기타-자세한-사항은-해당링크httpsphpnetmanualkrmigration5php에서-확인-하실-수-있습니다" class="headerLink">
    <a href="#%ea%b8%b0%ed%83%80-%ec%9e%90%ec%84%b8%ed%95%9c-%ec%82%ac%ed%95%ad%ec%9d%80-%ed%95%b4%eb%8b%b9%eb%a7%81%ed%81%achttpsphpnetmanualkrmigration5php%ec%97%90%ec%84%9c-%ed%99%95%ec%9d%b8-%ed%95%98%ec%8b%a4-%ec%88%98-%ec%9e%88%ec%8a%b5%eb%8b%88%eb%8b%a4" class="header-mark"></a>기타 자세한 사항은 <a href="https://php.net/manual/kr/migration5.php" target="_blank" rel="noopener noreferrer">해당링크</a>에서 확인 하실 수 있습니다.</h5><blockquote>
  <p>참고자료</p>

</blockquote><ul>
<li><a href="https://php.net/manual/kr/migration5.php" title="해당 링크로 이동" target="_blank" rel="noopener noreferrer">PHP 공식문서 - PHP4에서 PHP 5.0.x로 이행</a></li>
</ul>]]></description></item><item><title>［PHP］ PSR(PHP Standards Recommendations)이란?</title><link>http://blog.hodory.dev/2018/04/18/what-is-psr/</link><pubDate>Wed, 18 Apr 2018 02:28:50 +0000</pubDate><author><name>hodory</name></author><guid>http://blog.hodory.dev/2018/04/18/what-is-psr/</guid><description><![CDATA[<h3 id="psr이란" class="headerLink">
    <a href="#psr%ec%9d%b4%eb%9e%80" class="header-mark"></a>PSR이란?</h3><p>PHP Standards Recommendations의 약자로 <a href="https://www.php-fig.org/" title="PHP-FIG로 이동" target="_blank" rel="noopener noreferrer">PHP-FIG(PHP-FrameWork Interop Group)</a>에서 만든 표준 권고안입니다.</p>
<ul>
<li><a href="#PSR-0-DEPRECATED-Autoloading-Standard" rel="">PSR-0</a></li>
<li><a href="#PSR-1-Basic-Coding-Standard" rel="">PSR-1</a></li>
<li><a href="#PSR-2-Coding-Style-Guide" rel="">PSR-2</a></li>
<li><a href="#PSR-3-Logger-Interface" rel="">PSR-3</a></li>
<li><a href="#PSR-4-Autoloader" rel="">PSR-4</a></li>
</ul>
<ul>
<li>작성예정 목록
<ul>
<li>PSR-6</li>
<li>PSR-7</li>
<li>PSR-11</li>
<li>PSR-13</li>
<li>PSR-15</li>
<li>PSR-16</li>
</ul>
</li>
</ul>
<h4 id="psr-0-deprecated--autoloading-standard" class="headerLink">
    <a href="#psr-0-deprecated--autoloading-standard" class="header-mark"></a>PSR-0 (DEPRECATED) : Autoloading Standard</h4><p>오토로딩 표준으로 PSR-4가 제정되며 DEPRECATED 되었습니다.</p>
<ul>
<li><code>\&lt;Vendor Name&gt;\(&lt;NameSpace&gt;\)*&lt;Class Name&gt;</code>의 구조를 따릅니다.</li>
<li>각 네임스페이스는 <code>(&quot;Vendor Name&quot;)</code>이 최상위 네임스페이스로 있어야합니다.</li>
<li>각 네임스페이스는 원하는 만큼 하위 네임스페이스를 가질 수 있습니다.</li>
<li>각 네임스페이스 구분자는 파일시스템에서 로딩될때 <code>DIRECTORY_SEPARATOR</code>로 변환됩니다.</li>
<li>클래스명의 각 <code>_</code> 문자는 <code>DIRECTORY_SEPARATOR</code>로 변환됩니다.</li>
<li>기타 자세한 사항은 <a href="https://www.php-fig.org/psr/psr-0/" title="PSR-0 문서로 이동" target="_blank" rel="noopener noreferrer">PSR-0</a>에서 확인 가능합니다.</li>
</ul>
<h5 id="example" class="headerLink">
    <a href="#example" class="header-mark"></a>Example)</h5><p><code>\Doctrine\Commone\IsolatedClassLoader</code>
<code>=&gt;/path/to/project/lib/vendor/Doctrine/Common/IsolatedClassLoader.php</code>
<code>\Symfony\Core\Request</code>
<code>=&gt;/path/to/project/lib/vendor/Symfony/Core/Request.php</code></p>
<h4 id="psr-1--basic-coding-standard" class="headerLink">
    <a href="#psr-1--basic-coding-standard" class="header-mark"></a>PSR-1 : Basic Coding Standard</h4><p>PHP 코드를 공유하는데 있어 기술적 상호 운용성을 위해 고려 해야 할 표준 코딩 가이드입니다.</p>
<ul>
<li>
<p><code>&lt;?php</code> 와  <code>&lt;?=</code> 태그만 사용해야합니다.</p>
</li>
<li>
<p>PHP 코드에는 BOM(Byte Order Mark) 없이 UTF-8로만 사용해야합니다.</p>
</li>
<li>
<p>네임스페이스와 클래스는 PSR(PSR-0, PSR-4)의 오토로딩을 따라야합니다.</p>
<ul>
<li>클래스명은 <code>StudlyCaps</code> 와 같이 첫글자를 대문자로 합니다.</li>
</ul>
<div class="code-block highlight is-closed show-line-numbers  tw-group tw-my-2">
  <div class="
    code-block-title 
    
    tw-flex 
    tw-flex-row 
    tw-justify-between 
    tw-w-full tw-bg-bgColor-secondary
    ">      
    <button 
      class="
        tw-select-none 
        tw-mx-2 
        tw-block
        group-[.is-open]:tw-rotate-90
        tw-transition-[transform] 
        tw-duration-500 
        tw-ease-in-out
        print:!tw-hidden"
      disabled
      aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z"/></svg></button>

    <div class="code-block-title-bar tw-w-full">
      <p class="tw-select-none !tw-my-1">php</p>
    </div>
    <div class="tw-flex">
      <button 
        class="
          line-number-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.show-line-numbers]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle line numbers"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M61.77 401l17.5-20.15a19.92 19.92 0 0 0 5.07-14.19v-3.31C84.34 356 80.5 352 73 352H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8h22.83a157.41 157.41 0 0 0-11 12.31l-5.61 7c-4 5.07-5.25 10.13-2.8 14.88l1.05 1.93c3 5.76 6.29 7.88 12.25 7.88h4.73c10.33 0 15.94 2.44 15.94 9.09 0 4.72-4.2 8.22-14.36 8.22a41.54 41.54 0 0 1-15.47-3.12c-6.49-3.88-11.74-3.5-15.6 3.12l-5.59 9.31c-3.72 6.13-3.19 11.72 2.63 15.94 7.71 4.69 20.38 9.44 37 9.44 34.16 0 48.5-22.75 48.5-44.12-.03-14.38-9.12-29.76-28.73-34.88zM496 224H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-160H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16V80a16 16 0 0 0-16-16zm0 320H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM16 160h64a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H64V40a8 8 0 0 0-8-8H32a8 8 0 0 0-7.14 4.42l-8 16A8 8 0 0 0 24 64h8v64H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8zm-3.91 160H80a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H41.32c3.29-10.29 48.34-18.68 48.34-56.44 0-29.06-25-39.56-44.47-39.56-21.36 0-33.8 10-40.46 18.75-4.37 5.59-3 10.84 2.8 15.37l8.58 6.88c5.61 4.56 11 2.47 16.12-2.44a13.44 13.44 0 0 1 9.46-3.84c3.33 0 9.28 1.56 9.28 8.75C51 248.19 0 257.31 0 304.59v4C0 316 5.08 320 12.09 320z"/></svg></button>

      <button 
        class="
          wrap-code-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.is-wrap]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle code wrap"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z"/></svg></button>
      
      <button 
        class="
          copy-code-button
          tw-select-none
          tw-mx-2 
          tw-hidden
          group-[.is-open]:tw-block
          hover:tw-text-fgColor-link 
          print:!tw-hidden"
        title="Copy code">
          <span class="copy-icon tw-block"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z"/></svg></span>
          <span class="check-icon tw-hidden"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"/></svg></span>
      </button>
        
      <button 
        class="
          tw-select-none 
          tw-mx-2 
          tw-block 
          group-[.is-open]:tw-hidden 
          print:!tw-hidden" 
        disabled
        aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M328 256c0 39.8-32.2 72-72 72s-72-32.2-72-72 32.2-72 72-72 72 32.2 72 72zm104-72c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72zm-352 0c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72z"/></svg></button>
    </div>
  </div>
  <pre style="counter-reset: codeblock;" class="tw-block tw-m-0 tw-p-0"><code 
    id="codeblock-id-1" 
    class="
      chroma 
      !tw-block 
      tw-p-0
      tw-m-0
      tw-transition-[max-height] 
      tw-duration-500 
      tw-ease-in-out 
      group-[.is-closed]:!tw-max-h-0 
      group-[.is-wrap]:tw-text-wrap
      tw-overflow-y-hidden
      tw-overflow-x-auto
      tw-scrollbar-thin
      "><span class="line"><span class="cl"><span class="o">&lt;?</span><span class="nx">php</span>
</span></span><span class="line"><span class="cl"><span class="c1">// PHP 5.3 이후 버전
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">namespace</span> <span class="nx">Vendor\Model</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Foo</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// PHP 5.3 이전 버전
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">Vendor_Model_Foo</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</div>
</li>
<li>
<p>상수는 <code>_</code>를 구분자로 대문자로 선언해야합니다. <code>ex)const CURRENT_VERSION = 1.0;</code></p>
</li>
<li>
<p>프로퍼티명에 대한 규칙은 정해져 있지않으나, 스코프에서 일관적이어야합니다.</p>
</li>
<li>
<p>메소드는 카멜케이스를 사용해야합니다. <code>ex)camelCase()</code></p>
</li>
</ul>
<h4 id="psr-2--coding-style-guide" class="headerLink">
    <a href="#psr-2--coding-style-guide" class="header-mark"></a>PSR-2 : Coding Style Guide</h4><p>PSR-1의 확장으로 표준 코딩 스타일 가이드를 다룹니다.</p>
<ul>
<li>
<p>PSR-1을 따라야합니다.</p>
</li>
<li>
<p>들여쓰기 할때는 탭을 사용하지 않고 스페이스 4개를 사용합니다.</p>
</li>
<li>
<p>라인 수에 대한 엄격한 제한은 아니지만, 한 줄에는 120자 이하, 라인 수는 80개 이하로 작성합니다.</p>
</li>
<li>
<p>namespace선언과 use 선언들 후에는 한줄을 띄워 작성합니다.</p>
</li>
<li>
<p>클래스와 메소드들의 여는 괄호는 다음줄에 작성하고, 닫는 괄호는 내용이 끝난 다음 줄에 작성합니다.</p>
<ul>
<li>ex)</li>
</ul>
<div class="code-block highlight is-closed show-line-numbers  tw-group tw-my-2">
  <div class="
    code-block-title 
    
    tw-flex 
    tw-flex-row 
    tw-justify-between 
    tw-w-full tw-bg-bgColor-secondary
    ">      
    <button 
      class="
        tw-select-none 
        tw-mx-2 
        tw-block
        group-[.is-open]:tw-rotate-90
        tw-transition-[transform] 
        tw-duration-500 
        tw-ease-in-out
        print:!tw-hidden"
      disabled
      aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z"/></svg></button>

    <div class="code-block-title-bar tw-w-full">
      <p class="tw-select-none !tw-my-1">php</p>
    </div>
    <div class="tw-flex">
      <button 
        class="
          line-number-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.show-line-numbers]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle line numbers"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M61.77 401l17.5-20.15a19.92 19.92 0 0 0 5.07-14.19v-3.31C84.34 356 80.5 352 73 352H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8h22.83a157.41 157.41 0 0 0-11 12.31l-5.61 7c-4 5.07-5.25 10.13-2.8 14.88l1.05 1.93c3 5.76 6.29 7.88 12.25 7.88h4.73c10.33 0 15.94 2.44 15.94 9.09 0 4.72-4.2 8.22-14.36 8.22a41.54 41.54 0 0 1-15.47-3.12c-6.49-3.88-11.74-3.5-15.6 3.12l-5.59 9.31c-3.72 6.13-3.19 11.72 2.63 15.94 7.71 4.69 20.38 9.44 37 9.44 34.16 0 48.5-22.75 48.5-44.12-.03-14.38-9.12-29.76-28.73-34.88zM496 224H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-160H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16V80a16 16 0 0 0-16-16zm0 320H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM16 160h64a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H64V40a8 8 0 0 0-8-8H32a8 8 0 0 0-7.14 4.42l-8 16A8 8 0 0 0 24 64h8v64H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8zm-3.91 160H80a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H41.32c3.29-10.29 48.34-18.68 48.34-56.44 0-29.06-25-39.56-44.47-39.56-21.36 0-33.8 10-40.46 18.75-4.37 5.59-3 10.84 2.8 15.37l8.58 6.88c5.61 4.56 11 2.47 16.12-2.44a13.44 13.44 0 0 1 9.46-3.84c3.33 0 9.28 1.56 9.28 8.75C51 248.19 0 257.31 0 304.59v4C0 316 5.08 320 12.09 320z"/></svg></button>

      <button 
        class="
          wrap-code-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.is-wrap]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle code wrap"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z"/></svg></button>
      
      <button 
        class="
          copy-code-button
          tw-select-none
          tw-mx-2 
          tw-hidden
          group-[.is-open]:tw-block
          hover:tw-text-fgColor-link 
          print:!tw-hidden"
        title="Copy code">
          <span class="copy-icon tw-block"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z"/></svg></span>
          <span class="check-icon tw-hidden"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"/></svg></span>
      </button>
        
      <button 
        class="
          tw-select-none 
          tw-mx-2 
          tw-block 
          group-[.is-open]:tw-hidden 
          print:!tw-hidden" 
        disabled
        aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M328 256c0 39.8-32.2 72-72 72s-72-32.2-72-72 32.2-72 72-72 72 32.2 72 72zm104-72c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72zm-352 0c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72z"/></svg></button>
    </div>
  </div>
  <pre style="counter-reset: codeblock;" class="tw-block tw-m-0 tw-p-0"><code 
    id="codeblock-id-2" 
    class="
      chroma 
      !tw-block 
      tw-p-0
      tw-m-0
      tw-transition-[max-height] 
      tw-duration-500 
      tw-ease-in-out 
      group-[.is-closed]:!tw-max-h-0 
      group-[.is-wrap]:tw-text-wrap
      tw-overflow-y-hidden
      tw-overflow-x-auto
      tw-scrollbar-thin
      "><span class="line"><span class="cl"><span class="o">&lt;?</span><span class="nx">php</span>
</span></span><span class="line"><span class="cl"><span class="k">namespace</span> <span class="nx">Vendor\Package</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nx">BazClass</span> <span class="k">as</span> <span class="nx">Baz</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nx">OtherVendor\OtherPackage\BazClass</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">TestClass</span> <span class="k">extends</span> <span class="nx">Baz</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">function</span> <span class="nf">alert</span><span class="p">(</span><span class="nv">$msg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">echo</span> <span class="nv">$msg</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</div>
</li>
<li>
<p>모든 프로퍼티와 메소드는 접근제어자가 선언되어야합니다.</p>
<ul>
<li>abstract와 final 키워드는 접근제어자 이전에 선언되고, static 키워드는 접근제어자 이후에 선언되어야합니다.</li>
</ul>
</li>
<li>
<p>제어문은 사이에 스페이스가 있어야합니다.</p>
<ul>
<li>메소드와 함수호출은 그렇지 않습니다.</li>
<li>ex)</li>
</ul>
<div class="code-block highlight is-closed show-line-numbers  tw-group tw-my-2">
  <div class="
    code-block-title 
    
    tw-flex 
    tw-flex-row 
    tw-justify-between 
    tw-w-full tw-bg-bgColor-secondary
    ">      
    <button 
      class="
        tw-select-none 
        tw-mx-2 
        tw-block
        group-[.is-open]:tw-rotate-90
        tw-transition-[transform] 
        tw-duration-500 
        tw-ease-in-out
        print:!tw-hidden"
      disabled
      aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z"/></svg></button>

    <div class="code-block-title-bar tw-w-full">
      <p class="tw-select-none !tw-my-1">php</p>
    </div>
    <div class="tw-flex">
      <button 
        class="
          line-number-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.show-line-numbers]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle line numbers"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M61.77 401l17.5-20.15a19.92 19.92 0 0 0 5.07-14.19v-3.31C84.34 356 80.5 352 73 352H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8h22.83a157.41 157.41 0 0 0-11 12.31l-5.61 7c-4 5.07-5.25 10.13-2.8 14.88l1.05 1.93c3 5.76 6.29 7.88 12.25 7.88h4.73c10.33 0 15.94 2.44 15.94 9.09 0 4.72-4.2 8.22-14.36 8.22a41.54 41.54 0 0 1-15.47-3.12c-6.49-3.88-11.74-3.5-15.6 3.12l-5.59 9.31c-3.72 6.13-3.19 11.72 2.63 15.94 7.71 4.69 20.38 9.44 37 9.44 34.16 0 48.5-22.75 48.5-44.12-.03-14.38-9.12-29.76-28.73-34.88zM496 224H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-160H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16V80a16 16 0 0 0-16-16zm0 320H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM16 160h64a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H64V40a8 8 0 0 0-8-8H32a8 8 0 0 0-7.14 4.42l-8 16A8 8 0 0 0 24 64h8v64H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8zm-3.91 160H80a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H41.32c3.29-10.29 48.34-18.68 48.34-56.44 0-29.06-25-39.56-44.47-39.56-21.36 0-33.8 10-40.46 18.75-4.37 5.59-3 10.84 2.8 15.37l8.58 6.88c5.61 4.56 11 2.47 16.12-2.44a13.44 13.44 0 0 1 9.46-3.84c3.33 0 9.28 1.56 9.28 8.75C51 248.19 0 257.31 0 304.59v4C0 316 5.08 320 12.09 320z"/></svg></button>

      <button 
        class="
          wrap-code-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.is-wrap]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle code wrap"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z"/></svg></button>
      
      <button 
        class="
          copy-code-button
          tw-select-none
          tw-mx-2 
          tw-hidden
          group-[.is-open]:tw-block
          hover:tw-text-fgColor-link 
          print:!tw-hidden"
        title="Copy code">
          <span class="copy-icon tw-block"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z"/></svg></span>
          <span class="check-icon tw-hidden"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"/></svg></span>
      </button>
        
      <button 
        class="
          tw-select-none 
          tw-mx-2 
          tw-block 
          group-[.is-open]:tw-hidden 
          print:!tw-hidden" 
        disabled
        aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M328 256c0 39.8-32.2 72-72 72s-72-32.2-72-72 32.2-72 72-72 72 32.2 72 72zm104-72c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72zm-352 0c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72z"/></svg></button>
    </div>
  </div>
  <pre style="counter-reset: codeblock;" class="tw-block tw-m-0 tw-p-0"><code 
    id="codeblock-id-3" 
    class="
      chroma 
      !tw-block 
      tw-p-0
      tw-m-0
      tw-transition-[max-height] 
      tw-duration-500 
      tw-ease-in-out 
      group-[.is-closed]:!tw-max-h-0 
      group-[.is-wrap]:tw-text-wrap
      tw-overflow-y-hidden
      tw-overflow-x-auto
      tw-scrollbar-thin
      "><span class="line"><span class="cl"><span class="o">&lt;?</span><span class="nx">php</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span> <span class="k">function</span> <span class="nf">Foo</span><span class="p">(</span><span class="nv">$a</span><span class="p">,</span> <span class="nv">$b</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nv">$a</span> <span class="o">===</span> <span class="nv">$b</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">echo</span> <span class="s2">&#34;equal&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">Foo</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span></span></span></code></pre>
</div>
</li>
<li>
<p>PHP 파일은 빈 줄로 끝나야 하며, PHP로만 이루어진 파일은 닫는 태그인 <code>?&gt;</code>를 생략해야합니다.</p>
</li>
</ul>
<h4 id="psr-3--logger-interface" class="headerLink">
    <a href="#psr-3--logger-interface" class="header-mark"></a>PSR-3 : Logger Interface</h4><p>로깅 라이브러리의 공통적인 인터페이스를 명세합니다.
라이브러리가 <code>Psr\Log\LoggerInterface</code>의 객체를 받아 간편하고 보편적인 방법으로 그것에 로그를 작성할 수 있도록 하는것이 목표입니다.</p>
<ul>
<li>로거 인터페이스는 8개의 <a href="https://tools.ietf.org/html/rfc5424" target="_blank" rel="noopener noreferrer">RFC 5424</a> 레벨(debug, info, notice, warning, error, critical, alert, emergency)로 로그 작성을 하기 위한 메소드를 제공합니다.</li>
<li>9번째 메소드인 <code>log</code>는 첫번째 인자로 로그 레벨을 받고, 호출시 해당 레벨의 메소드를 호출하는것과 같은 결과를 가집니다.
<ul>
<li>해당 레벨의 메소드가 정의되어 있지 않는 경우, <code>Psr\Log\InvalidArgumentException</code> 에러를 보내야합니다.</li>
</ul>
</li>
<li>모든 메소드는 string 형식의 메시지를 받거나, __toString() 처리 된 object를 받습니다.</li>
<li>컨텍스트에 주어진 값을 execption에 보내거나, php error나 warning, notice로 보내면 안됩니다.</li>
</ul>
<h4 id="psr-4--autoloader" class="headerLink">
    <a href="#psr-4--autoloader" class="header-mark"></a>PSR-4 : Autoloader</h4><p>파일 경로를 통해 클래스를 오토로딩 하기위한 명세로, PSR-0를 포함하고 있습니다.</p>
<ul>
<li><code>class</code>라는 용어는 클래스와 인터페이스, 트레이트 또는 다른 비슷한 구조들을 의미합니다.</li>
<li>정규화 된 클래스명의 형식은 다음을 따릅니다.
<ul>
<li><code>\&lt;NamespaceName&gt;(\&lt;SubNamespaceNames&gt;)*\&lt;ClassName&gt;</code>
<ul>
<li>네임스페이스의 맨 처음은 &ldquo;Vendor namespace&quot;로 알려진것으로 시작합니다.</li>
<li>하나 이상의 서브네임스페이스명을 가집니다.</li>
<li>끝을 클래스명으로 작성 합니다.</li>
<li>소문자와 대문자의 조합을 혼합하여 작성할 수 있습니다.</li>
<li>대소문자를 구분하여 참조해야합니다.</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="code-block highlight is-closed show-line-numbers  tw-group tw-my-2">
  <div class="
    code-block-title 
    
    tw-flex 
    tw-flex-row 
    tw-justify-between 
    tw-w-full tw-bg-bgColor-secondary
    ">      
    <button 
      class="
        tw-select-none 
        tw-mx-2 
        tw-block
        group-[.is-open]:tw-rotate-90
        tw-transition-[transform] 
        tw-duration-500 
        tw-ease-in-out
        print:!tw-hidden"
      disabled
      aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z"/></svg></button>

    <div class="code-block-title-bar tw-w-full">
      <p class="tw-select-none !tw-my-1">php</p>
    </div>
    <div class="tw-flex">
      <button 
        class="
          line-number-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.show-line-numbers]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle line numbers"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M61.77 401l17.5-20.15a19.92 19.92 0 0 0 5.07-14.19v-3.31C84.34 356 80.5 352 73 352H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8h22.83a157.41 157.41 0 0 0-11 12.31l-5.61 7c-4 5.07-5.25 10.13-2.8 14.88l1.05 1.93c3 5.76 6.29 7.88 12.25 7.88h4.73c10.33 0 15.94 2.44 15.94 9.09 0 4.72-4.2 8.22-14.36 8.22a41.54 41.54 0 0 1-15.47-3.12c-6.49-3.88-11.74-3.5-15.6 3.12l-5.59 9.31c-3.72 6.13-3.19 11.72 2.63 15.94 7.71 4.69 20.38 9.44 37 9.44 34.16 0 48.5-22.75 48.5-44.12-.03-14.38-9.12-29.76-28.73-34.88zM496 224H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-160H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16V80a16 16 0 0 0-16-16zm0 320H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM16 160h64a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H64V40a8 8 0 0 0-8-8H32a8 8 0 0 0-7.14 4.42l-8 16A8 8 0 0 0 24 64h8v64H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8zm-3.91 160H80a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H41.32c3.29-10.29 48.34-18.68 48.34-56.44 0-29.06-25-39.56-44.47-39.56-21.36 0-33.8 10-40.46 18.75-4.37 5.59-3 10.84 2.8 15.37l8.58 6.88c5.61 4.56 11 2.47 16.12-2.44a13.44 13.44 0 0 1 9.46-3.84c3.33 0 9.28 1.56 9.28 8.75C51 248.19 0 257.31 0 304.59v4C0 316 5.08 320 12.09 320z"/></svg></button>

      <button 
        class="
          wrap-code-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.is-wrap]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle code wrap"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z"/></svg></button>
      
      <button 
        class="
          copy-code-button
          tw-select-none
          tw-mx-2 
          tw-hidden
          group-[.is-open]:tw-block
          hover:tw-text-fgColor-link 
          print:!tw-hidden"
        title="Copy code">
          <span class="copy-icon tw-block"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z"/></svg></span>
          <span class="check-icon tw-hidden"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"/></svg></span>
      </button>
        
      <button 
        class="
          tw-select-none 
          tw-mx-2 
          tw-block 
          group-[.is-open]:tw-hidden 
          print:!tw-hidden" 
        disabled
        aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M328 256c0 39.8-32.2 72-72 72s-72-32.2-72-72 32.2-72 72-72 72 32.2 72 72zm104-72c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72zm-352 0c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72z"/></svg></button>
    </div>
  </div>
  <pre style="counter-reset: codeblock;" class="tw-block tw-m-0 tw-p-0"><code 
    id="codeblock-id-4" 
    class="
      chroma 
      !tw-block 
      tw-p-0
      tw-m-0
      tw-transition-[max-height] 
      tw-duration-500 
      tw-ease-in-out 
      group-[.is-closed]:!tw-max-h-0 
      group-[.is-wrap]:tw-text-wrap
      tw-overflow-y-hidden
      tw-overflow-x-auto
      tw-scrollbar-thin
      "><span class="line"><span class="cl"><span class="o">&lt;?</span><span class="nx">php</span>
</span></span><span class="line"><span class="cl"><span class="c1">// guzzle/src/ClientInterface.php
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">namespace</span> <span class="nx">GuzzleHttp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">use</span> <span class="nx">GuzzleHttp\Exception\GuzzleException</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">interface</span> <span class="nx">ClientInterface</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
</div>
<p>GuzzleHttp\Exception\GuzzleException은
GuzzleHttp의 Base-Directory(src) 안에 있는 Exception\GuzzleException.php에 위치합니다.</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<blockquote>
  <p>참고자료</p>

</blockquote><ul>
<li><a href="https://www.php-fig.org/psr/" title="해당 링크로 이동" target="_blank" rel="noopener noreferrer">PSR 공식문서</a></li>
<li><a href="https://www.lesstif.com/pages/viewpage.action?pageId=24445325" title="해당 링크로 이동" target="_blank" rel="noopener noreferrer">PHP 표준 권고(PSR) - 정광섭님</a></li>
</ul>]]></description></item><item><title>［PHP］ 에러 보여주기</title><link>http://blog.hodory.dev/2017/11/17/php-view-error/</link><pubDate>Fri, 17 Nov 2017 15:12:22 +0000</pubDate><author><name>hodory</name></author><guid>http://blog.hodory.dev/2017/11/17/php-view-error/</guid><description><![CDATA[<h5 id="배포-서버에서는-권장하지-않는-설정입니다" class="headerLink">
    <a href="#%eb%b0%b0%ed%8f%ac-%ec%84%9c%eb%b2%84%ec%97%90%ec%84%9c%eb%8a%94-%ea%b6%8c%ec%9e%a5%ed%95%98%ec%a7%80-%ec%95%8a%eb%8a%94-%ec%84%a4%ec%a0%95%ec%9e%85%eb%8b%88%eb%8b%a4" class="header-mark"></a>배포 서버에서는 권장하지 않는 설정입니다.</h5><h5 id="테스트-서버에서-에러-메세지를-확인하고-싶을때" class="headerLink">
    <a href="#%ed%85%8c%ec%8a%a4%ed%8a%b8-%ec%84%9c%eb%b2%84%ec%97%90%ec%84%9c-%ec%97%90%eb%9f%ac-%eb%a9%94%ec%84%b8%ec%a7%80%eb%a5%bc-%ed%99%95%ec%9d%b8%ed%95%98%ea%b3%a0-%ec%8b%b6%ec%9d%84%eb%95%8c" class="header-mark"></a>테스트 서버에서 에러 메세지를 확인하고 싶을때</h5><h5 id="해당-php-파일의-최상위나-공통파일의-최상위에-이-소스코드를-넣어주시면-됩니다" class="headerLink">
    <a href="#%ed%95%b4%eb%8b%b9-php-%ed%8c%8c%ec%9d%bc%ec%9d%98-%ec%b5%9c%ec%83%81%ec%9c%84%eb%82%98-%ea%b3%b5%ed%86%b5%ed%8c%8c%ec%9d%bc%ec%9d%98-%ec%b5%9c%ec%83%81%ec%9c%84%ec%97%90-%ec%9d%b4-%ec%86%8c%ec%8a%a4%ec%bd%94%eb%93%9c%eb%a5%bc-%eb%84%a3%ec%96%b4%ec%a3%bc%ec%8b%9c%eb%a9%b4-%eb%90%a9%eb%8b%88%eb%8b%a4" class="header-mark"></a>해당 php 파일의 최상위나 공통파일의 최상위에 이 소스코드를 넣어주시면 됩니다.</h5><div class="code-block highlight is-closed show-line-numbers  tw-group tw-my-2">
  <div class="
    code-block-title 
    
    tw-flex 
    tw-flex-row 
    tw-justify-between 
    tw-w-full tw-bg-bgColor-secondary
    ">      
    <button 
      class="
        tw-select-none 
        tw-mx-2 
        tw-block
        group-[.is-open]:tw-rotate-90
        tw-transition-[transform] 
        tw-duration-500 
        tw-ease-in-out
        print:!tw-hidden"
      disabled
      aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z"/></svg></button>

    <div class="code-block-title-bar tw-w-full">
      <p class="tw-select-none !tw-my-1">php</p>
    </div>
    <div class="tw-flex">
      <button 
        class="
          line-number-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.show-line-numbers]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle line numbers"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M61.77 401l17.5-20.15a19.92 19.92 0 0 0 5.07-14.19v-3.31C84.34 356 80.5 352 73 352H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8h22.83a157.41 157.41 0 0 0-11 12.31l-5.61 7c-4 5.07-5.25 10.13-2.8 14.88l1.05 1.93c3 5.76 6.29 7.88 12.25 7.88h4.73c10.33 0 15.94 2.44 15.94 9.09 0 4.72-4.2 8.22-14.36 8.22a41.54 41.54 0 0 1-15.47-3.12c-6.49-3.88-11.74-3.5-15.6 3.12l-5.59 9.31c-3.72 6.13-3.19 11.72 2.63 15.94 7.71 4.69 20.38 9.44 37 9.44 34.16 0 48.5-22.75 48.5-44.12-.03-14.38-9.12-29.76-28.73-34.88zM496 224H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-160H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16V80a16 16 0 0 0-16-16zm0 320H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM16 160h64a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H64V40a8 8 0 0 0-8-8H32a8 8 0 0 0-7.14 4.42l-8 16A8 8 0 0 0 24 64h8v64H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8zm-3.91 160H80a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H41.32c3.29-10.29 48.34-18.68 48.34-56.44 0-29.06-25-39.56-44.47-39.56-21.36 0-33.8 10-40.46 18.75-4.37 5.59-3 10.84 2.8 15.37l8.58 6.88c5.61 4.56 11 2.47 16.12-2.44a13.44 13.44 0 0 1 9.46-3.84c3.33 0 9.28 1.56 9.28 8.75C51 248.19 0 257.31 0 304.59v4C0 316 5.08 320 12.09 320z"/></svg></button>

      <button 
        class="
          wrap-code-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.is-wrap]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle code wrap"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z"/></svg></button>
      
      <button 
        class="
          copy-code-button
          tw-select-none
          tw-mx-2 
          tw-hidden
          group-[.is-open]:tw-block
          hover:tw-text-fgColor-link 
          print:!tw-hidden"
        title="Copy code">
          <span class="copy-icon tw-block"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z"/></svg></span>
          <span class="check-icon tw-hidden"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"/></svg></span>
      </button>
        
      <button 
        class="
          tw-select-none 
          tw-mx-2 
          tw-block 
          group-[.is-open]:tw-hidden 
          print:!tw-hidden" 
        disabled
        aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M328 256c0 39.8-32.2 72-72 72s-72-32.2-72-72 32.2-72 72-72 72 32.2 72 72zm104-72c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72zm-352 0c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72z"/></svg></button>
    </div>
  </div>
  <pre style="counter-reset: codeblock;" class="tw-block tw-m-0 tw-p-0"><code 
    id="codeblock-id-1" 
    class="
      chroma 
      !tw-block 
      tw-p-0
      tw-m-0
      tw-transition-[max-height] 
      tw-duration-500 
      tw-ease-in-out 
      group-[.is-closed]:!tw-max-h-0 
      group-[.is-wrap]:tw-text-wrap
      tw-overflow-y-hidden
      tw-overflow-x-auto
      tw-scrollbar-thin
      "><span class="line"><span class="cl"><span class="o">&lt;?</span><span class="nx">php</span>
</span></span><span class="line"><span class="cl">    <span class="nx">error_reporting</span><span class="p">(</span><span class="k">E_ALL</span><span class="p">);</span> <span class="c1">//모든 PHP 에러를 리포팅함
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">ini_set</span><span class="p">(</span><span class="s2">&#34;display_errors&#34;</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span> <span class="c1">//php.ini 파일의 &#39;display_errors&#39;를 활성화 시킴
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">?&gt;</span><span class="err">
</span></span></span></code></pre>
</div>
]]></description></item><item><title>［PHP］삼항 연산자</title><link>http://blog.hodory.dev/2017/09/01/conditional-ternary-operator/</link><pubDate>Fri, 01 Sep 2017 10:09:11 +0000</pubDate><author><name>hodory</name></author><guid>http://blog.hodory.dev/2017/09/01/conditional-ternary-operator/</guid><description><![CDATA[<p>삼항연산자(?:)는 조건식 ? 참일때 실행할로직 : 거짓일때 실행할 로직; 과 같이쓴다. (if-else를 짧게 줄인것)</p>
<p>a 변수값이 있는지 검사한후 값이 있으면 foo값을 반환, 없으면 bar라는 값을 반환</p>
<p><code>ex)</code></p>
<div class="code-block highlight is-closed show-line-numbers  tw-group tw-my-2">
  <div class="
    code-block-title 
    
    tw-flex 
    tw-flex-row 
    tw-justify-between 
    tw-w-full tw-bg-bgColor-secondary
    ">      
    <button 
      class="
        tw-select-none 
        tw-mx-2 
        tw-block
        group-[.is-open]:tw-rotate-90
        tw-transition-[transform] 
        tw-duration-500 
        tw-ease-in-out
        print:!tw-hidden"
      disabled
      aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z"/></svg></button>

    <div class="code-block-title-bar tw-w-full">
      <p class="tw-select-none !tw-my-1">php</p>
    </div>
    <div class="tw-flex">
      <button 
        class="
          line-number-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.show-line-numbers]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle line numbers"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M61.77 401l17.5-20.15a19.92 19.92 0 0 0 5.07-14.19v-3.31C84.34 356 80.5 352 73 352H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8h22.83a157.41 157.41 0 0 0-11 12.31l-5.61 7c-4 5.07-5.25 10.13-2.8 14.88l1.05 1.93c3 5.76 6.29 7.88 12.25 7.88h4.73c10.33 0 15.94 2.44 15.94 9.09 0 4.72-4.2 8.22-14.36 8.22a41.54 41.54 0 0 1-15.47-3.12c-6.49-3.88-11.74-3.5-15.6 3.12l-5.59 9.31c-3.72 6.13-3.19 11.72 2.63 15.94 7.71 4.69 20.38 9.44 37 9.44 34.16 0 48.5-22.75 48.5-44.12-.03-14.38-9.12-29.76-28.73-34.88zM496 224H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-160H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16V80a16 16 0 0 0-16-16zm0 320H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM16 160h64a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H64V40a8 8 0 0 0-8-8H32a8 8 0 0 0-7.14 4.42l-8 16A8 8 0 0 0 24 64h8v64H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8zm-3.91 160H80a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H41.32c3.29-10.29 48.34-18.68 48.34-56.44 0-29.06-25-39.56-44.47-39.56-21.36 0-33.8 10-40.46 18.75-4.37 5.59-3 10.84 2.8 15.37l8.58 6.88c5.61 4.56 11 2.47 16.12-2.44a13.44 13.44 0 0 1 9.46-3.84c3.33 0 9.28 1.56 9.28 8.75C51 248.19 0 257.31 0 304.59v4C0 316 5.08 320 12.09 320z"/></svg></button>

      <button 
        class="
          wrap-code-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.is-wrap]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle code wrap"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z"/></svg></button>
      
      <button 
        class="
          copy-code-button
          tw-select-none
          tw-mx-2 
          tw-hidden
          group-[.is-open]:tw-block
          hover:tw-text-fgColor-link 
          print:!tw-hidden"
        title="Copy code">
          <span class="copy-icon tw-block"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z"/></svg></span>
          <span class="check-icon tw-hidden"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"/></svg></span>
      </button>
        
      <button 
        class="
          tw-select-none 
          tw-mx-2 
          tw-block 
          group-[.is-open]:tw-hidden 
          print:!tw-hidden" 
        disabled
        aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M328 256c0 39.8-32.2 72-72 72s-72-32.2-72-72 32.2-72 72-72 72 32.2 72 72zm104-72c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72zm-352 0c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72z"/></svg></button>
    </div>
  </div>
  <pre style="counter-reset: codeblock;" class="tw-block tw-m-0 tw-p-0"><code 
    id="codeblock-id-1" 
    class="
      chroma 
      !tw-block 
      tw-p-0
      tw-m-0
      tw-transition-[max-height] 
      tw-duration-500 
      tw-ease-in-out 
      group-[.is-closed]:!tw-max-h-0 
      group-[.is-wrap]:tw-text-wrap
      tw-overflow-y-hidden
      tw-overflow-x-auto
      tw-scrollbar-thin
      "><span class="line"><span class="cl"><span class="o">&lt;?</span><span class="nx">php</span>
</span></span><span class="line"><span class="cl"><span class="nv">$a</span> <span class="o">=</span> <span class="s1">&#39;foo&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nv">$b</span> <span class="o">=</span> <span class="nv">$a</span> <span class="o">?:</span> <span class="s1">&#39;bar&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">echo</span> <span class="nv">$b</span><span class="p">;</span>    <span class="c1">// foo
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">?&gt;</span><span class="err">
</span></span></span></code></pre>
</div>
]]></description></item><item><title>［PHP］ 0001과 같이 번호 지정 하기</title><link>http://blog.hodory.dev/2017/08/31/php-str-pad/</link><pubDate>Thu, 31 Aug 2017 21:51:38 +0000</pubDate><author><name>hodory</name></author><guid>http://blog.hodory.dev/2017/08/31/php-str-pad/</guid><description><![CDATA[<h4 id="php에서-0001과-같이-번호-지정하기" class="headerLink">
    <a href="#php%ec%97%90%ec%84%9c-0001%ea%b3%bc-%ea%b0%99%ec%9d%b4-%eb%b2%88%ed%98%b8-%ec%a7%80%ec%a0%95%ed%95%98%ea%b8%b0" class="header-mark"></a>PHP에서 0001과 같이 번호 지정하기</h4><div class="code-block highlight is-closed show-line-numbers  tw-group tw-my-2">
  <div class="
    code-block-title 
    
    tw-flex 
    tw-flex-row 
    tw-justify-between 
    tw-w-full tw-bg-bgColor-secondary
    ">      
    <button 
      class="
        tw-select-none 
        tw-mx-2 
        tw-block
        group-[.is-open]:tw-rotate-90
        tw-transition-[transform] 
        tw-duration-500 
        tw-ease-in-out
        print:!tw-hidden"
      disabled
      aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z"/></svg></button>

    <div class="code-block-title-bar tw-w-full">
      <p class="tw-select-none !tw-my-1">php</p>
    </div>
    <div class="tw-flex">
      <button 
        class="
          line-number-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.show-line-numbers]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle line numbers"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M61.77 401l17.5-20.15a19.92 19.92 0 0 0 5.07-14.19v-3.31C84.34 356 80.5 352 73 352H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8h22.83a157.41 157.41 0 0 0-11 12.31l-5.61 7c-4 5.07-5.25 10.13-2.8 14.88l1.05 1.93c3 5.76 6.29 7.88 12.25 7.88h4.73c10.33 0 15.94 2.44 15.94 9.09 0 4.72-4.2 8.22-14.36 8.22a41.54 41.54 0 0 1-15.47-3.12c-6.49-3.88-11.74-3.5-15.6 3.12l-5.59 9.31c-3.72 6.13-3.19 11.72 2.63 15.94 7.71 4.69 20.38 9.44 37 9.44 34.16 0 48.5-22.75 48.5-44.12-.03-14.38-9.12-29.76-28.73-34.88zM496 224H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-160H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16V80a16 16 0 0 0-16-16zm0 320H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM16 160h64a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H64V40a8 8 0 0 0-8-8H32a8 8 0 0 0-7.14 4.42l-8 16A8 8 0 0 0 24 64h8v64H16a8 8 0 0 0-8 8v16a8 8 0 0 0 8 8zm-3.91 160H80a8 8 0 0 0 8-8v-16a8 8 0 0 0-8-8H41.32c3.29-10.29 48.34-18.68 48.34-56.44 0-29.06-25-39.56-44.47-39.56-21.36 0-33.8 10-40.46 18.75-4.37 5.59-3 10.84 2.8 15.37l8.58 6.88c5.61 4.56 11 2.47 16.12-2.44a13.44 13.44 0 0 1 9.46-3.84c3.33 0 9.28 1.56 9.28 8.75C51 248.19 0 257.31 0 304.59v4C0 316 5.08 320 12.09 320z"/></svg></button>

      <button 
        class="
          wrap-code-button
          tw-select-none 
          tw-mx-2 
          tw-hidden 
          group-[.is-open]:tw-block 
          group-[.is-wrap]:tw-text-fgColor-link 
          print:!tw-hidden" 
        title="Toggle code wrap"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z"/></svg></button>
      
      <button 
        class="
          copy-code-button
          tw-select-none
          tw-mx-2 
          tw-hidden
          group-[.is-open]:tw-block
          hover:tw-text-fgColor-link 
          print:!tw-hidden"
        title="Copy code">
          <span class="copy-icon tw-block"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z"/></svg></span>
          <span class="check-icon tw-hidden"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"/></svg></span>
      </button>
        
      <button 
        class="
          tw-select-none 
          tw-mx-2 
          tw-block 
          group-[.is-open]:tw-hidden 
          print:!tw-hidden" 
        disabled
        aria-hidden="true"><svg class="icon"
    xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) --><path d="M328 256c0 39.8-32.2 72-72 72s-72-32.2-72-72 32.2-72 72-72 72 32.2 72 72zm104-72c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72zm-352 0c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72z"/></svg></button>
    </div>
  </div>
  <pre style="counter-reset: codeblock;" class="tw-block tw-m-0 tw-p-0"><code 
    id="codeblock-id-1" 
    class="
      chroma 
      !tw-block 
      tw-p-0
      tw-m-0
      tw-transition-[max-height] 
      tw-duration-500 
      tw-ease-in-out 
      group-[.is-closed]:!tw-max-h-0 
      group-[.is-wrap]:tw-text-wrap
      tw-overflow-y-hidden
      tw-overflow-x-auto
      tw-scrollbar-thin
      "><span class="line"><span class="cl"><span class="o">&lt;?</span><span class="nx">php</span>
</span></span><span class="line"><span class="cl"><span class="nv">$count</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nv">$count</span> <span class="o">=</span> <span class="nx">str_pad</span><span class="p">(</span><span class="nv">$count</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="s1">&#39;0&#39;</span><span class="p">,</span><span class="nx">STR_PAD_LEFT</span><span class="p">);</span> <span class="c1">//0001
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">?&gt;</span><span class="err">
</span></span></span></code></pre>
</div>
<p><code>01이나 001 같이 사용할 때는 두번째 파라미터 값에 2(01) 또는 3(001)을 사용하면 된다.</code></p>
]]></description></item></channel></rss>