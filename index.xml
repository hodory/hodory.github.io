<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Web Developer Hodory</title><link>http://blog.hodory.dev/</link><description>Web Developer Hodory</description><generator>Hugo -- gohugo.io</generator><language>ko-KR</language><lastBuildDate>Thu, 11 Aug 2022 01:20:24 +0000</lastBuildDate><atom:link href="http://blog.hodory.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>VSCode Git Private Key 오류</title><link>http://blog.hodory.dev/2022/08/11/vscode-git-private-key-%EC%98%A4%EB%A5%98/</link><pubDate>Thu, 11 Aug 2022 01:20:24 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2022/08/11/vscode-git-private-key-%EC%98%A4%EB%A5%98/</guid><description>Git: git@github.com: Permission denied (publickey). 위와 같은 오류가 vscode 에서 발생하였습니다.
git@github.com permission denied 분명 터미널에서는 이슈가 없었는데, vscode에서만 이슈가 발생하였습니다.
ssh key에 passphrase를 넣어주었는데, vscode에서는 설정하는 구간이 없었고, 이 부분이 문제가 되는것 같아
설정을 찾아보았으나 설정하는 영역이 따로 없는것 같아 구글링을 해보았는데 아직 기능으로 제공하고 있지 않은것 같았습니다.
현재 해당 이슈 https://github.com/microsoft/vscode/issues/13680 로 등록되어 있습니다.
이슈 코멘트 확인중 https://github.com/microsoft/vscode/issues/13680#issuecomment-1192145377 이 코멘트를 보았는데,
git repo 설정을 git@github.com:hodory/source.hodory.github.io.git 가 아닌,
https://github.com/hodory/source.hodory.github.io.git 와 같이 적용하면 되는 방법이 있었습니다.</description></item><item><title>[Java] Spring AOP 에서 Custom Exception 사용하기</title><link>http://blog.hodory.dev/2022/08/10/springboot-spring-aop-%EC%97%90%EC%84%9C-custom-exception-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</link><pubDate>Wed, 10 Aug 2022 23:04:49 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2022/08/10/springboot-spring-aop-%EC%97%90%EC%84%9C-custom-exception-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</guid><description>Spring AOP에서 Custom Exception 사용하기 Spring AOP는 CglibAopProxy 클래스를 이용하여 동작합니다.
아래 코드와 같이 super.process() 를 try-catch로 처리하고 있고, Runtime Exception은 exception 을 그대로 던질 수 있기 때문에
Custom Exception은 Exception 클래스가 아니라 RuntimeException을 상속받아서 사용해야 합니다
@Override @Nullable public Object proceed() throws Throwable { try { return super.proceed(); } catch (RuntimeException ex) { throw ex; } catch (Exception ex) { if (ReflectionUtils.declaresException(getMethod(), ex.getClass()) || KotlinDetector.isKotlinType(getMethod().getDeclaringClass())) { // Propagate original exception if declared on the target method // (with callers expecting it).</description></item><item><title>［Notion］Notion과 Github Actions로 가계부 자동화 하기 - (1)</title><link>http://blog.hodory.dev/2022/01/02/account-book-with-notion-and-github-actions/</link><pubDate>Sun, 02 Jan 2022 22:21:19 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2022/01/02/account-book-with-notion-and-github-actions/</guid><description>시작하기에 앞서 해당 포스트는 ［Notion］Notion과 Zapier로 가계부 자동화 하기의 후속편입니다.
해당 포스트에서는 토스의 소비 서비스를 기반으로 Google Drive, Naver OCR, Github Actions, Notion API 를 사용합니다.
왜 Github Actions로 변경하게 되었을까? 기존에 가계부 자동화로 맨처음 고려 했던 방식은 Github Actions + Naver OCR을 이용한 가계부 자동화 방식이였습니다.
하지만 가계부를 쓰기 위해 코딩을 하는게 맞나? 싶은 생각에 솔루션들을 사용하기로 하였고 플랫폼들을 이용한 기존에 구성한 스택은 다음과 같습니다.
Google Drive : 캡쳐 이미지 저장소 Zapier : Google Drive 이미지 업로드시 정해진 프로세스를 진행하도록 하기 위한 플랫폼 Nanonets : 이미지에 OCR을 동작시켜 이미지에서 필요한 영역의 데이터를 뽑아낼 수 있음.</description></item><item><title>Hexo Netlify CMS 연결하기</title><link>http://blog.hodory.dev/2021/12/31/hexo-netlify-cms-%EC%97%B0%EA%B2%B0%ED%95%98%EA%B8%B0/</link><pubDate>Fri, 31 Dec 2021 00:16:53 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2021/12/31/hexo-netlify-cms-%EC%97%B0%EA%B2%B0%ED%95%98%EA%B8%B0/</guid><description>Netlify CMS 블로그 플랫폼에 의존적이지 않고, 개발자st 블로그를 운영하고자 2017년부터 hexo를 이용해 블로그를 운영하고 있습니다.
마크 다운과 파일시스템을 이용하여 블로그 포스트를 작성하고, git을 이용하여 버전 관리를 하는것은 개발자로서 꽤나 매력적이었습니다.
하지만 랩탑을 항상 소지하고 있지 않다면,
다양한 환경에서 블로그를 작성하기 위해 nodejs를 설치하고, hexo-cli 를 설치하는것은 언제나 부담스러운 일입니다.
제 블로그는 Github Actions 를 이용하여 포스팅만 작성하면 자동으로 빌드하여 배포가 되지만,
또 다른 문제점은 포스팅에 이미지가 들어가게 될 경우 작업의 복잡도가 올라가게 됩니다.</description></item><item><title>［Notion］Notion과 Zapier로 가계부 자동화 하기</title><link>http://blog.hodory.dev/2021/12/30/acoount-book-with-notion-and-zapier/</link><pubDate>Thu, 30 Dec 2021 01:50:47 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2021/12/30/acoount-book-with-notion-and-zapier/</guid><description>왜 가계부를 쓰나요? 저는 예전부터 가계부를 써서 돈의 사용처를 기록하고 카테고리화 해서 어디에 돈을 많이 쓰고 있는지 흐름을 보는것을 좋아했습니다.
가계부를 Notion으로 쓰는 이유 첫 가계부는 편한 가계부라는 어플을 사용했고, 그 이후 핀테크쪽 서비스가 커지면서 뱅크샐러드를 사용했었습니다. 뱅크 샐러드는 느리긴 했지만 제가 필요하다 생각했던 모든 것들을 제공 해주고 있었습니다. 토스에서 소비 라는 탭으로 연동된 계좌들의 소비 내역을 보여주는 기능도 출시하여 엄청나게 빠른 속도로 스크래핑이 되었습니다.
문제는 결혼 이후로는 제 지출 내역만 관리하는게 아니라 아내의 지출 내역도 관리가 필요했습니다.</description></item><item><title>SSL Connection Error 발생</title><link>http://blog.hodory.dev/2020/11/21/ssl-connection-error/</link><pubDate>Sat, 21 Nov 2020 23:42:03 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2020/11/21/ssl-connection-error/</guid><description>[root@aaaaa ~]# curl -XGET {{링크}} curl: (35) SSL connect error 원인 Curl 버전이 낮아서 발생하는 문제
해결방법 패키지를 업데이트 할 수 있을 때 $ yum update -y nss curl libcurl 패키지를 업데이트 할 수 없을 때 -1 을 파라미터로 넣어주면 해결 가능하다. (https://github.com/userify/shim/issues/25)
$ curl -XGET {{링크}} -k -1 참고 자료 http://www.kwangsiklee.com/2017/07/문제해결-centos-curl-ssl-connect-error/
https://wwwnghks.tistory.com/62</description></item><item><title>윈도우 컴포저 패키지 설치시 오류 처리 방법</title><link>http://blog.hodory.dev/2020/04/14/composer-error-on-windows/</link><pubDate>Tue, 14 Apr 2020 23:38:07 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2020/04/14/composer-error-on-windows/</guid><description>Your requirements could not be resolved to an installable set of packages. Your requirements could not be resolved to an installable set of packages. Problem 1 - laravel/horizon v4.2.1 requires ext-pcntl * -&amp;gt; the requested PHP extension pcntl is missing from your system. - laravel/horizon v4.2.0 requires ext-pcntl * -&amp;gt; the requested PHP extension pcntl is missing from your system. - laravel/horizon 4.x-dev requires ext-pcntl * -&amp;gt; the requested PHP extension pcntl is missing from your system.</description></item><item><title>[Git] 원격 브랜치명으로 새로운 브랜치 생성하기</title><link>http://blog.hodory.dev/2020/03/09/git-new-branch-from-remote-branch/</link><pubDate>Mon, 09 Mar 2020 23:20:20 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2020/03/09/git-new-branch-from-remote-branch/</guid><description>주로 PHPStorm 같은 IDE 나 VSCode 같은 Extension이 잘 되어 있는 에디터를 사용하고, 그 이전에는 Source Tree / Git Kraken / Fork 등 Git Client 를 사용하여 Git을 사용하기 때문에, 아직 CLI로 Git을 유연하게 다루지 못해 git-scm 문서의 내용을 정리 합니다.
명령어 정리 원격 브랜치명과 같은 이름으로 생성할 때 $ git checkout --track origin/master 해당 브랜치명이 리모트에만 있고, 로컬에는 없을 때 이를 축약하여 아래와 같이 실행할 수 있다.
$ git checkout master 원격 브랜치명과 다른 이름으로 생성할 때 가장 많이 쓰이는 경우인데, 원격 Git 서버의 master 브랜치를 기준으로 새로운 브랜치를 만들고, 체크아웃 할 때 사용합니다.</description></item><item><title>[Git] Git Merge 또는 Git checkout 오류 해결하기</title><link>http://blog.hodory.dev/2020/02/18/error-your-local-changes-would-be-overwritten-by-merge/</link><pubDate>Tue, 18 Feb 2020 23:36:40 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2020/02/18/error-your-local-changes-would-be-overwritten-by-merge/</guid><description>문제 상황 git pull origin master 또는 git checkout master 와 같이 브랜치를 변경하거나, 원격저장소에서 pull을 받을때 아래와 같은 오류가 나온적 경험이 한번쯤은 있을것 입니다.
error: Your local changes to the following files would be overwritten by checkout: themes/icarus/layout/widget/recent_posts.ejs Please commit your changes or stash them before you switch branches. Aborting error: Your local changes to the following files would be overwritten by merge: error: Your local changes to the following files would be overwritten by checkout:</description></item><item><title>[AWS] S3 호스팅에 도메인 연결하기</title><link>http://blog.hodory.dev/2020/01/14/setting-domain-for-s3-static-web-hosting/</link><pubDate>Tue, 14 Jan 2020 22:54:12 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2020/01/14/setting-domain-for-s3-static-web-hosting/</guid><description>S3에서 정적 웹호스팅을 할 수 있다는 이야기는 들어 보았지만, 아직까지 해 볼 경험이 없었는데 지인 덕분에 간만에 재밌는걸 해봐서 잊지 않으려고 기록합니다.
이미 많은 포스팅들도 있고, 공식 가이드 문서도 충분히 잘 정리 되어 있으니 참고 하시기 바랍니다.
도메인은 이미 구매하였다는 가정하에 진행합니다. 이 포스팅에서 사용할 도메인은 [travelerapp.kr](http://travelerapp.kr) 입니다.(곧 만료 예정)
S3 설정하기 우선 별 다른 설정없이 s3 버킷을 생성하여줍니다. 이때 주의할점은 버킷명을 호스팅 하고자 하는 도메인과 일치시켜 주어야 합니다.
또한 권한 설정시 퍼블릭 액세스를 꼭 체크 해제 해주어야 합니다.</description></item><item><title>2019년 하반기 회고</title><link>http://blog.hodory.dev/2020/01/11/2019%EB%85%84-%ED%95%98%EB%B0%98%EA%B8%B0-%ED%9A%8C%EA%B3%A0/</link><pubDate>Sat, 11 Jan 2020 18:24:46 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2020/01/11/2019%EB%85%84-%ED%95%98%EB%B0%98%EA%B8%B0-%ED%9A%8C%EA%B3%A0/</guid><description>상반기 회고 당시에는 하반기에는 분기별 회고를 해서 더 잘 정리해야겠다 생각했는데, 하반기 회고 조차 늦어지게 되었습니다.
💼 회사 새 회사로 이직을 하게 되면서, 인수인계 기간이 지난 후 약 3주정도 휴가를 즐겼습니다.
여행도 다녀오고, 쉬는 기간동안 카페 투어도 하고 이곳 저곳 돌아다녔지만 생각보다 생산성 있는 휴가는 아니여서 아직 아쉬움이 남아있습니다.
새 회사로 오게되어 회사에 적응하는 시간을 보내고 실무에 투입되었습니다. 이정도 규모의 회사에서는 어떻게 서비스를 하고 있고, 현재 서비스에서 어떤 문제를 가지고 있어서 그것을 해결하기 위해 어떤 고민을 하고 있는지, 앞으로 어떤 계획이 있는지 등을 어깨넘어 보면서 새로운것들을 알아가고 있습니다.</description></item><item><title>[PHP] InvalidArgumentException : Unable to locate factory with name [default]</title><link>http://blog.hodory.dev/2020/01/10/unable-to-locale-factory-with-name-default/</link><pubDate>Fri, 10 Jan 2020 00:36:54 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2020/01/10/unable-to-locale-factory-with-name-default/</guid><description><![CDATA[발단 Laravel Framework로 TDD를 진행중에 Unit Test를 하기 위해 artisan 콘솔을 이용하여 TaskTest 라는 이름의 테스트 클래스를 생성하였습니다.
$ php artisan make:test TaskTest --unit 코드는 간단했습니다.
&lt;?php namespace Tests\Unit; use App\Project; use Illuminate\Foundation\Testing\RefreshDatabase; use PHPUnit\Framework\TestCase; class TaskTest extends TestCase { use RefreshDatabase; /** * @test */ public function it_belongs_to_a_project() { $task = factory(&#39;App\Task&#39;)-&gt;create(); $this-&gt;assertInstanceOf(Project::class, $task-&gt;project); } } 해당 테스트를 생성 후 아래와 같이 PHPUnit으로 해당 테스트를 실행하였더니
$ ./vendor/bin/phpunit --filter it_belongs_to_a_project 아래 이미지와 같은 에러가 나왔습니다.]]></description></item><item><title>[JS]Document.ready 의 대안</title><link>http://blog.hodory.dev/2020/01/05/document-ready-alternative/</link><pubDate>Sun, 05 Jan 2020 18:16:44 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2020/01/05/document-ready-alternative/</guid><description>jQuery를 사용할 때, DOM이 로드된 후 처리를 위해 아래와 같은 구문을 많이 사용해왔습니다.
$(function(){ }); // or $(document).ready(function(){ }); 이와 같은 동작을 jQuery 없이 사용 할 수 없을까 찾아 보았는데,
document.addEventListener(&amp;#39;DOMContentLoaded&amp;#39;, () =&amp;gt; { }) 위와 같이 작성하면 됩니다.
DOMContentLoaded는 최초로 HTML 문서가 완전히 로드 및 파싱 되었을때 발생되므로, 모든 리소스(이미지, 스크립트, 스타일 시트 등)가 로드 된 후 발생하는 load 이벤트 보다는 먼저 호출됩니다.
그렇다면 왜 DOMContentLoaded 이벤트 리스너 대신 $(document).</description></item><item><title>［JS］jQuery 두번째 파라미터가 뭐지?</title><link>http://blog.hodory.dev/2019/12/13/what-is-jquery-second-parameter/</link><pubDate>Fri, 13 Dec 2019 18:56:02 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2019/12/13/what-is-jquery-second-parameter/</guid><description><![CDATA[jQuery로 작성된 코드를 보는데, $(&quot;selectorA&quot;, &quot;selectorB&quot;) 와 같은 코드가 있었습니다. 당연히 기존에 자주 접하던 $(&quot;selectorA, selectorB&quot;) 와 같은 코드인줄 알았으나, 예상과 다르게 동작하여 문서를 확인해 보았습니다.
jQuery 문서에 따르면, A DOM Element, Document, or jQuery to use as context 가 기재되어있다.
해당 영역에는 DOM element가 올 수 있는데 Selector Context를 확인해보면
selector context is implemented with the .find() method, so $( &ldquo;span&rdquo;, this ) is equivalent to $( this ).find( &ldquo;span&rdquo; ).]]></description></item><item><title>［Java］Spring REST Docs HTML이 생성되지 않을때</title><link>http://blog.hodory.dev/2019/12/04/spring-rest-docs-with-gradle-not-working-html5/</link><pubDate>Wed, 04 Dec 2019 23:39:14 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2019/12/04/spring-rest-docs-with-gradle-not-working-html5/</guid><description><![CDATA[백기선님의 스프링부트 강좌를 수강하는중에 Spring REST Docs를 이용하여 HTML을 생성하려하는데, 아무리 빌드를 해도 ascii\html\index.html이 생성되지 않았습니다.
오후 11:58:18: Executing task &#39;build&#39;... &gt; Task :compileJava &gt; Task :processResources &gt; Task :classes &gt; Task :compileTestJava &gt; Task :processTestResources NO-SOURCE &gt; Task :testClasses &gt; Task :test 2019-12-02 23:58:35.629 INFO 24376 --- [ Thread-5] o.s.s.concurrent.ThreadPoolTaskExecutor : Shutting down ExecutorService &#39;applicationTaskExecutor&#39; 2019-12-02 23:58:35.629 INFO 24376 --- [ Thread-7] o.s.s.concurrent.ThreadPoolTaskExecutor : Shutting down ExecutorService &#39;applicationTaskExecutor&#39; 2019-12-02 23:58:35.]]></description></item><item><title>［JS］Object literal 보다 JSON.parse()가 더 빠르다</title><link>http://blog.hodory.dev/2019/11/26/json-parse-is-faster-than-object-literal/</link><pubDate>Tue, 26 Nov 2019 22:51:44 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2019/11/26/json-parse-is-faster-than-object-literal/</guid><description>서론 웹에서 몇 kb 크기의 객체를 초기에 렌더링 하는것은 생각보다 많습니다.
이 javascript 객체가 로드될때까지 클라이언트는 빈 화면을 보게 될 수 있습니다.
이러한 문제를 해결하기 위해, 서버사이드 렌더링을 활용 하는 방법도 있겠지만 다른 방법은 없을까요?
Chrome Dev Summit에서는 객체를 JSON으로 직렬화 하고, 문자열 리터럴로 변환해 Javscript 객체에 전달하는 것이 성능 향상에 도움이 된다고 이야기합니다.
무슨 소리일까? 아래의 두 코드는 동일한 객체를 생성하지만, Javascript 엔진의 경우, JSON 예제를 스캔하고, 파싱만 하기 때문에 빠르다고합니다.</description></item><item><title>PHPUnit Annotation 정리</title><link>http://blog.hodory.dev/2019/11/25/phpunit-annotations/</link><pubDate>Mon, 25 Nov 2019 01:18:24 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2019/11/25/phpunit-annotations/</guid><description>서론 PHP Unit을 사용하면서도 잘 모르는 어노테이션을 PHPUnit v8.4 기준(2019-11-19 최신버전)으로 정리하였습니다.
@author 테스트를 작성자별 그룹화 필터링 할 때 @group 어노테이션의 별칭으로, 테스트를 작성자별로 그룹화하여 필터링 하는데 사용할 수 있습니다.
@after 각 테스트가 끝난 뒤 실행 하려 할 때 각 테스트 메소드들이 실행 된 후, 특정 메소드를 실행하고자 할때 사용할 수 있습니다.
각 테스트가 끝난 뒤 트랜잭션 커밋or롤백을 한다거나, 생성된 파일을 삭제하는 등의 처리를 하는데 사용하면 좋을 것 같습니다.
namespace Tests; use PHPUnit\Framework\TestCase; class MyTest extends TestCase { /** * @after */ public function afterDo() { echo &amp;quot;After Method Called&amp;quot; .</description></item><item><title>AWS Dev Day Seoul, 2019 메모</title><link>http://blog.hodory.dev/2019/09/26/aws-devday-2019-%EB%A9%94%EB%AA%A8/</link><pubDate>Thu, 26 Sep 2019 21:05:51 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2019/09/26/aws-devday-2019-%EB%A9%94%EB%AA%A8/</guid><description>틀린 내용이 있다면 제가 졸아서 잘못 메모했을 수 있습니다&amp;hellip;..
AWS Fargate를 사용한 서버리스 컨테이너 활용 하기 - 삼성전자 개발자 포털 사례 ECS EKS Fargate for ECS Fargate for EKS (on the roadmap) ECS 쿠베 없이 간단하게 사용가능
EC2 인스턴스를 직접관리해야하는 단점
Fargate를 활용해 해결 가능
서버가 없는 컨테이너 환경 서비스와 컨테이너에대한설정만 관리 ECS 대비 EC2 관리에대한 부담만 덜어짐 ECR을 이용해 이미지를 배포할 수 있음 Networking - aws LayerStorage - task당 10GB VolumeStorage - 공용 볼륨 QA Automation을 중점적으로 CI/CD를 구축함</description></item><item><title>Github Actions를 이용하여 Hexo 블로그 배포하기</title><link>http://blog.hodory.dev/2019/08/23/deploy-hexo-blog-with-github-actions/</link><pubDate>Fri, 23 Aug 2019 13:37:07 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2019/08/23/deploy-hexo-blog-with-github-actions/</guid><description><![CDATA[기존의 Travis-CI를 이용하여 Hexo 블로그를 배포하기 위해,
ChangJoo Park님의 포스팅인 Travis CI를 이용한 Github Pages + Hexo 블로그 자동 배포하기를 참고하여 아래와 같은 YAML 파일을 작성하여 Travis CI 서비스를 이용해서 배포하였습니다.
기존의 코드 # .travis.yml language: node_js node_js: - &#34;10&#34; # Hexo source 코드는 master branch에서 작업되고 있어야합니다. branches: only: - master before_install: - npm install -g hexo install: - npm install before_script: - git config --global user.name &#34;INPUT_YOUR_USER_NAME&#34; - git config --global user.]]></description></item><item><title>애드센스-테러를-당하다</title><link>http://blog.hodory.dev/2019/07/30/%EC%95%A0%EB%93%9C%EC%84%BC%EC%8A%A4-%ED%85%8C%EB%9F%AC%EB%A5%BC-%EB%8B%B9%ED%95%98%EB%8B%A4/</link><pubDate>Tue, 30 Jul 2019 18:50:11 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2019/07/30/%EC%95%A0%EB%93%9C%EC%84%BC%EC%8A%A4-%ED%85%8C%EB%9F%AC%EB%A5%BC-%EB%8B%B9%ED%95%98%EB%8B%A4/</guid><description>아침에 눈을 떠서 메일을 확인 하는데, 구글 애드센스팀으로부터 아래와 같은 메일이 도착하였습니다.
애드센스 계정이 30일동안 정지 되었다는 메일이였는데, 하루 수입이 $0.01도 안 됐기 때문에 그냥 그런가보다 했습니다.
그래도 왜 그럴까 싶어 알아보다가 GA를 확인해보니 해당 시간대에 155 세션이 잡혔고, 모두 디바이스가 데스크탑인 국가 정보가 없는 경우 였습니다.
슬프게도 제 블로그는 일 조회수가 155가 안되기 때문에 이럴일이 없었죠&amp;hellip;.😂
애드센스 관리 페이지를 확인 하였을때도 이와 같이 무효 클릭: 직접 클릭 으로 정지를 당했습니다.</description></item><item><title>2019년 상반기 회고</title><link>http://blog.hodory.dev/2019/07/11/2019%EB%85%84-%EC%83%81%EB%B0%98%EA%B8%B0-%ED%9A%8C%EA%B3%A0/</link><pubDate>Thu, 11 Jul 2019 01:20:50 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2019/07/11/2019%EB%85%84-%EC%83%81%EB%B0%98%EA%B8%B0-%ED%9A%8C%EA%B3%A0/</guid><description>일년이 어떻게 흘러간지 한해가 지날수록 더 기억이 안 나서 정리의 필요성을 느껴, 올해부터는 회고를 진행해볼까 합니다.
💼 회사 01월~02월 서버리스 아키텍쳐 구현 마무리 12월부터 설계 및 개발을 진행하였던 서버리스 아키텍처를 12월 중순쯤 배포하였으나, 이슈 사항들이 많아 마무리 짓는데 생각보다 오래 걸렸습니다.
외부 싱크 여부를 판단하기 위한 데이터들을 Insert 또는 Update 하다 보니, RDS 콘솔 상에서 IOPS 쓰기가 1000 이상이 되는 경우가 발생했습니다.
해당 데이터를 레디스(Elastic Cache)나 noSQL(DynamoDB)에 쌓은 후, 다시 RDS로 옮기는 것도 검토해보았지만, 실제 구현할 경우 관리 포인트가 너무 많이 발생하게 되어 연동 속도를 줄이더라도 Lambda의 동시성을 조절하는 것으로 처리하였습니다.</description></item><item><title>［ETC］시니어 개발자의 조건을 다시 읽고</title><link>http://blog.hodory.dev/2019/06/19/%EC%8B%9C%EB%8B%88%EC%96%B4-%EA%B0%9C%EB%B0%9C%EC%9E%90%EC%9D%98-%EC%A1%B0%EA%B1%B4%EC%9D%84-%EB%8B%A4%EC%8B%9C-%EC%9D%BD%EA%B3%A0/</link><pubDate>Wed, 19 Jun 2019 00:06:39 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2019/06/19/%EC%8B%9C%EB%8B%88%EC%96%B4-%EA%B0%9C%EB%B0%9C%EC%9E%90%EC%9D%98-%EC%A1%B0%EA%B1%B4%EC%9D%84-%EB%8B%A4%EC%8B%9C-%EC%9D%BD%EA%B3%A0/</guid><description>시니어 개발자의 조건이라는 포스팅을 2017년 초에 접하고, 북마크에 담아두었다가 오늘에서야 다시 열어보게 되었습니다.
주요 키워드는 아래의 6가지였습니다.
시스템을 알고 서비스를 개발 해야한다. 기반기술을 중요시 해야한다. 적절한 엔지니어링을 택해야 한다. 클린코드가 모든 경우에 정답은 아니다. 애자일은 만능이 아니다. 오픈소스를 무분별하게 가져다 쓰는것 보다, 내부 동작 원리를 이해하고 용도에 맞게 사용해야한다. 부족한 부분을 기여할 수 있는 프로슈머가 되어야 한다. 필자분께서 결론에 담아주신 내용이 가장 인상이 깊었습니다.
쥬니어와 시니어가 같은 일을 하고 같은 품질의 결과물을 만들어 낸다면 나이는 많고 연봉은 높은 시니어를 반길 이유가 없다.</description></item><item><title>［Hexo］블로그 주소를 바꾸었어요!</title><link>http://blog.hodory.dev/2019/06/09/github-pages-blog-migration/</link><pubDate>Sun, 09 Jun 2019 17:55:48 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2019/06/09/github-pages-blog-migration/</guid><description>이번에도 Gracefullight님의 제안으로, dev 도메인을 구매하기로 하였습니다.
기존의 아이디를 사용하여 khzero.dev를 쓸까 하다가,
이왕 구매하는거 깃허브 아이디도 바꾸고, 도메인도 맞춰서 사자!
라고 생각을 했었습니다&amp;hellip;그때 멈췄어야 했는데요&amp;hellip;
해당 포스팅을 참조하여 작업을 진행하기 시작했습니다.
1. 도메인 구매 및 연결 닉네임을 찾다가 Hodory로 변경하고, hodory.dev 도메인을 구매했습니다.
Github Pages로 관리되던 khzero.github.io Repository 이름을 hodory.github.io로 변경하였죠
지난번 TravisCI로 블로그 자동 배포시 겪은 문제에서 TravisCI로 배포 환경을 구축 했기 때문에,
위의 이미지와 같이 깃허브에서 TravisCI 서비스연결도 다시하고, Hexo config.</description></item><item><title>［Hexo］TravisCI로 블로그 자동 배포시 겪은 문제</title><link>http://blog.hodory.dev/2019/06/06/hexo-travis-ci-with-no-contents/</link><pubDate>Thu, 06 Jun 2019 12:22:59 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2019/06/06/hexo-travis-ci-with-no-contents/</guid><description>WARN No layout 자동 배포를 했더니 빈 파일들만 올라가요!! 한줄 요약 : theme 폴더를 레포지토리에 추가하시면됩니다.
아래의 내용은 해당 원인을 찾아가던 본인의 경험담입니다&amp;hellip;
블로그를 직접 만드는데, 시간을 투자하는것 보다 포스팅을 하는게 더 가치 있겠다 싶어 현재 블로그를 Hexo + Github Page를 이용하여 운영하고 있습니다
기존에는 배포를 Hexo-cli를 이용하여 아래와 같은 명령어를 사용하여 배포 했습니다.
$ hexo clean $ hexo generate $ hexo deploy 쉘에서 해당 명령어를 작성하는것 또한 귀찮아져서 package.json 파일을 이용하여,</description></item><item><title>［Java］해당 클래스의 서비스는 어디서 주입되나요??</title><link>http://blog.hodory.dev/2019/06/05/where-is-constructor-inject/</link><pubDate>Wed, 05 Jun 2019 11:40:37 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2019/06/05/where-is-constructor-inject/</guid><description>회사 업무중 스프링 서비스 코드 푸시를 하였습니다.
다른 팀원들에게
인터페이스를 파라미터로 정의한것은 확인하였는데, 혹시 해당 컨트롤러에 주입은 어디에서 되나요?`
라는 질문을 들었습니다.
@RestController @Slf4j @RequiredArgsConstructor public class YourController { private final YourService yourService; } 위와같이 컨트롤러가 선언되어있었습니다.(물론 예제입니다.)
해당 클래스의 yourService에 YourServiceImpl(인터페이스 구현체)는 어떻게 주입이 되는걸까요?
아직도 스프링의 Application Context에 의한 DI(의존성 주입)가 저는 이해하기 어려운것 같습니다.
인터페이스의 구현체가 Service 어노테이션을 사용해서 Application Context에 의해 관리되는 Bean으로 등록되면,
해당 인터페이스에 자동으로 주입이됩니다 (이 부분은 정말 신기하다고 생각합니다.</description></item><item><title>［Java］@JsonProperty이 왜 동작을 안하지?</title><link>http://blog.hodory.dev/2019/06/04/json-property-not-working/</link><pubDate>Tue, 04 Jun 2019 23:13:03 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2019/06/04/json-property-not-working/</guid><description>class anonymousDTO { String whatYouWant; } 대부분 자바의 변수를 생성할때 위와 같이 CamelCase를 많이 쓰는것으로 알고있습니다&amp;hellip;..(본인이 잘못 생각하는것일 수 있습니다.)
필자 또한 위와 같이 camelCase를 사용하였으나 API 통신 및 응답을 리턴할때에는 hyphen uppercase가 필요했습니다.
위의 조건을 충족하기 위해 적절한 어노테이션을 찾았는데, @JsonProperty(&amp;quot;{WHAT_YOU_WANT}&amp;quot;)였습니다.
json으로 매핑할때 WHAT_YOU_WANT에 들어갈 값으로 해당 프로퍼티를 매핑하는것이였습니다.
테스트 코드를 작성하여 확인해보았지만 정상 동작하지 않아,
주위의 도움을 받았는데, getter메소드에 해당 어노테이션을 작성해야한다는 조언도 있었으며, compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind' 해당 라이브러리를 gradle에 추가하여 jackson 라이브러리를 최신화 할 필요가 있다는 조언을 받았습니다.</description></item><item><title>［Java］@AllArgsConstructor의 잘못된 사용</title><link>http://blog.hodory.dev/2019/05/28/required-a-bean-of-type-that-could-not-be-found/</link><pubDate>Tue, 28 May 2019 23:29:30 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2019/05/28/required-a-bean-of-type-that-could-not-be-found/</guid><description><![CDATA[Consider defining a bean of type java.lang.String in your configuration. 스프링부트로 서비스를 개발중에 @Value 어노테이션을 이용하여 application.yml 파일에 저장해둔 환경변수에 접근하고 싶었는데, 아래와 같은 오류가 발생하였습니다.
Parameter 2 of constructor in com.hodory.v1.service.MyService required a bean of type &#39;java.lang.String&#39; that could not be found. Consider defining a bean of type &#39;java.lang.String&#39; in your configuration. Retrofit을 사용하기위해 apiBaseUrl을 가져오려 작성한 코드는 아래와 같습니다.
@Slf4j @Service @AllArgsConstructor public class MyService { private final MyRepository myRepository; private final ModelMapper modelMapper; @Value(&#34;${config.]]></description></item><item><title>［Java］스프링부트 회원 기존 비밀번호 체크하기</title><link>http://blog.hodory.dev/2019/05/14/spring-boot-validate-user-old-password/</link><pubDate>Tue, 14 May 2019 15:42:32 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2019/05/14/spring-boot-validate-user-old-password/</guid><description><![CDATA[회원 비밀번호 변경 로직을 작성중에 현재 비밀번호와 새 비밀번호를 입력받아, 기존 비밀번호가 맞는지 체크하는 로직을 넣고 싶었습니다.
String currentPassword = new BCryptPasswordEncoder().encode(request.getCurrentPassword());	final User persistUser = userRepository.findUserByIdAndPassword(userId, currentPassword) .orElseThrow(() -&gt; new EntityNotFoundException(&#34;회원정보를 찾을 수 없습니다.&#34;)); if(!currentPassword.equals(persistUser.getPassword())) {	logger.info(&#34;changePassword is Not Equal Current Password&#34;);	return new ResponseEntity&lt;&gt;(UserRegisterResult.ERROR.getResponseBody(),	HttpStatus.FORBIDDEN);	} new BCryptPasswordEncoder().encode(password);로 암호화 한 패스워드를 저장했기 때문에, 회원을 찾을때도 이렇게 하면 되겠다고 생각해서 위와 같은 코드를 작성하였는데, 테스트중 계속하여 EntityNotFoundException이 발생하였습니다.
디버깅으로 체크하였더니 String currentPassword = new BCryptPasswordEncoder().]]></description></item><item><title>［JS］jQuery 없이 Selectbox에서 여러개 선택된 option의 값 추출하기</title><link>http://blog.hodory.dev/2019/05/12/how-to-get-multiple-selected-options-with-vanillajs/</link><pubDate>Sun, 12 May 2019 14:29:38 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2019/05/12/how-to-get-multiple-selected-options-with-vanillajs/</guid><description><![CDATA[DOM을 다룰때 jQuery를 사용하면 매우 편리합니다.
물론 크로스 브라우저 이슈로도 제이쿼리를 많이 사용합니다.
하지만 DOM을 핸들링하기 위해서만 jQuery를 쓴다면, 편리함은 챙기겠지만 낭비 아닐까싶습니다.
저는 위와 같은 생각으로, 주로 DOM 핸들링에는 jQuery 의존성을 줄이고자 순수 자바스크립트를 사용하려 노력하고 있습니다.
또한, document.querySelector와 document.querySelectorAll 를 이용한다면, jQuery에서 사용하던 복잡한 DOM Selector도 쉽게 사용할 수 있습니다.
&lt;select id=&#34;user&#34; name=&#34;user[]&#34; multiple=&#34;multiple&#34;&gt; &lt;option&gt;선택&lt;/option&gt; &lt;option value=&#34;foo&#34;&gt;Foo&lt;/option&gt; &lt;option value=&#34;bar&#34;&gt;Bar&lt;/option&gt; &lt;option value=&#34;baz&#34;&gt;Baz&lt;/option&gt; &lt;/select&gt; 위와 같은 Multiple SelectBox에서 여러개가 선택되었을 경우 값을 어떻게 가져올까요?]]></description></item><item><title>［PHP］Monolog와 함께 로그를 시작하자 - 1</title><link>http://blog.hodory.dev/2019/05/10/php-logging-with-monolog-1/</link><pubDate>Fri, 10 May 2019 00:27:05 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2019/05/10/php-logging-with-monolog-1/</guid><description>PHP에서 로그 남기기 PHP에서는 주로 JS에서 console.log | console.debug 와 유사하게 var_dump | print_r | echo | sys_log | error_log 등 다양한 방식으로 로그를 남기고 있습니다.
Monolog란? PSR-3을 준수하고 있는 로깅 프레임워크로, 거의 대부분의 로깅 플랫폼과 연결할 수 있는 핸들러(Slack, ElasticSearch, Mail, NewRelic 등)를 제공하고 있습니다.
RFC 5424(Syslog Protocol이라고 하는데 더 공부해봐야할 것 같습니다.)에 정의된 로그 레벨을 모두 지원하고 있습니다.
DEBUG(100) INFO(200) NOTICE(250) WARNING(300) ERROR(400) CRITICAL(500) ALERT(550) EMERGENCY(600) 코어 컨셉 간단하게 Logger Instance에 Record를 추가하면, 해당 인스턴스에 추가 해두었던 핸들러에 이벤트를 전파하는 것으로 보입니다.</description></item><item><title>［Laravel］with() | has() | whereHas() 뭐가 다를까</title><link>http://blog.hodory.dev/2019/04/27/eloquent-orm-with-has-where-has/</link><pubDate>Sat, 27 Apr 2019 00:15:24 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2019/04/27/eloquent-orm-with-has-where-has/</guid><description><![CDATA[ORM도 익숙하지 않지만, Eloquent ORM은 처음 접해보면서,
쿼리빌더를 사용하는것은 ORM스럽지 못하다 느껴 최대한 ORM으로 풀고 싶었습니다
검색으로 알아보던중 Eloquent:Relations에 대해 알게되었습니다.
라라벨 공식 문서 : 관계의 존재 여부 쿼리 질의하기
예를들어 User가 여러개의 Post 를 가지고 있다면, User 클래스에 $this-&gt;hasMany('App\Post');를 설정해 두었을 것이라는 가정하에 설명을 진행하도록 하겠습니다.
with() user id name post id user_id title 이와 같은 테이블 구조에서 유저가 작성한 글의 제목을 조회하려면 $users = selectAll(&#34;select * from `user`); foreach ($users as $user) { $user[&#39;post_title&#39;] = selectOne(&#34;select `title` from `post` where `post`.]]></description></item><item><title>［JS］Knex와 Webpack을 같이 쓰면서 발생한 오류 처리</title><link>http://blog.hodory.dev/2019/04/18/knex-with-webpack/</link><pubDate>Thu, 18 Apr 2019 19:10:52 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2019/04/18/knex-with-webpack/</guid><description><![CDATA[ERROR in &#39;./node_modules/knex/lib/dialects/mssql/index.js&#39; Module not found: Error : Can&#39;t resolve &#39;mssql/lib/base&#39; 프로젝트에 웹팩을 도입하여 사용중, knex 라이브러리를 넣고 나서 웹팩으로 빌드시 해당 에러가 나와서 빌드에 실패 했습니다.
해당 오류를 검색 하였는데, 역시나 깃허브 이슈가 있었고(감사합니다), webpack의 config에 아래의 내용을 추가 하였습니다.
externals: { knex: &#39;commonjs knex&#39; } 해당 작업 후 빌드는 성공했지만, 노드 서버에서 실행시 knex 모듈을 찾을 수 없다는 오류가 나왔습니다.
{ &#34;errorMessage&#34;: &#34;Cannot find module &#39;knex&#39;&#34;, &#34;errorType&#34;: &#34;Error&#34;, &#34;stackTrace&#34;: [ &#34;Function.]]></description></item><item><title>［PHP］배열 key의 min 또는 max 구하기</title><link>http://blog.hodory.dev/2018/10/27/php-array-column/</link><pubDate>Sat, 27 Oct 2018 15:23:32 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2018/10/27/php-array-column/</guid><description><![CDATA[PHP로 개발을 하다보면, 연관 배열을 많이 쓰게되는데요
아래와 같은 배열에서 cnt의 max값과 min값을 구하려면 어떻게 해야할까요?
또는 이러한 배열에서 특정 키값의 값만 뽑아 배열로 만들고싶다면 어떻게 해야할까요?
array(3) { [0]=&gt; array(3) { [&#34;title&#34;]=&gt; string(5) &#34;apple&#34; [&#34;cnt&#34;]=&gt; int(1) &#34;5&#34; [&#34;color&#34;]=&gt; string(5) &#34;green&#34; } [1]=&gt; array(3) { [&#34;name&#34;]=&gt; string(4) &#34;pear&#34; [&#34;cnt&#34;]=&gt; int(1) &#34;8&#34; [&#34;color&#34;]=&gt; string(6) &#34;yellow&#34; } 배열을 순회하여 해당 키의 값을 뽑아 배열을 만들고,
최소 또는 최대값이 필요하면 min 또는 max 함수를 적용해야 한다 생각했습니다.]]></description></item><item><title>［VueJS］vue.js에서 이벤트 버스 사용하기</title><link>http://blog.hodory.dev/2018/08/27/vuejs-eventbus/</link><pubDate>Mon, 27 Aug 2018 16:51:38 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2018/08/27/vuejs-eventbus/</guid><description>MPA(Multi Page Application)에서 Vue를 적용 시키던중
부모-자식간의 관계가 아닌 컴포넌트 간의 동작에 따른 데이터 변화와 이벤트 처리가 필요해졌습니다.
주로 공통 데이터를 다루기 위해 사용하는 부분이라 Vuex를 써볼까도 했지만,
Vuex 튜토리얼에서 앱이 단순하다면 Vuex없이는 괜찮을 것입니다. 간단한 글로벌 이벤트 버스만 있으면됩니다 라는 글귀를 읽고, 글로벌 이벤트 버스를 사용하자로 마음을 굳혔습니다.
아래와 같이 공통으로 사용할 이벤트버스 js 파일을 생성합니다. Vue EventBus 객체를 생성하여 export 하여 다른 파일에서도 로드하여 사용 할 수 있도록 합니다.</description></item><item><title>［GCP］ Nuxt.js GAE에 배포 이슈사항</title><link>http://blog.hodory.dev/2018/07/20/deploy-nuxt-to-gae/</link><pubDate>Fri, 20 Jul 2018 14:45:42 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2018/07/20/deploy-nuxt-to-gae/</guid><description><![CDATA[502 Bad Gateway 배포 후 링크 접속시 502 Bad Gateway 에러가 발생하였는데
에러 로그를 보니 localhost:8080로 접근하고 있었다
검색 결과 NuxtJS의 실행 포트를 변경할 수 있는 방법이 소개 되어있었다.
package.json에 다음과 같이 작성하면 된다.
{ ... &#34;config&#34;: { &#34;nuxt&#34;: { &#34;host&#34;: &#34;0.0.0.0&#34;, &#34;port&#34;: &#34;8080&#34; } } } 또는
{ &#34;scripts&#34;: { ... &#34;start&#34;: &#34;HOST=0.0.0.0 PORT=8080 nuxt build &amp;&amp; nuxt start&#34; } } 으로 작성하여 다시 deploy 하면 정상적으로 동작한다.
참고자료]]></description></item><item><title>［Database］ postgresql와 mysql 뭐가 다를까?</title><link>http://blog.hodory.dev/2018/04/23/pgsql-vs-mysql/</link><pubDate>Mon, 23 Apr 2018 17:22:45 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2018/04/23/pgsql-vs-mysql/</guid><description>PostgreSQL 과 MySQL의 차이점 PostgreSQL은 기본적으로 트랜잭션을 지원합니다(MySQL의 경우 테이블이 InnoDB 타입일 경우에만 지원합니다.) Databse의 하위개념으로 Schema가 있습니다.(MySQL의 Database의 개념은 PostgreSQL의 스키마와 개념이 비슷합니다.) 스키마를 별도로 지정하지 않을 경우, public이라는 스키마를 기본적으로 사용합니다. 데이터베이스가 다르면 물리적으로 분리되어있다는것을 의미합니다. 서로 다른 Schema간에는 JOIN이 가능합니다. 구조 참고자료
postgreSQL 구조 이미지 - 구루비 postgreSQL 소개</description></item><item><title>［PHP］ PHP4.x 버전과 PHP 5.x 버전 비교(Comparison between PHP4 and PHP5)</title><link>http://blog.hodory.dev/2018/04/20/php4-vs-php5/</link><pubDate>Fri, 20 Apr 2018 02:04:12 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2018/04/20/php4-vs-php5/</guid><description>PHP5에서 무엇이 바뀌었을까? 젠드엔진2가 내장되었습니다. PHP GCI 버전이 php.exe 에서 php-cgi.exe 로 변경되었습니다. PHP CLI 버전이 cli/php.exe 에서 주 디렉토리로 변경되었습니다. PHP CLI 버전은 php.ini 지시어 설정과 상관없이 항상 전역 $argv(Array of arguments passed to script) 와 $argc(The number of arguments passed to script) 변수를 가지며, register_argc_argv(argv와 argc 변수를 선언할지 여부 설정)를 off로 설정해도 영향을 미치지 않습니다. ISAPI 모듈들의 이름이 php4xxx에서 php5xxx로 바뀌었습니다. 프로퍼티가 없는 객체를 &amp;ldquo;빈&amp;rdquo; 것으로 판단하지 않습니다. 인터페이스 등을 사용할 경우, 사용 전 선언해야합니다.</description></item><item><title>［Algorithm］이진탐색 알고리즘(Binary Search Algorithm)</title><link>http://blog.hodory.dev/2018/04/19/binary-search/</link><pubDate>Thu, 19 Apr 2018 12:54:39 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2018/04/19/binary-search/</guid><description>이진탐색 정의 오름차순으로 정렬된 리스트에서 특정한 값의 위치를 찾는 것. 오름차순으로 정렬된 리스트일 경우에만 사용할 수 있다는 단점이 있지만, 절반씩 줄여가며 탐색하기 때문에 매우 빠르다. 구현 해당 배열에서 가운데 값을 찾고, 그 값과 비교하여 해당 인덱스에서의 배열의 값이 찾는 값 보다 클때는 앞쪽에서 찾고, 작을때는 뒤쪽에서 찾으면 된다. 코드 // 해당 인덱스를 출력해주는 알고리즘 입니다. binarSearch = (data, value) =&amp;gt; { let start = data[0], end = data.slice(-1)[0], index = 0, last = data.</description></item><item><title>［ETC］Triple DES(3-DES)를 사용하지 않는 이유</title><link>http://blog.hodory.dev/2018/04/18/why-not-use-3des/</link><pubDate>Wed, 18 Apr 2018 18:27:20 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2018/04/18/why-not-use-3des/</guid><description>대학교 프로젝트에서 T-DES 암호화 알고리즘을 사용하여 소켓 기반 채팅 프로그램을 만든 적이 있습니다.
DES 암호화 알고리즘을 보완하기위해 DES를 3번 수행하는 방식입니다.
그렇다면 왜 3DES 암호화 알고리즘의 사용이 줄어들었을까요?
암호화키가 DES 표준에 따라 56비트로 제한됩니다. AES(Advanced Encryption Standard)가 미국 표준으로 승인되어 AES 암호화 알고리즘이 더 많이 쓰이고 있습니다. 암호화를 세번 하면서 생기는 속도의 문제점 (AES가 훨씬 빠르다고 합니다.) 결론적으로 대칭키 암호화 알고리즘에서는 DES 암호화 알고리즘을 AES 암호화 알고리즘이 대체하게 되어 없어졌다 할 수 있습니다.</description></item><item><title>［Algorithm］반복문 없이 1부터 10까지 합 구하기</title><link>http://blog.hodory.dev/2018/04/18/1-to-10-calc-without-for-loop/</link><pubDate>Wed, 18 Apr 2018 15:53:47 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2018/04/18/1-to-10-calc-without-for-loop/</guid><description><![CDATA[1부터 10까지 합 구하기 먼저 방법은 무엇이 있을까?
등차 수열의 합
재귀함수 방식
기타 등등&hellip;
하나씩 구현해보자
등차 수열
등차 수열이란 ? 연속하는 두 항의 차이가 모두 일정한 수열. 등차 수열의 합 공식 (출처 : 위키피디아) 클릭시 위키피디아로 이동 코드 구현 addFunction = (start, end) =&gt; { return (end-start+1)*(start+end)/2 } addFunction(1,10) 재귀함수 방식
재귀 함수란?자기 자신을 재 참조 하는 함수
재귀함수 구조(출처 : 위키피디아)
ex)
factorial = (v) =&gt; { if (v &lt;= 1) return 1 else return v * factorial(v-1) } 코드 구현]]></description></item><item><title>［PHP］ PSR(PHP Standards Recommendations)이란?</title><link>http://blog.hodory.dev/2018/04/18/what-is-psr/</link><pubDate>Wed, 18 Apr 2018 02:28:50 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2018/04/18/what-is-psr/</guid><description><![CDATA[PSR이란? PHP Standards Recommendations의 약자로 PHP-FIG(PHP-FrameWork Interop Group)에서 만든 표준 권고안입니다.
PSR-0 PSR-1 PSR-2 PSR-3 PSR-4 작성예정 목록 PSR-6 PSR-7 PSR-11 PSR-13 PSR-15 PSR-16 PSR-0 (DEPRECATED) : Autoloading Standard 오토로딩 표준으로 PSR-4가 제정되며 DEPRECATED 되었습니다.
\&lt;Vendor Name&gt;\(&lt;NameSpace&gt;\)*&lt;Class Name&gt;의 구조를 따릅니다. 각 네임스페이스는 (&quot;Vendor Name&quot;)이 최상위 네임스페이스로 있어야합니다. 각 네임스페이스는 원하는 만큼 하위 네임스페이스를 가질 수 있습니다. 각 네임스페이스 구분자는 파일시스템에서 로딩될때 DIRECTORY_SEPARATOR로 변환됩니다. 클래스명의 각 _ 문자는 DIRECTORY_SEPARATOR로 변환됩니다. 기타 자세한 사항은 PSR-0에서 확인 가능합니다.]]></description></item><item><title>［JS］ ES5와 ES6 뭐가 다를까?</title><link>http://blog.hodory.dev/2018/04/17/es5-vs-es6/</link><pubDate>Tue, 17 Apr 2018 01:26:53 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2018/04/17/es5-vs-es6/</guid><description>ES5와 ES6를 비교 할겸 ES6를 사용할때 자주 쓰이는 부분만 정리해보았습니다.
Const Variables let Variables Block-Scoped Function Arrow Function Default Parameter Rest Parameter Spread Operator Template Literals Ehhanced Object Properties Property Shorthand Computed Property Names Method Properties Export / Import Class Definition Promise Promise all Const 변수 Immutable varibale인 Const 변수(상수 변수)를 지원합니다.(블록-스코프 변수)
const PI = 3.141592 console.log(PI) // 3.141592 let 변수 기존의 함수-스코프였던 변수와 다르게 Hoisting 없는 블록-스코프 변수를 지원합니다.</description></item><item><title>［Node.js］Express.js로 NodeJS 시작하기</title><link>http://blog.hodory.dev/2018/03/11/start-nodejs/</link><pubDate>Sun, 11 Mar 2018 21:57:18 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2018/03/11/start-nodejs/</guid><description>express 제너레이터 설치 npm install express-generator ejs 템플릿을 이용하여 myapp 디렉토리에 생성 express myapp --view=ejs myapp 디렉토리로 이동하여 npm install(패키지 설치) $ cd myapp &amp;amp; npm install 서버 실행 $ npm start POST전송시 필요한 body-parser와 express-session 설치 $ npm install body-parser express-session 기존에는 NodeJS에서 POST 요청 데이터를 추출 할 수 있도록 하기 위하여 bodyParser를 설치해야 했는데 express-generator에 추가 되었다</description></item><item><title>［PHP］ 에러 보여주기</title><link>http://blog.hodory.dev/2017/11/17/php-view-error/</link><pubDate>Fri, 17 Nov 2017 15:12:22 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2017/11/17/php-view-error/</guid><description><![CDATA[배포 서버에서는 권장하지 않는 설정입니다. 테스트 서버에서 에러 메세지를 확인하고 싶을때 해당 php 파일의 최상위나 공통파일의 최상위에 이 소스코드를 넣어주시면 됩니다. &lt;?php error_reporting(E_ALL); //모든 PHP 에러를 리포팅함 ini_set(&#34;display_errors&#34;, 1); //php.ini 파일의 &#39;display_errors&#39;를 활성화 시킴 ?&gt; ]]></description></item><item><title>［Docker］명령어 정리</title><link>http://blog.hodory.dev/2017/09/01/docker-command/</link><pubDate>Fri, 01 Sep 2017 16:31:39 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2017/09/01/docker-command/</guid><description><![CDATA[이미지 다운로드
$ docker pull [다운로드 할 이미지명]: latest 이미지를 컨테이너로 만들때
$ docker run -i -t --name [컨테이너명] -d [이미지명] 컨테이너상태 확인 (&quot;a&quot;옵션은 정지된 컨테이너도 보여줌)
$ docker ps [-a] 컨테이너를 실행
$ docker start [컨테이너명] 컨테이너에 별칭을 주기
$ docker run -it --name &lt;별칭&gt; &lt;이미지명&gt; ex) $ docker run -it --name nginx richarvey/nginx-php-fpm 컨테이너 특정 포트 연결
$ docker run -p &lt;로컬 포트 번호&gt;:&lt;컨테이너 포트 번호&gt; &lt;이미지명&gt; ex) $ docker run -p 8000:80 richarvey/nginx-php-fpm 컨테이너 정지]]></description></item><item><title>［PHP］삼항 연산자</title><link>http://blog.hodory.dev/2017/09/01/conditional-ternary-operator/</link><pubDate>Fri, 01 Sep 2017 10:09:11 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2017/09/01/conditional-ternary-operator/</guid><description><![CDATA[삼항연산자(?:)는 조건식 ? 참일때 실행할로직 : 거짓일때 실행할 로직; 과 같이쓴다. (if-else를 짧게 줄인것)
a 변수값이 있는지 검사한후 값이 있으면 foo값을 반환, 없으면 bar라는 값을 반환
ex)
&lt;?php $a = &#39;foo&#39;; $b = $a ?: &#39;bar&#39;; echo $b; // foo ?&gt; ]]></description></item><item><title>［Hexo］ 명령어 정리</title><link>http://blog.hodory.dev/2017/08/31/how-to-use-hexo/</link><pubDate>Thu, 31 Aug 2017 22:57:17 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2017/08/31/how-to-use-hexo/</guid><description>Hexo 명령어 정리 # 초안 생성 명령어
$ hexo new draft [파일명] 예제
$ hexo new draft hello-world # 초안을 포스트로 옮기기(Draft to Post) 명령어
$ hexo publish [파일명] 예제
$ hexo publish hello-world # 포스트 생성 명령어
$ hexo new [파일명] 예제
$ hexo new hello-world # 배포하기 $ hexo clean // clean을 하지 않으면 deploy를 해도 페이지가 업데이트 되지 않는 경우가 발생한다 $ hexo deploy --generate # 기타사항 카테고리와 태그와 같은 설정은 어떻게 설정하나요 ?</description></item><item><title>［PHP］ 0001과 같이 번호 지정 하기</title><link>http://blog.hodory.dev/2017/08/31/php-str-pad/</link><pubDate>Thu, 31 Aug 2017 21:51:38 +0000</pubDate><author>hodory</author><guid>http://blog.hodory.dev/2017/08/31/php-str-pad/</guid><description><![CDATA[PHP에서 0001과 같이 번호 지정하기 &lt;?php $count = 1; $count = str_pad($count,4,&#39;0&#39;,STR_PAD_LEFT); //0001 ?&gt; 01이나 001 같이 사용할 때는 두번째 파라미터 값에 2(01) 또는 3(001)을 사용하면 된다.]]></description></item></channel></rss>