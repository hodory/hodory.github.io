<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Web Developer Hodory</title>
  
  <subtitle>Hodory&#39;s Dev Blog</subtitle>
  <link href="https://blog.hodory.dev/feed.xml" rel="self"/>
  
  <link href="https://blog.hodory.dev/"/>
  <updated>2022-08-10T16:39:59.885Z</updated>
  <id>https://blog.hodory.dev/</id>
  
  <author>
    <name>Hodory</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>VSCode Git Private Key 오류</title>
    <link href="https://blog.hodory.dev/2022/08/10/vscode-git-private-key-%EC%98%A4%EB%A5%98/"/>
    <id>https://blog.hodory.dev/2022/08/10/vscode-git-private-key-%EC%98%A4%EB%A5%98/</id>
    <published>2022-08-10T16:20:24.000Z</published>
    <updated>2022-08-10T16:39:59.885Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Git: git@github.com: Permission denied (publickey).</span><br></pre></td></tr></table></figure><p>위와 같은 오류가 vscode 에서 발생하였습니다.</p><p><img src="/images/vscode-permission-denied.png" alt="git@github.com permission denied" title="git@github.com permission denied"></p><p>분명 터미널에서는 이슈가 없었는데, vscode에서만 이슈가 발생하였습니다.</p><p>ssh key에 passphrase를 넣어주었는데, vscode에서는 설정하는 구간이 없었고, 이 부분이 문제가 되는것 같아</p><p>설정을 찾아보았으나 설정하는 영역이 따로 없는것 같아 구글링을 해보았는데 아직 기능으로 제공하고 있지 않은것 같았습니다.</p><p>현재 해당 이슈 <a href="https://github.com/microsoft/vscode/issues/13680">https://github.com/microsoft/vscode/issues/13680</a> 로 등록되어 있습니다.</p><p>이슈 코멘트 확인중 <a href="https://github.com/microsoft/vscode/issues/13680#issuecomment-1192145377">https://github.com/microsoft/vscode/issues/13680#issuecomment-1192145377</a>  이 코멘트를 보았는데,</p><p>git repo 설정을 <a href="mailto:&#x67;&#105;&#x74;&#x40;&#x67;&#105;&#x74;&#104;&#117;&#x62;&#46;&#99;&#111;&#109;">&#x67;&#105;&#x74;&#x40;&#x67;&#105;&#x74;&#104;&#117;&#x62;&#46;&#99;&#111;&#109;</a>:hodory&#x2F;source.hodory.github.io.git 가 아닌,</p><p><a href="https://github.com/hodory/source.hodory.github.io.git">https://github.com/hodory/source.hodory.github.io.git</a> 와 같이 적용하면 되는 방법이 있었습니다.</p><p>명령어로는 아래와 같이 설정하면 ssh 방식이 아닌 https 방식으로 처리하기때문에 공개키를 등록 했을 경우 정상적으로 동작하는것을 확인 할 수 있었습니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote set-url origin https://github.com/hodory/source.hodory.github.io.git</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span</summary>
      
    
    
    
    <category term="VSCODE" scheme="https://blog.hodory.dev/categories/VSCODE/"/>
    
    
    <category term="VSCODE" scheme="https://blog.hodory.dev/tags/VSCODE/"/>
    
  </entry>
  
  <entry>
    <title>[Java] Spring AOP 에서 Custom Exception 사용하기</title>
    <link href="https://blog.hodory.dev/2022/08/10/springboot-spring-aop-%EC%97%90%EC%84%9C-custom-exception-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/"/>
    <id>https://blog.hodory.dev/2022/08/10/springboot-spring-aop-%EC%97%90%EC%84%9C-custom-exception-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</id>
    <published>2022-08-10T14:04:49.000Z</published>
    <updated>2022-08-10T16:39:59.885Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring-AOP에서-Custom-Exception-사용하기"><a href="#Spring-AOP에서-Custom-Exception-사용하기" class="headerlink" title="Spring AOP에서 Custom Exception 사용하기"></a>Spring AOP에서 Custom Exception 사용하기</h2><p>Spring AOP는 CglibAopProxy 클래스를 이용하여 동작합니다.</p><p>아래 코드와 같이 super.process() 를 try-catch로 처리하고 있고, Runtime Exception은 exception 을 그대로 던질 수 있기 때문에</p><p>Custom Exception은 Exception 클래스가 아니라 RuntimeException을 상속받아서 사용해야 합니다</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">proceed</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.proceed();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (RuntimeException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ReflectionUtils.declaresException(getMethod(), ex.getClass()) ||</span><br><span class="line">                KotlinDetector.isKotlinType(getMethod().getDeclaringClass())) &#123;</span><br><span class="line">            <span class="comment">// Propagate original exception if declared on the target method</span></span><br><span class="line">            <span class="comment">// (with callers expecting it). Always propagate it for Kotlin code</span></span><br><span class="line">            <span class="comment">// since checked exceptions do not have to be explicitly declared there.</span></span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Checked exception thrown in the interceptor but not declared on the</span></span><br><span class="line">            <span class="comment">// target method signature -&gt; apply an UndeclaredThrowableException,</span></span><br><span class="line">            <span class="comment">// aligned with standard JDK dynamic proxy behavior.</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/images_jsj3282_post_eeb0e722-571b-424b-bf3f-c50b24465e8c_v2naj.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Spring-AOP에서-Custom-Exception-사용하기&quot;&gt;&lt;a href=&quot;#Spring-AOP에서-Custom-Exception-사용하기&quot; class=&quot;headerlink&quot; title=&quot;Spring AOP에서 Custom Exce</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.hodory.dev/categories/Java/"/>
    
    <category term="SpringBoot" scheme="https://blog.hodory.dev/categories/Java/SpringBoot/"/>
    
    
    <category term="Java" scheme="https://blog.hodory.dev/tags/Java/"/>
    
    <category term="SpringBoot" scheme="https://blog.hodory.dev/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>［Notion］Notion과 Github Actions로 가계부 자동화 하기 - (1)</title>
    <link href="https://blog.hodory.dev/2022/01/02/account-book-with-notion-and-github-actions/"/>
    <id>https://blog.hodory.dev/2022/01/02/account-book-with-notion-and-github-actions/</id>
    <published>2022-01-02T13:21:19.000Z</published>
    <updated>2022-08-10T16:39:59.885Z</updated>
    
    <content type="html"><![CDATA[<h2 id="시작하기에-앞서"><a href="#시작하기에-앞서" class="headerlink" title="시작하기에 앞서"></a>시작하기에 앞서</h2><hr><p>해당 포스트는 <a href="https://blog.hodory.dev/2021/12/29/acoount-book-with-notion-and-zapier/">［Notion］Notion과 Zapier로 가계부 자동화 하기</a>의 후속편입니다.</p><p>해당 포스트에서는 토스의 소비 서비스를 기반으로 <code>Google Drive</code>, <code>Naver OCR</code>, <code>Github Actions</code>, <code>Notion API</code> 를 사용합니다.</p><h2 id="왜-Github-Actions로-변경하게-되었을까"><a href="#왜-Github-Actions로-변경하게-되었을까" class="headerlink" title="왜 Github Actions로 변경하게 되었을까?"></a>왜 Github Actions로 변경하게 되었을까?</h2><hr><p>기존에 가계부 자동화로 맨처음 고려 했던 방식은 Github Actions + Naver OCR을 이용한 가계부 자동화 방식이였습니다.</p><p>하지만 가계부를 쓰기 위해 코딩을 하는게 맞나? 싶은 생각에 솔루션들을 사용하기로 하였고<br/><br>플랫폼들을 이용한 기존에 구성한 스택은 다음과 같습니다.</p><ul><li>Google Drive : 캡쳐 이미지 저장소</li><li>Zapier : Google Drive 이미지 업로드시 정해진 프로세스를 진행하도록 하기 위한 플랫폼</li><li>Nanonets : 이미지에 OCR을 동작시켜 이미지에서 필요한 영역의 데이터를 뽑아낼 수 있음.</li></ul><p>해당 스택으로 구성하였을때 무엇보다 좋았던 점은 코드를 한줄도 작성하지 않아도 가능하기 때문에,<br/><br>개발자가 아니더라도 충분히 따라서 할 수 있다 였습니다.</p><p>하지만 해당 스택으로 구성하였을때 개발자로써 한계가 더 쉽게 다가왔고, 제가 느꼈던 문제점은 다음과 같습니다.</p><ul><li><p><strong>Zapier (자동화 플랫폼)</strong></p><ul><li><p>무료 플랜사용시에는 월 100회 실행 무료이며, 1개의 자동화(zap)당 1개의 작업만 설정이 가능합니다.<br/><br>저의 경우 아래 두가지 자동화로 나뉘게 되어, 하나의 항목 업로드시 무료 횟수가 2회씩 차감이 됩니다.</p><ol><li><code>구글 드라이브에 이미지가 업로드 되면 OCR 분석을 실행</code><br/></li><li><code>OCR 분석이 완료되면 Notion DB에 저장.</code></li></ol></li><li><p>자동화는 15분 간격으로 실행되기때문에, 위와 같이 2개가 처리되면 최악의 경우 30분이 걸리게 됩니다.</p></li><li><p>Notion의 Database에 항목(Property)이 많으면 일부만 노출되는 문제가 있어 원하는대로 매핑을 할 수 없습니다.</p></li><li><p>데이터 포맷 변환 또한 Zap을 새로 추가해야해서 비용이 발생함.</p><ul><li>날짜 포맷이 토스에서는 <code>2022년 1월 1일 14:40</code> 이지만, Notion에는 ISO8601의 날짜 포맷인 <code>2022/01/01</code> 이 아니면 데이터가 오늘 날짜로 입력됩니다.</li></ul></li></ul></li><li><p><strong>Nanonets (이미지 글자 인식 OCR 플랫폼)</strong></p><ul><li><p>해외 플랫폼의 한계로 한글 인식률이 부족합니다.</p><ul><li>한글의 경우 글자사이에 띄어쓰기가 계속 추가되는 문제도 있습니다.</li></ul></li><li><p>무료 플랜에서는 월 100회 이미지 인식 제한이 있습니다.</p></li><li><p>모델학습을 여러번 해보았지만 영역이 잘못 잡혀서 값이 누락되는 케이스가 있습니다.</p><ul><li>날짜 인식이 잘못되어 데이터가 잘못 들어감.</li></ul></li></ul></li></ul><p>위와 같은 한계로 초기에 고려한 방식을 사용한다면 직접 개발해야 하는 문제를 뺀다면,<br/><br>훨씬 높은 자유도를 얻어 원하는대로 설정할 수 있고<br/><br>각 서비스의 API의 무료 한도도 Naver OCR의 API 한도인 300회만 고려하면 되기 때문에<br/><br>한달의 가계부를 쓰기에 충분할것이라 판단하였습니다.</p><h2 id="서비스-구성"><a href="#서비스-구성" class="headerlink" title="서비스 구성"></a>서비스 구성</h2><hr><p>이와 같이 구성하여 작성하였습니다.</p><p><img src="/images/account-book-automation-with-github-action.jpg"></p><p>각 영역에 대한 상세한 내용은 다음편에서 작성 예정입니다</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;시작하기에-앞서&quot;&gt;&lt;a href=&quot;#시작하기에-앞서&quot; class=&quot;headerlink&quot; title=&quot;시작하기에 앞서&quot;&gt;&lt;/a&gt;시작하기에 앞서&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;해당 포스트는 &lt;a href=&quot;https://blog.hodory.dev/</summary>
      
    
    
    
    <category term="ETC" scheme="https://blog.hodory.dev/categories/ETC/"/>
    
    <category term="NOTION" scheme="https://blog.hodory.dev/categories/ETC/NOTION/"/>
    
    <category term="GITHUB-ACTION" scheme="https://blog.hodory.dev/categories/ETC/NOTION/GITHUB-ACTION/"/>
    
    
    <category term="NOTION" scheme="https://blog.hodory.dev/tags/NOTION/"/>
    
    <category term="GITHUB-ACTION" scheme="https://blog.hodory.dev/tags/GITHUB-ACTION/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Netlify CMS 연결하기</title>
    <link href="https://blog.hodory.dev/2021/12/30/hexo-netlify-cms-%EC%97%B0%EA%B2%B0%ED%95%98%EA%B8%B0/"/>
    <id>https://blog.hodory.dev/2021/12/30/hexo-netlify-cms-%EC%97%B0%EA%B2%B0%ED%95%98%EA%B8%B0/</id>
    <published>2021-12-30T15:16:53.000Z</published>
    <updated>2022-08-10T16:39:59.885Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Netlify-CMS"><a href="#Netlify-CMS" class="headerlink" title="Netlify CMS"></a>Netlify CMS</h2><hr><p>블로그 플랫폼에 의존적이지 않고, 개발자st 블로그를 운영하고자 2017년부터 <a href="https://hexo.io/ko/index.html">hexo</a>를 이용해 블로그를 운영하고 있습니다.</p><p>마크 다운과 파일시스템을 이용하여 블로그 포스트를 작성하고, git을 이용하여 버전 관리를 하는것은 개발자로서 꽤나 매력적이었습니다.</p><p>하지만 랩탑을 항상 소지하고 있지 않다면,<br>다양한 환경에서 블로그를 작성하기 위해 nodejs를 설치하고, hexo-cli 를 설치하는것은 언제나 부담스러운 일입니다.</p><p>제 블로그는 Github Actions 를 이용하여 포스팅만 작성하면 자동으로 빌드하여 배포가 되지만,<br>또 다른 문제점은 포스팅에 이미지가 들어가게 될 경우 작업의 복잡도가 올라가게 됩니다.</p><p>위와 같은 이유로 hexo를 온라인에서도 작성할 방법을 고민하고 검색하였고, netlify-cms 라는 서비스를 알게 되어 적용하고자 했습니다.</p><h2 id="사실과-오해"><a href="#사실과-오해" class="headerlink" title="사실과 오해"></a>사실과 오해</h2><hr><p>작년에 해당 서비스를 처음 접하였을때는 gatsby 블로그를 알아보다가 알게 된 것이라 두가지 오해가 있었습니다.</p><ol><li>graphQL으로 포스트를 관리한다.</li><li>netlify로 블로그를 호스팅 할때만 사용이 가능하다.</li></ol><p>이번에 작업을 진행하면서 알게된 내용은 틀린 부분들이 있었습니다.</p><ol><li><p>graphQL으로 포스트를 관리한다.</p><ol><li>git-gateway라는 자체적인 방식을 이용하여 git repository를 저장소로 사용합니다.</li></ol></li><li><p>netlify로 블로그를 호스팅 할때만 사용이 가능하다.</p><ol><li>admin에 접근하기 위해서는 netlify를 이용해 호스팅을 해야하는것은 맞지만, 기존에 github pages로 제공하던 블로그와 별개로 다른 환경에 별도의 배포본을 이용하여 사용할 수 있다.</li><li>위와 같은 이유로 저는 기존의 깃허브 블로그(<a href="https://blog.hodory.dev)[https://blog.hodory.dev]">https://blog.hodory.dev)[https://blog.hodory.dev]</a> 와<br>netlify-cms를 이용하기 위한 <a href="https://hodory-blog.netlify.app/">https://hodory-blog.netlify.app/</a> 를 따로 사용하고 있습니다.</li></ol></li></ol><h2 id="설정방법"><a href="#설정방법" class="headerlink" title="설정방법"></a>설정방법</h2><hr><span id="more"></span><p><a href="https://www.netlifycms.org/docs/add-to-your-site/">Netlify-CMS 공식 문서</a> 참조하여 직접 설정하는것도 똑같이 따라만 하면 동작합니다.</p><p>하지만 변경사항이 생긴다면 블로그를 작성하기 위해 쓰는것인데 오히려 버전 대응에서도 리소스가 들 것이고,<br>깔끔한 구조를 만들진 못할것 같아서 <a href="https://github.com/JiangTJ/hexo-netlify-cms">hexo-netlify-cms</a> 해당 패키지를 사용하게 되었습니다.</p><p><img src="/images/screen-shot-2021-12-30-at-11.30.04-pm.png" alt="Git Gateway 설정" title="Git Gateway 설정"></p><p>위와 같이 git gateway를 설정하여 줍니다.<br>이것만 하면 netlify app의 URL에서 어드민 로그인이 가능합니다.</p><h3 id="임시-저장-기능-활용하기"><a href="#임시-저장-기능-활용하기" class="headerlink" title="임시 저장 기능 활용하기"></a>임시 저장 기능 활용하기</h3><hr><p>netlify-cms가 자체적인 db를 가지고 사용할 것이라 오해했던 부분이 이 부분때문이였습니다.</p><p><a href="https://www.netlifycms.org/docs/configuration-options/#publish-mode">해당 링크</a>를 확인해보면 기본적으로 netlify cms는 메인 git repo에 직접 커밋을 하는 방식으로 동작합니다.</p><p>하지만 publish_mode를 editorial_workflow로 변경하여주면 draft 저장 &#x2F; draft 수정 &#x2F; draft publish 와 같은 단계로 나누어 처리할 수 있습니다.</p><h4 id="설정-방법"><a href="#설정-방법" class="headerlink" title="설정 방법"></a>설정 방법</h4><p>hexo 디렉토리 root의  _config.yml 파일에 아래와 같이 추가합니다.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">netlify_cms:</span></span><br><span class="line">  <span class="attr">config_file:</span> <span class="string">netlify-cms.yml</span></span><br></pre></td></tr></table></figure><p>같은 경로에 netlify-cms.yml 파일을 생성하고 <a href="https://github.com/jiangtj/hexo-netlify-cms/blob/master/admin/config.yml">기본값</a>을 복사하여 넣어주고, 해당 값을 넣어주면 netlify-cms.yml 파일의 값으로 설정되게 됩니다.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">publish_mode:</span> <span class="string">editorial_workflow</span></span><br></pre></td></tr></table></figure><h4 id="기존화면"><a href="#기존화면" class="headerlink" title="기존화면"></a>기존화면</h4><p><img src="/images/screen-shot-2021-12-30-at-1.40.19-pm.png"></p><p>상단의 Publish 버튼 클릭시 바로 발행과 이후 동작을 선택할 수 있습니다.</p><h4 id="editorial-workflow-설정-후"><a href="#editorial-workflow-설정-후" class="headerlink" title="editorial_workflow 설정 후"></a>editorial_workflow 설정 후</h4><p><img src="/images/screen-shot-2021-12-30-at-11.43.45-pm.png"></p><p>Save 버튼만 노출이 되는데, 설정이 잘못 된 것인줄 알았으나, Save 버튼을 누르면 아래와 같이 Draft 상태 노출과 함께 변경됩니다.</p><p><img src="/images/screen-shot-2021-12-30-at-2.02.00-pm.png"></p><p>Draft 상태는 repository에 `cms&#x2F;all_posts&#x2F;` 과 같은 브랜치가 생기며, Pull Request가 발행됩니다.</p><p><img src="/images/screen-shot-2021-12-30-at-11.56.17-pm.png"></p><p>Publish 버튼의 동작은 동일하지만 Status가 <strong>READY</strong> 상태일때만 버튼이 동작합니다.</p><h2 id="주의사항-필수"><a href="#주의사항-필수" class="headerlink" title="주의사항(필수)"></a>주의사항(필수)</h2><hr><h4 id="접근-권한-설정"><a href="#접근-권한-설정" class="headerlink" title="접근 권한 설정"></a>접근 권한 설정</h4><p>Netlify site 설정에서 Identity &gt; Registration 설정을 <strong>Invite Only</strong> 로 변경하지 않으면, 모든 사용자가 각자의 메일 인증만 하면  자신의 블로그에 글을 쓸 수 있게 됩니다.</p><p><img src="/images/screen-shot-2021-12-31-at-12.12.51-am.png"></p><p>자신의 블로그에 아무나 글을 쓰길 원하는 사람은 없기 때문에 필수로 설정하는것을 추천드립니다.</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Netlify-CMS&quot;&gt;&lt;a href=&quot;#Netlify-CMS&quot; class=&quot;headerlink&quot; title=&quot;Netlify CMS&quot;&gt;&lt;/a&gt;Netlify CMS&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;블로그 플랫폼에 의존적이지 않고, 개발자st 블로그를 운영하고자 2017년부터 &lt;a href=&quot;https://hexo.io/ko/index.html&quot;&gt;hexo&lt;/a&gt;를 이용해 블로그를 운영하고 있습니다.&lt;/p&gt;
&lt;p&gt;마크 다운과 파일시스템을 이용하여 블로그 포스트를 작성하고, git을 이용하여 버전 관리를 하는것은 개발자로서 꽤나 매력적이었습니다.&lt;/p&gt;
&lt;p&gt;하지만 랩탑을 항상 소지하고 있지 않다면,&lt;br&gt;다양한 환경에서 블로그를 작성하기 위해 nodejs를 설치하고, hexo-cli 를 설치하는것은 언제나 부담스러운 일입니다.&lt;/p&gt;
&lt;p&gt;제 블로그는 Github Actions 를 이용하여 포스팅만 작성하면 자동으로 빌드하여 배포가 되지만,&lt;br&gt;또 다른 문제점은 포스팅에 이미지가 들어가게 될 경우 작업의 복잡도가 올라가게 됩니다.&lt;/p&gt;
&lt;p&gt;위와 같은 이유로 hexo를 온라인에서도 작성할 방법을 고민하고 검색하였고, netlify-cms 라는 서비스를 알게 되어 적용하고자 했습니다.&lt;/p&gt;
&lt;h2 id=&quot;사실과-오해&quot;&gt;&lt;a href=&quot;#사실과-오해&quot; class=&quot;headerlink&quot; title=&quot;사실과 오해&quot;&gt;&lt;/a&gt;사실과 오해&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;작년에 해당 서비스를 처음 접하였을때는 gatsby 블로그를 알아보다가 알게 된 것이라 두가지 오해가 있었습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;graphQL으로 포스트를 관리한다.&lt;/li&gt;
&lt;li&gt;netlify로 블로그를 호스팅 할때만 사용이 가능하다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이번에 작업을 진행하면서 알게된 내용은 틀린 부분들이 있었습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;graphQL으로 포스트를 관리한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;git-gateway라는 자체적인 방식을 이용하여 git repository를 저장소로 사용합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;netlify로 블로그를 호스팅 할때만 사용이 가능하다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;admin에 접근하기 위해서는 netlify를 이용해 호스팅을 해야하는것은 맞지만, 기존에 github pages로 제공하던 블로그와 별개로 다른 환경에 별도의 배포본을 이용하여 사용할 수 있다.&lt;/li&gt;
&lt;li&gt;위와 같은 이유로 저는 기존의 깃허브 블로그(&lt;a href=&quot;https://blog.hodory.dev)[https://blog.hodory.dev]&quot;&gt;https://blog.hodory.dev)[https://blog.hodory.dev]&lt;/a&gt; 와&lt;br&gt;netlify-cms를 이용하기 위한 &lt;a href=&quot;https://hodory-blog.netlify.app/&quot;&gt;https://hodory-blog.netlify.app/&lt;/a&gt; 를 따로 사용하고 있습니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;설정방법&quot;&gt;&lt;a href=&quot;#설정방법&quot; class=&quot;headerlink&quot; title=&quot;설정방법&quot;&gt;&lt;/a&gt;설정방법&lt;/h2&gt;&lt;hr&gt;</summary>
    
    
    
    <category term="Hexo" scheme="https://blog.hodory.dev/categories/Hexo/"/>
    
    <category term="Netlify" scheme="https://blog.hodory.dev/categories/Hexo/Netlify/"/>
    
    
    <category term="Hexo" scheme="https://blog.hodory.dev/tags/Hexo/"/>
    
    <category term="Netlify" scheme="https://blog.hodory.dev/tags/Netlify/"/>
    
  </entry>
  
  <entry>
    <title>［Notion］Notion과 Zapier로 가계부 자동화 하기</title>
    <link href="https://blog.hodory.dev/2021/12/29/acoount-book-with-notion-and-zapier/"/>
    <id>https://blog.hodory.dev/2021/12/29/acoount-book-with-notion-and-zapier/</id>
    <published>2021-12-29T16:50:47.000Z</published>
    <updated>2022-08-10T16:39:59.885Z</updated>
    
    <content type="html"><![CDATA[<h2 id="왜-가계부를-쓰나요"><a href="#왜-가계부를-쓰나요" class="headerlink" title="왜 가계부를 쓰나요?"></a>왜 가계부를 쓰나요?</h2><p>저는 예전부터 가계부를 써서 돈의 사용처를 기록하고 카테고리화 해서 어디에 돈을 많이 쓰고 있는지 흐름을 보는것을 좋아했습니다.</p><h2 id="가계부를-Notion으로-쓰는-이유"><a href="#가계부를-Notion으로-쓰는-이유" class="headerlink" title="가계부를 Notion으로 쓰는 이유"></a>가계부를 Notion으로 쓰는 이유</h2><p>첫 가계부는 편한 가계부라는 어플을 사용했고, 그 이후 핀테크쪽 서비스가 커지면서 뱅크샐러드를 사용했었습니다.<br/><br>뱅크 샐러드는 느리긴 했지만 제가 필요하다 생각했던 모든 것들을 제공 해주고 있었습니다.<br>토스에서 <code>소비</code> 라는 탭으로 연동된 계좌들의 소비 내역을 보여주는 기능도 출시하여 엄청나게 빠른 속도로 스크래핑이 되었습니다.</p><p>문제는 결혼 이후로는 제 지출 내역만 관리하는게 아니라 아내의 지출 내역도 관리가 필요했습니다.</p><p>저는 위에 가계부를 쓰는 이유가 돈의 흐름을 보고 싶은 것이라 통계들을 볼 수 없는 종이 가계부는 쓰고 싶지 않았고,<br/><br>언제든 접근할 수 있고 <strong>두사람이 같이</strong> 온라인으로 관리 할 수 있는 가계부가 필요했습니다.<br/><br>개발자 답게 직접 서비스를 만드는것도 고려했으나 주 목적인 가계부를 쓰기 위해 서버를 관리하고, 비용을 내고 해야한다는것이 점점 <a href="https://www.lesstif.com/software-engineering/yak-shaving-29590364.html">야크 털 깎기</a>가 되어 가는 느낌이였습니다.<br/><br>이러한 이유로 새로운 방법을 찾아보기 시작합니다.</p><p>앱을 알아봤을때 iOS 에는 <a href="https://pulapps.com/">Buboo</a> 가계부라는 어플이 있었는데,<br/><br>웬만한 공유 가계부 서비스들이 서비스 중단된 케이스가 많아서, 모든 데이터를 작은 서비스에 의존할 수 없겠다는 판단을 했습니다.</p><p>주위에 자문을 구했을때, 엑셀 템플릿을 구하여 엑셀 또는 구글 스프레드 시트를 이용하여 가계부를 쓰는 기혼자 분들이 많이 있었습니다.<br/><br>그분들을 따라 블로그들을 돌아다니며 템플릿을 수집하고 가장 제가 쓰기 편한것을 3개월정도 사용했습니다.</p><p>여기서도 발견된 문제점은 제가 엑셀을 잘 사용하지 않다보니, 만들어진 템플릿을 커스텀하는데 드는 리소스가 너무 컸습니다.<br>여기서도 엑셀을 배우는것보단 제가 원래 많이 사용하는 노션으로 가계부를 옮기게 됩니다.<br>직접 만들 수도 있었지만 템플릿은 <a href="https://www.youtube.com/watch?v=bSShqJobuyY">노션 강좌 유튜브</a>에서 구해서 사용했습니다.</p><h2 id="자동화를-하게-된-계기"><a href="#자동화를-하게-된-계기" class="headerlink" title="자동화를 하게 된 계기"></a>자동화를 하게 된 계기</h2><ul><li>생활비 통장</li><li>실제 결제에 사용하는 카드 N개</li></ul><p>위와 같이 나누어 쓰고 사용한 금액을 생활비 통장에서 차감하는 방식으로 사용합니다.<br/><br>처음에는 노션에만 가계부를 작성을 했는데 누락되는 케이스가 있어서 보조수단으로 토스 메모 기능을 활용했습니다.</p><p>카드로 결제를 하면 어떤것을 결제했는지(PG결제 같이 사업자명이 안 나오거나 실제 매장명과 거래처명이 다른 경우가 많음) 토스 소비 탭에서 메모를 작성을 하고,<br>토스에 있는 내역을 기반으로 노션에 가계부를 작성을 하고 있었습니다.</p><p>이렇게 하다보니 똑같은 일을 결제 내역당 두번씩 하고 있었습니다.<br/><br>하루에 1~2건이라면 문제가 없지만 하루에 결제내역이 많으면 10건까지도 있는 경우가 있다보니 제가 해야 할 반복 작업은 <code>N(결제건수)*2</code>가 되어버립니다.</p><p>이를 어떻게 해결하면 좋을까 고민하다보니 제가 하는 작업은 아래와 같습니다.</p><ol><li>토스 소비탭에서 결제 내역에 메모를 추가한다.</li><li>노션 가계부에 1의 내용을 바탕으로 저장한다.</li><li>생활비 통장에서 금액을 차감하고 결제수단을 업데이트 한다.(월별 생활비 추가)</li></ol><p>3번 동작은 송금 기능도 들어가기때문에 자동화가 애매하지만, 2번 동작은 1번 동작에 상당히 의존적이였습니다.<br><code>그렇다면 1번이 다 되었을 때, 해당 내용을 읽어들여 최근에 나온 Notion API를 사용하면 되지 않을까?</code> 라고 생각하게 됩니다.</p><h2 id="어떻게-연결-하였을까"><a href="#어떻게-연결-하였을까" class="headerlink" title="어떻게 연결 하였을까"></a>어떻게 연결 하였을까</h2><p><a href="https://zapier.com/">Zapier</a>라는 서비스에서는 구글드라이브의 이벤트와 <a href="https://nanonets.com/">Nanonets OCR</a> 이라는 서비스를 연결 할 수 있었습니다.<br/></p><span id="more"></span><p><img src="/images/account-book-with-notion-and-zapier/1.png" alt="Google Drive + Nanonets OCR Integrations"></p><h2 id="Google-Drive-to-Nanonets-설정"><a href="#Google-Drive-to-Nanonets-설정" class="headerlink" title="Google Drive to Nanonets 설정"></a>Google Drive to Nanonets 설정</h2><p>Nanonet에서 Modeling이라고 말하는 영역별 라벨링을 아래와 같이 해줍니다.<br/><br><img src="/images/account-book-with-notion-and-zapier/2.png" alt="Nanonets OCR Data Modeling"></p><p>아쉽게도 해외 서비스이다보니 한국어를 인식할때에는 <code>메모를 남겨보세요</code> 와 같은 문구는 <code>메모 를 남겨 보세요</code> 와 같이 띄어쓰기가 잘못 들어 가는 경우가 많습니다.<br/><br>계속해서 모델을 학습 시키면 제대로 인식 시킬거라는 기대감과 함께 문구를 수정하여 줬습니다.</p><p>그 이후 Zapier에서는 아래와 같이 설정하였습니다.<br/><br><img src="/images/account-book-with-notion-and-zapier/3.png" alt="Zapier Connection to Nanonets"></p><p>가장 헷갈렸던 부분은 Nanonets OCR 설정에서 Google Drive의 파일의 output중 어떤 값을 사용할지 였는데, 기본값인 File을 사용하면 읽기가 가능했습니다.<br/><br><img src="/images/account-book-with-notion-and-zapier/4.png" alt="Zapier Nanonets OCR google drive file"></p><h3 id="TIP"><a href="#TIP" class="headerlink" title="TIP"></a>TIP</h3><h3 id="Nanonets-to-Notion-설정"><a href="#Nanonets-to-Notion-설정" class="headerlink" title="Nanonets to Notion 설정"></a>Nanonets to Notion 설정</h3><p><img src="/images/account-book-with-notion-and-zapier/5.png" alt="Nanonets Integration"><br/><br>Nanonets 자체에서 OCR 처리 이후 Database(Mysql, MsSql, MariaDB 등)에 데이터를 넣을 수 있도록 하거나 Webhooks를 통해 처리할 수 있도록 자체적인 Integration을 제공하고 있습니다.</p><p>하지만 제가 필요한 동작은 notion에 값을 매핑하여 넣는것이기 때문에 zapier를 사용하였습니다.</p><p>Zapier에서 <code>formatter Zap</code>을 이용하여 포맷을 설정할 수 있으면 가장 좋겠지만, 이것 또한 비용이 되어 직접 처리하도록 하였습니다.</p><p><img src="/images/account-book-with-notion-and-zapier/6.png" alt="Zapier Nanonets OCR Output Mapping to Notion Database"></p><p>필요한 값중 매핑이 정상적으로 되지 않을 수 있으므로, Content 값에 필요한 값이 입력되도록 매핑하였습니다.</p><h2 id="마무리하며"><a href="#마무리하며" class="headerlink" title="마무리하며"></a>마무리하며</h2><p>최대한 코딩을 하지 않고 인프라도 구성하지 않으며 사용하고 싶었습니다.</p><p>하지만 제가 알아본 서비스들은 OCR을 지원하는 서비스가 거의 없었으며 플랜도 아래와 같았습니다.</p><ul><li><p>Zapier</p><ul><li>100회&#x2F;Multi-Action 지원 안함</li></ul></li><li><p>Automate</p><ul><li>300회&#x2F;Multi-Action 지원 안함</li></ul></li><li><p>IFTTT</p><ul><li>Multi-Action 지원 안함</li></ul></li></ul><p>위와 같은 이유로 OCR을 지원하고 있던 Zapier를 선택하여 nanonets를 연동하였으나, nanonets의 한글 인식 미흡한점은 감안할 수 있었으나<br/><br>Zapier&#x2F;Nanonets의 API Limit으로 일주일만에 절반 이상을 사용하여 해당 방식으로는 어려울것 같아, NCloud OCR이 300회를 제공하고 있어 해당 방식을 연동할 계획을 가지고 있습니다.</p><p>최근들어 각종 금융사 및 핀테크 서비스에서 마이데이터 서비스를 이용하여 자산 관리를 제공하고 있는데, 해당 서비스에서 관리한 데이터를 API로 받아 볼 수 있는날이 언젠가 오길 고대합니다.</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;왜-가계부를-쓰나요&quot;&gt;&lt;a href=&quot;#왜-가계부를-쓰나요&quot; class=&quot;headerlink&quot; title=&quot;왜 가계부를 쓰나요?&quot;&gt;&lt;/a&gt;왜 가계부를 쓰나요?&lt;/h2&gt;&lt;p&gt;저는 예전부터 가계부를 써서 돈의 사용처를 기록하고 카테고리화 해서 어디에 돈을 많이 쓰고 있는지 흐름을 보는것을 좋아했습니다.&lt;/p&gt;
&lt;h2 id=&quot;가계부를-Notion으로-쓰는-이유&quot;&gt;&lt;a href=&quot;#가계부를-Notion으로-쓰는-이유&quot; class=&quot;headerlink&quot; title=&quot;가계부를 Notion으로 쓰는 이유&quot;&gt;&lt;/a&gt;가계부를 Notion으로 쓰는 이유&lt;/h2&gt;&lt;p&gt;첫 가계부는 편한 가계부라는 어플을 사용했고, 그 이후 핀테크쪽 서비스가 커지면서 뱅크샐러드를 사용했었습니다.&lt;br/&gt;&lt;br&gt;뱅크 샐러드는 느리긴 했지만 제가 필요하다 생각했던 모든 것들을 제공 해주고 있었습니다.&lt;br&gt;토스에서 &lt;code&gt;소비&lt;/code&gt; 라는 탭으로 연동된 계좌들의 소비 내역을 보여주는 기능도 출시하여 엄청나게 빠른 속도로 스크래핑이 되었습니다.&lt;/p&gt;
&lt;p&gt;문제는 결혼 이후로는 제 지출 내역만 관리하는게 아니라 아내의 지출 내역도 관리가 필요했습니다.&lt;/p&gt;
&lt;p&gt;저는 위에 가계부를 쓰는 이유가 돈의 흐름을 보고 싶은 것이라 통계들을 볼 수 없는 종이 가계부는 쓰고 싶지 않았고,&lt;br/&gt;&lt;br&gt;언제든 접근할 수 있고 &lt;strong&gt;두사람이 같이&lt;/strong&gt; 온라인으로 관리 할 수 있는 가계부가 필요했습니다.&lt;br/&gt;&lt;br&gt;개발자 답게 직접 서비스를 만드는것도 고려했으나 주 목적인 가계부를 쓰기 위해 서버를 관리하고, 비용을 내고 해야한다는것이 점점 &lt;a href=&quot;https://www.lesstif.com/software-engineering/yak-shaving-29590364.html&quot;&gt;야크 털 깎기&lt;/a&gt;가 되어 가는 느낌이였습니다.&lt;br/&gt;&lt;br&gt;이러한 이유로 새로운 방법을 찾아보기 시작합니다.&lt;/p&gt;
&lt;p&gt;앱을 알아봤을때 iOS 에는 &lt;a href=&quot;https://pulapps.com/&quot;&gt;Buboo&lt;/a&gt; 가계부라는 어플이 있었는데,&lt;br/&gt;&lt;br&gt;웬만한 공유 가계부 서비스들이 서비스 중단된 케이스가 많아서, 모든 데이터를 작은 서비스에 의존할 수 없겠다는 판단을 했습니다.&lt;/p&gt;
&lt;p&gt;주위에 자문을 구했을때, 엑셀 템플릿을 구하여 엑셀 또는 구글 스프레드 시트를 이용하여 가계부를 쓰는 기혼자 분들이 많이 있었습니다.&lt;br/&gt;&lt;br&gt;그분들을 따라 블로그들을 돌아다니며 템플릿을 수집하고 가장 제가 쓰기 편한것을 3개월정도 사용했습니다.&lt;/p&gt;
&lt;p&gt;여기서도 발견된 문제점은 제가 엑셀을 잘 사용하지 않다보니, 만들어진 템플릿을 커스텀하는데 드는 리소스가 너무 컸습니다.&lt;br&gt;여기서도 엑셀을 배우는것보단 제가 원래 많이 사용하는 노션으로 가계부를 옮기게 됩니다.&lt;br&gt;직접 만들 수도 있었지만 템플릿은 &lt;a href=&quot;https://www.youtube.com/watch?v=bSShqJobuyY&quot;&gt;노션 강좌 유튜브&lt;/a&gt;에서 구해서 사용했습니다.&lt;/p&gt;
&lt;h2 id=&quot;자동화를-하게-된-계기&quot;&gt;&lt;a href=&quot;#자동화를-하게-된-계기&quot; class=&quot;headerlink&quot; title=&quot;자동화를 하게 된 계기&quot;&gt;&lt;/a&gt;자동화를 하게 된 계기&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;생활비 통장&lt;/li&gt;
&lt;li&gt;실제 결제에 사용하는 카드 N개&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;위와 같이 나누어 쓰고 사용한 금액을 생활비 통장에서 차감하는 방식으로 사용합니다.&lt;br/&gt;&lt;br&gt;처음에는 노션에만 가계부를 작성을 했는데 누락되는 케이스가 있어서 보조수단으로 토스 메모 기능을 활용했습니다.&lt;/p&gt;
&lt;p&gt;카드로 결제를 하면 어떤것을 결제했는지(PG결제 같이 사업자명이 안 나오거나 실제 매장명과 거래처명이 다른 경우가 많음) 토스 소비 탭에서 메모를 작성을 하고,&lt;br&gt;토스에 있는 내역을 기반으로 노션에 가계부를 작성을 하고 있었습니다.&lt;/p&gt;
&lt;p&gt;이렇게 하다보니 똑같은 일을 결제 내역당 두번씩 하고 있었습니다.&lt;br/&gt;&lt;br&gt;하루에 1~2건이라면 문제가 없지만 하루에 결제내역이 많으면 10건까지도 있는 경우가 있다보니 제가 해야 할 반복 작업은 &lt;code&gt;N(결제건수)*2&lt;/code&gt;가 되어버립니다.&lt;/p&gt;
&lt;p&gt;이를 어떻게 해결하면 좋을까 고민하다보니 제가 하는 작업은 아래와 같습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;토스 소비탭에서 결제 내역에 메모를 추가한다.&lt;/li&gt;
&lt;li&gt;노션 가계부에 1의 내용을 바탕으로 저장한다.&lt;/li&gt;
&lt;li&gt;생활비 통장에서 금액을 차감하고 결제수단을 업데이트 한다.(월별 생활비 추가)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;3번 동작은 송금 기능도 들어가기때문에 자동화가 애매하지만, 2번 동작은 1번 동작에 상당히 의존적이였습니다.&lt;br&gt;&lt;code&gt;그렇다면 1번이 다 되었을 때, 해당 내용을 읽어들여 최근에 나온 Notion API를 사용하면 되지 않을까?&lt;/code&gt; 라고 생각하게 됩니다.&lt;/p&gt;
&lt;h2 id=&quot;어떻게-연결-하였을까&quot;&gt;&lt;a href=&quot;#어떻게-연결-하였을까&quot; class=&quot;headerlink&quot; title=&quot;어떻게 연결 하였을까&quot;&gt;&lt;/a&gt;어떻게 연결 하였을까&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://zapier.com/&quot;&gt;Zapier&lt;/a&gt;라는 서비스에서는 구글드라이브의 이벤트와 &lt;a href=&quot;https://nanonets.com/&quot;&gt;Nanonets OCR&lt;/a&gt; 이라는 서비스를 연결 할 수 있었습니다.&lt;br/&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="ETC" scheme="https://blog.hodory.dev/categories/ETC/"/>
    
    <category term="Notion" scheme="https://blog.hodory.dev/categories/ETC/Notion/"/>
    
    <category term="Zapier" scheme="https://blog.hodory.dev/categories/ETC/Notion/Zapier/"/>
    
    
    <category term="Notion" scheme="https://blog.hodory.dev/tags/Notion/"/>
    
  </entry>
  
  <entry>
    <title>SSL Connection Error 발생</title>
    <link href="https://blog.hodory.dev/2020/11/21/ssl-connection-error/"/>
    <id>https://blog.hodory.dev/2020/11/21/ssl-connection-error/</id>
    <published>2020-11-21T14:42:03.000Z</published>
    <updated>2022-08-10T16:39:59.885Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">aaaaa</span> ~]<span class="comment"># curl -XGET &#123;&#123;링크&#125;&#125;</span></span><br><span class="line"><span class="built_in">curl</span>: (<span class="number">35</span>) SSL connect error</span><br></pre></td></tr></table></figure><h3 id="원인"><a href="#원인" class="headerlink" title="원인"></a>원인</h3><hr><p>Curl 버전이 낮아서 발생하는 문제</p><h2 id="해결방법"><a href="#해결방법" class="headerlink" title="해결방법"></a>해결방법</h2><hr><h3 id="패키지를-업데이트-할-수-있을-때"><a href="#패키지를-업데이트-할-수-있을-때" class="headerlink" title="패키지를 업데이트 할 수 있을 때"></a>패키지를 업데이트 할 수 있을 때</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> yum update <span class="literal">-y</span> nss <span class="built_in">curl</span> libcurl</span><br></pre></td></tr></table></figure><h3 id="패키지를-업데이트-할-수-없을-때"><a href="#패키지를-업데이트-할-수-없을-때" class="headerlink" title="패키지를 업데이트 할 수 없을 때"></a>패키지를 업데이트 할 수 없을 때</h3><p><code>-1</code> 을 파라미터로 넣어주면 해결 가능하다. (<a href="https://github.com/userify/shim/issues/25">https://github.com/userify/shim/issues/25</a>)</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">curl</span> <span class="literal">-XGET</span> &#123;&#123;링크&#125;&#125; <span class="literal">-k</span> <span class="literal">-1</span></span><br></pre></td></tr></table></figure><h2 id="참고-자료"><a href="#참고-자료" class="headerlink" title="참고 자료"></a>참고 자료</h2><hr><p><a href="http://www.kwangsiklee.com/2017/07/%EB%AC%B8%EC%A0%9C%ED%95%B4%EA%B2%B0-centos-curl-ssl-connect-error/">http://www.kwangsiklee.com/2017/07/문제해결-centos-curl-ssl-connect-error/</a></p><p><a href="https://wwwnghks.tistory.com/62">https://wwwnghks.tistory.com/62</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight powershell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;</summary>
      
    
    
    
    <category term="Linux" scheme="https://blog.hodory.dev/categories/Linux/"/>
    
    
    <category term="Shell" scheme="https://blog.hodory.dev/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>윈도우 컴포저 패키지 설치시 오류 처리 방법</title>
    <link href="https://blog.hodory.dev/2020/04/14/composer-error-on-windows/"/>
    <id>https://blog.hodory.dev/2020/04/14/composer-error-on-windows/</id>
    <published>2020-04-14T14:38:07.000Z</published>
    <updated>2022-08-10T16:39:59.885Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Your-requirements-could-not-be-resolved-to-an-installable-set-of-packages"><a href="#Your-requirements-could-not-be-resolved-to-an-installable-set-of-packages" class="headerlink" title="Your requirements could not be resolved to an installable set of packages."></a>Your requirements could not be resolved to an installable set of packages.</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Your requirements could not be resolved to an installable set of packages.</span><br><span class="line"></span><br><span class="line">  Problem 1</span><br><span class="line">    - laravel/horizon v4.2.1 requires ext-pcntl * -&gt; the requested PHP extension pcntl is missing from your system.</span><br><span class="line">    - laravel/horizon v4.2.0 requires ext-pcntl * -&gt; the requested PHP extension pcntl is missing from your system.</span><br><span class="line">    - laravel/horizon 4.x-dev requires ext-pcntl * -&gt; the requested PHP extension pcntl is missing from your system.</span><br><span class="line">    - Installation request for laravel/horizon ^4.2 -&gt; satisfiable by laravel/horizon[4.x-dev, v4.2.0, v4.2.1].</span><br></pre></td></tr></table></figure><p>Laravel Horizon을 windows에서 설치하려 할 때 위와 같은 오류가 발생하였습니다.</p><h2 id="해결방안"><a href="#해결방안" class="headerlink" title="해결방안"></a>해결방안</h2><p>pcntl은 윈도우에서 지원이 되지 않으므로 Docker 또는 Vargrant와 같은 가상환경을 사용해야 합니다.<br><a href="https://www.php.net/manual/en/pcntl.installation.php">Link</a></p><p>또는 아래와 같이 실행하여 설치를 완료 할 수 있습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require laravel/horizon --ignore-platform-reqs</span><br></pre></td></tr></table></figure><p><code>--ignore-platform-reqs</code> 옵션의 설명은<br>해당 링크에서 확인할 수 있습니다. <a href="https://getcomposer.org/doc/03-cli.md">Link</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ignore php, hhvm, lib-* and ext-* requirements and force the installation even if the local machine does not fulfill these. See also the platform config option.</span><br></pre></td></tr></table></figure><p>패키지를 설치하는데 필요한 조건을 충족하지 못하더라도 무시하고 설치를 실행하는 옵션입니다.</p><p>필요 조건을 모두 충족하지 않은 경우이므로 정상동작에 실패 할 수 있습니다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Your-requirements-could-not-be-resolved-to-an-installable-set-of-packages&quot;&gt;&lt;a href=&quot;#Your-requirements-could-not-be-resolved-to-an-i</summary>
      
    
    
    
    <category term="PHP" scheme="https://blog.hodory.dev/categories/PHP/"/>
    
    
    <category term="PHP" scheme="https://blog.hodory.dev/tags/PHP/"/>
    
    <category term="Composer" scheme="https://blog.hodory.dev/tags/Composer/"/>
    
    <category term="Packagist" scheme="https://blog.hodory.dev/tags/Packagist/"/>
    
  </entry>
  
  <entry>
    <title>[Git] 원격 브랜치명으로 새로운 브랜치 생성하기</title>
    <link href="https://blog.hodory.dev/2020/03/09/git-new-branch-from-remote-branch/"/>
    <id>https://blog.hodory.dev/2020/03/09/git-new-branch-from-remote-branch/</id>
    <published>2020-03-09T14:20:20.000Z</published>
    <updated>2022-08-10T16:39:59.885Z</updated>
    
    <content type="html"><![CDATA[<p>주로 PHPStorm 같은 IDE 나 VSCode 같은 Extension이 잘 되어 있는 에디터를 사용하고,<br/><br>그 이전에는 Source Tree &#x2F; Git Kraken &#x2F; Fork 등 Git Client 를 사용하여 Git을 사용하기 때문에,<br/><br>아직 CLI로 Git을 유연하게 다루지 못해 <a href="https://git-scm.com/book/ko/v2/Git-%EB%B8%8C%EB%9E%9C%EC%B9%98-%EB%A6%AC%EB%AA%A8%ED%8A%B8-%EB%B8%8C%EB%9E%9C%EC%B9%98">git-scm</a> 문서의 내용을 정리 합니다.</p><h2 id="명령어-정리"><a href="#명령어-정리" class="headerlink" title="명령어 정리"></a>명령어 정리</h2><h3 id="원격-브랜치명과-같은-이름으로-생성할-때"><a href="#원격-브랜치명과-같은-이름으로-생성할-때" class="headerlink" title="원격 브랜치명과 같은 이름으로 생성할 때"></a>원격 브랜치명과 같은 이름으로 생성할 때</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout --track origin/master</span></span><br></pre></td></tr></table></figure><p>해당 브랜치명이 리모트에만 있고, 로컬에는 없을 때 이를 축약하여 아래와 같이 실행할 수 있다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout master</span></span><br></pre></td></tr></table></figure><h3 id="원격-브랜치명과-다른-이름으로-생성할-때"><a href="#원격-브랜치명과-다른-이름으로-생성할-때" class="headerlink" title="원격 브랜치명과 다른 이름으로 생성할 때"></a>원격 브랜치명과 다른 이름으로 생성할 때</h3><p>가장 많이 쓰이는 경우인데, 원격 Git 서버의 master 브랜치를 기준으로 새로운 브랜치를 만들고, 체크아웃 할 때 사용합니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout -b my-new-branch-name origin/master</span></span><br></pre></td></tr></table></figure><p>위와 같이 실행하면 <code>origin/master</code>를 트래킹 하게 되는데,<br/><br>다른 브랜치를 추적하기 위해 아래와 같이 실행할 수 있습니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -u origin/feature-test</span><br></pre></td></tr></table></figure><h2 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h2><p><a href="https://git-scm.com/book/ko/v2/Git-%EB%B8%8C%EB%9E%9C%EC%B9%98-%EB%A6%AC%EB%AA%A8%ED%8A%B8-%EB%B8%8C%EB%9E%9C%EC%B9%98">Git 브랜치 - 리모트 브랜치</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;주로 PHPStorm 같은 IDE 나 VSCode 같은 Extension이 잘 되어 있는 에디터를 사용하고,&lt;br/&gt;&lt;br&gt;그 이전에는 Source Tree &amp;#x2F; Git Kraken &amp;#x2F; Fork 등 Git Client 를 사용하여</summary>
      
    
    
    
    <category term="Git" scheme="https://blog.hodory.dev/categories/Git/"/>
    
    
    <category term="Git" scheme="https://blog.hodory.dev/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>[Git] Git Merge 또는 Git checkout 오류 해결하기</title>
    <link href="https://blog.hodory.dev/2020/02/18/error-Your-local-changes-would-be-overwritten-by-merge/"/>
    <id>https://blog.hodory.dev/2020/02/18/error-Your-local-changes-would-be-overwritten-by-merge/</id>
    <published>2020-02-18T14:36:40.000Z</published>
    <updated>2022-08-10T16:39:59.885Z</updated>
    
    <content type="html"><![CDATA[<h2 id="문제-상황"><a href="#문제-상황" class="headerlink" title="문제 상황"></a>문제 상황</h2><p><code>git pull origin master</code> 또는 <code>git checkout master</code> 와 같이 브랜치를 변경하거나, 원격저장소에서 pull을 받을때<br>아래와 같은 오류가 나온적 경험이 한번쯤은 있을것 입니다.</p><p><img src="/images/error-Your-local-changes-would-be-overwritten-by-merge/files-would-be-overwritten-by-merge.png"><br><img src="/images/error-Your-local-changes-would-be-overwritten-by-merge/files-would-be-overwritten-by-checkout.png"></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">error: Your local changes to the following files would be overwritten by checkout:</span><br><span class="line">        themes/icarus/layout/widget/recent_posts.ejs</span><br><span class="line">Please commit your changes or stash them before you switch branches.</span><br><span class="line">Aborting</span><br></pre></td></tr></table></figure><p><code>error: Your local changes to the following files would be overwritten by merge:</code><br/><br><code>error: Your local changes to the following files would be overwritten by checkout:</code></p><p>위와 같은 오류와 함께 pull이나 checkout이 동작하지 않습니다.</p><p>처음 Git을 사용하였을때는 집과 회사를 오가면서 깃허브를 이용해서 push도 하고 pull도 하고 잘 사용하다가<br/><br>이런 오류가 나오면 어떻게 해야할지 모르겠고, 커밋을 해야하는것 같은데<br/><br>무의미한 커밋을 하고 싶지는 않아서 다른 폴더로 clone을 하고 다시 작업을 했었는데요.</p><h2 id="해결-방법"><a href="#해결-방법" class="headerlink" title="해결 방법"></a>해결 방법</h2><hr><p>에러 메세지를 자세히 보면 해결 방법이 나와있습니다.<br/><br><code>Please commit your changes or stash them before you merge.</code> 그리고<br/><br><code>Please commit your changes or stash them before you switch branches.</code> 라는 문구가 있습니다.<br/><br>메세지 그대로 merge 또는 switch branch 이전에 변경사항을 <strong><code>commit</code></strong> 하거나 <strong><code>stash</code></strong> 하라고 합니다.</p><p>위에서도 말했지만 저는 쓸데 없는 커밋을 하고싶지 않아 방법을 모르고 새 프로젝트를 실행했지만<br/><br>이때는 <code>git stash</code> 명령어를 사용하면 됩니다.</p><p>stash는 간단하게 버전관리 되는 대상들을 잠시동안 임시저장 해두는 방법이라고 말할 수 있습니다.</p><h3 id="그래서-어떻게-하라는건가요"><a href="#그래서-어떻게-하라는건가요" class="headerlink" title="그래서 어떻게 하라는건가요?"></a>그래서 어떻게 하라는건가요?</h3><hr><p>위와 같은 상황에서는 아래와 같이 사용하면 됩니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 현재 Staging 영역에 있는 파일의 변경사항을 스택에 넣어둡니다. </span><br><span class="line">$ git stash</span><br><span class="line"># 아래 명령어와 같이 원격 저장소의 master에서 pull을 하거나, git checkout master와 같이 브랜치를 바꿀 수 있습니다. </span><br><span class="line">$ git pull origin master</span><br><span class="line"># stash 명령어로 스택에 넣어둔 변경 사항을 적용하고, 스택에서 제거하여줍니다.</span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure><p>간단하게 한줄로 표현하면 <code>git stash &amp;&amp; git pull origin master &amp;&amp; git stash pop</code> 와 같이 사용할 수 있습니다.</p><h2 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h2><p><code>git stash</code>에 대한 자세한 사용법은 <a href="https://git-scm.com/book/ko/v2/Git-%EB%8F%84%EA%B5%AC-Stashing%EA%B3%BC-Cleaning">해당 링크</a>에서 확인할 수 있습니다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;문제-상황&quot;&gt;&lt;a href=&quot;#문제-상황&quot; class=&quot;headerlink&quot; title=&quot;문제 상황&quot;&gt;&lt;/a&gt;문제 상황&lt;/h2&gt;&lt;p&gt;&lt;code&gt;git pull origin master&lt;/code&gt; 또는 &lt;code&gt;git checkout </summary>
      
    
    
    
    <category term="Git" scheme="https://blog.hodory.dev/categories/Git/"/>
    
    
    <category term="Git" scheme="https://blog.hodory.dev/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>[AWS] S3 호스팅에 도메인 연결하기</title>
    <link href="https://blog.hodory.dev/2020/01/14/setting-domain-for-s3-static-web-hosting/"/>
    <id>https://blog.hodory.dev/2020/01/14/setting-domain-for-s3-static-web-hosting/</id>
    <published>2020-01-14T13:54:12.000Z</published>
    <updated>2022-08-10T16:39:59.885Z</updated>
    
    <content type="html"><![CDATA[<p>S3에서 정적 웹호스팅을 할 수 있다는 이야기는 들어 보았지만, 아직까지 해 볼 경험이 없었는데<br>지인 덕분에 간만에 재밌는걸 해봐서 잊지 않으려고 기록합니다.</p><p>이미 많은 포스팅들도 있고, <a href="https://docs.aws.amazon.com/ko_kr/AmazonS3/latest/dev/website-hosting-custom-domain-walkthrough.html">공식 가이드 문서</a>도 충분히 잘 정리 되어 있으니 참고 하시기 바랍니다.</p><p>도메인은 이미 구매하였다는 가정하에 진행합니다.<br>이 포스팅에서 사용할 도메인은 <code>[travelerapp.kr](http://travelerapp.kr)</code> 입니다.(곧 만료 예정)</p><h2 id="S3-설정하기"><a href="#S3-설정하기" class="headerlink" title="S3 설정하기"></a>S3 설정하기</h2><hr><ol><li><p>우선 별 다른 설정없이 s3 버킷을 생성하여줍니다.<br>이때 주의할점은 버킷명을 호스팅 하고자 하는 도메인과 일치시켜 주어야 합니다.</p><p> <img src="/images/setting-domain-for-s3-static-web-hosting/0eb80f5b-0ccf-48ca-ae27-6ef9e40ce13d.png" alt="버킷 생성하기"></p><p> 또한 권한 설정시 퍼블릭 액세스를 꼭 체크 해제 해주어야 합니다.</p><p> <img src="/images/setting-domain-for-s3-static-web-hosting/0eb80f5b-0ccf-48ca-ae27-6ef9e40ce13d_1.png" alt="버킷 생성하기(권한 설정) - 퍼블릭 액세스 체크해제"></p></li><li><p>버킷이 생성되면 호스팅 하고자 하는 파일을 업로드하여줍니다.<br>호스팅시 누구나 접근 가능하게 하기때문에 퍼블릭 액세스를 허용 해야합니다.</p><p> <img src="/images/setting-domain-for-s3-static-web-hosting/0eb80f5b-0ccf-48ca-ae27-6ef9e40ce13d_2.png" alt="파일 업로드시 퍼블릭 액세스로 변경"></p></li><li><p>그 후 속성 → 정적 웹 사이트 호스팅 메뉴에 들어가서<br>인덱스 문서(메인 페이지), 오류 문서(404 등 오류가 발생했을때 노출 할 페이지) 2가지를 설정하여줍니다.</p><p> <img src="/images/setting-domain-for-s3-static-web-hosting/0eb80f5b-0ccf-48ca-ae27-6ef9e40ce13d_3.png" alt="정적 웹호스팅 설정"></p><p> 저는 아래와 같이 main.html과 error.html으로 설정했습니다.<br> 저장 후 빨간색 박스 안에 있는 엔드포인트에 본인이 설정한 페이지가 정상적으로 노출되는지 확인합니다.</p><p> <img src="/images/setting-domain-for-s3-static-web-hosting/0eb80f5b-0ccf-48ca-ae27-6ef9e40ce13d_4.png" alt="정적 웹호스팅 설정 - 엔드포인트 확인"></p><p> 또한 <code>/detail.html</code> 과 같이 존재하지 않는 페이지를 조회하였을때에 오류 문서로 설정한 페이지가 정상적으로 노출되는지도 확인합니다.</p></li><li><p>마지막으로 버킷의 정책을 설정하여 줍니다.</p><p> 해당 리소스 하위 경로에 대한 조회 권한을 설정하는것으로, 아래의 빨간 박스 내용이 자신이 설정하려는 도메인과 동일해야합니다.</p><p> <img src="/images/setting-domain-for-s3-static-web-hosting/0eb80f5b-0ccf-48ca-ae27-6ef9e40ce13d_5.png" alt="버킷 정책 편집 - 편집기 안의 빨간 박스의 내용을 본인의 도메인으로 설정"></p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;Version&quot;: &quot;2012-10-17&quot;,</span><br><span class="line">    &quot;Id&quot;: &quot;Policy1579004958999&quot;,</span><br><span class="line">    &quot;Statement&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;Sid&quot;: &quot;Stmt1579004957334&quot;,</span><br><span class="line">            &quot;Effect&quot;: &quot;Allow&quot;,</span><br><span class="line">            &quot;Principal&quot;: &quot;*&quot;,</span><br><span class="line">            &quot;Action&quot;: &quot;s3:GetObject&quot;,</span><br><span class="line">            &quot;Resource&quot;: &quot;arn:aws:s3:::static.travelerapp.kr/*&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>이것으로 S3에 대한 설정은 끝입니다.</p><h2 id="Route53-설정하기"><a href="#Route53-설정하기" class="headerlink" title="Route53 설정하기"></a>Route53 설정하기</h2><hr><span id="more"></span><p>Route53의 설정은 더욱 간단합니다.</p><p>이미 호스팅 영역을 등록 하였다면, 네임서버 설정은 아마존으로 자동 설정되어 있기 때문에 설정하려는 도메인으로 레코드 세트를 등록하여줍니다.</p><p>이때 ALIAS를 사용하는데 정상적으로 등록 하였다면 아래 이미지와 같이 s3에 대한 설정이 있습니다.</p><p><img src="/images/setting-domain-for-s3-static-web-hosting/0eb80f5b-0ccf-48ca-ae27-6ef9e40ce13d_6.png" alt="Route53 레코드 세트 설정 - Alias 사용하기"></p><p>이와 같이 설정 후 저장을 하면 좌측 패널에 ALIAS로 설정된 도메인이 추가됩니다.</p><p><img src="/images/setting-domain-for-s3-static-web-hosting/0eb80f5b-0ccf-48ca-ae27-6ef9e40ce13d_7.png" alt="Route53 도메인 목록"></p><p>이제 다시 <a href="http://static.travelerapp.kr/">http://static.travelerapp.kr</a> 로 접근하면 설정한 도메인에 S3에 올려둔 페이지가 정상적으로 노출됩니다.</p><p>또한 하위 디렉토리나 파일들도 접근이 가능합니다.</p><p>단점으로는 현재(2020-01-14 기준) http 프로토콜만 지원하기때문에 https를 지원하기 위해서는 CloudFront 서비스를 대안으로 사용해야 합니다.</p><blockquote><p>참고자료</p></blockquote><ul><li><a href="https://docs.aws.amazon.com/ko_kr/AmazonS3/latest/dev/website-hosting-custom-domain-walkthrough.html" title="해당 링크로 이동">AWS S3 공식문서 - 사용자 지정 도메인으로 정적 웹 사이트 설정</a></li><li><a href="https://yuda.dev/248" title="해당 링크로 이동">Route 53과 S3로 정적 웹사이트 올리기</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;S3에서 정적 웹호스팅을 할 수 있다는 이야기는 들어 보았지만, 아직까지 해 볼 경험이 없었는데&lt;br&gt;지인 덕분에 간만에 재밌는걸 해봐서 잊지 않으려고 기록합니다.&lt;/p&gt;
&lt;p&gt;이미 많은 포스팅들도 있고, &lt;a href=&quot;https://docs.aws.amazon.com/ko_kr/AmazonS3/latest/dev/website-hosting-custom-domain-walkthrough.html&quot;&gt;공식 가이드 문서&lt;/a&gt;도 충분히 잘 정리 되어 있으니 참고 하시기 바랍니다.&lt;/p&gt;
&lt;p&gt;도메인은 이미 구매하였다는 가정하에 진행합니다.&lt;br&gt;이 포스팅에서 사용할 도메인은 &lt;code&gt;[travelerapp.kr](http://travelerapp.kr)&lt;/code&gt; 입니다.(곧 만료 예정)&lt;/p&gt;
&lt;h2 id=&quot;S3-설정하기&quot;&gt;&lt;a href=&quot;#S3-설정하기&quot; class=&quot;headerlink&quot; title=&quot;S3 설정하기&quot;&gt;&lt;/a&gt;S3 설정하기&lt;/h2&gt;&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;우선 별 다른 설정없이 s3 버킷을 생성하여줍니다.&lt;br&gt;이때 주의할점은 버킷명을 호스팅 하고자 하는 도메인과 일치시켜 주어야 합니다.&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;/images/setting-domain-for-s3-static-web-hosting/0eb80f5b-0ccf-48ca-ae27-6ef9e40ce13d.png&quot; alt=&quot;버킷 생성하기&quot;&gt;&lt;/p&gt;
&lt;p&gt; 또한 권한 설정시 퍼블릭 액세스를 꼭 체크 해제 해주어야 합니다.&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;/images/setting-domain-for-s3-static-web-hosting/0eb80f5b-0ccf-48ca-ae27-6ef9e40ce13d_1.png&quot; alt=&quot;버킷 생성하기(권한 설정) - 퍼블릭 액세스 체크해제&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;버킷이 생성되면 호스팅 하고자 하는 파일을 업로드하여줍니다.&lt;br&gt;호스팅시 누구나 접근 가능하게 하기때문에 퍼블릭 액세스를 허용 해야합니다.&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;/images/setting-domain-for-s3-static-web-hosting/0eb80f5b-0ccf-48ca-ae27-6ef9e40ce13d_2.png&quot; alt=&quot;파일 업로드시 퍼블릭 액세스로 변경&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;그 후 속성 → 정적 웹 사이트 호스팅 메뉴에 들어가서&lt;br&gt;인덱스 문서(메인 페이지), 오류 문서(404 등 오류가 발생했을때 노출 할 페이지) 2가지를 설정하여줍니다.&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;/images/setting-domain-for-s3-static-web-hosting/0eb80f5b-0ccf-48ca-ae27-6ef9e40ce13d_3.png&quot; alt=&quot;정적 웹호스팅 설정&quot;&gt;&lt;/p&gt;
&lt;p&gt; 저는 아래와 같이 main.html과 error.html으로 설정했습니다.&lt;br&gt; 저장 후 빨간색 박스 안에 있는 엔드포인트에 본인이 설정한 페이지가 정상적으로 노출되는지 확인합니다.&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;/images/setting-domain-for-s3-static-web-hosting/0eb80f5b-0ccf-48ca-ae27-6ef9e40ce13d_4.png&quot; alt=&quot;정적 웹호스팅 설정 - 엔드포인트 확인&quot;&gt;&lt;/p&gt;
&lt;p&gt; 또한 &lt;code&gt;/detail.html&lt;/code&gt; 과 같이 존재하지 않는 페이지를 조회하였을때에 오류 문서로 설정한 페이지가 정상적으로 노출되는지도 확인합니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;마지막으로 버킷의 정책을 설정하여 줍니다.&lt;/p&gt;
&lt;p&gt; 해당 리소스 하위 경로에 대한 조회 권한을 설정하는것으로, 아래의 빨간 박스 내용이 자신이 설정하려는 도메인과 동일해야합니다.&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;/images/setting-domain-for-s3-static-web-hosting/0eb80f5b-0ccf-48ca-ae27-6ef9e40ce13d_5.png&quot; alt=&quot;버킷 정책 편집 - 편집기 안의 빨간 박스의 내용을 본인의 도메인으로 설정&quot;&gt;&lt;/p&gt;
 &lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;Version&amp;quot;: &amp;quot;2012-10-17&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;Id&amp;quot;: &amp;quot;Policy1579004958999&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;Statement&amp;quot;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;quot;Sid&amp;quot;: &amp;quot;Stmt1579004957334&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;quot;Principal&amp;quot;: &amp;quot;*&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;quot;Action&amp;quot;: &amp;quot;s3:GetObject&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;quot;Resource&amp;quot;: &amp;quot;arn:aws:s3:::static.travelerapp.kr/*&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이것으로 S3에 대한 설정은 끝입니다.&lt;/p&gt;
&lt;h2 id=&quot;Route53-설정하기&quot;&gt;&lt;a href=&quot;#Route53-설정하기&quot; class=&quot;headerlink&quot; title=&quot;Route53 설정하기&quot;&gt;&lt;/a&gt;Route53 설정하기&lt;/h2&gt;&lt;hr&gt;</summary>
    
    
    
    <category term="AWS" scheme="https://blog.hodory.dev/categories/AWS/"/>
    
    
    <category term="AWS" scheme="https://blog.hodory.dev/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>2019년 하반기 회고</title>
    <link href="https://blog.hodory.dev/2020/01/11/2019%EB%85%84-%ED%95%98%EB%B0%98%EA%B8%B0-%ED%9A%8C%EA%B3%A0/"/>
    <id>https://blog.hodory.dev/2020/01/11/2019%EB%85%84-%ED%95%98%EB%B0%98%EA%B8%B0-%ED%9A%8C%EA%B3%A0/</id>
    <published>2020-01-11T09:24:46.000Z</published>
    <updated>2022-08-10T16:39:59.881Z</updated>
    
    <content type="html"><![CDATA[<p>상반기 회고 당시에는 하반기에는 분기별 회고를 해서 더 잘 정리해야겠다 생각했는데,<br>하반기 회고 조차 늦어지게 되었습니다.</p><h2 id="💼-회사"><a href="#💼-회사" class="headerlink" title="💼 회사"></a>💼 회사</h2><hr><p>새 회사로 이직을 하게 되면서, 인수인계 기간이 지난 후 약 3주정도 휴가를 즐겼습니다.</p><p>여행도 다녀오고, 쉬는 기간동안 카페 투어도 하고 이곳 저곳 돌아다녔지만 생각보다 생산성 있는 휴가는 아니여서<br>아직 아쉬움이 남아있습니다.</p><p>새 회사로 오게되어 회사에 적응하는 시간을 보내고 실무에 투입되었습니다.<br>이정도 규모의 회사에서는 어떻게 서비스를 하고 있고, 현재 서비스에서 어떤 문제를 가지고 있어서 그것을 해결하기 위해 어떤 고민을 하고 있는지, 앞으로 어떤 계획이 있는지 등을 어깨넘어 보면서 새로운것들을 알아가고 있습니다.<br>생각보다 많은 일들이 동시에 빠르게 진행 되고 있으면서도 아쉬움이 느껴졌습니다.</p><p>무엇보다 업무적 문서화가 아닌 공유 목적의 개인적인 문서화와 일정 관리 체계가 이렇게 잘 되어 있는 기업에서 일해본 경험이 처음이라 이러한 부분은 너무 만족스럽습니다. </p><p>최근에 <a href="https://brunch.co.kr/@goodgdg/43">스타트업에서 성장한다는 주니어의 착각</a> 이라는 포스팅을 접하게 되었습니다.<br>해당 글을 보며 과연 이전 회사에서 내가 느끼고 있었던 <code>나는 이곳과 함께 빠르게 성장하고 있다</code> 라는 생각이 어찌보면 혼자만의 착각이 아니였을까 다시 한번 돌아보는 기회를 준 고마운 글이었습니다.</p><p>지금은 스타트업에서 근무할때 처럼 기존의 것이 문제가 된다면 새로운걸 빠르게 도입하고 결과물을 확인하고 기존의 것은 대체 할 수 있는것은 아니지만,<br/><br>오히려 많은 사람들이 쓰고 있는 솔루션에서 호환성 유지를 위해 문제 없이 기능을 개선하면서도<br/><br>과연 최적의 방법일까 다시 한 번 더 고민해보면서 얻고 있는 이점들이 있습니다.   </p><h2 id="📒-블로그"><a href="#📒-블로그" class="headerlink" title="📒 블로그"></a>📒 블로그</h2><hr><h3 id="블로그-배포-방식-변경"><a href="#블로그-배포-방식-변경" class="headerlink" title="블로그 배포 방식 변경"></a>블로그 배포 방식 변경</h3><p>상반기에는 Travis CI로 블로그를 배포하도록 변경하였는데, Github Actions 신청이 가능해지면서 배포 방식을 Github Actions로 옮겼습니다.</p><p>Travis CI에서 Private Repo Free 제한이 Codeship 서비스와 동일하게 월 100회인줄 알았으나, 토탈 100회인것을 알고 시간여유가 있을때 빠르게 옮겨야겠다 싶었습니다.</p><p>코드는 이전과 동일하게 Dropbox에서 동기화 하면서도 Github Private Repo로 형상관리 하고있습니다.</p><p>해당 내용은 <a href="https://blog.hodory.dev/2019/08/23/deploy-hexo-blog-with-github-actions/">Github Actions를 이용하여 Hexo 블로그 배포하기</a> 에 포스팅 되어있습니다만,<br><a href="https://github.com/heowc/action-hexo">허원철님의 Github Actions</a> 를 사용하는게 더 빠르게 설정하기 좋은것 같습니다.</p><h3 id="TIL-Repo-생성"><a href="#TIL-Repo-생성" class="headerlink" title="TIL Repo 생성"></a>TIL Repo 생성</h3><p>새로 알게 된 것들, 오류를 해결한 경험 등을 블로그에 포스팅해서 한글로 공유하고 싶었으나,<br>오히려 포스팅이다보니 어느정도 갖춰 작성하려는것에 대한 부담감으로 작성을 미루게 되는 문제점이 발생했습니다.</p><p>이를 해결하고자 기존에 Notion에 간단하게 정리하거나 가볍게 정리할 내용을<br><a href="https://github.com/hodory/TIL">TIL 레포지토리</a> 에 작성하고 있습니다.</p><h2 id="🏃-일상"><a href="#🏃-일상" class="headerlink" title="🏃 일상"></a>🏃 일상</h2><hr><h3 id="💪-운동"><a href="#💪-운동" class="headerlink" title="💪 운동"></a>💪 운동</h3><p>상반기에 잠시나마 운동을 시작 했는데, 퇴사 시기와 맞물리게 헬스장도 끝나서 아직까지 운동을 안하고 있습니다.</p><p>운동을 할 때는 운동을 해도 왜 이렇게 체력은 늘지 않고 피곤할까 하며 몰랐는데,<br>안 하면서 저질 체력을 더 크게 느끼고 있습니다….</p><p>이동욱님의 하반기 회고록 포스팅을 보며 자극되는점이 너무 많았고,<br>더 오래 오래 지금 하고 있는 일을 하기 위해서는 건강이 제일 우선이기때문에 상반기에는 다시 운동을 시작해야겠습니다.</p><h2 id="신년-계획"><a href="#신년-계획" class="headerlink" title="신년 계획"></a>신년 계획</h2><hr><h3 id="1일-1커밋"><a href="#1일-1커밋" class="headerlink" title="1일 1커밋"></a>1일 1커밋</h3><p>12월즈음부터 1일 1커밋을 진행하고 있는데, 이걸로 얻을 수 있는 장점은 잠시나마 커밋을 하기 위해 시간을 내고 있다는것었습니다.</p><p>하지만 한달쯤 진행 해 보았는데 이것을 깨뜨리지 않기 위해 오히려 의미없는 커밋을 하고 있는건 아닌가라는 것을 고민하게 되었습니다.</p><p>그래도 이것을 이어가기 위해서 <code>무언가 정리하고 공부하게 된다</code> 라는점은 이점으로 자리잡고 있어,<br>상반기에는 지속하는게 목표이긴하나, 이것때문에 무언가를 포기한다거나 하는식으로 너무 얽매이지는 않도록 해야겠습니다.</p><h3 id="프로젝트"><a href="#프로젝트" class="headerlink" title="프로젝트"></a>프로젝트</h3><p>매번 흐지부지 되는 프로젝트가 너무 많아서 그저 강의를 따라해서 만들어낸 결과물이 아닌,<br>혼자서 무언가 만들어낸 결과물이 나올 수 있는 프로젝트를 진행하는게 목표입니다.</p><p>진행할 아이템은 많으나 가볍게 시작해서 빠르게 결과물을 내어볼 수 있는게 이중에 무엇일지 생각해보고,<br>만들어보고싶습니다.</p><h3 id="운동"><a href="#운동" class="headerlink" title="운동"></a>운동</h3><h3 id="자극제"><a href="#자극제" class="headerlink" title="자극제"></a>자극제</h3><p>남들과 나 자신을 비교하는 제 성격이 장점은 아니나, 이 부분을 자극제로 사용할 수 있는 방향으로 긍정적으로 활용 해왔습니다.<br>그리고 감사하게도 항상 제 가까이에 제가 자극이 될 수 있는 좋은분들이 계셔주셔서 지금의 제가 있을 수 있지 않았을까 생각합니다.</p><p><a href="https://github.com/jojoldu">이동욱 개발자님</a> 이 <a href="https://www.youtube.com/watch?v=V9AGvwPmnZU">유튜브에서 진행하여 주신 인터뷰</a>나 <a href="https://jojoldu.tistory.com/471">회고록</a> 등을 보며 더 열심히, 그리고 꾸준히 해야겠다는 자극을 얻을 수 있었습니다.<br>특히나 더 <code>오래</code> <code>잘</code> 하고 싶어서 본인에게 투자하신다는 부분에서는 뭔가 대단하시다고 느껴졌습니다.</p><p>하지만 다른사람이 편한 신발이 내게도 편할 수 없는것처럼 곧이 곧대로 따라하는게 아니라<br>저에게 맞는 방식을 찾아서 제게 좋은 자극이 되어주시는 분들과 같이 꾸준히, 그리고 열심히 해야겠습니다.</p><h3 id="일정관리"><a href="#일정관리" class="headerlink" title="일정관리"></a>일정관리</h3><p>내가 해오던 것, 해야할 것, 하고싶은것과 개인적인 캘린더 일정 들을 이곳 저곳에 따로 정리하다보니<br>매번 내가 지금 무엇을 해야할지 무엇을 하기로 했는지를 잊는 경우가 많습니다.</p><p>회사 다이어리(미팅 내용정리 및 공유 내용 정리와 일정 기입), Notion(개인적인 일정 또는 내용 정리), 캘린더 앱, 카카오톡 캘린더 등을 모두 따로 관리 하는게 필요한 것만 볼 수 있다는 장점이 있지만,<br><code>오늘 무엇을 하기로 했지?</code> 라는 생각이 들 때는 모든것을 들여다 보아야한다는 단점을 요즘들어 느끼고 있습니다.</p><p>또한 개인적으로 무언가를 진행해야하고 진행할것이다 라는것이 주어지면 큰 틀만 잡고 잘게 나누지 않아,<br>기한이 없어 계속 진행이 늘어지는 문제가 있어서 개인적인 일정도 기한을 정하는게 좋을 것 같습니다.</p><h3 id="독서"><a href="#독서" class="headerlink" title="독서"></a>독서</h3><p>원래부터 책을 가까이 하지 않았었고 책을 읽을 시간이 있다면 관심 있는 기술 서적을 더 많이 읽는 편인데,<br>정리되지 않은 상태로 말을 하고 글을 적는것을 고치는데 도움이 되지 않을까 싶어<br>두달에 한권정도는 업무 외의 책을 읽을 수 있지 않을까 생각하고 있습니다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;상반기 회고 당시에는 하반기에는 분기별 회고를 해서 더 잘 정리해야겠다 생각했는데,&lt;br&gt;하반기 회고 조차 늦어지게 되었습니다.&lt;/p&gt;
&lt;h2 id=&quot;💼-회사&quot;&gt;&lt;a href=&quot;#💼-회사&quot; class=&quot;headerlink&quot; title=&quot;💼 </summary>
      
    
    
    
    <category term="ETC" scheme="https://blog.hodory.dev/categories/ETC/"/>
    
    <category term="Retrospection" scheme="https://blog.hodory.dev/categories/ETC/Retrospection/"/>
    
    
    <category term="Retrospection" scheme="https://blog.hodory.dev/tags/Retrospection/"/>
    
  </entry>
  
  <entry>
    <title>[PHP] InvalidArgumentException : Unable to locate factory with name [default]</title>
    <link href="https://blog.hodory.dev/2020/01/09/Unable-to-locale-factory-with-name-default/"/>
    <id>https://blog.hodory.dev/2020/01/09/Unable-to-locale-factory-with-name-default/</id>
    <published>2020-01-09T15:36:54.000Z</published>
    <updated>2022-08-10T16:39:59.885Z</updated>
    
    <content type="html"><![CDATA[<h2 id="발단"><a href="#발단" class="headerlink" title="발단"></a>발단</h2><p>Laravel Framework로 TDD를 진행중에 Unit Test를 하기 위해 artisan 콘솔을 이용하여 <code>TaskTest</code> 라는 이름의 테스트 클래스를 생성하였습니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ php artisan make:test TaskTest --unit</span><br></pre></td></tr></table></figure><p>코드는 간단했습니다.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Tests</span>\<span class="title class_">Unit</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Project</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>\<span class="title">RefreshDatabase</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PHPUnit</span>\<span class="title">Framework</span>\<span class="title">TestCase</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TaskTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">RefreshDatabase</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">it_belongs_to_a_project</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$task</span> = <span class="title function_ invoke__">factory</span>(<span class="string">&#x27;App\Task&#x27;</span>)-&gt;<span class="title function_ invoke__">create</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertInstanceOf</span>(<span class="title class_">Project</span>::<span class="variable language_">class</span>, <span class="variable">$task</span>-&gt;project);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>해당 테스트를 생성 후 아래와 같이 PHPUnit으로 해당 테스트를 실행하였더니</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./vendor/bin/phpunit --filter it_belongs_to_a_project</span><br></pre></td></tr></table></figure><p>아래 이미지와 같은 에러가 나왔습니다.<br><img src="/images/Unable-to-locale-factory-with-name-default/1.jpg"></p><h2 id="InvalidArgumentException-Unable-to-locate-factory-with-name-default-App-Task"><a href="#InvalidArgumentException-Unable-to-locate-factory-with-name-default-App-Task" class="headerlink" title="InvalidArgumentException : Unable to locate factory with name [default] [App\Task]"></a><code>InvalidArgumentException : Unable to locate factory with name [default] [App\Task]</code></h2><p>과연 무엇이 문제일까 싶어 해당 모델의 migration이 제대로 안된걸까요?</p><span id="more"></span><p>migrate 명령어도 실행해보았고, Controller Test에서 사용할때에는 문제가 없었지만 factory 코드도 다시 작성 해보았습니다.</p><p>구글링으로 <a href="https://www.lesstif.com/pages/viewpage.action?pageId=26084077">정광섭님의 위키</a>를 참고했을때는 factory에 클래스가 제대로 설정된게 아닌 경우라 하여,<br/><br><code>factory(&#39;App\Task&#39;)</code> 와 <code>factory(Task::class)</code> 와 <code>factory(\App\Task::class)</code> 모두 테스트 해보았는데 모두 동작을 안했고,<br/></p><p>Laracast와 StackoverFlow에서는 phpunit의 setup 메소드를 상속하여,<br/><br><code>parent::setup()</code> 을 호출하고, factory를 호출하면 해결된다는 답변들도 확인하였으나, 제게 맞는 해결 방법은 아니였습니다.</p><p>하지만 라라캐스트 질문의 <a href="https://laracasts.com/discuss/channels/testing/unable-to-locate-factory-with-name-default?page=1#reply=400775">어떤 답변</a>에서는<br><code>--unit</code>으로 생성한 테스트 클래스가 상속하는 TestCase 클래스가 <code>\Tests\TestCase</code> 가 아닌 <code>\PHPUnit\Framework\TestCase</code>여서 발생했다는 내용이 있었습니다.</p><h2 id="해결"><a href="#해결" class="headerlink" title="해결"></a>해결</h2><p>저도 이걸 확인하고 바로 위의 코드를 아래와 같이 변경하였습니다.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Tests</span>\<span class="title class_">Unit</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Project</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Testing</span>\<span class="title">RefreshDatabase</span>;</span><br><span class="line">- <span class="keyword">use</span> <span class="title">PHPUnit</span>\<span class="title">Framework</span>\<span class="title">TestCase</span>;</span><br><span class="line">+ <span class="keyword">use</span> <span class="title">Tests</span>\<span class="title">TestCase</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TaskTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">RefreshDatabase</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@test</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">it_belongs_to_a_project</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$task</span> = <span class="title function_ invoke__">factory</span>(<span class="string">&#x27;App\Task&#x27;</span>)-&gt;<span class="title function_ invoke__">create</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertInstanceOf</span>(<span class="title class_">Project</span>::<span class="variable language_">class</span>, <span class="variable">$task</span>-&gt;project);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>네임스페이스를 확인할 생각은 전혀 하지 못했는데, 일반적인 테스트 클래스는 모두 <code>use Tests\TestCase;</code> 이렇게 선언되어있었으나<br/><br><code>--unit</code>으로 선언했을때는 <code>use PHPUnit\Framework\TestCase;</code>으로 자동 설정되어있었습니다.</p><p>아직까지 artisan에서 <code>--unit</code> 옵션을 사용하여 테스트 클래스를 만들었을때 namespace 변경 없이 하는 방법은 찾지 못하였는데,<br/><br><code>Illuminate\Foundation\Testing\TestCase</code> 에서 무언가 factory 메소드의 파라미터로 모델을 주입해주는 설정해주는것으로 보입니다.</p><blockquote><p>참고자료</p></blockquote><ul><li><a href="https://www.lesstif.com/pages/viewpage.action?pageId=26084077">정광섭님의 위키</a></li><li><a href="https://laracasts.com/discuss/channels/testing/unable-to-locate-factory-with-name-default?page=1#reply=400775">Laracast “Unable to locate factory with name [default]??”- amcsi</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;발단&quot;&gt;&lt;a href=&quot;#발단&quot; class=&quot;headerlink&quot; title=&quot;발단&quot;&gt;&lt;/a&gt;발단&lt;/h2&gt;&lt;p&gt;Laravel Framework로 TDD를 진행중에 Unit Test를 하기 위해 artisan 콘솔을 이용하여 &lt;code&gt;TaskTest&lt;/code&gt; 라는 이름의 테스트 클래스를 생성하였습니다.&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ php artisan make:test TaskTest --unit&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;코드는 간단했습니다.&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Tests&lt;/span&gt;\&lt;span class=&quot;title class_&quot;&gt;Unit&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;App&lt;/span&gt;\&lt;span class=&quot;title&quot;&gt;Project&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Illuminate&lt;/span&gt;\&lt;span class=&quot;title&quot;&gt;Foundation&lt;/span&gt;\&lt;span class=&quot;title&quot;&gt;Testing&lt;/span&gt;\&lt;span class=&quot;title&quot;&gt;RefreshDatabase&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PHPUnit&lt;/span&gt;\&lt;span class=&quot;title&quot;&gt;Framework&lt;/span&gt;\&lt;span class=&quot;title&quot;&gt;TestCase&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TaskTest&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TestCase&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RefreshDatabase&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@test&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;it_belongs_to_a_project&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;variable&quot;&gt;$task&lt;/span&gt; = &lt;span class=&quot;title function_ invoke__&quot;&gt;factory&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;App\Task&amp;#x27;&lt;/span&gt;)-&amp;gt;&lt;span class=&quot;title function_ invoke__&quot;&gt;create&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;variable language_&quot;&gt;$this&lt;/span&gt;-&amp;gt;&lt;span class=&quot;title function_ invoke__&quot;&gt;assertInstanceOf&lt;/span&gt;(&lt;span class=&quot;title class_&quot;&gt;Project&lt;/span&gt;::&lt;span class=&quot;variable language_&quot;&gt;class&lt;/span&gt;, &lt;span class=&quot;variable&quot;&gt;$task&lt;/span&gt;-&amp;gt;project);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;해당 테스트를 생성 후 아래와 같이 PHPUnit으로 해당 테스트를 실행하였더니&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ./vendor/bin/phpunit --filter it_belongs_to_a_project&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;아래 이미지와 같은 에러가 나왔습니다.&lt;br&gt;&lt;img src=&quot;/images/Unable-to-locale-factory-with-name-default/1.jpg&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;InvalidArgumentException-Unable-to-locate-factory-with-name-default-App-Task&quot;&gt;&lt;a href=&quot;#InvalidArgumentException-Unable-to-locate-factory-with-name-default-App-Task&quot; class=&quot;headerlink&quot; title=&quot;InvalidArgumentException : Unable to locate factory with name [default] [App\Task]&quot;&gt;&lt;/a&gt;&lt;code&gt;InvalidArgumentException : Unable to locate factory with name [default] [App\Task]&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;과연 무엇이 문제일까 싶어 해당 모델의 migration이 제대로 안된걸까요?&lt;/p&gt;</summary>
    
    
    
    <category term="PHP" scheme="https://blog.hodory.dev/categories/PHP/"/>
    
    <category term="PHPUnit" scheme="https://blog.hodory.dev/categories/PHP/PHPUnit/"/>
    
    
    <category term="PHP" scheme="https://blog.hodory.dev/tags/PHP/"/>
    
    <category term="Laravel" scheme="https://blog.hodory.dev/tags/Laravel/"/>
    
    <category term="PHPUnit" scheme="https://blog.hodory.dev/tags/PHPUnit/"/>
    
  </entry>
  
  <entry>
    <title>[JS]Document.ready 의 대안</title>
    <link href="https://blog.hodory.dev/2020/01/05/Document-Ready-Alternative/"/>
    <id>https://blog.hodory.dev/2020/01/05/Document-Ready-Alternative/</id>
    <published>2020-01-05T09:16:44.000Z</published>
    <updated>2022-08-10T16:39:59.885Z</updated>
    
    <content type="html"><![CDATA[<p>jQuery를 사용할 때, DOM이 로드된 후 처리를 위해 아래와 같은 구문을 많이 사용해왔습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>이와 같은 동작을 jQuery 없이 사용 할 수 없을까 찾아 보았는데,</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>위와 같이 작성하면 됩니다.</p><p><code>DOMContentLoaded</code>는 최초로 HTML 문서가 완전히 로드 및 파싱 되었을때 발생되므로,<br/><br>모든 리소스(이미지, 스크립트, 스타일 시트 등)가 로드 된 후 발생하는 <code>load</code> 이벤트 보다는 먼저 호출됩니다.</p><p>그렇다면 왜 <code>DOMContentLoaded</code> 이벤트 리스너 대신 <code>$(document).ready()</code>를 사용했을까 알아 보았는데,</p><p><a href="https://caniuse.com/#search=DOMContentLoaded">CAN-I-USE-DOMContentLoaded</a>를 확인하였더니, IE8까지는 지원을 하지 않았습니다.<br/><br>물론 jQuery가 아닌 대안들도 있었겠지만, 브라우저 호환성을 위해 jQuery를 써오던 입장에서는 간단하게 사용할 수 있던 방안이었으리라고 봅니다.</p><blockquote><p>참고자료</p></blockquote><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/Events/DOMContentLoaded" title="해당 링크로 이동">MDN-DOMContentLoaded</a></li><li><a href="https://caniuse.com/#search=DOMContentLoaded" title="해당 링크로 이동">CAN-I-USE-DOMContentLoaded</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;jQuery를 사용할 때, DOM이 로드된 후 처리를 위해 아래와 같은 구문을 많이 사용해왔습니다.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span</summary>
      
    
    
    
    <category term="Javascript" scheme="https://blog.hodory.dev/categories/Javascript/"/>
    
    
    <category term="Javascript" scheme="https://blog.hodory.dev/tags/Javascript/"/>
    
    <category term="JS" scheme="https://blog.hodory.dev/tags/JS/"/>
    
    <category term="Webpack" scheme="https://blog.hodory.dev/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>［JS］jQuery 두번째 파라미터가 뭐지?</title>
    <link href="https://blog.hodory.dev/2019/12/13/What-Is-jQuery-Second-Parameter/"/>
    <id>https://blog.hodory.dev/2019/12/13/What-Is-jQuery-Second-Parameter/</id>
    <published>2019-12-13T09:56:02.000Z</published>
    <updated>2022-08-10T16:39:59.885Z</updated>
    
    <content type="html"><![CDATA[<p>jQuery로 작성된 코드를 보는데, <code>$(&quot;selectorA&quot;, &quot;selectorB&quot;)</code> 와 같은 코드가 있었습니다.<br/><br>당연히 기존에 자주 접하던 <code>$(&quot;selectorA, selectorB&quot;)</code> 와 같은 코드인줄 알았으나, 예상과 다르게 동작하여 문서를 확인해 보았습니다.</p><p><a href="https://api.jquery.com/jQuery/#jQuery-selector-context">jQuery 문서</a>에 따르면, <code>A DOM Element, Document, or jQuery to use as context</code> 가 기재되어있다.</p><p>해당 영역에는 DOM element가 올 수 있는데 <a href="https://api.jquery.com/jQuery/#selector-context">Selector Context</a>를 확인해보면</p><blockquote><p>selector context is implemented with the .find() method, so $( “span”, this ) is equivalent to $( this ).find( “span” ).</p></blockquote><p>이와 같이 말하고 있습니다.</p><p><a href="https://jsperf.com/jquery-find-vs-context-sel/61">jQuery .find() vs. context selector</a> 해당 링크에서 퍼포먼스 확인을 해보면<br>아래 이미지와 같이 context selector를 사용 하는 것 보다, 아주 조금이나마 더 빠릅니다.<br><img src="/images/What-Is-jQuery-Second-Parameter/1.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;jQuery로 작성된 코드를 보는데, &lt;code&gt;$(&amp;quot;selectorA&amp;quot;, &amp;quot;selectorB&amp;quot;)&lt;/code&gt; 와 같은 코드가 있었습니다.&lt;br/&gt;&lt;br&gt;당연히 기존에 자주 접하던 &lt;code&gt;$(&amp;quot;se</summary>
      
    
    
    
    <category term="Javascript" scheme="https://blog.hodory.dev/categories/Javascript/"/>
    
    
    <category term="Javascript" scheme="https://blog.hodory.dev/tags/Javascript/"/>
    
    <category term="JS" scheme="https://blog.hodory.dev/tags/JS/"/>
    
    <category term="Webpack" scheme="https://blog.hodory.dev/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>［Java］Spring REST Docs HTML이 생성되지 않을때</title>
    <link href="https://blog.hodory.dev/2019/12/04/spring-rest-docs-with-gradle-not-working-html5/"/>
    <id>https://blog.hodory.dev/2019/12/04/spring-rest-docs-with-gradle-not-working-html5/</id>
    <published>2019-12-04T14:39:14.000Z</published>
    <updated>2022-08-10T16:39:59.885Z</updated>
    
    <content type="html"><![CDATA[<p>백기선님의 스프링부트 강좌를 수강하는중에 Spring REST Docs를 이용하여 HTML을 생성하려하는데,<br/><br>아무리 빌드를 해도 <code>ascii\html\index.html</code>이 생성되지 않았습니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">오후 11:58:18: Executing task &#x27;build&#x27;...</span><br><span class="line"></span><br><span class="line">&gt; Task :compileJava</span><br><span class="line">&gt; Task :processResources</span><br><span class="line">&gt; Task :classes</span><br><span class="line">&gt; Task :compileTestJava</span><br><span class="line">&gt; Task :processTestResources NO-SOURCE</span><br><span class="line">&gt; Task :testClasses</span><br><span class="line"></span><br><span class="line">&gt; Task :test</span><br><span class="line">2019-12-02 23:58:35.629  INFO 24376 --- [       Thread-5] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService &#x27;applicationTaskExecutor&#x27;</span><br><span class="line">2019-12-02 23:58:35.629  INFO 24376 --- [       Thread-7] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService &#x27;applicationTaskExecutor&#x27;</span><br><span class="line">2019-12-02 23:58:35.630  INFO 24376 --- [       Thread-7] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit &#x27;default&#x27;</span><br><span class="line">2019-12-02 23:58:35.630  INFO 24376 --- [       Thread-5] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit &#x27;default&#x27;</span><br><span class="line">2019-12-02 23:58:35.630  INFO 24376 --- [       Thread-7] .SchemaDropperImpl$DelayedDropActionImpl : HHH000477: Starting delayed evictData of schema as part of SessionFactory shut-down&#x27;</span><br><span class="line">2019-12-02 23:58:35.630  INFO 24376 --- [       Thread-5] .SchemaDropperImpl$DelayedDropActionImpl : HHH000477: Starting delayed evictData of schema as part of SessionFactory shut-down&#x27;</span><br><span class="line">2019-12-02 23:58:35.637  INFO 24376 --- [       Thread-5] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...</span><br><span class="line">2019-12-02 23:58:35.642  INFO 24376 --- [       Thread-5] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.</span><br><span class="line">2019-12-02 23:58:35.733 ERROR 24376 --- [       Thread-7] .SchemaDropperImpl$DelayedDropActionImpl : HHH000478: Unsuccessful: drop table event if exists</span><br><span class="line">2019-12-02 23:58:35.734  INFO 24376 --- [       Thread-7] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Shutdown initiated...</span><br><span class="line">2019-12-02 23:58:35.739  INFO 24376 --- [       Thread-7] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Shutdown completed.</span><br><span class="line"></span><br><span class="line">&gt; Task :asciidoctor NO-SOURCE</span><br><span class="line">&gt; Task :bootJar</span><br><span class="line">&gt; Task :jar SKIPPED</span><br><span class="line">&gt; Task :assemble</span><br><span class="line">&gt; Task :check</span><br><span class="line">&gt; Task :build</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL in 18s</span><br><span class="line">5 actionable tasks: 5 executed</span><br><span class="line">오후 11:58:36: Task execution finished &#x27;build&#x27;.</span><br></pre></td></tr></table></figure><p>cli를 들여다보니, 위와 같이 노출이 되는데 자세히 들여다보면 <code>&gt; Task :asciidoctor NO-SOURCE</code> 가 있습니다.</p><p>의존성문제인줄알고 버전도 변경 하여 보고 build.gradle 파일의 코드가 잘못되었거나,<br/><br>버전이 올라가면서 변경점이 있는지 체크해보았으나 다른점이 없어 검색을 하였더니<br>asciidoctor sourceDirectory가 Maven 플러그인에서는 <code>src/main/asciidoc</code>이지만, Gradle 플러그인은 sourceDirectory가 <code>/src/docs/asciidoc</code> 였습니다.<br>또한 Spring-REST-Docs에 의해 생성되는 경로도 아래 이미지와 같이 달랐습니다 </p><p><img src="/images/spring-rest-docs-with-gradle-not-working-html5/1.png" alt="JUnitRestDocumentation rule"></p><p>Maven을 사용해 본 적이 없어서 gradle과 플러그인도 동일할줄 알았는데,<br/><br>빌드 결과물도 다른 디렉토리에 생성되고 실행가능한 명령어들도 다른것을 알 수 있었습니다.</p><blockquote><p>참고자료</p></blockquote><hr><ul><li><a href="https://github.com/asciidoctor/asciidoctor-maven-plugin">Github - asciidoctor Maven Plugin</a></li><li><a href="https://asciidoctor.org/docs/asciidoctor-gradle-plugin/">Docs - asciidoctor Gradle Plugin</a></li><li><a href="https://docs.spring.io/spring-restdocs/docs/2.0.4.RELEASE/reference/html5/#getting-started-documentation-snippets">Docs - Spring REST Docs#Generating Documentation Snippets</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;백기선님의 스프링부트 강좌를 수강하는중에 Spring REST Docs를 이용하여 HTML을 생성하려하는데,&lt;br/&gt;&lt;br&gt;아무리 빌드를 해도 &lt;code&gt;ascii\html\index.html&lt;/code&gt;이 생성되지 않았습니다.&lt;/p&gt;
&lt;figu</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.hodory.dev/categories/Java/"/>
    
    <category term="SpringBoot" scheme="https://blog.hodory.dev/categories/Java/SpringBoot/"/>
    
    
    <category term="Java" scheme="https://blog.hodory.dev/tags/Java/"/>
    
    <category term="SpringBoot" scheme="https://blog.hodory.dev/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>［JS］Object literal 보다 JSON.parse()가 더 빠르다</title>
    <link href="https://blog.hodory.dev/2019/11/26/json-parse-is-faster-than-object-literal/"/>
    <id>https://blog.hodory.dev/2019/11/26/json-parse-is-faster-than-object-literal/</id>
    <published>2019-11-26T13:51:44.000Z</published>
    <updated>2022-08-10T16:39:59.885Z</updated>
    
    <content type="html"><![CDATA[<h2 id="서론"><a href="#서론" class="headerlink" title="서론"></a>서론</h2><hr><p>웹에서 몇 kb 크기의 객체를 초기에 렌더링 하는것은 생각보다 많습니다.</p><p>이 javascript 객체가 로드될때까지 클라이언트는 빈 화면을 보게 될 수 있습니다.</p><p>이러한 문제를 해결하기 위해, 서버사이드 렌더링을 활용 하는 방법도 있겠지만<br>다른 방법은 없을까요?</p><p>Chrome Dev Summit에서는 객체를 JSON으로 직렬화 하고, 문자열 리터럴로 변환해 Javscript 객체에 전달하는 것이 성능 향상에 도움이 된다고 이야기합니다.</p><h2 id="무슨-소리일까"><a href="#무슨-소리일까" class="headerlink" title="무슨 소리일까?"></a>무슨 소리일까?</h2><hr><p>아래의 두 코드는 동일한 객체를 생성하지만,<br>Javascript 엔진의 경우, JSON 예제를 스캔하고, 파싱만 하기 때문에 빠르다고합니다.</p><p><img src="/images/json-parse-is-faster-than-object-literal/4c9cb490-207e-41db-9d59-126135a099ca.png"></p><p>Javascript 파서에게 해당 코드는 여러개의 객체 리터럴을 받는 코드이냐, 많은 양의 데이터가 담긴  문자열 단일 리터럴이냐로 구분됩니다.</p><p>해당 예제에서의 객체의 값은 숫자이지만, 자기 자신의 속성과 값을 가진 Object 또는 배열이거나, 더 많은 값을 가진 무엇이든 될 수 있기 때문입니다.</p><p>이렇기 때문에 <strong>자바스크립트 파서는 단지 올바르게 토큰화 하기위해 JSON.parse에 비해 더 많이 동작 해야 합니다.</strong></p><p>또 다른 이유로는 자바스크립트 객체 리터럴은 그 값이 객체문자열이라는것을 미리 알지 못하기때문입니다.</p><p>JSON.parse로 파싱할때에는 간단하게 중괄호 이후에 Object로 시작할지, 아니면 잘못된 JSON 형식인지라는 두가지 옵션에만 중점을 둡니다.</p><p><img src="/images/json-parse-is-faster-than-object-literal/b3788160-94bb-4610-84b3-f30b96ea4839.png"></p><p>반면 객체 리터럴은 위의 이미지와 같이 Javscript Object는 중괄호 뒤의 값이 무엇인지를 아직까지는 알 수 없고</p><p><img src="/images/json-parse-is-faster-than-object-literal/23fb44c8-8b1f-4ac6-94da-760d94e16310.png"></p><p>이렇게 되었을때는 첫번째 라인에 선언된 x의 값을 바인딩 한 객체 리터럴을 생성하는것을 알 수 있다.</p><p><img src="/images/json-parse-is-faster-than-object-literal/9fe6156d-93e5-478d-b7ca-d065792a93fd.png"></p><p>하지만 이와 같이  선언 되었을 경우 두번째 라인의 코드에서 첫번째 라인의 x는 전혀 참조되지않습니다.</p><p><img src="/images/json-parse-is-faster-than-object-literal/3c12ea86-ac4a-48f4-9078-f2aa6d2b7f01.png"></p><p>이와 같이, 이러한 문맥 의존 문법으로 인해, Javascript 엔진에서의 파싱이 까다롭습니다.</p><p>문자열을 JSON 파싱하는것은 이러한 문제가 없어, 구문 분석이 훨씬 간단해져서 빠를 수 있는것 입니다.</p><h2 id="실제로-얼마나-빠른건데"><a href="#실제로-얼마나-빠른건데" class="headerlink" title="실제로 얼마나 빠른건데?"></a>실제로 얼마나 빠른건데?</h2><hr><p><img src="/images/json-parse-is-faster-than-object-literal/4e1dcc9f-59a1-4b20-be93-17b68ec19453.png"></p><p>캐시가 없는 콜드로드 상태에서 8MB에 가까운 페이로드를 기준으로 파싱하였을때,<br>v8과 크롬에서 <code>JSON.parse()</code>가 1.7배정도 빠르다고 한다.</p><p>이는 다른 자바스크립트 엔진이나 브라우저에서도 적용된다고한다.</p><p><a href="https://goo.gle/json-parse-redux">리덕스앱에 이와 같은 적용을 한 사례</a>에서는 Time To Interactive(TTI)가 18% 개선되었고, Lighthouse 성능 점수가 8포인트 증가하였습니다.</p><p>이러한 작업을 직접 수동으로 하는것 대신 툴을 이용하는것을 추천합니다.<br>코드 베이스에 JSON 모듈을 사용할 경우, <a href="https://goo.gle/json-parse-webpack">webpack에서는 <code>JSON.parse()</code>기능을 이미 적용 시켰습니다.</a></p><p><a href="http://goo.gle/json-parse-babel">다른 코드들은 babel 플러그인를 이용해 변환 할 수 있습니다.</a></p><h2 id="맺음말"><a href="#맺음말" class="headerlink" title="맺음말"></a>맺음말</h2><hr><p>페이스북 페이지에서</p><blockquote><p>Faster apps with JSON.parse</p></blockquote><p>해당 문구를 보자마자</p><p>“엥?? <code>JSON.parse()</code>는 느리지 않나??” 라는 생각만을 가지고 관심을 가지며 영상을 보면서 정리한 내용이라 제가 잘못 이해한 부분이 있을 수 있습니다.</p><p>잘못된 부분이 있으면 코멘트 부탁 드리겠습니다.</p><h2 id="출처"><a href="#출처" class="headerlink" title="출처"></a>출처</h2><hr><p><a href="https://youtu.be/ff4fgQxPaO0">Faster apps with JSON.parse (Chrome Dev Summit 2019)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;서론&quot;&gt;&lt;a href=&quot;#서론&quot; class=&quot;headerlink&quot; title=&quot;서론&quot;&gt;&lt;/a&gt;서론&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;웹에서 몇 kb 크기의 객체를 초기에 렌더링 하는것은 생각보다 많습니다.&lt;/p&gt;
&lt;p&gt;이 javascript 객체가 </summary>
      
    
    
    
    <category term="Javascript" scheme="https://blog.hodory.dev/categories/Javascript/"/>
    
    
    <category term="Javascript" scheme="https://blog.hodory.dev/tags/Javascript/"/>
    
    <category term="JS" scheme="https://blog.hodory.dev/tags/JS/"/>
    
    <category term="V8" scheme="https://blog.hodory.dev/tags/V8/"/>
    
  </entry>
  
  <entry>
    <title>PHPUnit Annotation 정리</title>
    <link href="https://blog.hodory.dev/2019/11/24/phpunit-annotations/"/>
    <id>https://blog.hodory.dev/2019/11/24/phpunit-annotations/</id>
    <published>2019-11-24T16:18:24.000Z</published>
    <updated>2022-08-10T16:39:59.885Z</updated>
    
    <content type="html"><![CDATA[<h2 id="서론"><a href="#서론" class="headerlink" title="서론"></a>서론</h2><hr><p>PHP Unit을 사용하면서도 잘 모르는 어노테이션을 PHPUnit v8.4 기준(2019-11-19 최신버전)으로 정리하였습니다.</p><h2 id="author"><a href="#author" class="headerlink" title="@author"></a>@author</h2><h3 id="테스트를-작성자별-그룹화-필터링-할-때"><a href="#테스트를-작성자별-그룹화-필터링-할-때" class="headerlink" title="테스트를 작성자별 그룹화 필터링 할 때"></a>테스트를 작성자별 그룹화 필터링 할 때</h3><hr><p><code>@group</code> 어노테이션의 별칭으로, 테스트를 작성자별로 그룹화하여 필터링 하는데 사용할 수 있습니다.</p><h2 id="after"><a href="#after" class="headerlink" title="@after"></a>@after</h2><h3 id="각-테스트가-끝난-뒤-실행-하려-할-때"><a href="#각-테스트가-끝난-뒤-실행-하려-할-때" class="headerlink" title="각 테스트가 끝난 뒤 실행 하려 할 때"></a>각 테스트가 끝난 뒤 실행 하려 할 때</h3><hr><p>각 테스트 메소드들이 실행 된 후, 특정 메소드를 실행하고자 할때 사용할 수 있습니다.</p><p>각 테스트가 끝난 뒤 트랜잭션 커밋or롤백을 한다거나, 생성된 파일을 삭제하는 등의 처리를 하는데 사용하면 좋을 것 같습니다.</p><details>    <summary>예제 코드</summary>    <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Tests</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">PHPUnit</span>\<span class="title">Framework</span>\<span class="title">TestCase</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@after</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">afterDo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;After Method Called&quot;</span> . PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;test1 Method Called&quot;</span> . PHP_EOL;</span><br><span class="line">        <span class="built_in">self</span>::<span class="title function_ invoke__">assertTrue</span>(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test2</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;test2 Method Called&quot;</span> . PHP_EOL;</span><br><span class="line">        <span class="built_in">self</span>::<span class="title function_ invoke__">assertTrue</span>(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 출력 결과</span></span><br><span class="line">test1 Method Called</span><br><span class="line">After Method Called</span><br><span class="line">test2 Method Called</span><br><span class="line">After Method Called</span><br></pre></td></tr></table></figure></details><span id="more"></span><h2 id="afterClass"><a href="#afterClass" class="headerlink" title="@afterClass"></a>@afterClass</h2><h3 id="모든-테스트가-끝난-후-실행-하려-할-때"><a href="#모든-테스트가-끝난-후-실행-하려-할-때" class="headerlink" title="모든 테스트가 끝난 후 실행 하려 할 때"></a>모든 테스트가 끝난 후 실행 하려 할 때</h3><hr><p>모든 테스트가 끝난 후, 공유된 자원들을 정리하기 위해 호출할 정적 메소드를 지정 할 수 있습니다.</p><p>해당 부분에서 테스트 실행시 만든 DB 커넥션을 회수하거나, 전체 트랜잭션을 처리 하거나, 소켓을 닫는 등의 처리를 할 수 있을것 같습니다.</p><details>    <summary>예제 코드</summary>    <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Tests</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">PHPUnit</span>\<span class="title">Framework</span>\<span class="title">TestCase</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@afterClass</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">afterClassDo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;After Class Method Called&quot;</span> . PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;test1 Method Called&quot;</span> . PHP_EOL;</span><br><span class="line">        <span class="built_in">self</span>::<span class="title function_ invoke__">assertTrue</span>(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test2</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;test2 Method Called&quot;</span> . PHP_EOL;</span><br><span class="line">        <span class="built_in">self</span>::<span class="title function_ invoke__">assertTrue</span>(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 출력 결과</span></span><br><span class="line">test1 Method Called</span><br><span class="line">test2 Method Called</span><br><span class="line">After Class Method Called</span><br></pre></td></tr></table></figure></details><h2 id="backupGlobals"><a href="#backupGlobals" class="headerlink" title="@backupGlobals"></a>@backupGlobals</h2><h3 id="글로벌-변수를-유지하고-싶다면"><a href="#글로벌-변수를-유지하고-싶다면" class="headerlink" title="글로벌 변수를 유지하고 싶다면"></a>글로벌 변수를 유지하고 싶다면</h3><hr><p>모든 글로벌 변수를 각 테스트 전에 백업하고, 각 테스트 이후 해당 백업을 복원시킵니다.</p><p>메소드 레벨에서 재정의가 가능합니다.</p><p>해당 설명만으로는 이해가 잘 되지 않아서 직접 예제 코드를 만들어 보았습니다.<br>클래스 스코프 밖에 정의된 글로벌 변수인 <code>$className</code>을 <code>@backupGlobals</code> 어노테이션이 enabled 되어 있는 테스트 코드에서는 실행이전 값을 백업하여두고 테스트가 끝나면 복원이 되어,<br>두번째 테스트코드에서도 “MyTest”라는 값을 가지고 있게됩니다.</p><details>    <summary>예제 코드</summary>    <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Tests</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">PHPUnit</span>\<span class="title">Framework</span>\<span class="title">TestCase</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$className</span> = <span class="string">&quot;MyTest&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@backupGlobals</span> enabled</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_</span>글로벌변수를<span class="title">_</span>백업하고<span class="title">_</span>변경(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$className</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="variable">$className</span>, <span class="string">&quot;MyTest&quot;</span>);</span><br><span class="line">        <span class="variable">$className</span> = <span class="string">&quot;Foo&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@backupGlobals</span> disabled</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_</span>글로벌변수를<span class="title">_</span>백업하지<span class="title">_</span>않고<span class="title">_</span>변경(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$className</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="variable">$className</span>, <span class="string">&quot;MyTest&quot;</span>);</span><br><span class="line">        <span class="variable">$className</span> = <span class="string">&quot;Bar&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_</span>글로벌변수를<span class="title">_</span>백업되어있는지<span class="title">_</span>체크(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$className</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertEquals</span>(<span class="variable">$className</span>, <span class="string">&quot;Bar&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h2 id="backupStaticAttributes"><a href="#backupStaticAttributes" class="headerlink" title="@backupStaticAttributes"></a>@backupStaticAttributes</h2><h3 id="정적-속성을-사용하려-할-때"><a href="#정적-속성을-사용하려-할-때" class="headerlink" title="정적 속성을 사용하려 할 때"></a><del>정적 속성을 사용하려 할 때</del></h3><hr><p><del>선언된 클래스들 안의 모든 정적 속성을 각 테스트 전에 백업하고, 각 테스트 후에 해당 백업을 복원 시킵니다.</del></p><p><del>클래스 레벨에도 선언 가능하며, 각 테스트 메소드에서 추가 제어 가능합니다.</del></p><details>    <summary>예제 코드</summary>    **아래 코드는 정상 동작 안 합니다.**    <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">PHPUnit</span>\<span class="title">Framework</span>\<span class="title">TestCase</span>;</span><br><span class="line">        </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@backupStaticAttributes</span> enabled</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_</span>정적속성을<span class="title">_</span>사용하는<span class="title">_</span>테스트(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@backupStaticAttributes</span> disabled</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_</span>정적속성을<span class="title">_</span>사용하지<span class="title">_</span>않는<span class="title">_</span>테스트(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h2 id="before"><a href="#before" class="headerlink" title="@before"></a>@before</h2><h3 id="각-테스트-실행전에-실행-하려-할-때"><a href="#각-테스트-실행전에-실행-하려-할-때" class="headerlink" title="각 테스트 실행전에 실행 하려 할 때"></a>각 테스트 실행전에 실행 하려 할 때</h3><hr><p>각 테스트 메소드가 호출되기 전에 실행할 메소드를 지정할 수 있습니다.</p><p>아래와 같이 beforeMethod는 각 메소드 호출전에 실행되지만,<br>users 배열의 값이 증가되지는 않습니다.</p><details>    <summary>예제 코드</summary>    <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">PHPUnit</span>\<span class="title">Framework</span>\<span class="title">TestCase</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$users</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@before</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">beforeMethod</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Before Method Called&quot;</span> . PHP_EOL;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;users[] = [</span><br><span class="line">            <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;홍길동&#x27;</span></span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;test1 Method Called&quot;</span> . PHP_EOL;</span><br><span class="line">        <span class="built_in">self</span>::<span class="title function_ invoke__">assertCount</span>(<span class="number">1</span>, <span class="variable">$this</span>-&gt;users);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test2</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;test2 Method Called&quot;</span> . PHP_EOL;</span><br><span class="line">        <span class="built_in">self</span>::<span class="title function_ invoke__">assertCount</span>(<span class="number">1</span>, <span class="variable">$this</span>-&gt;users);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 출력 결과</span></span><br><span class="line">Before Method Called</span><br><span class="line">test1 Method Called</span><br><span class="line">Before Method Called</span><br><span class="line">test2 Method Called</span><br></pre></td></tr></table></figure></details><h2 id="beforeClass"><a href="#beforeClass" class="headerlink" title="@beforeClass"></a>@beforeClass</h2><h3 id="테스트-실행전-공유-속성을-만들-때"><a href="#테스트-실행전-공유-속성을-만들-때" class="headerlink" title="테스트 실행전 공유 속성을 만들 때"></a>테스트 실행전 공유 속성을 만들 때</h3><hr><p>해당 클래스에서 테스트가 실행되기전 공유 하기 위한 정보를 설정하기 위해 호출 할 static 메소드에 지정하여 사용할 수 있습니다.</p><details>    <summary>예제 코드</summary>    <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">PHPUnit</span>\<span class="title">Framework</span>\<span class="title">TestCase</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$users</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@beforeClass</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">beforeClass</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Before Class Called&quot;</span> . PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@before</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">beforeMethod</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Before Method Called&quot;</span> . PHP_EOL;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;users[] = [</span><br><span class="line">            <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;홍길동&#x27;</span></span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;test1 Method Called&quot;</span> . PHP_EOL;</span><br><span class="line">        <span class="built_in">self</span>::<span class="title function_ invoke__">assertCount</span>(<span class="number">1</span>, <span class="variable">$this</span>-&gt;users);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test2</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;test2 Method Called&quot;</span> . PHP_EOL;</span><br><span class="line">        <span class="built_in">self</span>::<span class="title function_ invoke__">assertCount</span>(<span class="number">1</span>, <span class="variable">$this</span>-&gt;users);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 출력 결과</span></span><br><span class="line">Before Class Called</span><br><span class="line">Before Method Called</span><br><span class="line">test1 Method Called</span><br><span class="line">Before Method Called</span><br><span class="line">test2 Method Called</span><br></pre></td></tr></table></figure></details><h2 id="codeCoverageIgnore"><a href="#codeCoverageIgnore" class="headerlink" title="@codeCoverageIgnore*"></a>@codeCoverageIgnore*</h2><hr><p>코드 커버리지 분석시 제외할 라인에 사용할 수 있습니다.</p><details>    <summary>예제 코드</summary>    <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">PHPUnit</span>\<span class="title">Framework</span>\<span class="title">TestCase</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@codeCoverageIgnore</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@codeCoverageIgnore</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="comment">// @codeCoverageIgnoreStart</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">    <span class="comment">// @codeCoverageIgnoreEnd</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">exit</span>; <span class="comment">// @codeCoverageIgnore</span></span><br></pre></td></tr></table></figure></details><h2 id="covers"><a href="#covers" class="headerlink" title="@covers"></a>@covers</h2><h3 id="테스트-영역을-명시하려-할-때"><a href="#테스트-영역을-명시하려-할-때" class="headerlink" title="테스트 영역을 명시하려 할 때"></a>테스트 영역을 명시하려 할 때</h3><hr><p>어떤 영역을 테스트 하고자 하는지 명시하고자 할 때 사용합니다.</p><p>이와 같이 명시 하면 IDE(PHPStorm)에서 연결되어 있어 ctrl+shift+T 를 이용해 테스트로 바로 이동이 가능해지고, usage로 찾을 수 있어 메소드명 수정시 같이 반영됩니다.</p><details>    <summary>예제 코드</summary>    <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@covers</span> \App\Services\Member::getMember</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_</span>회원정보에<span class="title">_</span>나이<span class="title">_</span>정보가<span class="title">_</span>있는지<span class="title">_</span>체크(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertArrayHasKey</span>(<span class="string">&#x27;age&#x27;</span>, <span class="variable">$this</span>-&gt;member-&gt;<span class="title function_ invoke__">getMember</span>(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h2 id="coversDefaultClass"><a href="#coversDefaultClass" class="headerlink" title="@coversDefaultClass"></a>@coversDefaultClass</h2><h3 id="너무-긴-네임스페이스와-클래스명을-반복해서-쓰고-싶지-않을-때"><a href="#너무-긴-네임스페이스와-클래스명을-반복해서-쓰고-싶지-않을-때" class="headerlink" title="너무 긴 네임스페이스와 클래스명을 반복해서 쓰고 싶지 않을 때"></a>너무 긴 네임스페이스와 클래스명을 반복해서 쓰고 싶지 않을 때</h3><hr><p>기본 네임스페이스나 클래스명을 명시하는데 사용할 수 있어, <code>@covers</code> 어노테이션에 긴 네임스페이스나, 클래스명을 반복해서 사용할 필요가 없어집니다.</p><p>해당 어노테이션에는 정규화 된 클래스명을 사용해야하기때문에,<br>모호하지 않도록 클래스명 맨 앞에 <code>\</code> 로 시작하는것을 추천합니다.</p><p>아래 예제 코드와 같이 <code>@covers \Foo\CoveredClass::publicMethod</code> 를 <code>@covers ::publicMethod</code>로 줄여 쓸 수 있는 이점을 얻게 됩니다.</p><details>    <summary>예제 코드</summary>    <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">PHPUnit</span>\<span class="title">Framework</span>\<span class="title">TestCase</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@coversDefaultClass</span> \Foo\CoveredClass</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CoversDefaultClassTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@covers</span> ::publicMethod</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testSomething</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$o</span> = <span class="keyword">new</span> <span class="title class_">Foo\CoveredClass</span>;</span><br><span class="line">        <span class="variable">$o</span>-&gt;<span class="title function_ invoke__">publicMethod</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h2 id="coversNothing"><a href="#coversNothing" class="headerlink" title="@coversNothing"></a>@coversNothing</h2><h3 id="작성예정"><a href="#작성예정" class="headerlink" title="작성예정"></a>작성예정</h3><hr><p>클래스나 메소드레벨에서 사용할 수 있고 <code>@covers</code> 어노테이션을 덮어 씁니다.</p><h2 id="DataProvider"><a href="#DataProvider" class="headerlink" title="@DataProvider"></a>@DataProvider</h2><h3 id="메소드를-이용해-파라미터를-주입하고-싶을때"><a href="#메소드를-이용해-파라미터를-주입하고-싶을때" class="headerlink" title="메소드를 이용해 파라미터를 주입하고 싶을때"></a>메소드를 이용해 파라미터를 주입하고 싶을때</h3><hr><p><code>@dataProvider</code> 를 사용하면 메소드의 파라미터로 전달할 수 있습니다.<br>Java Junit 패키지에서 JunitParams를 이용하여 <code>@Parameters</code> 어노테이션을 사용하는것과 동일한 효과를 얻을 수 있습니다.</p><ul><li>예제 코드<ul><li>아래 예제 코드와 같은 테스트는 배열의 각 값 들이 <code>$a</code>, <code>$b</code>, <code>$expected</code> 로 바인딩 되며,<br>  총 4개의 배열이 자동 주입되어 테스트가 4회 수행됩니다.<ul><li>&#96;&#96;&#96;php  <?php  use PHPUnit\Framework\TestCase;    class DataTest extends TestCase  {      /**       * @dataProvider additionProvider       */      public function testAdd($a, $b, $expected)      {          $this->assertSame($expected, $a + $b);      }        public function additionProvider()      {          return [              [0, 0, 0],              [0, 1, 1],              [1, 0, 1],              [1, 1, 3]          ];      }  }  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 아래와 같이 이름이 정의된 dataset을 사용할 수도 있습니다.</span><br><span class="line">    - ```php</span><br><span class="line">        &lt;?php</span><br><span class="line">        use PHPUnit\Framework\TestCase;</span><br><span class="line">        </span><br><span class="line">        class DataTest extends TestCase</span><br><span class="line">        &#123;</span><br><span class="line">            /**</span><br><span class="line">             * @dataProvider additionProvider</span><br><span class="line">             */</span><br><span class="line">            public function testAdd($a, $b, $expected)</span><br><span class="line">            &#123;</span><br><span class="line">                $this-&gt;assertSame($expected, $a + $b);</span><br><span class="line">            &#125;</span><br><span class="line">        </span><br><span class="line">            public function additionProvider()</span><br><span class="line">            &#123;</span><br><span class="line">                return [</span><br><span class="line">                    &#x27;adding zeros&#x27;  =&gt; [0, 0, 0],</span><br><span class="line">                    &#x27;zero plus one&#x27; =&gt; [0, 1, 1],</span><br><span class="line">                    &#x27;one plus zero&#x27; =&gt; [1, 0, 1],</span><br><span class="line">                    &#x27;one plus one&#x27;  =&gt; [1, 1, 3]</span><br><span class="line">                ];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="depends"><a href="#depends" class="headerlink" title="@depends"></a>@depends</h2><h3 id="테스트-코드간의-종속성-정의"><a href="#테스트-코드간의-종속성-정의" class="headerlink" title="테스트 코드간의 종속성 정의"></a>테스트 코드간의 종속성 정의</h3><hr><p><code>@depends</code> 어노테이션 사용시 테스트 코드간의 종속성을 선언 할 수 있습니다.</p><p>실행순서를 정의하는것은 아니지만, <code>@depends</code>에 정의된 테스트의 리턴값의 레퍼런스를 전달합니다.</p><p>레퍼런스 전달이 아닌 값의 깊은 복사를 원할 경우  <code>@depends clone</code> 를 이용하고,<br>PHP에서 clone으로 불리는 얕은 복사를 원할 경우 <code>@depends shallowClone</code> 를 이용하면 됩니다.</p><h2 id="doesNotPerformAssertions"><a href="#doesNotPerformAssertions" class="headerlink" title="@doesNotPerformAssertions"></a>@doesNotPerformAssertions</h2><h3 id="값에-대한-assertion-없이-테스트-코드를-실행만-하고자-할때"><a href="#값에-대한-assertion-없이-테스트-코드를-실행만-하고자-할때" class="headerlink" title="값에 대한 assertion 없이 테스트 코드를 실행만 하고자 할때"></a>값에 대한 assertion 없이 테스트 코드를 실행만 하고자 할때</h3><hr><p>아래와 같이 테스트를 수행하지 않을 경우 <code>This test did not perform any assertions</code>와 같은 Warning이 발생됩니다.</p><p>해당 어노테이션을 사용하면 Risky 없이 <code>OK (1 test, 0 assertions)</code>로 성공 처리됩니다.</p><details>    <summary>예제 코드</summary>    <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Tests</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">PHPUnit</span>\<span class="title">Framework</span>\<span class="title">TestCase</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testAddSlashes</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">addslashes</span>(<span class="string">&quot;name=&#x27;1&#x27;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 출력 결과</span></span><br><span class="line"></span><br><span class="line">This test did not perform any assertions</span><br><span class="line"></span><br><span class="line">/opt/project/tests/MyTest.php:<span class="number">9</span></span><br><span class="line">name=\<span class="string">&#x27;1\&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">OK, but incomplete, skipped, or risky tests!</span></span><br><span class="line"><span class="string">Tests: 1, Assertions: 0, Risky: 1.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;?php</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">namespace Tests;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">use PHPUnit\Framework\TestCase;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">class MyTest extends TestCase</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    /**</span></span><br><span class="line"><span class="string">     * @doesNotPerformAssertions</span></span><br><span class="line"><span class="string">     */</span></span><br><span class="line"><span class="string">    public function testAddSlashes()</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        echo addslashes(&quot;name=&#x27;</span><span class="number">1</span><span class="string">&#x27;&quot;);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></details><h2 id="group"><a href="#group" class="headerlink" title="@group"></a>@group</h2><h3 id="테스트-코드에-태그를-달고-싶을때"><a href="#테스트-코드에-태그를-달고-싶을때" class="headerlink" title="테스트 코드에 태그를 달고 싶을때"></a>테스트 코드에 태그를 달고 싶을때</h3><hr><p><code>@group</code>어노테이션을 이용하여, 테스트 코드에 1개 이상의 태그와 같이 묶음 필터를 추가할 수 있습니다.</p><p>XML 설정 파일 주입을 이용 하거나 CLI에서 실행시 <code>--group</code> 과 <code>--exclude-group</code> 를 이용해서 테스트 실행 대상 또는 제외그룹을 설정할 수 있습니다.</p><h2 id="large"><a href="#large" class="headerlink" title="@large"></a>@large</h2><h3 id="60초-이상-실행-되면-실패-처리-하고자-할-때"><a href="#60초-이상-실행-되면-실패-처리-하고자-할-때" class="headerlink" title="60초 이상 실행 되면 실패 처리 하고자 할 때"></a>60초 이상 실행 되면 실패 처리 하고자 할 때</h3><hr><p><code>@group large</code>의 별칭으로,<code>PHP_Invoker</code> 패키지가 설치되어 있고, strict mode가 실행되어 있으면 <strong>60초</strong> 이상 실행 될 경우 실패 처리됩니다.<br>해당 타임아웃에 관한 정보는 설정 정보 XML의 <code>timeoutForLargeTests</code>속성을 통해 설정 할 수 있습니다.</p><h2 id="medium"><a href="#medium" class="headerlink" title="@medium"></a>@medium</h2><h3 id="10초-이상-실행-되면-실패-처리-하고자-할-때"><a href="#10초-이상-실행-되면-실패-처리-하고자-할-때" class="headerlink" title="10초 이상 실행 되면 실패 처리 하고자 할 때"></a>10초 이상 실행 되면 실패 처리 하고자 할 때</h3><hr><p><code>@group medium</code>의 별칭으로, <code>PHP_Invoker</code> 패키지가 설치되어 있고, strict mode가 실행되어 있으면 <strong>10초</strong> 이상 실행 될 경우 실패 처리됩니다.<br>해당 타임아웃에 관한 정보는 설정 정보 XML의 <code>timeoutForMediumTests</code>속성을 통해 설정 할 수 있습니다.</p><p>Medium 테스트는 <code>@large</code> 테스트에 의존적이여서는 안됩니다.</p><h2 id="preserveGlobalState"><a href="#preserveGlobalState" class="headerlink" title="@preserveGlobalState"></a>@preserveGlobalState</h2><h3 id="테스트가-별도의-프로세스에서-실행될때-직렬화-오류-방지"><a href="#테스트가-별도의-프로세스에서-실행될때-직렬화-오류-방지" class="headerlink" title="테스트가 별도의 프로세스에서 실행될때 직렬화 오류 방지"></a>테스트가 별도의 프로세스에서 실행될때 직렬화 오류 방지</h3><hr><p>테스트가 별도의 프로세스에서 실행될 때, PHPUnit은부모 프로세스에서 글로벌 state를 직렬화 한 값을 자식 프로세스에서 역직렬화하여 상태를 보존합니다.</p><p>부모 프로세스에서 직렬화 할 수 없는 글로벌 state가 있는 경우, 해당 옵션을 <code>disable</code> 처리하여 방지할 수 있습니다.</p><h2 id="requires"><a href="#requires" class="headerlink" title="@requires"></a>@requires</h2><h3 id="특정-조건일때만-테스트를-수행하고자-할-때"><a href="#특정-조건일때만-테스트를-수행하고자-할-때" class="headerlink" title="특정 조건일때만 테스트를 수행하고자 할 때"></a>특정 조건일때만 테스트를 수행하고자 할 때</h3><hr><p>PHP의 버전이나 extensions 설치여부 등 전제 조건을 체크하여 테스트를 건너뛸 수 있습니다.</p><p><code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code>, <code>=</code>, <code>==</code>, <code>!=</code>, <code>&lt;&gt;</code> 등의 비교 연산자를 사용하여 버전을 비교할 수 있습니다.</p><p>해당 어노테이션을 이용해 체크 가능한 항목은 아래와 같습니다.</p><ul><li>체크 가능한 조건<ul><li>PHP<ul><li>PHP 버전</li></ul></li><li>PHPUnit<ul><li>PHP Unit 버전</li></ul></li><li>OS<ul><li><code>PHP_OS</code> 상수와 정규식으로 매칭되는 값입니다.<br>  ex) WIN32|WINNT</li></ul></li><li>OSFAMILY<ul><li><code>PHP_OS_FAMILY</code> 상수와 매칭되는 값으로 PHP 7.2.0부터 사용가능합니다.<br>  ex) Windows</li></ul></li><li>function<ul><li>함수 존재 여부 → function_exists()</li></ul></li><li>extension<ul><li>extension 설치 여부 및 버전 체크</li></ul></li></ul></li></ul><details>    <summary>예제 코드</summary>    <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">PHPUnit</span>\<span class="title">Framework</span>\<span class="title">TestCase</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@requires</span> extension mysqli</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DatabaseTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@requires</span> PHP &gt;= 5.3</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testConnection</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">                <span class="comment">// 해당 테스트는 mysqli 확장프로그램이 설치되어 있고, PHP 버전이 5.3 이상일때 실행됩니다.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 추가적인 테스트를 작성하였을때에도 mysqli 확장프로그램이 필요합니다.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h2 id="runTestsInSeparateProcesses"><a href="#runTestsInSeparateProcesses" class="headerlink" title="@runTestsInSeparateProcesses"></a>@runTestsInSeparateProcesses</h2><h3 id="테스트-클래스-내의-모든-테스트-메소드가-별도-PHP프로세스에서-테스트코드를-실행-하는것을-명시할-때"><a href="#테스트-클래스-내의-모든-테스트-메소드가-별도-PHP프로세스에서-테스트코드를-실행-하는것을-명시할-때" class="headerlink" title="테스트 클래스 내의 모든 테스트 메소드가 별도 PHP프로세스에서 테스트코드를 실행 하는것을 명시할 때"></a>테스트 클래스 내의 모든 테스트 메소드가 별도 PHP프로세스에서 테스트코드를 실행 하는것을 명시할 때</h3><hr><p>해당 테스트 클래스 내의 모든 테스트 메소드들이 별도의 PHP 프로세스에서 실행되어야 함을 표시 할 때 사용합니다.</p><p>PHPUnit은 직렬화를 통해 Global state를 유지하려 하기 때문에, 직렬화가 불가능한 부분은 <code>@preserveGlobalState</code>를 참조하세요.</p><h2 id="runInSeparateProcess"><a href="#runInSeparateProcess" class="headerlink" title="@runInSeparateProcess"></a>@runInSeparateProcess</h2><hr><p>해당 테스트 메소드가 별도의 PHP 프로세스에서 실행되어야 함을 표시 할 때 사용합니다.</p><p>PHPUnit은 직렬화를 통해 Global state를 유지하려 하기 때문에, 직렬화가 불가능한 부분은 <code>@preserveGlobalState</code>를 참조하세요.</p><h2 id="small"><a href="#small" class="headerlink" title="@small"></a>@small</h2><hr><p><code>@group small</code>의 별칭으로, <code>PHP_Invoker</code> 패키지가 설치되어 있고, strict mode가 실행되어 있으면 <strong>1초</strong> 이상 실행 될 경우 실패 처리됩니다.<br>해당 타임아웃에 관한 정보는 설정 정보 XML의 <code>timeoutForSmallTests</code>속성을 통해 설정 할 수 있습니다.</p><p>Medium 테스트는 <code>@large</code> 와 <code>@medium</code>로 마킹된 테스트에 의존적이여서는 안됩니다.</p><p>※ <strong>테스트의 실행 시간 제어를 하고자 할 때, <code>@small</code>, <code>@medium</code>, <code>@large</code> 와 같은 어노테이션을 명시적으로 사용해야합니다.</strong></p><h2 id="test"><a href="#test" class="headerlink" title="@test"></a>@test</h2><h3 id="테스트-메소드명을-test로-시작하고싶지-않을-때"><a href="#테스트-메소드명을-test로-시작하고싶지-않을-때" class="headerlink" title="테스트 메소드명을 test로 시작하고싶지 않을 때"></a>테스트 메소드명을 test로 시작하고싶지 않을 때</h3><hr><p>테스트 메소드는 메소드명의 prefix로 test를 사용합니다.</p><p>테스트 메소드명의 prefix로 <code>test</code>를 사용하지 않는 대안으로, 주석에 <code>@test</code> 어노테이션을 사용하면 테스트 메소드라고 인식됩니다.</p><p><img src="/images/phpunit-annotations/eeb49a85-fdd7-40ee-99df-60579993b1a3.png"></p><p><img src="/images/phpunit-annotations/cbdae160-7e46-49e4-9d93-0a3584597625.png"></p><h2 id="testdox"><a href="#testdox" class="headerlink" title="@testdox"></a>@testdox</h2><h3 id="testdox-옵션으로-생성되는-문서의-설명을-대체하려-할-때"><a href="#testdox-옵션으로-생성되는-문서의-설명을-대체하려-할-때" class="headerlink" title="testdox 옵션으로 생성되는 문서의 설명을 대체하려 할 때"></a>testdox 옵션으로 생성되는 문서의 설명을 대체하려 할 때</h3><hr><p><code>--testdox</code>를 옵션으로 주었을때, 메소드의 이름으로부터 만들어진 설명을 오버라이딩 할 수 있습니다.</p><p>클래스 또는 메소드의 설명을 더 명확히 만들어 agile document를 만들 수 있습니다.</p><p><strong>주의할 점으로는 PHPUnit v7.0까지는 어노테이션 파싱 오류로, @test로 인식되어 동작합니다.</strong></p><h2 id="testWith"><a href="#testWith" class="headerlink" title="@testWith"></a>@testWith</h2><h3 id="주석을-이용해-파라미터를-주입하고-싶을때"><a href="#주석을-이용해-파라미터를-주입하고-싶을때" class="headerlink" title="주석을 이용해 파라미터를 주입하고 싶을때"></a>주석을 이용해 파라미터를 주입하고 싶을때</h3><hr><p><code>@dataProvider</code>는 호출될 메소드를 필요로 하지만, 주석만을 이용해 테스트하고자 할 때에는<br><code>@testWith</code>를 사용할 수 있습니다.</p><p>JSON 포맷은 연관배열로 주입됩니다.</p><p><strong>주의 할 점은 여러개의 dataset을 정의할 때에는 라인당 하나씩 지정해야합니다.</strong></p><p>아래의 두개의 코드는 동일하게 동작합니다.</p><details>    <summary>예제 코드</summary>    <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string    $input</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> int       $expectedLength</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@testWith</span>        [&quot;test&quot;, 4]</span></span><br><span class="line"><span class="comment"> *                  [&quot;longer-string&quot;, 13]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testStringLength</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$input</span>, <span class="keyword">int</span> <span class="variable">$expectedLength</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertSame</span>(<span class="variable">$expectedLength</span>, <span class="title function_ invoke__">strlen</span>(<span class="variable">$input</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string    $input</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> int       $expectedLength</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@dataProvider</span>    additionProvider</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testStringLengthWithDataProvider</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$input</span>, <span class="keyword">int</span> <span class="variable">$expectedLength</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertSame</span>(<span class="variable">$expectedLength</span>, <span class="title function_ invoke__">strlen</span>(<span class="variable">$input</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">additionProvider</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">                [<span class="string">&quot;test&quot;</span>, <span class="number">4</span>],</span><br><span class="line">                [<span class="string">&quot;longer-string&quot;</span>, <span class="number">13</span>]</span><br><span class="line">        ];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array     $array</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array     $keys</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@testWith</span>        [&#123;&quot;day&quot;: &quot;monday&quot;, &quot;conditions&quot;: &quot;sunny&quot;&#125;, [&quot;day&quot;, &quot;conditions&quot;]]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testArrayKeys</span>(<span class="params"><span class="variable">$array</span>, <span class="variable">$keys</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertSame</span>(<span class="variable">$keys</span>, <span class="title function_ invoke__">array_keys</span>(<span class="variable">$array</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array     $array</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array     $keys</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@dataProvider</span>    additionProvider</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testArrayKeysWithDataProvider</span>(<span class="params"><span class="variable">$array</span>, <span class="variable">$keys</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertSame</span>(<span class="variable">$keys</span>, <span class="title function_ invoke__">array_keys</span>(<span class="variable">$array</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">additionProvider</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">                [[<span class="string">&quot;day&quot;</span> =&gt; <span class="string">&quot;monday&quot;</span>, <span class="string">&quot;conditions&quot;</span> =&gt; <span class="string">&quot;sunny&quot;</span>], [<span class="string">&quot;day&quot;</span>, <span class="string">&quot;conditions&quot;</span>]]</span><br><span class="line">        ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h2 id="ticket"><a href="#ticket" class="headerlink" title="@ticket"></a>@ticket</h2><h3 id="Ticket-ID-JIRA-이슈-코드와-같은-로-테스트를-필터링-할-때"><a href="#Ticket-ID-JIRA-이슈-코드와-같은-로-테스트를-필터링-할-때" class="headerlink" title="Ticket ID(JIRA 이슈 코드와 같은)로 테스트를 필터링 할 때"></a>Ticket ID(JIRA 이슈 코드와 같은)로 테스트를 필터링 할 때</h3><hr><p><code>@group</code> 어노테이션의 별칭. ticket ID를 이용하여 테스트를 필터링 할 수 있도록 하여줍니다.</p><h2 id="uses"><a href="#uses" class="headerlink" title="@uses"></a>@uses</h2><hr><p>테스트에 의해 실행될 코드를 지정합니다.</p><p>좋은 예제는 아래와 같이 유닛 테스트 코드에 필요한 Object 값 입니다.</p><details>    <summary>예제 코드</summary>    <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@covers</span> \BankAccount</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@uses</span>   \Money</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testMoneyCanBeDepositedInAccount</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p>해당 어노테이션에는 정규화 된 클래스명을 사용해야하기때문에,<br>모호하지 않도록 클래스명 맨 앞에 <code>\</code> 로 시작하는것을 추천합니다.</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;서론&quot;&gt;&lt;a href=&quot;#서론&quot; class=&quot;headerlink&quot; title=&quot;서론&quot;&gt;&lt;/a&gt;서론&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;PHP Unit을 사용하면서도 잘 모르는 어노테이션을 PHPUnit v8.4 기준(2019-11-19 최신버전)으로 정리하였습니다.&lt;/p&gt;
&lt;h2 id=&quot;author&quot;&gt;&lt;a href=&quot;#author&quot; class=&quot;headerlink&quot; title=&quot;@author&quot;&gt;&lt;/a&gt;@author&lt;/h2&gt;&lt;h3 id=&quot;테스트를-작성자별-그룹화-필터링-할-때&quot;&gt;&lt;a href=&quot;#테스트를-작성자별-그룹화-필터링-할-때&quot; class=&quot;headerlink&quot; title=&quot;테스트를 작성자별 그룹화 필터링 할 때&quot;&gt;&lt;/a&gt;테스트를 작성자별 그룹화 필터링 할 때&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;&lt;code&gt;@group&lt;/code&gt; 어노테이션의 별칭으로, 테스트를 작성자별로 그룹화하여 필터링 하는데 사용할 수 있습니다.&lt;/p&gt;
&lt;h2 id=&quot;after&quot;&gt;&lt;a href=&quot;#after&quot; class=&quot;headerlink&quot; title=&quot;@after&quot;&gt;&lt;/a&gt;@after&lt;/h2&gt;&lt;h3 id=&quot;각-테스트가-끝난-뒤-실행-하려-할-때&quot;&gt;&lt;a href=&quot;#각-테스트가-끝난-뒤-실행-하려-할-때&quot; class=&quot;headerlink&quot; title=&quot;각 테스트가 끝난 뒤 실행 하려 할 때&quot;&gt;&lt;/a&gt;각 테스트가 끝난 뒤 실행 하려 할 때&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;각 테스트 메소드들이 실행 된 후, 특정 메소드를 실행하고자 할때 사용할 수 있습니다.&lt;/p&gt;
&lt;p&gt;각 테스트가 끝난 뒤 트랜잭션 커밋or롤백을 한다거나, 생성된 파일을 삭제하는 등의 처리를 하는데 사용하면 좋을 것 같습니다.&lt;/p&gt;
&lt;details&gt;
    &lt;summary&gt;예제 코드&lt;/summary&gt;
    &lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Tests&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PHPUnit&lt;/span&gt;\&lt;span class=&quot;title&quot;&gt;Framework&lt;/span&gt;\&lt;span class=&quot;title&quot;&gt;TestCase&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyTest&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TestCase&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@after&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;afterDo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;After Method Called&amp;quot;&lt;/span&gt; . PHP_EOL;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test1&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;test1 Method Called&amp;quot;&lt;/span&gt; . PHP_EOL;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;self&lt;/span&gt;::&lt;span class=&quot;title function_ invoke__&quot;&gt;assertTrue&lt;/span&gt;(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test2&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;test2 Method Called&amp;quot;&lt;/span&gt; . PHP_EOL;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;self&lt;/span&gt;::&lt;span class=&quot;title function_ invoke__&quot;&gt;assertTrue&lt;/span&gt;(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 출력 결과&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;test1 Method Called&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;After Method Called&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;test2 Method Called&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;After Method Called&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/details&gt;</summary>
    
    
    
    <category term="PHP" scheme="https://blog.hodory.dev/categories/PHP/"/>
    
    <category term="PHPUnit" scheme="https://blog.hodory.dev/categories/PHP/PHPUnit/"/>
    
    
    <category term="PHP" scheme="https://blog.hodory.dev/tags/PHP/"/>
    
    <category term="PHPUnit" scheme="https://blog.hodory.dev/tags/PHPUnit/"/>
    
    <category term="annotation" scheme="https://blog.hodory.dev/tags/annotation/"/>
    
  </entry>
  
  <entry>
    <title>AWS Dev Day Seoul, 2019 메모</title>
    <link href="https://blog.hodory.dev/2019/09/26/AWS-DEVDAY-2019-%EB%A9%94%EB%AA%A8/"/>
    <id>https://blog.hodory.dev/2019/09/26/AWS-DEVDAY-2019-%EB%A9%94%EB%AA%A8/</id>
    <published>2019-09-26T12:05:51.000Z</published>
    <updated>2022-08-10T16:39:59.885Z</updated>
    
    <content type="html"><![CDATA[<p>틀린 내용이 있다면 제가 졸아서 잘못 메모했을 수 있습니다…..</p><h2 id="AWS-Fargate를-사용한-서버리스-컨테이너-활용-하기-삼성전자-개발자-포털-사례"><a href="#AWS-Fargate를-사용한-서버리스-컨테이너-활용-하기-삼성전자-개발자-포털-사례" class="headerlink" title="AWS Fargate를 사용한 서버리스 컨테이너 활용 하기 - 삼성전자 개발자 포털 사례"></a>AWS Fargate를 사용한 서버리스 컨테이너 활용 하기 - 삼성전자 개발자 포털 사례</h2><ul><li>ECS</li><li>EKS</li><li>Fargate for ECS</li><li>Fargate for EKS (on the roadmap)</li></ul><h3 id="ECS"><a href="#ECS" class="headerlink" title="ECS"></a>ECS</h3><p>쿠베 없이 간단하게 사용가능</p><p>EC2 인스턴스를 직접관리해야하는 단점</p><p><strong>Fargate</strong>를 활용해 해결 가능</p><ul><li>서버가 없는 컨테이너 환경</li><li>서비스와 컨테이너에대한설정만 관리</li><li>ECS 대비 EC2 관리에대한 부담만 덜어짐</li><li>ECR을 이용해 이미지를 배포할 수 있음</li><li>Networking - aws</li><li>LayerStorage - task당 10GB</li><li>VolumeStorage - 공용 볼륨</li></ul><p>QA Automation을 중점적으로 CI&#x2F;CD를 구축함</p><p><strong>SRE</strong></p><p>아키텍쳐 ECS 클러스터를 이용함.</p><p>Fargate 활용시 → 무중단배포전략 기본 탑재, 빠르게 deploy 가능, 비용 절감</p><p>ECS의 EC2옵션에 비해 45%절감(compute 비용만)</p><p>task 별로 관리가 가능하기때문</p><p>워크스페이스를 CloudFoundry playform 오픈 소스를 사용하여 구현<br>프로메테우스기반으로 VALET 대시보드 구현</p><p>task가 runtime으로 넘어갔을때만 과금이 됨.</p><p>클러스터안에 서비스가 매핑</p><h3 id="활용-사례"><a href="#활용-사례" class="headerlink" title="활용 사례"></a>활용 사례</h3><p>백엔드기준</p><ul><li>서치, k-v DB, API</li></ul><p>클러스터세팅</p><ul><li>TG,vpc,subnet,SG</li></ul><p>task cpu : 1024 MB , 512 task CPU</p><p>Events 탭을 이용하여, 이벤트 발생 확인 가능</p><p>build.sh → upload.sh (ECR에 업로드)</p><p>ECS workshop - <a href="https://ecsworkshop.com/">https://ecsworkshop.com/</a></p><h2 id="실시간-데이터-처리를-위한-현대적-애플리케이션-개발-방법"><a href="#실시간-데이터-처리를-위한-현대적-애플리케이션-개발-방법" class="headerlink" title="실시간 데이터 처리를 위한 현대적 애플리케이션 개발 방법"></a>실시간 데이터 처리를 위한 현대적 애플리케이션 개발 방법</h2><h3 id="Amplify"><a href="#Amplify" class="headerlink" title="Amplify"></a>Amplify</h3><p>CLI 툴체인 및 UI 구성요소 포함하는 클라이언트 프레임워크<br/><br>전체 앱 구축 테스트 배포 및 호스팅을 위한 dev tool 제공</p><h3 id="AppSync"><a href="#AppSync" class="headerlink" title="AppSync"></a>AppSync</h3><p>관리형 서버리스 gQL 서비스<br/><br>다양한 데이터 소스 활용 가능<br/><br>디바이스가 오프라인일 경우에도 가능<br/><br>오프라인시 변경된 데이터만 동기화처리</p><p>queries → get<br/><br>mutation → create | update<br/><br>subscriptions → pub | sub</p><h3 id="Cognito"><a href="#Cognito" class="headerlink" title="Cognito"></a>Cognito</h3><p>IAM을 모두 제공할 수 없음</p><h3 id="Kinesis"><a href="#Kinesis" class="headerlink" title="Kinesis"></a>Kinesis</h3><h3 id="DocumentDB"><a href="#DocumentDB" class="headerlink" title="DocumentDB"></a>DocumentDB</h3><p>엘라스틱서치 DB 랑 유사하게보임<br/><br>몽고 DB와 호환됨<br/><br>초당 수백만건 요청 처리 가능<br/><br>컴퓨팅과 스토리지 레이어를 분리하여 컴퓨팅 리소스만 확장 가능, 스토리지는 오토스케일됨<br/><br>데이터를 파티션으로 분산저장(3개의 AZ에 복제)</p><p>AppSync를 활용하여 query와 mutation 분리</p><h2 id="DevOps-개발자가-되기-위한-쿠버네티스-핵심-활용-예제-알아보기"><a href="#DevOps-개발자가-되기-위한-쿠버네티스-핵심-활용-예제-알아보기" class="headerlink" title="DevOps 개발자가 되기 위한 쿠버네티스 핵심 활용 예제 알아보기"></a>DevOps 개발자가 되기 위한 쿠버네티스 핵심 활용 예제 알아보기</h2><p>3개의 az에 마스터 노드 배포<br/><br>az당 두개의 인스턴스 배포<br/><br>c타입 인스턴스로 배포됨</p><p>deprecated 되는 시점에 마스터노드를 강제 업데이트함.<br/><br>Latest 버전부터 3개 이내의 버전으로 관리되도록 aws에서 관리해줌</p><p>EKS는 명령형 인프라가 아닌 선언형 인프라</p><p>VPC ink → Network load Balancer</p><p>How To Connect with Kubernetes</p><ul><li>쿠버네티스에서 제공하는 로드밸런서</li><li>ALB ingress → IP가 유동적이라 Lambda에서 처리할 수 있으나 번거로움</li><li><strong>쿠버네티스의 Node Port 이용</strong></li></ul><p>kube2Iam을 이용해 IAM을 관리</p><p>HPA → pod 오토스케일링</p><p>Cluster autoscaler → 노드 오토스케일링(pod를 더 이상 배치할 공간이 없을때)</p><p>Monitoring</p><p>프로메테우스를 통해 수집 → 그라파나를 통해 → cloudwatch 메트릭을 사용해 대시보드 제공</p><p>로그 : 엘라스틱서치와 클라우드워치 fluentD</p><p>클라우드워치를 두고 로그패턴을 이용해 노티 가능 → 엘라스틱서치로 전송</p><p>엘라스틱 서치 Authentication은 cognito</p><p>nginx 리버스프록시로 사용해 키바나접근</p><p>AWS Xray를 이용해 APM 체크</p><p>배포는 Spinnaker를 이용해서 쿠버네티스 배포할때 용이</p><p>pod는 엔드포인트도 계속 변경됨<br>eks 자체 기능으로 IAM과 쿠버네티스의 IAM을 연결하는 기능 제공예정</p><h3 id="Monitor"><a href="#Monitor" class="headerlink" title="Monitor"></a>Monitor</h3><p>기존에는 가장 성능 좋은 쿠버네티스 로깅 플랫폼 fluentd(루비로 작성됨)<br>→ fluent Bit이 C로 만들어진 더 고성능을 요구할때 사용할 수 있는 플랫폼</p><h3 id="Networking"><a href="#Networking" class="headerlink" title="Networking"></a>Networking</h3><p>어노테이션만으로 nlb alb 등 선택 가능<br>ALB는 L7형태로 ingress controller에서 해석해서 처리</p><h3 id="Logging"><a href="#Logging" class="headerlink" title="Logging"></a>Logging</h3><p>EFK<br>pod → fluentd → cloudwatch→ kibana<br>FluentBit을 사용하면 더 Optimized 할 수 있다.</p><h3 id="Application-Mesh"><a href="#Application-Mesh" class="headerlink" title="Application Mesh"></a>Application Mesh</h3><p>기존 서비스 Mesh는 envoy proxy를 사용<br>AppMesh는 EKS만 쓸 수 있는게 아닌 Fargate ECS EC2 EKS Kube on EC2등에서도 사용가능</p><h3 id="Distribute-Logging"><a href="#Distribute-Logging" class="headerlink" title="Distribute Logging"></a>Distribute Logging</h3><p>전체 콜스택 모니터링하기 어려움<br>X-Ray를 활용<br>모든 쿼리스트링 모니터링 가능</p><h2 id="코드-기반-인프라-IaC-를-활용한-현대-애플리케이션-개발-가속화-우리도-할-수-있어요"><a href="#코드-기반-인프라-IaC-를-활용한-현대-애플리케이션-개발-가속화-우리도-할-수-있어요" class="headerlink" title="코드 기반 인프라(IaC)를 활용한 현대 애플리케이션 개발 가속화, 우리도 할 수 있어요"></a>코드 기반 인프라(IaC)를 활용한 현대 애플리케이션 개발 가속화, 우리도 할 수 있어요</h2><p><strong>Re-host</strong><br>데이터센터 → EC2</p><p><strong>Re-platform</strong><br>가상머신 → 컨테이너</p><p><strong>Re-factor</strong><br>모놀리스 → 마이크로 서비스</p><p><strong>Re-invent</strong><br>호스트플릿 → 서버리스</p><p>자동화</p><ul><li>인프라 구성 자동화<ul><li>서비스에 필요한 리소스 프로비저닝</li></ul></li><li>애플리케이션 배포 자동화<ul><li>애플리케이션을 더 효율적, 안전하며, 빠르게 배포</li><li>애플리케이션을 빌드, 테스트, 배포</li></ul></li></ul><h2 id="코드기반-인프라의-목적"><a href="#코드기반-인프라의-목적" class="headerlink" title="코드기반 인프라의 목적"></a>코드기반 인프라의 목적</h2><p>인프라 변경 사항을 반복적이고 예측 가능하게 함.</p><h2 id="CloudFormation"><a href="#CloudFormation" class="headerlink" title="CloudFormation"></a>CloudFormation</h2><p>클라우드 인프라 템플릿을 정의하기 위한 언어 - JSON | YAML</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cdk init</span><br><span class="line">$ cdk diff</span><br><span class="line">$ cdk deploy [paramter]</span><br><span class="line"><span class="comment"># if you type &quot;y&quot;, deploy the app</span></span><br></pre></td></tr></table></figure><p>CDK Deploy 를 활용하면 Cloudformation을 활용해 배포하게됨</p><p>cdk를 사용하면 <code>table.grantReadWriteData(fn);</code> 과 같은 함수를 통해 권한을 얻을 수 있음<br/><br><code>APIGateway.LambdaRestApi()</code>를 사용하면 API Gateway에 대한 IAM 권한을 가질 수 있음.<br/><br>→ serverless framework 사용시 serverless.yml 파일에 iam을 설정하던 부분을 함수로 명시 하는거였음.</p><h2 id="Loader"><a href="#Loader" class="headerlink" title="Loader"></a>Loader</h2><p>ECS Clustuer, ECS Fargate를 이용해 클러스터 생성(규모에 상관없이 재사용가능하도록함)</p><h2 id="Monitor-1"><a href="#Monitor-1" class="headerlink" title="Monitor"></a>Monitor</h2><p>cdk-watchful를 활용하여 cloud watch와 연결 가능</p><p>jsii →js로 만든것을 다른언어에서 사용가능하도록 해줌 cdk에서 활용됨</p><h3 id="프로세스"><a href="#프로세스" class="headerlink" title="프로세스"></a>프로세스</h3><p>Code Commit → CDK 앱과 Lambda 함수 코드는 동일한 리포지토리에 저장됨</p><p>Code Build → CdkCodeBuild 프로젝트는 CDK 앱을 synthesize하여 CloudFormation 템플릿을 생성</p><p>배포환경은 동일하게 로컬환경은 개발자 본인만을 위한것이다.<br/><br>클라우드9이나 CloudFormation, 도커등 동일한 환경을 제공할 수 있어야함.</p><h2 id="점심-도시락"><a href="#점심-도시락" class="headerlink" title="점심 도시락"></a>점심 도시락</h2><p><img src="/images/ae7fa212-27d7-4005-aeb3-45f11e4dfc1d.jpg"><br>닭강정, 새우튀김, 갈비찜?돼지고기찜? + 된장국 (나머진 안 먹어봐서 모르겠습니다)</p><h2 id="굿즈-SWAGS"><a href="#굿즈-SWAGS" class="headerlink" title="굿즈(SWAGS)"></a>굿즈(SWAGS)</h2><p><img src="/images/7668d682-dc06-4683-ab15-c6c51e81a1e6.jpg"></p><ul><li>티셔츠</li><li>머그컵</li><li>방향제</li><li>담요</li><li>보틀</li><li>디퓨저</li><li>다이어리</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;틀린 내용이 있다면 제가 졸아서 잘못 메모했을 수 있습니다…..&lt;/p&gt;
&lt;h2 id=&quot;AWS-Fargate를-사용한-서버리스-컨테이너-활용-하기-삼성전자-개발자-포털-사례&quot;&gt;&lt;a href=&quot;#AWS-Fargate를-사용한-서버리스-컨테이너-활용-</summary>
      
    
    
    
    <category term="ETC" scheme="https://blog.hodory.dev/categories/ETC/"/>
    
    <category term="AWS" scheme="https://blog.hodory.dev/categories/ETC/AWS/"/>
    
    <category term="Conference" scheme="https://blog.hodory.dev/categories/ETC/AWS/Conference/"/>
    
    <category term="Retrospection" scheme="https://blog.hodory.dev/categories/ETC/AWS/Conference/Retrospection/"/>
    
    
    <category term="Retrospection" scheme="https://blog.hodory.dev/tags/Retrospection/"/>
    
    <category term="AWS" scheme="https://blog.hodory.dev/tags/AWS/"/>
    
    <category term="Conference" scheme="https://blog.hodory.dev/tags/Conference/"/>
    
  </entry>
  
  <entry>
    <title>Github Actions를 이용하여 Hexo 블로그 배포하기</title>
    <link href="https://blog.hodory.dev/2019/08/23/deploy-hexo-blog-with-github-actions/"/>
    <id>https://blog.hodory.dev/2019/08/23/deploy-hexo-blog-with-github-actions/</id>
    <published>2019-08-23T04:37:07.000Z</published>
    <updated>2022-08-10T16:39:59.885Z</updated>
    
    <content type="html"><![CDATA[<p>기존의 Travis-CI를 이용하여 Hexo 블로그를 배포하기 위해,</p><p>ChangJoo Park님의 포스팅인 <a href="https://medium.com/@changjoopark/travis-ci%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-github-pages-hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%9E%90%EB%8F%99-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0-6a222a2013e6">Travis CI를 이용한 Github Pages + Hexo 블로그 자동 배포하기</a>를 참고하여 아래와 같은 YAML 파일을 작성하여 Travis CI 서비스를 이용해서 배포하였습니다.</p><h2 id="기존의-코드"><a href="#기존의-코드" class="headerlink" title="기존의 코드"></a>기존의 코드</h2><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .travis.yml</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;10&quot;</span></span><br><span class="line"><span class="comment"># Hexo source 코드는 master branch에서 작업되고 있어야합니다.</span></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">hexo</span></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"><span class="attr">before_script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">&quot;INPUT_YOUR_USER_NAME&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">&quot;INPUT_YOUR_EMAIL&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">sed</span> <span class="string">-i</span> <span class="string">&quot;s/__GITHUB_TOKEN__/$&#123;__GITHUB_TOKEN__&#125;/&quot;</span> <span class="string">_config.yml</span></span><br><span class="line"><span class="comment"># 블로그를 빌드 후 배포합니다.</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">deploy</span></span><br></pre></td></tr></table></figure><p>Github에서 자체적으로 <code>Github Actions</code>라는 기능을 베타로 제공중이여서 신청을 해두었고,</p><p>어제 승인되어 repo에 아래 이미지와 같은 탭이 생겼습니다.🎉</p><p><img src="/images/hexo-blog-with-github-actions/6af9526c-ff84-465b-b93d-1aee56b21d50.png"></p><p>해당 기능을 이용해 보기 위해 travis.yml 파일을 Github Actions에 맞게 아래와 같이 바꾸어보았습니다.</p><h2 id="변경사항"><a href="#변경사항" class="headerlink" title="변경사항"></a>변경사항</h2><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .github/workflows/hexo-deploy.yml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">name:</span> <span class="string">Node</span> <span class="string">CI</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span> </span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">strategy:</span></span><br><span class="line">      <span class="attr">matrix:</span></span><br><span class="line">        <span class="attr">node-version:</span> [<span class="number">12.</span><span class="string">x</span>]</span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node-version</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node-version</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hexo-Cli</span> <span class="string">Install</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">npm</span> <span class="string">i</span> <span class="string">-g</span> <span class="string">hexo</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name :</span> <span class="string">Change</span> <span class="string">Environment</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="attr">GITHUB_TOKEN:</span> <span class="string">&quot;INPUT_YOUR_GITHUB_ACCECSS_TOKEN&quot;</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        git config --global user.name &quot;INPUT_YOUR_USER_NAME&quot;</span></span><br><span class="line"><span class="string">        git config --global user.email &quot;INPUT_YOUR_EMAIL&quot;</span></span><br><span class="line"><span class="string">        sed -i &quot;s/__GITHUB_TOKEN__/$&#123;GITHUB_TOKEN&#125;/&quot; _config.yml</span></span><br><span class="line"><span class="string"></span>    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NPM</span> <span class="string">Install</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hexo</span> <span class="string">Clean</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hexo</span> <span class="string">Generate</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">hexo</span> <span class="string">g</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hexo</span> <span class="string">Deploy</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">hexo</span> <span class="string">d</span></span><br></pre></td></tr></table></figure><p><code>Github Actions</code>문서에 따르면 기존의 Secret Config 부분은 repo의 아래의 탭에서 지정이 가능합니다.</p><p><img src="/images/hexo-blog-with-github-actions/3113467d-cbdb-408e-aec1-4b0202dc84e6.png"></p><p>해당 Secrets를 사용시에는 사용하려는 step에서 with 키워드를 이용해 설정하거나, env 를 이용해서 아래와 같이 설정 할 수 있습니다.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">steps:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Test</span> <span class="string">Set</span> <span class="string">Secret</span> <span class="string">With</span></span><br><span class="line"><span class="attr">with:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.YOUR_SECRET</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Test</span> <span class="string">Set</span> <span class="string">Secret</span> <span class="string">Env</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line"><span class="attr">my_secret :</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.YOUR_SECRET</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="사담"><a href="#사담" class="headerlink" title="사담"></a>사담</h2><hr><p>Github Actions는 이미 만들어진 환경을 사용 할 수도 있고, Github Repo에 있는 도커 스크립트를 이용할 수도 있는것으로 보입니다.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">steps:</span>    </span><br><span class="line">  <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@74bc508</span>  <span class="comment"># 특정 커밋을 지정</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@v1.0</span>     <span class="comment"># 특정 릴리즈 버전 지정</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@master</span>   <span class="comment"># 브랜치 지정</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">docker://alpine:3.8</span>         <span class="comment"># Docker Hub에서 제공하는 이미지와 태그 지정</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">./.github/actions/my-action</span> <span class="comment"># 해당 repo 안에 정의된 파일 지정</span></span><br></pre></td></tr></table></figure><p>또한, <code>if</code> 제어문도 사용이 가능하고, 쉘을 선택하여 처리한다거나 Cron-Job등이 사용가능하고</p><p><code>jobs.&lt;job_id&gt;.strategy.matrix</code>를 활용하여 os와 실행환경(ex. node | php) 버전을 조합하여 빌드 테스트가 가능하다고 합니다.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">runs-on:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.os</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">strategy:</span></span><br><span class="line">  <span class="attr">matrix:</span></span><br><span class="line">    <span class="attr">node:</span> [<span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>]</span><br><span class="line">    <span class="attr">os:</span> [<span class="string">ubuntu-16.04</span>, <span class="string">ubuntu-18.04</span>]</span><br><span class="line"><span class="attr">steps:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">  <span class="attr">with:</span></span><br><span class="line">    <span class="attr">node-version:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>이와 같이 정의할 경우에는 3개의 노드버전과 2개의 os 버전을 조합하여 6가지의 job이 실행됩니다.</p><p>이외에도 다양한 기능을 제공하여 깃허브를 이용하고 있다면 한번쯤은 이용해봐도 좋을 서비스라고 생각합니다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;기존의 Travis-CI를 이용하여 Hexo 블로그를 배포하기 위해,&lt;/p&gt;
&lt;p&gt;ChangJoo Park님의 포스팅인 &lt;a href=&quot;https://medium.com/@changjoopark/travis-ci%EB%A5%BC-%EC%9D%B4</summary>
      
    
    
    
    <category term="Hexo" scheme="https://blog.hodory.dev/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="https://blog.hodory.dev/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>애드센스-테러를-당하다</title>
    <link href="https://blog.hodory.dev/2019/07/30/%EC%95%A0%EB%93%9C%EC%84%BC%EC%8A%A4-%ED%85%8C%EB%9F%AC%EB%A5%BC-%EB%8B%B9%ED%95%98%EB%8B%A4/"/>
    <id>https://blog.hodory.dev/2019/07/30/%EC%95%A0%EB%93%9C%EC%84%BC%EC%8A%A4-%ED%85%8C%EB%9F%AC%EB%A5%BC-%EB%8B%B9%ED%95%98%EB%8B%A4/</id>
    <published>2019-07-30T09:50:11.000Z</published>
    <updated>2022-08-10T16:39:59.885Z</updated>
    
    <content type="html"><![CDATA[<p>아침에 눈을 떠서 메일을 확인 하는데,<br>구글 애드센스팀으로부터 아래와 같은 메일이 도착하였습니다.</p><p><img src="/images/adsense/1-0e957f3c-84f9-419b-904a-a4029dae2826.jpg"></p><p>애드센스 계정이 30일동안 정지 되었다는 메일이였는데,<br>하루 수입이 $0.01도 안 됐기 때문에 그냥 그런가보다 했습니다.</p><p>그래도 왜 그럴까 싶어 알아보다가 GA를 확인해보니 해당 시간대에 155 세션이 잡혔고,<br>모두 디바이스가 데스크탑인 국가 정보가 없는 경우 였습니다.</p><p><img src="/images/adsense/2-3b20d3d3-f9c5-413f-986e-6c2c71a8a677.jpg"></p><p><img src="/images/adsense/3-5795a69b-9d9b-4ad1-ada0-31a0a45cff3f.jpg"></p><p>슬프게도 제 블로그는 일 조회수가 155가 안되기 때문에 이럴일이 없었죠….😂</p><p>애드센스 관리 페이지를 확인 하였을때도 이와 같이 <code>무효 클릭: 직접 클릭</code> 으로 정지를 당했습니다.</p><p><img src="/images/adsense/4-3e56548b-9cf1-4bf0-8a04-65b3d4f1644b.jpg"></p><p>혹시나 <code>애드센스 테러</code> 라는 키워드로 구글에 검색을 해보았더니 유사 사례가 꽤나 있었습니다.</p><p>다른분들의 코멘트를 참조하여 이의제기는 신청 했지만, 메일에 기재되어 있듯이 이의제기가 받아 들여질거 같진 않습니다… </p><p>그래도 가끔 애드센스 눌리는 재미도 쏠쏠 했는데 아쉽습니다…</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;아침에 눈을 떠서 메일을 확인 하는데,&lt;br&gt;구글 애드센스팀으로부터 아래와 같은 메일이 도착하였습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/adsense/1-0e957f3c-84f9-419b-904a-a4029dae2826.jpg&quot;&gt;&lt;/</summary>
      
    
    
    
    <category term="ETC" scheme="https://blog.hodory.dev/categories/ETC/"/>
    
    
    <category term="Etc." scheme="https://blog.hodory.dev/tags/Etc/"/>
    
    <category term="Security" scheme="https://blog.hodory.dev/tags/Security/"/>
    
  </entry>
  
  <entry>
    <title>2019년 상반기 회고</title>
    <link href="https://blog.hodory.dev/2019/07/10/2019%EB%85%84-%EC%83%81%EB%B0%98%EA%B8%B0-%ED%9A%8C%EA%B3%A0/"/>
    <id>https://blog.hodory.dev/2019/07/10/2019%EB%85%84-%EC%83%81%EB%B0%98%EA%B8%B0-%ED%9A%8C%EA%B3%A0/</id>
    <published>2019-07-10T16:20:50.000Z</published>
    <updated>2019-07-11T03:16:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>일년이 어떻게 흘러간지 한해가 지날수록 더 기억이 안 나서<br>정리의 필요성을 느껴, 올해부터는 회고를 진행해볼까 합니다.</p><h1 id="💼-회사"><a href="#💼-회사" class="headerlink" title="💼 회사"></a>💼 회사</h1><hr><h2 id="01월-02월"><a href="#01월-02월" class="headerlink" title="01월~02월"></a>01월~02월</h2><h3 id="서버리스-아키텍쳐-구현-마무리"><a href="#서버리스-아키텍쳐-구현-마무리" class="headerlink" title="서버리스 아키텍쳐 구현 마무리"></a>서버리스 아키텍쳐 구현 마무리</h3><hr><p>  12월부터 설계 및 개발을 진행하였던 서버리스 아키텍처를 12월 중순쯤 배포하였으나,<br>이슈 사항들이 많아 마무리 짓는데 생각보다 오래 걸렸습니다.</p><p>  외부 싱크 여부를 판단하기 위한 데이터들을 Insert 또는 Update 하다 보니,<br>RDS 콘솔 상에서 IOPS 쓰기가 1000 이상이 되는 경우가 발생했습니다.</p><p>  해당 데이터를 레디스(Elastic Cache)나 noSQL(DynamoDB)에 쌓은 후, 다시 RDS로 옮기는 것도 검토해보았지만, 실제 구현할 경우 관리 포인트가 너무 많이 발생하게 되어 연동 속도를 줄이더라도 Lambda의 동시성을 조절하는 것으로 처리하였습니다.</p><h2 id="02월-03월"><a href="#02월-03월" class="headerlink" title="02월~03월"></a>02월~03월</h2><span id="more"></span><h3 id="On-The-Fly-동적-이미지-리사이징-구현"><a href="#On-The-Fly-동적-이미지-리사이징-구현" class="headerlink" title="On-The-Fly 동적 이미지 리사이징 구현"></a>On-The-Fly 동적 이미지 리사이징 구현</h3><hr><p>  기존 서비스에서는 이미지 파일을 올릴 때 도메인별로 고정된 크기로 이미지를 리사이징하고 있었습니다.</p><p>  다양한 해상도에 대한 대응이 어려웠고, 서버에서 동기식으로 이미지를 리사이징 하다 보니 파일 업로드의 응답 시간이 느려지는 문제가 있었습니다.</p><p>  위 문제의 해결책으로 AWS Lambda를 이용한 이미지 리사이징을 검토하게 되었고,<br><a href="https://www.slideshare.net/awskorea/ondemand-image-resizing">[VCNC] 온디맨드 이미지 리사이징 발표 자료</a>와 <a href="https://medium.com/daangn/aws-lambda%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%8D%B8%EB%84%A4%EC%9D%BC-%EC%83%9D%EC%84%B1-%EA%B0%9C%EB%B0%9C-%ED%9B%84%EA%B8%B0-acc278d49980">[당근마켓] 온디맨드 이미지 리사이징 포스팅</a>을 보았습니다. 해당 방식은 원본 이미지와 변환된 이미지를 모두 가지고 있을 수 있다는 이점이 있으나,<br>다양한 해상도를 모두 제공하는 데에는 비용적 문제가 있다고 판단하여,<br>CloudFront Cache를 이용한 On-The-Fly를 도입하기로 하였습니다.</p><p>  <a href="https://medium.com/daangn/lambda-edge%EB%A1%9C-%EA%B5%AC%ED%98%84%ED%95%98%EB%8A%94-on-the-fly-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%A6%AC%EC%82%AC%EC%9D%B4%EC%A7%95-f4e5052d49f3">[당근마켓]AWS Lambda@Edge에서 실시간 이미지 리사이즈 &amp; WebP 형식으로 변환</a> 포스팅과 <a href="https://engineering.huiseoul.com/lambda-%ED%95%9C%EA%B0%9C%EB%A1%9C-%EB%A7%8C%EB%93%9C%EB%8A%94-on-demand-image-resizing-d48167cc1c31">[후이서울]Lambda 한개로 만드는 On-demand Image Resizing</a> 포스팅을 참고하여, Lambda@Edge 서비스를 이용하였습니다.</p><p>  최초 이미지 생성에 Latency가 발생하나, 캐시 될 경우 빠르게 리사이징 된 이미지를 제공 할 수 있었습니다.</p><p>  이와 같은 도입으로 이미지 최적화를 통해 모바일 사이트에서 이미지 용량을 최대 1&#x2F;3까지 줄일 수 있었습니다.</p><h2 id="03월-05월"><a href="#03월-05월" class="headerlink" title="03월~05월"></a>03월~05월</h2><h3 id="해외-업체-예약-API-연동"><a href="#해외-업체-예약-API-연동" class="headerlink" title="해외 업체 예약 API 연동"></a>해외 업체 예약 API 연동</h3><hr><p>  작년부터 회사에서 서비스를 모놀리식 아키텍처(PHP)에서 마이크로서비스 아키텍쳐(Java Spring Boot)로 마이그레이션중이였습니다.</p><p>  자바는 학부생때 배웠지만, 스프링을 해 본적이 없어서 개인 시간에 Spring Boot 책도 읽고,<br>정말 간단하게 회원 관리 시스템을 구성하여 AWS Elastic Beanstalk에 배포하는 등 API 연동 작업을 하기 위해 미리 준비를 좀 해두었습니다.</p><p>  기존에 다른분들이 작성한 코드를 참고하여 작업을 하려했는데,<br>다른분들은 REST API로 작성하였으나, 제가 맡게 된 API는 XML SOAP으로 제공되고 있었습니다….</p><p>  기존에 PHP에서는 SOAP을 설치해서 사용해서, 자바 서비스가 실행중인 서버에도 SOAP을 서버에 설치해야하나 고민했습니다만 다행히도 XML 포맷으로만 보내면 HTTP로 요청이 가능했습니다.</p><p>  <code>JAXB</code>를 이용하여 <code>Java 객체 &lt;-&gt; XML</code> 을 처리하였는데,<br>해당 API가 SOAP Body의 특정 스키마부터는 htmlEsacpe를 해서 보내야하거나, 받아야하는 특이한 API 였습니다.</p><p>  이 연동을 하며, 말로만 듣던 Retrofit 라이브러리도 사용해 보았고, 실제 서비스에서 JPA도 다루어 볼 수 있는 기회가 되었습니다.<br>또한 PHP에서는 클래스의 멤버변수에 값을 주입해서 쓰는 경우가 많았는데,<br>Spring Application Context에서 관리되는 Bean들이 싱글톤으로 관리 되어 발생하였던 문제도 경험도 할 수 있던 좋은 기회였습니다.</p><h3 id="Webhook-서비스-구축"><a href="#Webhook-서비스-구축" class="headerlink" title="Webhook 서비스 구축"></a>Webhook 서비스 구축</h3><hr><p>  PHP와 Java를 같이 가져가는 구조에서 백오피스는 기존 그대로 PHP를 유지하고 있는데,<br>외부 업체들에 상품 변경 내역을 실시간으로 웹훅과 같이 전달하는 기능이 요구사항이 생겼습니다.</p><p>  AWS Lambda로 서버리스 아키텍처로 구현하였던 경험을 바탕으로 이번에는 Typescript 템플릿을 사용하여 해당 기능을 빠르게 구현 할 수 있었습니다.</p><h2 id="06월"><a href="#06월" class="headerlink" title="06월"></a>06월</h2><h3 id="모놀리식-서비스-마이그레이션-시작"><a href="#모놀리식-서비스-마이그레이션-시작" class="headerlink" title="모놀리식 서비스 마이그레이션 시작"></a>모놀리식 서비스 마이그레이션 시작</h3><hr><p>  작년에 PHP에서 쿠폰 서비스를 고도화 작업을 진행하여, 어느정도 도메인에 대한 이해가 있다 생각하여 쿠폰 서비스를 자바로 마이그레이션 하는 작업을 진행했습니다.</p><p>우선적으로 개발 해야 했던 기능이 상품 전용 쿠폰을 사용 했을때 할인될 가격을 가져오는 부분인데,<br>제가 개발한 이후로 다국어 서비스 및 다중 통화 지원 서비스가 생겨서 예상치 못했던 변수들이 너무 많았습니다. 해당 부분을 작업 하셨던분들께 여쭤보며 해당 작업을 진행하였습니다.</p><p>현재 스프링으로 개발한 서비스들의 인프라 구성이 모두 동일하기 때문에, 인프라 구성은 기존에 서비스를 만들고 계시는 다른 자바 개발자 분들의 도움을 받아 동일하게 구성하였습니다.</p><p>사내 인프라 구성에 대해 배울 수 있는 좋은 기회였습니다.</p><h3 id="신규-기능-개발"><a href="#신규-기능-개발" class="headerlink" title="신규 기능 개발"></a>신규 기능 개발</h3><hr><p>상품에 접근하는 방식을 개선하고자 상품을 새롭게 그룹핑하여 노출하는 신규 서비스가 요구 되었습니다.</p><p>프론트와 백엔드 서비스를 분리하는 시작으로 생각하여, 프론트 개발자분과 프론트 서비스 인프라를 어떻게 구성하는게 좋을지 같이 논의하여, 다양한 아이디어를 주고 받아<br>최종적으로는 SEO 지원을 고려하여 Next.js를 이용해 서버사이드 렌더링을하고 기존 서비스에는 영향이 없도록 하기 위해 AWS ELB를 활용하는 방향으로 설계하였습니다.</p><p>주요 도메인 설계는 다른분이 진행하여 주시고, 저는 서브로 퍼블릭 서비스에서 해당 데이터를 받아 조합하는 작업을 진행 하였는데, 기존에 도메인간 의존 관계가 너무 커서 퍼블릭 서비스보다 프라이빗 서비스가 모든 처리를 하는 방향으로 개발하게 되어 일정상 특정 기능을 제가 구현해야 하는 상황이 되었습니다.</p><p>해당 서비스의 도메인 설계와 구현 해야할 것에 대해 인수인계 받아 작업을 진행 하였고,<br>우여곡절 끝에 7월이 되어서야 빠른검색(가제) 서비스 릴리즈를 완료했습니다.</p><h1 id="📒-블로그"><a href="#📒-블로그" class="headerlink" title="📒 블로그"></a>📒 블로그</h1><hr><h2 id="어썸데브-블로그"><a href="#어썸데브-블로그" class="headerlink" title="어썸데브 블로그"></a>어썸데브 블로그</h2><hr><p><a href="http://daily-devblog.com/">국내 개발자들 블로그를 구독</a>하고 있었는데, 내 포스팅도 많이 노출되어서 많은 피드백을 받았으면 좋겠다 싶어서, 해당 서비스가 <a href="https://awesome-devblog.netlify.com/">어썸데브블로그</a>의 피드를 사용하기때문에 국내 개발자로 등록을 하였습니다.</p><p>등록하고 바로 포스팅을 올렸는데 어날리틱스 기준으로 처음으로 블로그 1일 방문자수가 20을 넘었습니다.<br>해당 그래프를 보는게 재밌어서 포스팅을 계속해서 올렸었고, 아래와 같은 그래프를 그릴 수 있었습니다.</p><p><img src="https://blog.hodory.dev/images/d827fdd6-2288-4586-bee3-808d291dbc28.png" alt="블로그 GA 통계"></p><p>노출 수가 많아질수록 더 읽고 싶은글, 읽기 좋은 글 또는 관심가질만한 글들을 써야겠다고 생각하게 되었습니다.</p><h2 id="블로그-배포-방식-변경"><a href="#블로그-배포-방식-변경" class="headerlink" title="블로그 배포 방식 변경"></a>블로그 배포 방식 변경</h2><p>기존에 hexo-cli를 이용해서 배포를 하다가 매번 커맨드를 치는것도 귀찮다 생각하여, <code>package.json</code>에 스크립트를 작성해두었습니다.</p><p>팀원에게 Codeship 서비스로 깃허브 블로그 배포 자동화 하는 방법을 소개해주어 <a href="https://jheloper.github.io/2019/04/hexo-ci-cd-with-codeship/">팀원분은 이걸 적용했는데</a>,<br>저는 드롭박스로 코드를 관리하고 있었고<br>소스 전용 레포지토리도 따로 관리하고 있었기 때문에 큰 필요성을 못 느꼈습니다.</p><p>하지만 hexo deploy 와 소스 전용 브랜치에 커밋&amp;푸시를 별도로 하는게 딱히 메리트가 있다고 생각이 들어 바로 작업을 진행하게 되었습니다.</p><p>Codeship으로 배포할까 하다가 이번에는 플러그인처럼 프라이빗 repo에서도 깃허브와 연동시 무료로 제공되는 Travis CI를 이용하기로 하였습니다.</p><p>ChangJoo Park님의 포스팅 <a href="https://medium.com/@changjoopark/travis-ci%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-github-pages-hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%9E%90%EB%8F%99-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0-6a222a2013e6">Travis CI를 이용한 Github Pages + Hexo 블로그 자동 배포하기</a>을 참조하여 작업을 진행하였고,<br/><br><a href="https://blog.hodory.dev/2019/06/06/hexo-travis-ci-with-no-contents/">빈 파일이 올라가는 문제</a>도 겪었지만 블로그 소스 코드 관리 및 배포를 조금 더 간결하게 할 수 있어서<br>의미있는 작업이였다고 생각합니다.</p><blockquote><p>Github Actions 서비스가 현재 베타 서비스중이여서 나중에는 이걸로 갈아타지 않을까 생각합니다</p></blockquote><h2 id="도메인-연결과-깃허브-아이디-변경"><a href="#도메인-연결과-깃허브-아이디-변경" class="headerlink" title="도메인 연결과 깃허브 아이디 변경"></a>도메인 연결과 깃허브 아이디 변경</h2><hr><p>기존에 Github Page를 이용하여 <a href="http://github.io/">github.io</a> 도메인을 사용했는데, 지인의 추천을 받아 그날 바로 dev 도메인(hodory.dev)을 구매한 후 <a href="https://blog.hodory.dev/2019/06/09/github-pages-blog-migration/">엄청난 삽질</a>을 진행하였습니다.</p><p>원래는 서브 도메인(blog.hodory.dev)으로 블로그임을 더 확실히 하고 싶어서 서브도메인만 쓰려 했는데, 구글 애드센스때문에 루트도메인도 리디렉션 처리를 했습니다.</p><p>도메인을 여기저기 잘 활용하고 있어서, 도메인을 구입한거에 대해서는 전혀 후회하지 않습니다.</p><p>아쉬운점이라면 구글 서치 콘솔에 쌓인 2년간의 데이터를 잃어버린점이지만 크게 의미 있는 데이터는 아니였다고 생각합니다.(기존의 구글 검색에 노출되는 포스팅은 전부 현재 도메인으로 리디렉션 시켰습니다.)</p><h1 id="🏃-일상"><a href="#🏃-일상" class="headerlink" title="🏃 일상"></a>🏃 일상</h1><hr><h2 id="💪-운동"><a href="#💪-운동" class="headerlink" title="💪 운동"></a>💪 운동</h2><hr><p>앉아서만 일을 하다보니 활동량이 줄어들어 계속해서 체중이 증가하고 있었습니다.</p><p>체력적으로도 문제가 될 수 있겠다 싶어, 4월부터 회사 근처에서 운동을 다니기 시작하였는데,<br>운동을 안하는 날에도 열심히 먹었지만 오히려 보상 심리로 운동이 끝난 후 더 많이 먹어서 체중이 늘어난거 같습니다…</p><p>꾸준히 다녀야지 하고 시작했던 운동인데, 간간히 운동 빠지는 재미가 쏠쏠합니다…</p><h2 id="🔧-프로젝트"><a href="#🔧-프로젝트" class="headerlink" title="🔧 프로젝트"></a>🔧 프로젝트</h2><hr><p>인스타그램으로 맛집을 많이 찾아 돌아 다녔는데 광고가 많아져서 몇번 데이고 나니,<br>제가 필요해서 <code>프라이빗한 SNS를 만들어볼까?</code> 생각하고 대학 동기들과 프로젝트를 진행하였습니다.</p><p>당시 스프링을 공부하고 있어서 스프링 부트로 서비스를 만들고, 기획도 진행하고, PM 역할까지 같이 했는데 중간에 슬럼프도 오고 각자의 사정으로 잠시 중단한 상태입니다.</p><h1 id="하반기에는"><a href="#하반기에는" class="headerlink" title="하반기에는"></a>하반기에는</h1><hr><p>  위에 작성한 SNS 프로젝트를 다시 진행하고 싶은데, 같이 프로젝트를 진행하던 팀원들이 다들 바빠져서 가능할지 모르겠습니다.</p><p>  면접에서 좋은 면접관님을 만나 평소에 생각하지 않았던 것들에 대한 좋은 질문을 받을 수 있는 기회가 있었는데, 굉장히 긍정적인 경험이였습니다.<br>하반기에는 이러한것들을 함께 고민해 볼 수 있는 자리를 찾아 볼까 합니다.</p><p>  이직을 하게 되었는데, 우선적으로 새로운 회사에 빠르게 적응 해야 할 것 같습니다.</p><p>  경력이 이제 3년이 되어 가는데, 아직까진 주위에서 <code>&quot;잘하고 있다.&quot;</code> <code>&quot;잘한다.&quot;</code>라는 좋은 이야기들을 들으며 일해 왔는데, 주관적으로 보았을때에도 아직 경력에 비해서도 모자른게 많이 느껴집니다.<br>3년이면 프레임워크정도는 혼자서 만들 수 있고, 사이드 프로젝트로 서비스 하나 정도는 릴리즈 하거나, 오픈 소스에 기여할 수 있을줄 알았는데<br>이정도 년차에 잘 하시는 분들은 이미 위의 세개중 하나에서 두개정도는 하시는것 같아서 더 분발해야할 것 같습니다.</p><p>  알고리즘과 자료구조, 네트워크 지식 등 기본 지식들을 <code>공부해야지... 공부해야지...</code> 라고 말만 3년째 하고 있는것 같습니다. 물론 실무를 경험하며, 면접을 준비 하며, 블로그를 보다가 배우는 것들도 있긴한데 하나를 알아도 제대로 알아야 할 것 같습니다.</p><p>  최근에  <code>블로그를 찾아서 아는것만으로는 공부가 아니다</code>라는 말씀을 들어 저처럼 본인이 아는걸 작성하고 공유한 글인데, 무분별하게 받아 들이던 제 자신을 반성하게 되었습니다.<br>출판 서적으로 공부하는게 정석이라고는 생각은 하면서 실천하지 못해, 하반기에는 노력해야 할 것 같습니다.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;일년이 어떻게 흘러간지 한해가 지날수록 더 기억이 안 나서&lt;br&gt;정리의 필요성을 느껴, 올해부터는 회고를 진행해볼까 합니다.&lt;/p&gt;
&lt;h1 id=&quot;💼-회사&quot;&gt;&lt;a href=&quot;#💼-회사&quot; class=&quot;headerlink&quot; title=&quot;💼 회사&quot;&gt;&lt;/a&gt;💼 회사&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;01월-02월&quot;&gt;&lt;a href=&quot;#01월-02월&quot; class=&quot;headerlink&quot; title=&quot;01월~02월&quot;&gt;&lt;/a&gt;01월~02월&lt;/h2&gt;&lt;h3 id=&quot;서버리스-아키텍쳐-구현-마무리&quot;&gt;&lt;a href=&quot;#서버리스-아키텍쳐-구현-마무리&quot; class=&quot;headerlink&quot; title=&quot;서버리스 아키텍쳐 구현 마무리&quot;&gt;&lt;/a&gt;서버리스 아키텍쳐 구현 마무리&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;  12월부터 설계 및 개발을 진행하였던 서버리스 아키텍처를 12월 중순쯤 배포하였으나,&lt;br&gt;이슈 사항들이 많아 마무리 짓는데 생각보다 오래 걸렸습니다.&lt;/p&gt;
&lt;p&gt;  외부 싱크 여부를 판단하기 위한 데이터들을 Insert 또는 Update 하다 보니,&lt;br&gt;RDS 콘솔 상에서 IOPS 쓰기가 1000 이상이 되는 경우가 발생했습니다.&lt;/p&gt;
&lt;p&gt;  해당 데이터를 레디스(Elastic Cache)나 noSQL(DynamoDB)에 쌓은 후, 다시 RDS로 옮기는 것도 검토해보았지만, 실제 구현할 경우 관리 포인트가 너무 많이 발생하게 되어 연동 속도를 줄이더라도 Lambda의 동시성을 조절하는 것으로 처리하였습니다.&lt;/p&gt;
&lt;h2 id=&quot;02월-03월&quot;&gt;&lt;a href=&quot;#02월-03월&quot; class=&quot;headerlink&quot; title=&quot;02월~03월&quot;&gt;&lt;/a&gt;02월~03월&lt;/h2&gt;</summary>
    
    
    
    <category term="ETC" scheme="https://blog.hodory.dev/categories/ETC/"/>
    
    <category term="Retrospection" scheme="https://blog.hodory.dev/categories/ETC/Retrospection/"/>
    
    
    <category term="Retrospection" scheme="https://blog.hodory.dev/tags/Retrospection/"/>
    
  </entry>
  
  <entry>
    <title>［ETC］시니어 개발자의 조건을 다시 읽고</title>
    <link href="https://blog.hodory.dev/2019/06/18/%EC%8B%9C%EB%8B%88%EC%96%B4-%EA%B0%9C%EB%B0%9C%EC%9E%90%EC%9D%98-%EC%A1%B0%EA%B1%B4%EC%9D%84-%EB%8B%A4%EC%8B%9C-%EC%9D%BD%EA%B3%A0/"/>
    <id>https://blog.hodory.dev/2019/06/18/%EC%8B%9C%EB%8B%88%EC%96%B4-%EA%B0%9C%EB%B0%9C%EC%9E%90%EC%9D%98-%EC%A1%B0%EA%B1%B4%EC%9D%84-%EB%8B%A4%EC%8B%9C-%EC%9D%BD%EA%B3%A0/</id>
    <published>2019-06-18T15:06:39.000Z</published>
    <updated>2022-08-10T16:39:59.885Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://docs.likejazz.com/senior-developers/">시니어 개발자의 조건</a>이라는 포스팅을 2017년 초에 접하고,<br/><br>북마크에 담아두었다가 오늘에서야 다시 열어보게 되었습니다.</p><p>주요 키워드는 아래의 6가지였습니다.</p><ul><li>시스템을 알고 서비스를 개발 해야한다.</li><li>기반기술을 중요시 해야한다.</li><li>적절한 엔지니어링을 택해야 한다.</li><li>클린코드가 모든 경우에 정답은 아니다.</li><li>애자일은 만능이 아니다.</li><li>오픈소스를 무분별하게 가져다 쓰는것 보다, 내부 동작 원리를 이해하고 용도에 맞게 사용해야한다.<br/><br>부족한 부분을 기여할 수 있는 프로슈머가 되어야 한다.</li></ul><p>필자분께서 결론에 담아주신 내용이 가장 인상이 깊었습니다.</p><blockquote><p>쥬니어와 시니어가 같은 일을 하고 같은 품질의 결과물을 만들어 낸다면<br>나이는 많고 연봉은 높은 시니어를 반길 이유가 없다.<br>시니어는 기반 기술에 대한 높은 이해를 바탕으로 쥬니어와는 다른 고품질의 결과물을 만들 수 있어야 한다.<br>그리고 쥬니어가 성장하고 본받을 수 있는 높은 기술력을 갖추고 리딩할 수 있어야 한다.<br>단순히 1년의 경력을 10번 반복한 시니어는 아무런 경쟁력이 없다.</p></blockquote><p>2019년의 저는 얼마만큼 위의 여섯가지 키워드에 근접하였을까요</p><p>2019년의 저에 대해 되돌아 보았습니다.</p><span id="more"></span><hr><h3 id="시스템을-알고-서비스를-개발-해야한다"><a href="#시스템을-알고-서비스를-개발-해야한다" class="headerlink" title="시스템을 알고, 서비스를 개발 해야한다."></a>시스템을 알고, 서비스를 개발 해야한다.</h3><h3 id="기반기술을-중요시-해야한다"><a href="#기반기술을-중요시-해야한다" class="headerlink" title="기반기술을 중요시 해야한다."></a>기반기술을 중요시 해야한다.</h3><p>시스템에 대한 이해와 기반기술지식이 기존에도 부족하다 느꼈고,<br/><br>알고리즘과 자료구조를 이해하고 개발을 하는것의 중요성을 느끼기도 하고, 수없이 듣기도 하였습니다.<br>하지만 이직을 하는 때가 아니면 들여다 보지 않는 자세를 매번 후회하면서도<br/><br>똑같은 실수를 반복하고 있는것 같아, 빠르게 이 잘못된 반복의 고리를 끊어야 할 것 같습니다.</p><h3 id="적절한-엔지니어링을-택해야-한다"><a href="#적절한-엔지니어링을-택해야-한다" class="headerlink" title="적절한 엔지니어링을 택해야 한다."></a>적절한 엔지니어링을 택해야 한다.</h3><p>2019년은 AWS 서비스내에서 다양한 플랫폼들을 이용하여, 서버리스 아키텍쳐를 구현하여 보기도 했고,<br/><br>VueJS와 Webpack을 이용하여 주로 프론트에 적용 시키도 하였습니다.</p><p>어느정도 새로운 기술에 대해 욕심도 있었기때문에 다양한 것들을 사용 해보았던것 같습니다.</p><p>서버리스 아키텍쳐를 도입하였던 가장 큰 이유는 FaaS(Function as a Service)라는 새로운 개념에 흥미가 있어 알아보고 있었고,<br/><br><code>짧은 시간동안</code>, <code>빠르게</code>, <code>관리 할 필요 없이</code> 등 제가 기억하고 있는 키워드들이 만들려던 서비스와 가장 적합하다 생각하여,<br/><br>서버리스 아키텍쳐를 도입하게 되었습니다.</p><p>프론트에서 VueJS를 사용했던 이유는 DOM을 핸들링하는 주체가 데이터인데,<br>DOM에 너무 중심적인 코드를 작성을 하다보니<br/><br>다른사람들이 코드만으로는 해당 코드가 어떻게 동작할지 예측이 전혀 불가능한 코드를 작성하게 되어<br/><br>기존에 공부하여 본 경험이 있어 도입 하게 되었습니다.</p><p>제가 선택한 엔지니어링이 <code>최선이였을까?</code> 라는 질문에는 <code>아니다</code> 라고 확실하게 대답할 수 있고,<br/><br>다른 누군가에게는 <code>오버엔지니어링이다</code> 라는 말을 들을 수 있을 것 같습니다.</p><h3 id="클린코드가-모든-경우에-정답은-아니다"><a href="#클린코드가-모든-경우에-정답은-아니다" class="headerlink" title="클린코드가 모든 경우에 정답은 아니다."></a>클린코드가 모든 경우에 정답은 아니다.</h3><p>아직까지 클린코드라는 책을 읽지 못하여, 이 부분을 답할 수 없습니다….</p><h3 id="애자일은-만능이-아니다"><a href="#애자일은-만능이-아니다" class="headerlink" title="애자일은 만능이 아니다."></a>애자일은 만능이 아니다.</h3><p>현재 팀내에서 애자일을 지향하고 있으나, 애자일하게 흘러가기 힘든 상황도 얼마든지 존재할 수 있음을 느끼고 있습니다.</p><p>이상적인 개념이나, 항상 변수가 생겨 현재 진행하고 있는 스프린트도 지켜지지 않는 경우가 많았었습니다.</p><p>추구할 수 있으나 이것에 얽매이지 않고, 유연하게 대처하고 있는가?에 대해서는 <code>그럴때도 있고 아닐때도 있다</code> 인것 같습니다.  </p><h3 id="오픈소스에-대해-프로슈머가-되어야-한다"><a href="#오픈소스에-대해-프로슈머가-되어야-한다" class="headerlink" title="오픈소스에 대해 프로슈머가 되어야 한다."></a>오픈소스에 대해 프로슈머가 되어야 한다.</h3><p>다양한 오픈 소스를 가져다 사용하고 있고, 오픈 소스에 기여하고자 하는 마음도 가지고 있습니다.<br/><br>기존에는 문서가 제대로 되어 있지 않을때, 코드를 사용하기 위해 내부 구현 코드를 보았다면<br/><br>근 3개월간은 사용하는 라이브러리들의 개발자들이 <code>내부 구현 코드를 과연 어떻게 구현 해두었을까?</code>라는 관심을 가지고<br/><br>내부 코드를 들여다보게 된 것 같습니다.</p><p>현재 가장 기여하고 싶은 프로젝트는 <a href="https://github.com/laravel/framework">PHP Laravel Framework</a>입니다.<br>아무래도 실무에서 사용하였을때 부족한 부분을 찾기 가장 좋은 조건이고, 내부 동작에 대해서도 들여다 보게 될텐데<br/><br>아직까지 실무에 사용하여 본 적도 없고, 기본 동작정도만 사용 해 보았지,<br/><br>오히려 스프링 부트 프레임워크보다 더 조금 사용하여 본 프레임워크라 아쉬움이 큰 것 같습니다.</p><p>해당 글을 처음 접하였을때부터 필자 분께서 언급하신 <code>단순히 1년의 경력을 10번 반복한 시니어</code>가 되지 않아야겠다. 라고 생각 해왔지만<br/><br>항목들을 하나 하나씩 돌아보니, 더 많은 노력이 필요한 것 같습니다.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://docs.likejazz.com/senior-developers/&quot;&gt;시니어 개발자의 조건&lt;/a&gt;이라는 포스팅을 2017년 초에 접하고,&lt;br/&gt;&lt;br&gt;북마크에 담아두었다가 오늘에서야 다시 열어보게 되었습니다.&lt;/p&gt;
&lt;p&gt;주요 키워드는 아래의 6가지였습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;시스템을 알고 서비스를 개발 해야한다.&lt;/li&gt;
&lt;li&gt;기반기술을 중요시 해야한다.&lt;/li&gt;
&lt;li&gt;적절한 엔지니어링을 택해야 한다.&lt;/li&gt;
&lt;li&gt;클린코드가 모든 경우에 정답은 아니다.&lt;/li&gt;
&lt;li&gt;애자일은 만능이 아니다.&lt;/li&gt;
&lt;li&gt;오픈소스를 무분별하게 가져다 쓰는것 보다, 내부 동작 원리를 이해하고 용도에 맞게 사용해야한다.&lt;br/&gt;&lt;br&gt;부족한 부분을 기여할 수 있는 프로슈머가 되어야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;필자분께서 결론에 담아주신 내용이 가장 인상이 깊었습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;쥬니어와 시니어가 같은 일을 하고 같은 품질의 결과물을 만들어 낸다면&lt;br&gt;나이는 많고 연봉은 높은 시니어를 반길 이유가 없다.&lt;br&gt;시니어는 기반 기술에 대한 높은 이해를 바탕으로 쥬니어와는 다른 고품질의 결과물을 만들 수 있어야 한다.&lt;br&gt;그리고 쥬니어가 성장하고 본받을 수 있는 높은 기술력을 갖추고 리딩할 수 있어야 한다.&lt;br&gt;단순히 1년의 경력을 10번 반복한 시니어는 아무런 경쟁력이 없다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2019년의 저는 얼마만큼 위의 여섯가지 키워드에 근접하였을까요&lt;/p&gt;
&lt;p&gt;2019년의 저에 대해 되돌아 보았습니다.&lt;/p&gt;</summary>
    
    
    
    <category term="ETC" scheme="https://blog.hodory.dev/categories/ETC/"/>
    
    <category term="회고록" scheme="https://blog.hodory.dev/categories/ETC/%ED%9A%8C%EA%B3%A0%EB%A1%9D/"/>
    
    
    <category term="회고록" scheme="https://blog.hodory.dev/tags/%ED%9A%8C%EA%B3%A0%EB%A1%9D/"/>
    
  </entry>
  
  <entry>
    <title>［Hexo］블로그 주소를 바꾸었어요!</title>
    <link href="https://blog.hodory.dev/2019/06/09/github-pages-blog-migration/"/>
    <id>https://blog.hodory.dev/2019/06/09/github-pages-blog-migration/</id>
    <published>2019-06-09T08:55:48.000Z</published>
    <updated>2022-08-10T16:39:59.885Z</updated>
    
    <content type="html"><![CDATA[<p>이번에도 <a href="https://gracefullight.dev/">Gracefullight</a>님의 제안으로, dev 도메인을 구매하기로 하였습니다.</p><p>기존의 아이디를 사용하여 <code>khzero.dev</code>를 쓸까 하다가,<br/></p><blockquote><p>이왕 구매하는거 깃허브 아이디도 바꾸고, 도메인도 맞춰서 사자!</p></blockquote><p>라고 생각을 했었습니다…그때 멈췄어야 했는데요…</p><span id="more"></span><p><a href="https://gracefullight.dev/2019/05/06/connecting-a-DEV-domain-to-github-pages/">해당 포스팅</a>을 참조하여 작업을 진행하기 시작했습니다.</p><h3 id="1-도메인-구매-및-연결"><a href="#1-도메인-구매-및-연결" class="headerlink" title="1. 도메인 구매 및 연결"></a>1. 도메인 구매 및 연결</h3><p>닉네임을 찾다가 <code>Hodory</code>로 변경하고, <code>hodory.dev</code> 도메인을 구매했습니다.</p><p>Github Pages로 관리되던 <code>khzero.github.io</code> Repository 이름을 <code>hodory.github.io</code>로 변경하였죠</p><p>지난번 <a href="https://blog.hodory.dev/">TravisCI로 블로그 자동 배포시 겪은 문제</a>에서 TravisCI로 배포 환경을 구축 했기 때문에,</p><p><img src="https://blog.hodory.dev/images/blog-migration/5.jpg" alt="Github Travis CI Configuration"></p><p>위의 이미지와 같이 깃허브에서 TravisCI 서비스연결도 다시하고, Hexo config.yml도 모두 수정하였습니다.</p><p>기존의 도메인 URL도 모두 변경하여 블로그를 배포했습니다.</p><h3 id="2-기존-블로그는-어떻게-해요"><a href="#2-기존-블로그는-어떻게-해요" class="headerlink" title="2. 기존 블로그는 어떻게 해요???"></a>2. 기존 블로그는 어떻게 해요???</h3><p>생각하여보니 현재 <a href="https://awesome-devblog.netlify.com/">어썸데브블로그</a>에 <code>khzero.github.io</code> 주소의 포스팅들이 공개 되어 있는데,</p><p>깃허브 아이디를 변경하면서 도메인 연결이 끊겨, 404 페이지를 노출하고 있었습니다.</p><p><img src="https://blog.hodory.dev/images/blog-migration/6.jpg" alt="Github Pages Not Found"></p><p>급하게 khzero로 계정을 새로 만든 후, <code>khzero.github.io</code> Repository를 생성하고 기존 포스트를 배포하여 404로 노출되는것은 막았습니다.</p><h3 id="3-서브도메인으로-바꿀래요"><a href="#3-서브도메인으로-바꿀래요" class="headerlink" title="3. 서브도메인으로 바꿀래요!"></a>3. 서브도메인으로 바꿀래요!</h3><p>원래는 도메인을 <code>hodory.dev</code>로 쓰려 했지만, 서브 도메인으로 블로그임을 명시하고 싶어,<br/><br>다시 hodory 계정의 hodory.github.io Rpository를 <code>blog.hodory.dev</code>로 CNAME을 설정하고</p><p>아래와 같이 설정하였습니다.<br/><br>(<strong>※주의 : CNAME을 배포하면 아래의 설정이 초기화 되니 주의하시기 바랍니다.※</strong>) </p><p><img src="https://blog.hodory.dev/images/blog-migration/7.jpg" alt="Github Pages Custom Domain Setting"></p><p>배포를 하였더니 깃허브로부터 아래와 같은 메일이 왔었습니다.</p><p><img src="https://blog.hodory.dev/images/blog-migration/1.jpg" alt="Github Pages Custom Domain Setting"></p><p>A 레코드에 <code>blog.hodory.dev</code>가 설정되어 있어서인데,<br>CNAME으로 변경하기위해 구글 도메인 DNS 설정에서 아래와 같이 변경했습니다.</p><p><img src="https://blog.hodory.dev/images/blog-migration/9.jpg" alt="Google Domains - DNS Setting"></p><p>설정을 모두 마친 뒤, 지인들에게 자랑을 했는데 블로그가 아래와 같은 오류로 나오지 않는다했습니다.</p><blockquote><p>웹사이트에서 HSTS를 사용하므로 지금은 blog.hodory.dev에 방문할 수 없습니다. <br/><br> 네트워크 오류와 공격은 대체로 일시적인 문제이기 때문에 나중에 이 페이지가 정상적으로 작동할 수 있습니다.</p></blockquote><blockquote><p>TTL 문제일 수 있어 최대 1H까지 리졸브가 안될 수 있어요</p></blockquote><p>라는 설명을 듣고 TTL을 <code>1m</code> 으로변경하였습니다</p><p><img src="https://blog.hodory.dev/images/blog-migration/8.jpg" alt="Google Domains - DNS Setting"></p><p>1분정도 지난 후 확인해보니 정상적으로 동작했습니다!</p><p>또 중간에 배포를 하다가 이와 같이 되는 노출되는 경우가 있었는데<br><img src="https://blog.hodory.dev/images/blog-migration/4.jpg" alt="크롬 - 연결이 비공개로 설정되어 있지 않습니다."></p><p>위에 기재하였던 CNAME이 수정되면서, <code>Enforce HTTPS</code> 가 체크 해제되어 있었습니다.<br>이 부분을 수정하니 정상적으로 노출이 되었습니다.</p><h3 id="4-기존-블로그를-연결하자"><a href="#4-기존-블로그를-연결하자" class="headerlink" title="4. 기존 블로그를 연결하자!"></a>4. 기존 블로그를 연결하자!</h3><p>블로그 주소가 변경되면서 해야할 것은</p><ol><li>oneSignal의 URL 변경</li><li>Analytics 수정</li><li>구글 애드센스 확인</li><li>Search Console 연결</li><li>페이스북 픽셀 주소변경</li><li>네이버 웹마스터도구 사이트 추가</li></ol><p>6가지였습니다.</p><p>대부분 URL 변경만 한다거나, 추가하는 방식으로 간단하게 수정 되었으나, 4번에서 문제가 생겼습니다.</p><p>현재 Search Console의 구버전에서만 가능한 주소 변경 툴인데,</p><p>아래 이미지에 표시된 2번의 301 리디렉션 정상동작 여부에서 막혔습니ㅏㄷ. </p><p><img src="https://blog.hodory.dev/images/blog-migration/3.jpg" alt="Github Page - 301 리디렉션"></p><p>Github Pages 는 정적페이지이다보니 301로 리디렉션이 불가능합니다.</p><p>혹시나 하는 마음에 <a href="https://github.com/jekyll/jekyll-redirect-from">jekyll-redirect-from</a> 패키지도 확인 해보았으나,</p><p>meta 태그와 script를 이용해 페이지를 이동시키는데,</p><p>구글봇이 해당 페이지를 읽을때 HTTP 코드가 200으로 나와서 301 리디렉션이 되지 않았습니다.</p><p>어쩔 수 없이 <a href="https://github.com/akfish/hexo-theme-redirect">hexo-theme-redirect</a> 테마를 이용하여, meta 리디렉션만 설정하고</p><p>Search Console은 커뮤니티에 문의를 남기고 우선 재생성하기로 하여 모든 마이그레이션을 마무리지었습니다.</p><p>혹시나 Search Console 주소변경에 대한 다른 방법을 알고 계시다면 공유 부탁 드리겠습니다.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;이번에도 &lt;a href=&quot;https://gracefullight.dev/&quot;&gt;Gracefullight&lt;/a&gt;님의 제안으로, dev 도메인을 구매하기로 하였습니다.&lt;/p&gt;
&lt;p&gt;기존의 아이디를 사용하여 &lt;code&gt;khzero.dev&lt;/code&gt;를 쓸까 하다가,&lt;br/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;이왕 구매하는거 깃허브 아이디도 바꾸고, 도메인도 맞춰서 사자!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;라고 생각을 했었습니다…그때 멈췄어야 했는데요…&lt;/p&gt;</summary>
    
    
    
    <category term="Hexo" scheme="https://blog.hodory.dev/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="https://blog.hodory.dev/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>［Hexo］TravisCI로 블로그 자동 배포시 겪은 문제</title>
    <link href="https://blog.hodory.dev/2019/06/06/hexo-travis-ci-with-no-contents/"/>
    <id>https://blog.hodory.dev/2019/06/06/hexo-travis-ci-with-no-contents/</id>
    <published>2019-06-06T03:22:59.000Z</published>
    <updated>2022-08-10T16:39:59.885Z</updated>
    
    <content type="html"><![CDATA[<h2 id="WARN-No-layout-자동-배포를-했더니-빈-파일들만-올라가요"><a href="#WARN-No-layout-자동-배포를-했더니-빈-파일들만-올라가요" class="headerlink" title="WARN  No layout 자동 배포를 했더니 빈 파일들만 올라가요!!"></a>WARN  No layout 자동 배포를 했더니 빈 파일들만 올라가요!!</h2><blockquote><p>한줄 요약 : theme 폴더를 레포지토리에 추가하시면됩니다.</p></blockquote><p>아래의 내용은 해당 원인을 찾아가던 본인의 경험담입니다… </p><hr><p>블로그를 직접 만드는데, 시간을 투자하는것 보다 포스팅을 하는게 더 가치 있겠다 싶어<br/><br>현재 블로그를 Hexo + Github Page를 이용하여 운영하고 있습니다</p><p>기존에는 배포를 Hexo-cli를 이용하여 아래와 같은 명령어를 사용하여 배포 했습니다.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo clean</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo generate</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo deploy</span></span><br></pre></td></tr></table></figure><p>쉘에서 해당 명령어를 작성하는것 또한 귀찮아져서 <code>package.json</code> 파일을 이용하여,</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> * package.json</span><br><span class="line"> */</span><br><span class="line">&#123;</span><br><span class="line">    &quot;scripts&quot;: &#123;</span><br><span class="line">        &quot;deploy&quot;: &quot;hexo clean &amp;&amp; hexo d -g&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>해당 스크립트를 작성해서 <code>npm deploy</code>명령어로 배포를 하고, 소스는 별도의 레포지토리에 관리하고 있었습니다.</p><span id="more"></span><p>팀원에게는 자동 배포를 추천하였으나(<a href="https://jheloper.github.io/2019/04/hexo-ci-cd-with-codeship/">https://jheloper.github.io/2019/04/hexo-ci-cd-with-codeship/</a>),<br>저는 설정하지 않고 있었죠…</p><p>그러던 중 <a href="https://gracefullight.dev/">Gracefullight</a>님의 추천을 받아,<br/><br>이전에 보았던 ChangJoo Park님의 포스팅인 <a href="https://medium.com/@changjoopark/travis-ci%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-github-pages-hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%9E%90%EB%8F%99-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0-6a222a2013e6">Travis CI를 이용한 Github Pages + Hexo 블로그 자동 배포하기</a>를 참고하여<br>작업하기로 결심했습니다.</p><ul><li>Github Access Token 발급 받기</li><li><code>_config.yml</code> 파일에 deploy.repo 수정하기</li><li>배포 스크립트인 <code>.travis.yml</code> 작성하기</li><li>깃허브 플러그인을 이용하여 레포지토리와 연결하기</li><li>Travis CI 서비스에서 해당 프로젝트에 Environment Variables에 <code>__GITHUB_TOKEN__</code> 이름의 환경변수에 액세스 토큰 추가하기</li></ul><p>위의 다섯가지를 모두 마친 뒤,<br/><br>드디어 소스코드를 관리하는 Github Repository에 푸시를 하였습니다!</p><p>빌드도 성공했고, 푸시도 성공적이였습니다.<br/><br>확인하고자 블로그에 접속을 하였는데, 빈화면이 노출되고 있었습니다.</p><p>정적페이지이니까 우선적으로 <a href="https://github.com/hodory/hodory.github.io">Github Page Repo</a>의 파일들을 확인했는데,<br>모든 경로의 index.html 파일들이 0바이트로 변경되어 있었습니다.</p><blockquote><p><code>.gitignore</code> 때문에 컨텐츠가 만들어지지 않는 것인가?<br/></p></blockquote><p>먼저 의심을 했고 hexo-generator가 만들어주는 <code>db.json</code>도 git으로 버전관리대상에 추가 후 다시 푸시하였습니다.<br>예상대로 <code>hexo generate</code> 스크립트를 실행할때 생성 되기 때문에, 동일한 현상이 재현 되었습니다.</p><p>스크립트 실행시 무슨 문제가 있었다면 빌드가 중지 되었을텐데, Job log를 보았을때는 그런 문제가 없었습니다.</p><p>그리하여 기존 방식대로 우선 배포를 해둔 후, Job Log를 하나씩 자세히 들여다 보았는데</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">WARN  No layout: 2019/06/05/where-is-constructor-inject/index.html</span><br><span class="line">WARN  No layout: 2019/06/04/json-property-not-working/index.html</span><br><span class="line">WARN  No layout: 2019/05/28/required-a-bean-of-type-that-could-not-be-found/index.html</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>위와 같이 No layout 이라는 경고 메세지가 있었습니다.<br/><br>혹시나 하여 새로운 폴더에서 소스코드를 풀 받아 보았더니,<br/><br>themes 폴더에 사용중이던 테마가 빈 폴더였습니다.</p><p>항상 로컬에서만 푸시 하였기 때문에, 그걸 모르고 있었죠…</p><p>깃허브 레포지토리에는 이와같이 표시되고 클릭 불가능한 상태였습니다.<br><img src="https://github.com/hodory/hodory.github.io/blob/master/images/github-theme-not-versioning.png" alt="Github themes directory"></p><p>원인을 찾아본 결과, 해당 theme 마다 .git 디렉토리가 존재하고,<br/><br>개별적으로 버전관리가 되고 있기 때문에 저의 레포지토리를 pull을 받아도 사용할 수 없었습니다.</p><p><a href="https://postlude.github.io/2019/01/01/hexo-themes-and-git-submodule/">해당 포스팅</a>을 보고,<br>서브모듈을 사용해야겠다 생각했습니다.</p><p>하지만 템플릿쪽이다보니 개별적인 수정사항들도 생길 수 있기 때문에 직접 관리하는게 좋겠다 싶어서,<br>아예 .git 폴더를 지우고, 제 레포지토리에서 버전관리 할 수 있게 하는 쪽으로 마음을 바꾸었습니다.</p><p>그런데 <code>themes/icarus/.git</code> 폴더를 삭제하고, <code>git status</code> 명령을 쳤을때,<br/><br><code>themes/icarus</code> 디렉토리 하위 파일들이 <code>Untracked files</code>에 없었습니다.<br/><br>혹시나해서 폴더명을 바꾸니까 노출이 되었고요..</p><p>git에 캐시가 남아 있나? 싶어 <code>git rm --cached themes/icarus</code> 명령어를 사용하였더니<br/><br>정상적으로 <code>Untracked files</code>에 노출이 되어 버전관리에 추가한 후, 푸시를 했습니다.</p><p>그 후, 현재와 같이 정상적으로 동작하고 있습니다!!</p><p>정말 중요한 핵심은 <code>theme 폴더를 레포지토리에 추가하시면됩니다.</code> 였기 때문에<br/><br>한줄 요약으로 맨 위에 기재해두었습니다.</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;WARN-No-layout-자동-배포를-했더니-빈-파일들만-올라가요&quot;&gt;&lt;a href=&quot;#WARN-No-layout-자동-배포를-했더니-빈-파일들만-올라가요&quot; class=&quot;headerlink&quot; title=&quot;WARN  No layout 자동 배포를 했더니 빈 파일들만 올라가요!!&quot;&gt;&lt;/a&gt;WARN  No layout 자동 배포를 했더니 빈 파일들만 올라가요!!&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;한줄 요약 : theme 폴더를 레포지토리에 추가하시면됩니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;아래의 내용은 해당 원인을 찾아가던 본인의 경험담입니다… &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;블로그를 직접 만드는데, 시간을 투자하는것 보다 포스팅을 하는게 더 가치 있겠다 싶어&lt;br/&gt;&lt;br&gt;현재 블로그를 Hexo + Github Page를 이용하여 운영하고 있습니다&lt;/p&gt;
&lt;p&gt;기존에는 배포를 Hexo-cli를 이용하여 아래와 같은 명령어를 사용하여 배포 했습니다.&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta prompt_&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;language-bash&quot;&gt;hexo clean&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta prompt_&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;language-bash&quot;&gt;hexo generate&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta prompt_&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;language-bash&quot;&gt;hexo deploy&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;쉘에서 해당 명령어를 작성하는것 또한 귀찮아져서 &lt;code&gt;package.json&lt;/code&gt; 파일을 이용하여,&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * package.json&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;scripts&amp;quot;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;quot;deploy&amp;quot;: &amp;quot;hexo clean &amp;amp;&amp;amp; hexo d -g&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;해당 스크립트를 작성해서 &lt;code&gt;npm deploy&lt;/code&gt;명령어로 배포를 하고, 소스는 별도의 레포지토리에 관리하고 있었습니다.&lt;/p&gt;</summary>
    
    
    
    <category term="Hexo" scheme="https://blog.hodory.dev/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="https://blog.hodory.dev/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>［Java］해당 클래스의 서비스는 어디서 주입되나요??</title>
    <link href="https://blog.hodory.dev/2019/06/05/where-is-constructor-inject/"/>
    <id>https://blog.hodory.dev/2019/06/05/where-is-constructor-inject/</id>
    <published>2019-06-05T02:40:37.000Z</published>
    <updated>2019-06-09T09:05:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>회사 업무중 스프링 서비스 코드 푸시를 하였습니다.</p><p>다른 팀원들에게</p><blockquote><p>인터페이스를 파라미터로 정의한것은 확인하였는데,<br/><br>혹시 해당 컨트롤러에 주입은 어디에서 되나요?&#96;</p></blockquote><p>라는 질문을 들었습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">YourController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> YourService yourService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위와같이 컨트롤러가 선언되어있었습니다.(물론 예제입니다.)</p><span id="more"></span><p>해당 클래스의 <code>yourService</code>에 <code>YourServiceImpl(인터페이스 구현체)</code>는 어떻게 주입이 되는걸까요?</p><p>아직도 스프링의 <code>Application Context</code>에 의한 DI(의존성 주입)가 저는 이해하기 어려운것 같습니다.</p><p>인터페이스의 구현체가 Service 어노테이션을 사용해서 <code>Application Context</code>에 의해 관리되는 <code>Bean</code>으로 등록되면,</p><p>해당 인터페이스에 자동으로 주입이됩니다<br/><br>(이 부분은 정말 신기하다고 생각합니다.<br/><br><del>제가 PHP 개발자이고, Laravel 프레임워크의 간결함과 모던함을 좋아하는데,<br/><br>이렇게까지 사용해본적이 없어,<br/><br>해당 프레임워크 뿐 아니라, 다른 언어나 프레임워크에서도 이와같이 주입이 되는지 확답을 쓸 수 없습니다.</del><br>)</p><hr><p>2019.06.09 추가 :</p><p><a href="https://ko.wikipedia.org/wiki/%EC%9D%98%EC%A1%B4%EC%84%B1_%EC%A3%BC%EC%9E%85">의존성 주입</a></p><blockquote><p>의존성 주입(Dependency Injection, DI)은 프로그래밍에서 구성요소간의 의존 관계가 소스코드 내부가 아닌 외부의 설정파일 등을 통해 정의되게 하는 디자인 패턴 중의 하나이다.</p></blockquote><p>DI는 그저 디자인 패턴으로 어디에서든 구현 가능합니다.<br/><br>예시로 <a href="https://laravel.kr/docs/5.8/container#%EC%9E%90%EB%8F%99%20%EC%A3%BC%EC%9E%85">Laravel 5.8 - 자동주입</a>과 같이<br>다른 프레임워크에서도 스프링처럼 DI가 구현되어 있습니다.</p><hr><p>일반적으로 해당 클래스에 구현체를 주입하기 위해서는</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * controller/YourController.java</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">YourController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> YourService yourService;</span><br><span class="line">    </span><br><span class="line">    YouController(YourServiceImpl yourService) &#123;</span><br><span class="line">        <span class="built_in">this</span>.yourService = yourService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * service/YourService.java</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">YourService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">whatYouCall</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * service/impl/YourServiceImpl.java</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">YourServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">YourService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">whatYouCall</span><span class="params">()</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위와 같이 구현했을것입니다.</p><p>클래스에 <code>YourService</code>라는 Interface를 프로퍼티로 선언한 후,<br/><br>해당 클래스에 <code>YourSericeImpl</code>을 주입하여 주는것이죠.</p><p>일반적으로 제가 생각하는 방식 또한 위와 같으나,<br/><br><code>Spring Framework</code>는 해당 클래스에 <code>Spring Bean</code>을 주입해줍니다.(????)</p><p><code>@Service</code> 어노테이션을 이용하여 <code>YourServiceImpl</code> 클래스는 <code>YourService</code>의 구현체로 스프링어플리케이션의 빈에 등록이 됩니다.<br/><br>더불어, 스프링의 DI에 의해 YourService에 주입될 때는 해당 인터페이스의 구현체가 주입이 되게 되죠…..</p><p>같은 인터페이스의 구현체가 여러개일 경우는 어떻게 해야할까요?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 위의 코드와 같이 구현 클래스를 주입 받는 걸로 바꾼다.</span><br><span class="line">2. `@Qualifier` 어노테이션을 이용한다.</span><br><span class="line">3. 스프링 빈의 네임 기반으로 해야한다.</span><br></pre></td></tr></table></figure><p>제가 아는 방안은 위와 같은 세가지 방안입니다.<br/><br>(해당 부분을 가르쳐주신 <a href="https://jheloper.github.io/">@jhkim</a>님 감사합니다)</p><hr><p>위와 같은 개념을 이해하였다면 Lombok을 사용하여 해당 부분을 더 간소화 시킬 수 있습니다.</p><p><code>@RequiredArgsConstructor</code>은 어떻게 동작할까요?</p><p>해당 어노테이션 인터페이스의 주석을 보면 이와 같습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Generates a constructor with required arguments.</span><br><span class="line">Required arguments are <span class="keyword">final</span> fields and fields with constraints such as &#123;<span class="meta">@code</span> <span class="meta">@NonNull</span>&#125;.</span><br></pre></td></tr></table></figure><p>위의 주석에 따르면 <code>final</code>로 선언된 필드를 매개변수로 갖는 생성자를 자동 생성하여줍니다.</p><p><a href="https://hodory.github.io/2019/05/28/required-a-bean-of-type-that-could-not-be-found/">이전의 실수 - AllArgsConstructor의 잘못된 사용</a>를 통해 배울 수 있던 부분입니다.</p><p><code>@RequiredArgsConstructor</code> 어노테이션과 함께 <br/><br><code>private final YourService yourService;</code> 이와 같이 선언 할 경우,<br/><br>해당 코드는 컴파일시 아래와 같이 변환됩니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">YourController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> YourService yourService;</span><br><span class="line">    </span><br><span class="line">    YouController(YourService yourService) &#123;</span><br><span class="line">        <span class="built_in">this</span>.yourService = yourService;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위에서 본 코드와 유사해지는데요</p><p>이와 같이 Lombok 어노테이션은 생성자를 직접 만들어주기때문에 간결한 코드를 유지할 수 있습니다.</p><p>허나 위의 코드와 다른점은 <code>YourService</code>를 생성자의 파라미터 타입으로 주느냐, <code>YourServiceImpl</code>을 생성자 파라미터 타입으로 주느냐의 차이인데</p><p>위에 언급한바와 같이, 스프링 DI는 스프링 빈에 등록된 클래스를 주입합니다.</p><p>고로, <code>YourService</code> 타입이지만, <code>YourServiceImpl</code> 클래스가 해당 인터페이스를 구현한 구현체이며, 스프링빈으로 등록되어 있기 때문에,<br/><br>해당 클래스가 주입이됩니다.  </p><hr><p>포스팅의 잘못된 부분이 있다면 코멘트 또는 메일로 보내주시면<br/><br>부족한 부분은 보완하고, 틀린 부분은 수정하겠습니다<br/><br>아직 프로그래밍에 서툴어서 제가 이해한 개념과 다를 수 있는데, 많은 도움 부탁드리겠습니다.</p><p>끝으로 긴 글을 읽어주셔서 감사합니다.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;회사 업무중 스프링 서비스 코드 푸시를 하였습니다.&lt;/p&gt;
&lt;p&gt;다른 팀원들에게&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;인터페이스를 파라미터로 정의한것은 확인하였는데,&lt;br/&gt;&lt;br&gt;혹시 해당 컨트롤러에 주입은 어디에서 되나요?&amp;#96;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;라는 질문을 들었습니다.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@RestController&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Slf4j&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@RequiredArgsConstructor&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;YourController&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; YourService yourService;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;위와같이 컨트롤러가 선언되어있었습니다.(물론 예제입니다.)&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://blog.hodory.dev/categories/Java/"/>
    
    <category term="SpringBoot" scheme="https://blog.hodory.dev/categories/Java/SpringBoot/"/>
    
    
    <category term="Java" scheme="https://blog.hodory.dev/tags/Java/"/>
    
    <category term="SpringBoot" scheme="https://blog.hodory.dev/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>［Java］@JsonProperty이 왜 동작을 안하지?</title>
    <link href="https://blog.hodory.dev/2019/06/04/json-property-not-working/"/>
    <id>https://blog.hodory.dev/2019/06/04/json-property-not-working/</id>
    <published>2019-06-04T14:13:03.000Z</published>
    <updated>2022-08-10T16:39:59.885Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">anonymousDTO</span> &#123;</span><br><span class="line">    String whatYouWant;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>대부분 자바의 변수를 생성할때 위와 같이 CamelCase를 많이 쓰는것으로 알고있습니다…..(본인이 잘못 생각하는것일 수 있습니다.)</p><p>필자 또한 위와 같이 <code>camelCase</code>를 사용하였으나 API 통신 및 응답을 리턴할때에는<br/><br><code>hyphen uppercase</code>가 필요했습니다.</p><span id="more"></span><p>위의 조건을 충족하기 위해 적절한 어노테이션을 찾았는데,<br/><br><code>@JsonProperty(&quot;&#123;WHAT_YOU_WANT&#125;&quot;)</code>였습니다.</p><p>json으로 매핑할때 <code>WHAT_YOU_WANT</code>에 들어갈 값으로 해당 프로퍼티를 매핑하는것이였습니다.</p><p>테스트 코드를 작성하여 확인해보았지만 정상 동작하지 않아,</p><p>주위의 도움을 받았는데,<br/><br><code>getter</code>메소드에 해당 어노테이션을 작성해야한다는 조언도 있었으며,<br/><br><code>compile group: &#39;com.fasterxml.jackson.core&#39;, name: &#39;jackson-databind&#39;</code><br/><br>해당 라이브러리를 gradle에 추가하여 jackson 라이브러리를 최신화 할 필요가 있다는 조언을 받았습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">anonymousDTO</span> &#123;</span><br><span class="line">    <span class="meta">@JsonProperty(&quot;WHAT-YOU-WANT&quot;)</span></span><br><span class="line">    String whatYouWant;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">anonymousDTO</span> &#123;</span><br><span class="line">    String whatYouWant;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@JsonProperty(&quot;WHAT-YOU-WANT&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getWhatYouWant</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.whatYouWant;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>많은 주위의 도움을 받아 위와 같이 두가지 방법을적용해 보았으나, 기대하는 결과를 얻을 수 없었습니다.<br/><br>(에러나 Exception은 발생하지 않았으나, 요청에 대한 응답을 모델에 매핑하였으나, Null 값이 해당 프로퍼티에 매핑되었습니다.)</p><p>오랜 삽질 끝에 얻은 결과는<br/><br>제가 요청에 대한 json Object 응답을 <code>Gson</code>을 이용하여 해당타입으로 받았는데,<br>jackson의 json object로 매핑하였고, jackson의 어노테이션인 <code>@JsonProperty</code>가 기대와 다르게 동작하여,<br>검색하였는데 <code>@SerializedName</code> 어노테이션으로 해결할 수 있다는 StackOverFlow에서의 답변이였습니다.</p><p>그리하여 해당 코드를 이와같이 변경하였습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">anonymousDTO</span> &#123;</span><br><span class="line">    <span class="meta">@SerializedName(&quot;WHAT-YOU-WANT&quot;)</span></span><br><span class="line">    String whatYouWant;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Gson을 이용할 때에는 <code>@SerializedName</code>을 사용해야하고 jackson을 사용할때에는 <code>@JsonProperty</code>를 사용해야 한다는데<br/><br>레거시 PHP와 JS를 좋아하는 저로써는 똑같은 json object 이고, 사실상 <code>JsonObject</code>라는 타입인데,<br/><br>Gson의 json 이냐 jackson의 json이냐에 따라 다른 어노테이션을 써야한다는게 이해하기 어려웠습니다.</p><p>지난번, 어노테이션을 사용할때에도 해당 어노테이션이 어떻게 동작하는지 유의를 하며 써야겠다고 다짐했으나,<br/><br>결국 빠른 결과물과 편리함을 추구하다보니, 많이 사용하는 어노테이션을 그저 가져다 쓰는데에만 중점을 두었습니다.</p><p>제가 여태까지 사용해온 레거시 php 나 js는 이와 같은 강타입 언어가 아니다보니, 해당 어노테이션도 없을 뿐만 아니라,<br/><br>그저 모델 클래스를 만들 필요없이 변수에 담을 수 있었는데,<br/><br>이러한 부분이 어렵기도 하고, 긍정적인 시각으로 바라보았을때는 어느정도 타입체킹이 되고, 개발자 입장에선 복잡도는 증가하지만,<br/><br>조금 더 안정적이지 않을까 싶기도 합니다.</p><p>물론 제가 다른 대안으로 생각하는 <code>TypeScript</code>와 <code>PHP v7.x</code>도 있지만요…</p>]]></content>
    
    
    <summary type="html">&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;anonymousDTO&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    String whatYouWant;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;대부분 자바의 변수를 생성할때 위와 같이 CamelCase를 많이 쓰는것으로 알고있습니다…..(본인이 잘못 생각하는것일 수 있습니다.)&lt;/p&gt;
&lt;p&gt;필자 또한 위와 같이 &lt;code&gt;camelCase&lt;/code&gt;를 사용하였으나 API 통신 및 응답을 리턴할때에는&lt;br/&gt;&lt;br&gt;&lt;code&gt;hyphen uppercase&lt;/code&gt;가 필요했습니다.&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://blog.hodory.dev/categories/Java/"/>
    
    <category term="SpringBoot" scheme="https://blog.hodory.dev/categories/Java/SpringBoot/"/>
    
    
    <category term="Java" scheme="https://blog.hodory.dev/tags/Java/"/>
    
    <category term="SpringBoot" scheme="https://blog.hodory.dev/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>［Java］@AllArgsConstructor의 잘못된 사용</title>
    <link href="https://blog.hodory.dev/2019/05/28/required-a-bean-of-type-that-could-not-be-found/"/>
    <id>https://blog.hodory.dev/2019/05/28/required-a-bean-of-type-that-could-not-be-found/</id>
    <published>2019-05-28T14:29:30.000Z</published>
    <updated>2022-08-10T16:39:59.885Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Consider-defining-a-bean-of-type-java-lang-String-in-your-configuration"><a href="#Consider-defining-a-bean-of-type-java-lang-String-in-your-configuration" class="headerlink" title="Consider defining a bean of type java.lang.String in your configuration."></a>Consider defining a bean of type java.lang.String in your configuration.</h1><p>스프링부트로 서비스를 개발중에 <code>@Value</code> 어노테이션을 이용하여 application.yml 파일에 저장해둔 환경변수에 접근하고 싶었는데,<br/><br>아래와 같은 오류가 발생하였습니다. </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Parameter 2 of constructor in com.hodory.v1.service.MyService required a bean of type &#x27;java.lang.String&#x27; that could not be found.</span><br><span class="line"></span><br><span class="line">Consider defining a bean of type &#x27;java.lang.String&#x27; in your configuration.</span><br></pre></td></tr></table></figure><span id="more"></span><p>Retrofit을 사용하기위해 apiBaseUrl을 가져오려 작성한 코드는 아래와 같습니다. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MyRepository myRepository;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ModelMapper modelMapper;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;config.endpoint.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serviceUrl;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>필드에 <code>@Autowired</code>를 사용하는것은 권장하지 않는다는 IDE에서 나오는 메세지때문에 이 방식은 사용하지 않았습니다.</p><p>생성자를 이용한 주입이 아닌 <code>@AllArgsConstructor</code> 어노테이션을 사용한 이유는<br/><br>이전에 사용하였을때, 생성자를 이용해 직접 주입하는 방식보다, 의존성 주입 할 대상이 많아졌을때 훨씬 더 깔끔하였던 경험이 있어,<br/><br>해당 어노테이션을 사용하였습니다.</p><p><code>private String serviceUrl</code> 을 추가하고나서부터 해당 오류가 나타났습니다.</p><p>한참을 고민하다가 팀원들의 도움을 받아 원인을 알게 되었는데,</p><p><code>serviceUrl</code>이라는 값은 <code>String</code> 타입의 변수일 뿐, 스프링에서 관리하는 Bean이 아니기 때문에 의존성 자동 주입이 될 수 없다는것이였습니다.</p><p><code>@Value</code>를 사용하면 자동 주입이 되는줄 알았는데, 제가 생각했던것과 달랐습니다.</p><p>아래와 같이 스프링 애플리케이션에 의해 자동 주입 가능한 필드들을 파라미터로 가진 생성자를 만들어 필드에 매핑하도록 수정 하였더니,<br/><br>오류 없이 serviceUrl에 application.yml파일에 있던 url도 설정 되어 있었습니다. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MyRepository myRepository;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ModelMapper modelMapper;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;config.endpoint.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serviceUrl;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyService</span><span class="params">(MyRepository repository, ModelMapper modelMapper)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.myRepository = repository;</span><br><span class="line">        <span class="built_in">this</span>.modelMapper = modelMapper;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위와 같이 생성자에 직접 필요한 Bean들을 명시하여 주입 하는 방식 말고도<br/><br>기존 코드에서 <code>@AllArgsConstructor</code> 대신 <code>@RequiredArgsConstructor</code> 어노테이션을 사용하기만 하면,<br/><br><code>final</code>로 선언된 필드나 <code>@NonNull</code> 어노테이션을 사용한 필드만을 필요로 하는 생성자를 만들어주기 때문에,<br/><br>이 경우에는 원하는 결과를 얻을 수 있었습니다.</p><p>자바에도 익숙 하지 않고, 의존성 주입이라는 개념에 대해 익숙하지 않은데,<br/><br>원리를 파악하지 않고, 남들을 따라하는 기존의 자세에 반성하는 계기가 되었으며,</p><p>어노테이션을 사용 할 때 해당 어노테이션이 해주는 기능만 파악 하는 것 만큼<br/><br>어떻게 동작하는지(예를 들어 <code>lombok</code>의 경우 어떤 코드를 생성 해주는지)등을 유의하며 사용해야겠다고 느꼈습니다.</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Consider-defining-a-bean-of-type-java-lang-String-in-your-configuration&quot;&gt;&lt;a href=&quot;#Consider-defining-a-bean-of-type-java-lang-String-in-your-configuration&quot; class=&quot;headerlink&quot; title=&quot;Consider defining a bean of type java.lang.String in your configuration.&quot;&gt;&lt;/a&gt;Consider defining a bean of type java.lang.String in your configuration.&lt;/h1&gt;&lt;p&gt;스프링부트로 서비스를 개발중에 &lt;code&gt;@Value&lt;/code&gt; 어노테이션을 이용하여 application.yml 파일에 저장해둔 환경변수에 접근하고 싶었는데,&lt;br/&gt;&lt;br&gt;아래와 같은 오류가 발생하였습니다. &lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Parameter 2 of constructor in com.hodory.v1.service.MyService required a bean of type &amp;#x27;java.lang.String&amp;#x27; that could not be found.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Consider defining a bean of type &amp;#x27;java.lang.String&amp;#x27; in your configuration.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Java" scheme="https://blog.hodory.dev/categories/Java/"/>
    
    <category term="SpringBoot" scheme="https://blog.hodory.dev/categories/Java/SpringBoot/"/>
    
    
    <category term="Java" scheme="https://blog.hodory.dev/tags/Java/"/>
    
    <category term="SpringBoot" scheme="https://blog.hodory.dev/tags/SpringBoot/"/>
    
    <category term="Lombok" scheme="https://blog.hodory.dev/tags/Lombok/"/>
    
    <category term="Annotation" scheme="https://blog.hodory.dev/tags/Annotation/"/>
    
  </entry>
  
  <entry>
    <title>［Java］스프링부트 회원 기존 비밀번호 체크하기</title>
    <link href="https://blog.hodory.dev/2019/05/14/spring-boot-validate-user-old-password/"/>
    <id>https://blog.hodory.dev/2019/05/14/spring-boot-validate-user-old-password/</id>
    <published>2019-05-14T06:42:32.000Z</published>
    <updated>2022-08-10T16:39:59.885Z</updated>
    
    <content type="html"><![CDATA[<p>회원 비밀번호 변경 로직을 작성중에 현재 비밀번호와 새 비밀번호를 입력받아,<br/><br>기존 비밀번호가 맞는지 체크하는 로직을 넣고 싶었습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">currentPassword</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>().encode(request.getCurrentPassword());</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="type">User</span> <span class="variable">persistUser</span> <span class="operator">=</span> userRepository.findUserByIdAndPassword(userId, currentPassword)</span><br><span class="line">        .orElseThrow(() -&gt; <span class="keyword">new</span> <span class="title class_">EntityNotFoundException</span>(<span class="string">&quot;회원정보를 찾을 수 없습니다.&quot;</span>));</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span>(!currentPassword.equals(persistUser.getPassword())) &#123;</span><br><span class="line">    logger.info(<span class="string">&quot;changePassword is Not Equal Current Password&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(UserRegisterResult.ERROR.getResponseBody(),</span><br><span class="line">            HttpStatus.FORBIDDEN);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>new BCryptPasswordEncoder().encode(password);</code>로 암호화 한 패스워드를 저장했기 때문에,<br/><br>회원을 찾을때도 이렇게 하면 되겠다고 생각해서 위와 같은 코드를 작성하였는데,<br/><br>테스트중 계속하여 <code>EntityNotFoundException</code>이 발생하였습니다.</p><p>디버깅으로 체크하였더니 <code>String currentPassword = new BCryptPasswordEncoder().encode(request.getCurrentPassword());</code> 부분에서 매번 다른 비밀번호가 currentPassword에 들어갔습니다.</p><p>왜 다른 값이 나오는지 알고 싶어 <code>BCryptPasswordEncoder</code> 클래스 파일을 열어보았는데,</p><p>encode 부분에서 <code>rawPassword</code> 와 <code>salt</code>값을 생성하여 두개의 값으로 패스워드를 해싱하고 있었습니다.</p><p>해당 클래스 파일안에 <code>matches(CharSequence rawPassword, String encodedPassword)</code>라는 함수가 있었고,</p><p>클래스의 인터페이스를 확인하였더니,</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Verify the encoded password obtained from storage matches the submitted raw</span><br><span class="line"> * password after it too is encoded. Returns true if the passwords match, false if</span><br><span class="line"> * they do not. The stored password itself is never decoded.</span><br><span class="line"> *</span><br><span class="line"> * @param rawPassword the raw password to encode and match</span><br><span class="line"> * @param encodedPassword the encoded password from storage to compare with</span><br><span class="line"> * @return true if the raw password, after encoding, matches the encoded password from</span><br><span class="line"> * storage</span><br><span class="line"> */</span><br><span class="line">boolean matches(CharSequence rawPassword, String encodedPassword);</span><br></pre></td></tr></table></figure><p>라는 주석을 확인하였고, 구현체가 아닌 인터페이스를 사용하고자<br><code>org.springframework.security.crypto.password.PasswordEncoder</code> 를 의존성 주입하여,</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">User</span> <span class="variable">persistUser</span> <span class="operator">=</span> userRepository.findById(userId)</span><br><span class="line">                .orElseThrow(() -&gt; <span class="keyword">new</span> <span class="title class_">EntityNotFoundException</span>(<span class="string">&quot;회원정보를 찾을 수 없습니다.&quot;</span>));</span><br><span class="line"><span class="keyword">if</span>(!passwordEncoder</span><br><span class="line">                .matches(request.getCurrentPassword(), persistUser.getPassword())) &#123;</span><br><span class="line">    logger.info(<span class="string">&quot;changePassword is Not Equal Current Password&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(UserRegisterResult.ERROR.getResponseBody(),</span><br><span class="line">            HttpStatus.FORBIDDEN);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이와 같이 수정하였고, 기대했던 결과대로 수행되었습니다.</p><p>아직 자바와 스프링이 많이 서툴러서 코드를 작성하는 시간보다 검색해보는 시간이 많아 더 어려운거 같습니다.</p><p>잘못된 부분이 있다면 코멘트 부탁드리겠습니다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;회원 비밀번호 변경 로직을 작성중에 현재 비밀번호와 새 비밀번호를 입력받아,&lt;br/&gt;&lt;br&gt;기존 비밀번호가 맞는지 체크하는 로직을 넣고 싶었습니다.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.hodory.dev/categories/Java/"/>
    
    <category term="SpringBoot" scheme="https://blog.hodory.dev/categories/Java/SpringBoot/"/>
    
    
    <category term="Java" scheme="https://blog.hodory.dev/tags/Java/"/>
    
    <category term="SpringBoot" scheme="https://blog.hodory.dev/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>［JS］jQuery 없이 Selectbox에서 여러개 선택된 option의 값 추출하기</title>
    <link href="https://blog.hodory.dev/2019/05/12/how-to-get-multiple-selected-options-with-vanillajs/"/>
    <id>https://blog.hodory.dev/2019/05/12/how-to-get-multiple-selected-options-with-vanillajs/</id>
    <published>2019-05-12T05:29:38.000Z</published>
    <updated>2022-08-10T16:39:59.885Z</updated>
    
    <content type="html"><![CDATA[<p>DOM을 다룰때 jQuery를 사용하면 매우 편리합니다.</p><p>물론 크로스 브라우저 이슈로도 제이쿼리를 많이 사용합니다.</p><p>하지만 DOM을 핸들링하기 위해서만 jQuery를 쓴다면, 편리함은 챙기겠지만 낭비 아닐까싶습니다.</p><p>저는 위와 같은 생각으로,<br/><br>주로 DOM 핸들링에는 jQuery 의존성을 줄이고자 순수 자바스크립트를 사용하려 노력하고 있습니다.</p><p>또한, <code>document.querySelector</code>와 <code>document.querySelectorAll</code> 를 이용한다면,<br/><br>jQuery에서 사용하던 복잡한 DOM Selector도 쉽게 사용할 수 있습니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user[]&quot;</span> <span class="attr">multiple</span>=<span class="string">&quot;multiple&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>선택<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;foo&quot;</span>&gt;</span>Foo<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;bar&quot;</span>&gt;</span>Bar<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;baz&quot;</span>&gt;</span>Baz<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>위와 같은 Multiple SelectBox에서 여러개가 선택되었을 경우 값을 어떻게 가져올까요? </p><p>jQuery를 사용하면 <code>$(&quot;#user&quot;).val()</code>으로 짧고 간결하게 가져올 수 있습니다.</p><p>선택된 값이 없을 경우 null이 리턴되고, 선택된 값이 있으면 배열 안에 value 값이 담깁니다. </p><p>그렇다면 순수 자바스크립트로는 어떻게 표현할까요?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#user&quot;</span>).<span class="property">selectedOptions</span>, <span class="function">(<span class="params">item</span>)=&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> item.<span class="property">value</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>document.querySelector(&quot;#user&quot;).selectedOptions</code>를 사용하면 ID 값이 user인 DOM을 찾아 selected 된 옵션을 리턴하여줍니다.<br/><br>해당 값에서 value 값만 뽑고싶다면 위와 같이 처리할 수 있습니다.</p><p>위와 같이 처리하면 jQuery를 사용할때와 다른점은 선택된 옵션이 없을 경우에는 []를 리턴하여 줍니다.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;DOM을 다룰때 jQuery를 사용하면 매우 편리합니다.&lt;/p&gt;
&lt;p&gt;물론 크로스 브라우저 이슈로도 제이쿼리를 많이 사용합니다.&lt;/p&gt;
&lt;p&gt;하지만 DOM을 핸들링하기 위해서만 jQuery를 쓴다면, 편리함은 챙기겠지만 낭비 아닐까싶습니다.&lt;/p</summary>
      
    
    
    
    <category term="Javascript" scheme="https://blog.hodory.dev/categories/Javascript/"/>
    
    
    <category term="Javascript" scheme="https://blog.hodory.dev/tags/Javascript/"/>
    
    <category term="JS" scheme="https://blog.hodory.dev/tags/JS/"/>
    
    <category term="Webpack" scheme="https://blog.hodory.dev/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>［PHP］Monolog와 함께 로그를 시작하자 - 1</title>
    <link href="https://blog.hodory.dev/2019/05/09/php-logging-with-monolog-1/"/>
    <id>https://blog.hodory.dev/2019/05/09/php-logging-with-monolog-1/</id>
    <published>2019-05-09T15:27:05.000Z</published>
    <updated>2022-08-10T16:39:59.885Z</updated>
    
    <content type="html"><![CDATA[<h3 id="PHP에서-로그-남기기"><a href="#PHP에서-로그-남기기" class="headerlink" title="PHP에서 로그 남기기"></a>PHP에서 로그 남기기</h3><p>PHP에서는 주로 JS에서 <code>console.log | console.debug</code> 와 유사하게 <br/><br><code>var_dump | print_r | echo | sys_log | error_log</code> 등 다양한 방식으로 로그를 남기고 있습니다.</p><h3 id="Monolog란"><a href="#Monolog란" class="headerlink" title="Monolog란?"></a>Monolog란?</h3><p><a href="https://hodory.github.io/2018/04/18/what-is-psr/#PSR-3-Logger-Interface">PSR-3</a>을 준수하고 있는 로깅 프레임워크로,<br/><br>거의 대부분의 로깅 플랫폼과 연결할 수 있는 핸들러(Slack, ElasticSearch, Mail, NewRelic 등)를 제공하고 있습니다.</p><p><a href="http://tools.ietf.org/html/rfc5424">RFC 5424</a>(Syslog Protocol이라고 하는데 더 공부해봐야할 것 같습니다.)에 정의된 로그 레벨을 모두 지원하고 있습니다.</p><ul><li>DEBUG(100)</li><li>INFO(200)</li><li>NOTICE(250)</li><li>WARNING(300)</li><li>ERROR(400)</li><li>CRITICAL(500)</li><li>ALERT(550)</li><li>EMERGENCY(600)</li></ul><span id="more"></span><h3 id="코어-컨셉"><a href="#코어-컨셉" class="headerlink" title="코어 컨셉"></a><a href="https://github.com/Seldaek/monolog/blob/master/doc/01-usage.md#core-concepts">코어 컨셉</a></h3><p>간단하게 Logger Instance에 Record를 추가하면,<br/><br>해당 인스턴스에 추가 해두었던 핸들러에 이벤트를 전파하는 것으로 보입니다.(한개의 로그를 여러곳에 저장할 수 있는 이점을 가지고 있습니다.)</p><h3 id="설치-방법"><a href="#설치-방법" class="headerlink" title="설치 방법"></a>설치 방법</h3><p>PHP Composer로 관리할 수 있는 라이브러리이므로 Composer를 이용하여 설치합니다.</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer <span class="keyword">require</span> monolog/monolog</span><br></pre></td></tr></table></figure><h3 id="사용방법"><a href="#사용방법" class="headerlink" title="사용방법"></a>사용방법</h3><p>우선적으로 use를 사용하여 사용할 Namespace를 추가합니다.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">Monolog</span>\<span class="title">Logger</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Monolog</span>\<span class="title">Handler</span>\<span class="title">StreamHandler</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Monolog</span>\<span class="title">Handler</span>\<span class="title">FirePHPHandler</span>;</span><br></pre></td></tr></table></figure><p>Logging Channel의 이름을 설정하여 객체를 생성합니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// Create the logger</span><br><span class="line">$logger = new Logger(&#x27;Application&#x27;);</span><br></pre></td></tr></table></figure><p>로그를 전파할 핸들러를 추가합니다.</p><ul><li>php:stderr 또는 원격이나 로컬 파일 기타에 사용할 <code>Stream Handler</code>를 설정합니다.</li><li>Slack Webhook Url으로 보내기 위해 <code>Slack WebHook Handler</code>를 설정합니다.</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Now add some handlers</span></span><br><span class="line"><span class="variable">$logger</span>-&gt;<span class="title function_ invoke__">pushHandler</span>(<span class="keyword">new</span> <span class="title class_">StreamHandler</span>(<span class="keyword">__DIR__</span> . <span class="string">&#x27;/app.log&#x27;</span>, <span class="title class_">Logger</span>::<span class="variable constant_">DEBUG</span>));</span><br><span class="line"><span class="variable">$logger</span>-&gt;<span class="title function_ invoke__">pushHandler</span>(<span class="keyword">new</span> <span class="title class_">SlackWebhookHandler</span>(&#123;&#123;WEBHOOK_URL&#125;&#125;, &#123;&#123;CHANNEL&#125;&#125;, &#123;&#123;USERNAME&#125;&#125;, <span class="literal">false</span>, <span class="literal">null</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="title class_">Logger</span>::<span class="variable constant_">INFO</span>));</span><br></pre></td></tr></table></figure><p>아래와 같은 함수를 호출하여 로그를 쌓을 수 있습니다.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// You can now use your logger</span></span><br><span class="line"><span class="variable">$logger</span>-&gt;<span class="title function_ invoke__">info</span>(<span class="string">&#x27;Welcome To Monolog&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*********</span></span><br><span class="line"><span class="comment"> * app.log</span></span><br><span class="line"><span class="comment"> *********/</span></span><br><span class="line"><span class="comment">// [2019-05-10 17:03:10] Application.INFO: Welcome To Monolog [] []</span></span><br></pre></td></tr></table></figure><p>Legacy한 프로젝트에서는 주로 컨테이너 객체라는 개념이 없는 경우가 많은데,<br/><br>프로젝트 내부에서도 글로벌 변수에 담아서 Logger 객체를 사용해야하나 고민하였습니다.<br>문서를 확인하다보니 이를 위한 <code>Monolog\Registry</code>라는 유틸 클래스가 있었고,<br>이와 같이 사용할 수 있습니다.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/****************</span></span><br><span class="line"><span class="comment"> * bootstrap.php</span></span><br><span class="line"><span class="comment"> ****************/</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">Monolog</span>\<span class="title">Handler</span>\<span class="title">StreamHandler</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Monolog</span>\<span class="title">Logger</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Monolog</span>\<span class="title">Registry</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$logger</span> = <span class="keyword">new</span> <span class="title class_">Logger</span>(<span class="string">&#x27;Application&#x27;</span>);</span><br><span class="line"><span class="variable">$logger</span>-&gt;<span class="title function_ invoke__">pushHandler</span>(<span class="keyword">new</span> <span class="title class_">StreamHandler</span>(<span class="keyword">__DIR__</span> . <span class="string">&#x27;/app.log&#x27;</span>, <span class="title class_">Logger</span>::<span class="variable constant_">DEBUG</span>));</span><br><span class="line"><span class="title class_">Registry</span>::<span class="title function_ invoke__">addLogger</span>(<span class="variable">$logger</span>,<span class="string">&#x27;ApplicationLog&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/****************</span></span><br><span class="line"><span class="comment"> * foo.php</span></span><br><span class="line"><span class="comment"> ****************/</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">Monolog</span>\<span class="title">Registry</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">&quot;/bootstrap.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logInfo</span>(<span class="params"><span class="variable">$message</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$logger</span> = <span class="title class_">Registry</span>::<span class="title function_ invoke__">getInstance</span>(<span class="string">&#x27;ApplicationLog&#x27;</span>);</span><br><span class="line">    <span class="variable">$logger</span>-&gt;<span class="title function_ invoke__">info</span>(<span class="variable">$message</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">logInfo</span>(<span class="string">&#x27;I am Global Logging&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*********</span></span><br><span class="line"><span class="comment"> * app.log</span></span><br><span class="line"><span class="comment"> *********/</span></span><br><span class="line"><span class="comment">// [2019-05-10 17:03:10] Application.INFO: I am Global Logging [] []</span></span><br></pre></td></tr></table></figure><p>이와 같이 bootstrap.php 파일에서 Register에 등록한 Logger 객체는<br/><br>global 변수를 사용하지 않아도 클래스 &#x2F; 함수 상관 없이 어디에서든지 사용 가능해집니다.</p><p>더 좋은 활용 방법이 있으시다면 공유 부탁드리겠습니다.</p><p>자세한 사항은 <a href="https://github.com/Seldaek/monolog/blob/master/doc/01-usage.md">Monolog-Usage</a>에서 확인 하실 수 있습니다.</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;PHP에서-로그-남기기&quot;&gt;&lt;a href=&quot;#PHP에서-로그-남기기&quot; class=&quot;headerlink&quot; title=&quot;PHP에서 로그 남기기&quot;&gt;&lt;/a&gt;PHP에서 로그 남기기&lt;/h3&gt;&lt;p&gt;PHP에서는 주로 JS에서 &lt;code&gt;console.log | console.debug&lt;/code&gt; 와 유사하게 &lt;br/&gt;&lt;br&gt;&lt;code&gt;var_dump | print_r | echo | sys_log | error_log&lt;/code&gt; 등 다양한 방식으로 로그를 남기고 있습니다.&lt;/p&gt;
&lt;h3 id=&quot;Monolog란&quot;&gt;&lt;a href=&quot;#Monolog란&quot; class=&quot;headerlink&quot; title=&quot;Monolog란?&quot;&gt;&lt;/a&gt;Monolog란?&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://hodory.github.io/2018/04/18/what-is-psr/#PSR-3-Logger-Interface&quot;&gt;PSR-3&lt;/a&gt;을 준수하고 있는 로깅 프레임워크로,&lt;br/&gt;&lt;br&gt;거의 대부분의 로깅 플랫폼과 연결할 수 있는 핸들러(Slack, ElasticSearch, Mail, NewRelic 등)를 제공하고 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://tools.ietf.org/html/rfc5424&quot;&gt;RFC 5424&lt;/a&gt;(Syslog Protocol이라고 하는데 더 공부해봐야할 것 같습니다.)에 정의된 로그 레벨을 모두 지원하고 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DEBUG(100)&lt;/li&gt;
&lt;li&gt;INFO(200)&lt;/li&gt;
&lt;li&gt;NOTICE(250)&lt;/li&gt;
&lt;li&gt;WARNING(300)&lt;/li&gt;
&lt;li&gt;ERROR(400)&lt;/li&gt;
&lt;li&gt;CRITICAL(500)&lt;/li&gt;
&lt;li&gt;ALERT(550)&lt;/li&gt;
&lt;li&gt;EMERGENCY(600)&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="PHP" scheme="https://blog.hodory.dev/categories/PHP/"/>
    
    
    <category term="PHP" scheme="https://blog.hodory.dev/tags/PHP/"/>
    
    <category term="Composer" scheme="https://blog.hodory.dev/tags/Composer/"/>
    
    <category term="Packagist" scheme="https://blog.hodory.dev/tags/Packagist/"/>
    
    <category term="LogSystem" scheme="https://blog.hodory.dev/tags/LogSystem/"/>
    
  </entry>
  
  <entry>
    <title>［Laravel］with() | has() | whereHas() 뭐가 다를까</title>
    <link href="https://blog.hodory.dev/2019/04/26/eloquent-orm-with-has-where-has/"/>
    <id>https://blog.hodory.dev/2019/04/26/eloquent-orm-with-has-where-has/</id>
    <published>2019-04-26T15:15:24.000Z</published>
    <updated>2022-08-10T16:39:59.885Z</updated>
    
    <content type="html"><![CDATA[<p>ORM도 익숙하지 않지만, Eloquent ORM은 처음 접해보면서,</p><p>쿼리빌더를 사용하는것은 ORM스럽지 못하다 느껴 최대한 ORM으로 풀고 싶었습니다</p><p>검색으로 알아보던중 <a href="https://laravel.kr/docs/5.8/eloquent-relationships">Eloquent:Relations</a>에 대해 알게되었습니다.</p><p><a href="https://laravel.kr/docs/5.8/eloquent-relationships#%EA%B4%80%EA%B3%84%EC%9D%98%20%EC%A1%B4%EC%9E%AC%20%EC%97%AC%EB%B6%80%20%EC%BF%BC%EB%A6%AC%20%EC%A7%88%EC%9D%98%ED%95%98%EA%B8%B0">라라벨 공식 문서 : 관계의 존재 여부 쿼리 질의하기</a></p><p>예를들어 <code>User</code>가 여러개의 <code>Post</code> 를 가지고 있다면,<br/><br><code>User</code> 클래스에 <code>$this-&gt;hasMany(&#39;App\Post&#39;);</code>를 설정해 두었을 것이라는 가정하에 설명을 진행하도록 하겠습니다.</p><span id="more"></span> <h2 id="with"><a href="#with" class="headerlink" title="with()"></a>with()</h2><ul><li>user<ul><li>id</li><li>name</li></ul></li><li>post<ul><li>id</li><li>user_id</li><li>title<br>이와 같은 테이블 구조에서 유저가 작성한 글의 제목을 조회하려면<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$users</span> = <span class="title function_ invoke__">selectAll</span>(<span class="string">&quot;select * from `user`);</span></span><br><span class="line"><span class="string">foreach (<span class="subst">$users</span> as <span class="subst">$user</span>) &#123;</span></span><br><span class="line"><span class="string">    <span class="subst">$user</span>[&#x27;post_title&#x27;] = selectOne(&quot;</span>select `title` <span class="keyword">from</span> `post` where `post`.`user_id` = &#123;<span class="variable">$user</span>[<span class="string">&#x27;id&#x27;</span>]&#125;<span class="string">&quot;);</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>회원을 조회하고, 회원들을 순회하며 게시물을 조회하는 코드입니다.<br/><br>이 경우 회원이 1000명일 경우 쿼리는 1001번 실행하게 됩니다.<br/><br>이것을 <a href="https://zetawiki.com/wiki/N%2B1_%EC%BF%BC%EB%A6%AC_%EB%AC%B8%EC%A0%9C">N+1쿼리 문제</a> 라고 합니다.</li></ul></li></ul><p>사람들에 따라 직관적이여서 선호하기도 하고,<br/><br>join으로 실행시 쿼리가 오래 걸리면 이와 같이 분리하여 사용하기도 합니다.<br>또는 join으로 해결할 수 없는 상황에서도 사용합니다.</p><p>이 문제를 해결 하기 위해</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$users <span class="operator">=</span> selectAll(&quot;select `user`.*,`post`.`title` as post_title from `user` left join `post` on `post`.`user_id` = `user`.`id`&quot;); </span><br></pre></td></tr></table></figure><p>join으로 해결할 수 없는 경우를 제외 하고는 위와 같이 join을 사용해서 조회 할 수 있습니다.</p><p>또한 이 문제는 ORM에서 주로 발생 합니다.<br/><br>ORM을 사용하면 user와 post의 관계를 설정하고, 아래와 같이 사용할 수 있습니다.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (<span class="title class_">User</span>::<span class="title function_ invoke__">all</span>() <span class="keyword">as</span> <span class="variable">$user</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$user</span>-&gt;post-&gt;title;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>해당 코드는</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> `<span class="keyword">user</span>`; # <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6.</span>...</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> `post` <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> `post` <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> `post` <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> `post` <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>user를 조회하고, user의 수 만큼 post를 조회합니다.<br/><br>위의 N+1 문제와 같은 문제입니다.</p><p>이 문제를 해결 하기 위한 방안으로는 <a href="https://zetawiki.com/wiki/%EC%A6%89%EC%8B%9C_%EB%A1%9C%EB%94%A9">즉시 로딩(Eager Loading)</a>이 있습니다.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (<span class="title class_">User</span>::<span class="title function_ invoke__">with</span>(<span class="string">&#x27;posts&#x27;</span>)-&gt;<span class="title function_ invoke__">get</span>() <span class="keyword">as</span> <span class="variable">$user</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$user</span>-&gt;post-&gt;title;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이와같이 <code>with()</code>를 사용하면 미리 선언한 관계를 사용하여 같이 가져올수있습니다.<br/><br>언뜻 보기엔 별 다를바 없어 보이는 코드이지만 with 메소드를 사용하면, user와 연관된 post를 미리 로드합니다.</p><p>실행되는 쿼리는 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> `<span class="keyword">user</span>`; # <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6.</span>...</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> `post` <span class="keyword">where</span> `id` <span class="keyword">in</span> (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, ...);</span><br></pre></td></tr></table></figure><p>위와 같이 쿼리 2개만 실행이 되어 쿼리 실행을 최소화 할 수 있습니다.</p><p><code>with()</code> 메소드의 2번째 파라미터를 사용해 제한 할 수도 있습니다.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(<span class="title class_">User</span>::<span class="title function_ invoke__">with</span>([<span class="string">&#x27;posts&#x27;</span> =&gt; function (<span class="variable">$query</span>) &#123;</span><br><span class="line">        <span class="variable">$query</span>-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;like&#x27;</span>, <span class="string">&#x27;치킨%&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">])-&gt;<span class="title function_ invoke__">get</span>() <span class="keyword">as</span> <span class="variable">$user</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$user</span>-&gt;post-&gt;title;</span><br><span class="line">&#125;</span><br><span class="line">;</span><br></pre></td></tr></table></figure><p><code>user</code>를 조회할 때, <code>치킨</code>으로 시작하는 <code>post</code>를 같이 미리 로드 할 수 있습니다.</p><h2 id="has"><a href="#has" class="headerlink" title="has()"></a>has()</h2><p><code>has()</code> 메소드를 이용하면, 해당 관계에서 최소 한개를 가지고 있는 결과를 조회합니다</p><p><code>User::has(&#39;posts&#39;)-&gt;get();</code>을 사용하면 post를 한개라도 작성한 회원을 조회할것입니다.</p><p>쿼리로 표현한다면, 아래와 비슷할것 같습니다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> `<span class="keyword">user</span>`</span><br><span class="line">       <span class="keyword">join</span> `post` <span class="keyword">on</span> `<span class="keyword">user</span>`.`id` <span class="operator">=</span> `post`.`user_id`</span><br></pre></td></tr></table></figure><p>has 메소드는 2번째 파라미터에 <code>operator</code> 와 3번째 파라미터에 <code>count</code>를 사용할 수 있습니다.<br/></p><p>이 파라미터를 사용하면 예로 5개 이상의 글을 작성한 회원을 찾을 수 있습니다.<br>Eloquent를 사용하면 이와같이 작성 할 수 있습니다.<br/><br><code>User::has(&#39;posts&#39;, &#39;&gt;=&#39;, 5)-&gt;get();</code></p><h2 id="whereHas"><a href="#whereHas" class="headerlink" title="whereHas()"></a>whereHas()</h2><p>그렇다면 <code>whereHas()</code>는 뭐가 다를까요? <br/><br><code>whereHas()</code> 메소드는 두번째 파라미터로 콜백을 받아 더 복잡한 쿼리를 처리할 수 있습니다. </p><p>위와 같은 모델링에서 게시글의 제목이 <code>치킨</code>으로 시작하는 글을 작성한 회원을 찾는다면 아래와 같을것 입니다. </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">User</span>::<span class="title function_ invoke__">whereHas</span>(<span class="string">&#x27;posts&#x27;</span>, function (<span class="variable">$query</span>) &#123;</span><br><span class="line">    <span class="variable">$query</span>-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;like&#x27;</span>, <span class="string">&#x27;치킨%&#x27;</span>);</span><br><span class="line">&#125;)-&gt;<span class="title function_ invoke__">get</span>();</span><br></pre></td></tr></table></figure><p>쿼리로 표현한다면</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> `<span class="keyword">user</span>`</span><br><span class="line">       <span class="keyword">join</span> `post` <span class="keyword">on</span></span><br><span class="line">    `<span class="keyword">user</span>`.`id` <span class="operator">=</span> `post`.`user_id`</span><br><span class="line">    <span class="keyword">and</span></span><br><span class="line">    `post`.`title` <span class="keyword">like</span> <span class="string">&#x27;치킨%&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">OR</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> `<span class="keyword">user</span>`</span><br><span class="line">       <span class="keyword">join</span> `post` <span class="keyword">on</span> `<span class="keyword">user</span>`.`id` <span class="operator">=</span> `post`.`user_id`</span><br><span class="line"><span class="keyword">where</span> `post`.`title` <span class="keyword">like</span> <span class="string">&#x27;치킨%&#x27;</span></span><br></pre></td></tr></table></figure><p>이와 같이 표현할 수 있을것 같습니다.</p><blockquote><p>참고자료</p></blockquote><ul><li><a href="https://stackoverflow.com/questions/30231862/laravel-eloquent-has-with-wherehas-what-do-they-mean?answertab=votes#tab-top" title="해당 링크로 이동">Stack Overflow -&gt; Laravel - Eloquent “Has”, “With”, “WhereHas” - What do they mean?</a></li><li><a href="https://laravel.kr/docs/5.8/eloquent-relationships" title="해당 링크로 이동">Laravel 공식 문서 -&gt; Eloquent: Relationships - 관계</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;ORM도 익숙하지 않지만, Eloquent ORM은 처음 접해보면서,&lt;/p&gt;
&lt;p&gt;쿼리빌더를 사용하는것은 ORM스럽지 못하다 느껴 최대한 ORM으로 풀고 싶었습니다&lt;/p&gt;
&lt;p&gt;검색으로 알아보던중 &lt;a href=&quot;https://laravel.kr/docs/5.8/eloquent-relationships&quot;&gt;Eloquent:Relations&lt;/a&gt;에 대해 알게되었습니다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://laravel.kr/docs/5.8/eloquent-relationships#%EA%B4%80%EA%B3%84%EC%9D%98%20%EC%A1%B4%EC%9E%AC%20%EC%97%AC%EB%B6%80%20%EC%BF%BC%EB%A6%AC%20%EC%A7%88%EC%9D%98%ED%95%98%EA%B8%B0&quot;&gt;라라벨 공식 문서 : 관계의 존재 여부 쿼리 질의하기&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;예를들어 &lt;code&gt;User&lt;/code&gt;가 여러개의 &lt;code&gt;Post&lt;/code&gt; 를 가지고 있다면,&lt;br/&gt;&lt;br&gt;&lt;code&gt;User&lt;/code&gt; 클래스에 &lt;code&gt;$this-&amp;gt;hasMany(&amp;#39;App\Post&amp;#39;);&lt;/code&gt;를 설정해 두었을 것이라는 가정하에 설명을 진행하도록 하겠습니다.&lt;/p&gt;</summary>
    
    
    
    <category term="PHP" scheme="https://blog.hodory.dev/categories/PHP/"/>
    
    
    <category term="PHP" scheme="https://blog.hodory.dev/tags/PHP/"/>
    
    <category term="Laravel" scheme="https://blog.hodory.dev/tags/Laravel/"/>
    
    <category term="Eloquent" scheme="https://blog.hodory.dev/tags/Eloquent/"/>
    
    <category term="ORM" scheme="https://blog.hodory.dev/tags/ORM/"/>
    
  </entry>
  
  <entry>
    <title>［JS］Knex와 Webpack을 같이 쓰면서 발생한 오류 처리</title>
    <link href="https://blog.hodory.dev/2019/04/18/knex-with-webpack/"/>
    <id>https://blog.hodory.dev/2019/04/18/knex-with-webpack/</id>
    <published>2019-04-18T10:10:52.000Z</published>
    <updated>2022-08-10T16:39:59.885Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ERROR in &#x27;./node_modules/knex/lib/dialects/mssql/index.js&#x27;</span><br><span class="line">Module not found: Error : Can&#x27;t resolve &#x27;mssql/lib/base&#x27;</span><br></pre></td></tr></table></figure><p>프로젝트에 웹팩을 도입하여 사용중, <code>knex</code> 라이브러리를 넣고 나서<br/><br>웹팩으로 빌드시 해당 에러가 나와서 빌드에 실패 했습니다.</p><span id="more"></span><p>해당 오류를 검색 하였는데,<br/><br>역시나 <a href="https://github.com/tgriesser/knex/issues/1128#issuecomment-312735118">깃허브 이슈</a>가 있었고(감사합니다),<br>webpack의 config에 아래의 내용을 추가 하였습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">externals</span>: &#123;</span><br><span class="line">  <span class="attr">knex</span>: <span class="string">&#x27;commonjs knex&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>해당 작업 후 빌드는 성공했지만,<br/><br>노드 서버에서 실행시 knex 모듈을 찾을 수 없다는 오류가 나왔습니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;errorMessage&quot;: &quot;Cannot find module &#x27;knex&#x27;&quot;,</span><br><span class="line">  &quot;errorType&quot;: &quot;Error&quot;,</span><br><span class="line">  &quot;stackTrace&quot;: [</span><br><span class="line">    &quot;Function.Module._load (module.js:474:25)&quot;,</span><br><span class="line">    &quot;Module.require (module.js:596:17)&quot;,</span><br><span class="line">    &quot;require (internal/module.js:11:18)&quot;,</span><br><span class="line">    &quot;Object.defineProperty.value (/var/task/main.js:1604:18)&quot;,</span><br><span class="line">    &quot;__webpack_require__ (/var/task/main.js:20:30)&quot;,</span><br><span class="line">    &quot;Object.&lt;anonymous&gt; (/var/task/main.js:1564:14)&quot;,</span><br><span class="line">    &quot;__webpack_require__ (/var/task/main.js:20:30)&quot;,</span><br><span class="line">    &quot;Object.defineProperty.value (/var/task/main.js:1442:20)&quot;,</span><br><span class="line">    &quot;__webpack_require__ (/var/task/main.js:20:30)&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>계속해서 구글링하던중, 다른분의 도움으로 <a href="https://github.com/tgriesser/knex/issues/1446#issuecomment-253245823">해당 이슈</a> 코멘트를 찾았습니다.<br/><br>해당 코드를 참고하여 mysql2 라이브러리를 사용했기때문에 아래와 같은 코드를 추가 하였습니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    new webpack.NormalModuleReplacementPlugin(/\.\.migrate/, &#x27;../util/noop.js&#x27;),</span><br><span class="line">    new webpack.NormalModuleReplacementPlugin(/\.\.seed/, &#x27;../util/noop.js&#x27;),</span><br><span class="line">    new webpack.IgnorePlugin(/mariasql/, /knex/),</span><br><span class="line">    new webpack.IgnorePlugin(/mysql/, /knex/),</span><br><span class="line">    new webpack.IgnorePlugin(/mssql/, /knex/),</span><br><span class="line">    new webpack.IgnorePlugin(/oracle/, /knex/),</span><br><span class="line">    new webpack.IgnorePlugin(/oracledb/, /knex/),</span><br><span class="line">    new webpack.IgnorePlugin(/postgres/, /knex/),</span><br><span class="line">    new webpack.IgnorePlugin(/redshift/, /knex/),</span><br><span class="line">    new webpack.IgnorePlugin(/pg-query-stream/, /knex/),</span><br><span class="line">    new webpack.IgnorePlugin(/sqlite3/, /knex/),</span><br><span class="line">    new webpack.IgnorePlugin(/strong-oracle/, /knex/),</span><br><span class="line">    new webpack.IgnorePlugin(/pg-native/, /pg/)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>빌드는 성공 했으나 정상 동작하지 않아 확인 해보니 <code>/node_modules/knex/lib/mysql2/index.js</code> 해당 파일에</p><p><img src="https://github.com/hodory/hodory.github.io/blob/master/images/need-mysql.png" alt="/node_modules/knex/lib/mysql2/index.js"></p><p>이러한 코드가 있어서 결국 mysql2를 쓰더라도 mysql 라이브러리가 필요하였습니다.</p><p>굳이 mysql2 모듈을 고집 할 필요가 없을것 같아, mysql 모듈로 변경하고,<br/><br><code>new webpack.IgnorePlugin(/mysql/, /knex/)</code> 를 <code>new webpack.IgnorePlugin(/mysql2/, /knex/),</code> 로 변경하니<br>빌드도 성공하였으며, 정상 동작 하였습니다.</p><p>더 좋은 방법이 있을거 같은데 아쉽게도 제가 찾은 방법은 이것 밖에 없었습니다.<br/><br>좋은 해결 방안 있으면 댓글로 공유 부탁 드리겠습니다.</p>]]></content>
    
    
    <summary type="html">&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ERROR in &amp;#x27;./node_modules/knex/lib/dialects/mssql/index.js&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Module not found: Error : Can&amp;#x27;t resolve &amp;#x27;mssql/lib/base&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;프로젝트에 웹팩을 도입하여 사용중, &lt;code&gt;knex&lt;/code&gt; 라이브러리를 넣고 나서&lt;br/&gt;&lt;br&gt;웹팩으로 빌드시 해당 에러가 나와서 빌드에 실패 했습니다.&lt;/p&gt;</summary>
    
    
    
    <category term="Javascript" scheme="https://blog.hodory.dev/categories/Javascript/"/>
    
    
    <category term="Javascript" scheme="https://blog.hodory.dev/tags/Javascript/"/>
    
    <category term="JS" scheme="https://blog.hodory.dev/tags/JS/"/>
    
    <category term="Webpack" scheme="https://blog.hodory.dev/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>［PHP］배열 key의 min 또는 max 구하기</title>
    <link href="https://blog.hodory.dev/2018/10/27/php-array-column/"/>
    <id>https://blog.hodory.dev/2018/10/27/php-array-column/</id>
    <published>2018-10-27T06:23:32.000Z</published>
    <updated>2022-08-10T16:39:59.885Z</updated>
    
    <content type="html"><![CDATA[<p>PHP로 개발을 하다보면, 연관 배열을 많이 쓰게되는데요</p><p>아래와 같은 배열에서 cnt의 max값과 min값을 구하려면 어떻게 해야할까요?</p><span id="more"></span><p>또는 이러한 배열에서 특정 키값의 값만 뽑아 배열로 만들고싶다면 어떻게 해야할까요?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">array(3) &#123;</span><br><span class="line">  [0]=&gt;</span><br><span class="line">  array(3) &#123;</span><br><span class="line">    [&quot;title&quot;]=&gt;</span><br><span class="line">    string(5) &quot;apple&quot;</span><br><span class="line">    [&quot;cnt&quot;]=&gt;</span><br><span class="line">    int(1) &quot;5&quot;</span><br><span class="line">    [&quot;color&quot;]=&gt;</span><br><span class="line">    string(5) &quot;green&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  [1]=&gt;</span><br><span class="line">  array(3) &#123;</span><br><span class="line">    [&quot;name&quot;]=&gt;</span><br><span class="line">    string(4) &quot;pear&quot;</span><br><span class="line">    [&quot;cnt&quot;]=&gt;</span><br><span class="line">    int(1) &quot;8&quot;</span><br><span class="line">    [&quot;color&quot;]=&gt;</span><br><span class="line">    string(6) &quot;yellow&quot;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>배열을 순회하여 해당 키의 값을 뽑아 배열을 만들고,</p><p>최소 또는 최대값이 필요하면 min 또는 max 함수를 적용해야 한다 생각했습니다.</p><p>그런 코드는 만들고 싶지 않아 검색을 하다보니</p><p>PHP 5.5버전부터는 <a href="http://php.net/manual/en/function.array-column.php" title="해당 링크로 이동">array_column</a>을 사용하면 쉽게 처리할 수 있었습니다.</p><p><code>array array_column ( array $input , mixed $column_key [, mixed $index_key = NULL ] )</code> 와 같은 구조로</p><p>첫번째 파라미터에 해당 배열을 넣고, 두번째 파라미터에 뽑아낼 key를 넣으면 됩니다.</p><p>예를들어 아래와 같은 연관 배열에서 cnt로만 배열을 만들려면 이와 같이 할 수 있습니다.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$arr</span> = [</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&#x27;title&#x27;</span>=&gt;<span class="string">&#x27;title1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;cnt&#x27;</span>=&gt;<span class="number">2</span>,</span><br><span class="line">        <span class="string">&#x27;color&#x27;</span>=&gt;<span class="string">&#x27;blue&#x27;</span>,</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&#x27;title&#x27;</span>=&gt;<span class="string">&#x27;title2&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;cnt&#x27;</span>=&gt;<span class="number">3</span>,</span><br><span class="line">        <span class="string">&#x27;color&#x27;</span>=&gt;<span class="string">&#x27;blue&#x27;</span>,</span><br><span class="line">    ],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="variable">$cntArr</span> = <span class="title function_ invoke__">array_column</span>(<span class="variable">$arr</span>, <span class="string">&#x27;cnt&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$cntArr</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">### Result </span></span><br><span class="line"><span class="keyword">array</span>(<span class="number">2</span>) &#123;</span><br><span class="line">  [<span class="number">0</span>]=&gt;</span><br><span class="line">  <span class="keyword">int</span>(<span class="number">2</span>)</span><br><span class="line">  [<span class="number">1</span>]=&gt;</span><br><span class="line">  <span class="keyword">int</span>(<span class="number">3</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>또한 세번째 파라미터로는 index_key를 넣을 수 있는데요</p><p>return 할 배열의 키로 사용할 값을 넣으면 됩니다 예를들어 이렇게 쓸 수 있을것 같았습니다.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// example code</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$arr</span> = [</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&#x27;idx&#x27;</span> =&gt; <span class="number">2555</span>,</span><br><span class="line">        <span class="string">&#x27;title&#x27;</span>=&gt;<span class="string">&#x27;title1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;cnt&#x27;</span>=&gt;<span class="number">2</span>,</span><br><span class="line">        <span class="string">&#x27;color&#x27;</span>=&gt;<span class="string">&#x27;blue&#x27;</span>,</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&#x27;idx&#x27;</span> =&gt; <span class="number">2982</span>,</span><br><span class="line">        <span class="string">&#x27;title&#x27;</span>=&gt;<span class="string">&#x27;title2&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;cnt&#x27;</span>=&gt;<span class="number">3</span>,</span><br><span class="line">        <span class="string">&#x27;color&#x27;</span>=&gt;<span class="string">&#x27;blue&#x27;</span>,</span><br><span class="line">    ],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="variable">$cntArr</span> = <span class="title function_ invoke__">array_column</span>(<span class="variable">$arr</span>, <span class="string">&#x27;cnt&#x27;</span>, <span class="string">&#x27;idx&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$cntArr</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">### Result</span></span><br><span class="line"><span class="keyword">array</span>(<span class="number">2</span>) &#123;</span><br><span class="line">  [<span class="number">2555</span>]=&gt;</span><br><span class="line">  <span class="keyword">int</span>(<span class="number">2</span>)</span><br><span class="line">  [<span class="number">2982</span>]=&gt;</span><br><span class="line">  <span class="keyword">int</span>(<span class="number">3</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이와같이 사용하면 해당 idx의 cnt를 뽑을 수 있어 더 효율적으로 사용할 수 있을거 같습니다.</p><p>더 좋은 사용 방안 있으시면 댓글로 부탁드리겠습니다.</p><blockquote><p>참고자료</p></blockquote><ul><li><a href="https://stackoverflow.com/questions/17339421/find-highest-value-in-multidimensional-array" title="해당 링크로 이동">StackOverFlow - Find highest value in multidimensional array</a></li><li><a href="https://secure.php.net/manual/en/function.array-column.php" title="해당 링크로 이동">PHP 공식문서 - array_column()</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;PHP로 개발을 하다보면, 연관 배열을 많이 쓰게되는데요&lt;/p&gt;
&lt;p&gt;아래와 같은 배열에서 cnt의 max값과 min값을 구하려면 어떻게 해야할까요?&lt;/p&gt;</summary>
    
    
    
    <category term="PHP" scheme="https://blog.hodory.dev/categories/PHP/"/>
    
    
    <category term="PHP" scheme="https://blog.hodory.dev/tags/PHP/"/>
    
    <category term="str_pad" scheme="https://blog.hodory.dev/tags/str-pad/"/>
    
    <category term="function" scheme="https://blog.hodory.dev/tags/function/"/>
    
  </entry>
  
  <entry>
    <title>［VueJS］vue.js에서 이벤트 버스 사용하기</title>
    <link href="https://blog.hodory.dev/2018/08/27/vuejs-eventbus/"/>
    <id>https://blog.hodory.dev/2018/08/27/vuejs-eventbus/</id>
    <published>2018-08-27T07:51:38.000Z</published>
    <updated>2022-08-10T16:39:59.885Z</updated>
    
    <content type="html"><![CDATA[<p>MPA(Multi Page Application)에서 Vue를 적용 시키던중</p><p>부모-자식간의 관계가 아닌 컴포넌트 간의 동작에 따른 데이터 변화와 이벤트 처리가 필요해졌습니다.</p><span id="more"></span><p>주로 공통 데이터를 다루기 위해 사용하는 부분이라 Vuex를 써볼까도 했지만,</p><p><a href="https://vuex.vuejs.org/kr/">Vuex 튜토리얼</a>에서 <code>앱이 단순하다면 Vuex없이는 괜찮을 것입니다. 간단한 글로벌 이벤트 버스만 있으면됩니다</code> 라는 글귀를 읽고, <code>글로벌 이벤트 버스를 사용하자</code>로 마음을 굳혔습니다.</p><p>아래와 같이 공통으로 사용할 이벤트버스 js 파일을 생성합니다.<br>Vue EventBus 객체를 생성하여 export 하여 다른 파일에서도 로드하여 사용 할 수 있도록 합니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /js/eventBus.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">EventBus</span> = <span class="keyword">new</span> <span class="title class_">Vue</span>();</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">EventBus</span>;</span><br></pre></td></tr></table></figure><p>그 후 해당 이벤트 버스를 사용할 컴포넌트들에서 eventBus.js를 import 하여 아래와 같이 사용했습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*******</span></span><br><span class="line"><span class="comment">* /js/Button.vue</span></span><br><span class="line"><span class="comment">********/</span></span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;onClickButton&quot;</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">EventBus</span> <span class="keyword">from</span> <span class="string">&quot;./eventBus.js&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">props</span>: [<span class="string">&#x27;code&#x27;</span>, <span class="string">&#x27;title&#x27;</span>],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">onClickButton</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title class_">EventBus</span>.$emit(<span class="string">&quot;onModalButtonClick&quot;</span>, <span class="variable language_">this</span>.<span class="property">code</span>, <span class="variable language_">this</span>.<span class="property">title</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*******</span></span><br><span class="line"><span class="comment">* /js/Modal.vue</span></span><br><span class="line"><span class="comment">********/</span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;myModal&quot;</span> <span class="attr">class</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;_isShow&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        ...</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">EventBus</span> <span class="keyword">from</span> <span class="string">&#x27;./eventBus.js&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">_isShow</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">code</span>: <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">title</span>: <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title class_">EventBus</span>.$on(<span class="string">&quot;onModalButtonClick&quot;</span>, <span class="function">(<span class="params">code, title</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">code</span> = code;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">title</span> = title;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">_isShow</span> = <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">... </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="실제로는-위의-코드보다-복잡했지만-예시에-불필요한-부분은-제거하였습니다"><a href="#실제로는-위의-코드보다-복잡했지만-예시에-불필요한-부분은-제거하였습니다" class="headerlink" title="실제로는 위의 코드보다 복잡했지만, 예시에 불필요한 부분은 제거하였습니다."></a>실제로는 위의 코드보다 복잡했지만, 예시에 불필요한 부분은 제거하였습니다.</h4>]]></content>
    
    
    <summary type="html">&lt;p&gt;MPA(Multi Page Application)에서 Vue를 적용 시키던중&lt;/p&gt;
&lt;p&gt;부모-자식간의 관계가 아닌 컴포넌트 간의 동작에 따른 데이터 변화와 이벤트 처리가 필요해졌습니다.&lt;/p&gt;</summary>
    
    
    
    <category term="Javascript" scheme="https://blog.hodory.dev/categories/Javascript/"/>
    
    <category term="Vue.js" scheme="https://blog.hodory.dev/categories/Javascript/Vue-js/"/>
    
    
    <category term="JS" scheme="https://blog.hodory.dev/tags/JS/"/>
    
    <category term="VueJS" scheme="https://blog.hodory.dev/tags/VueJS/"/>
    
  </entry>
  
  <entry>
    <title>［GCP］ Nuxt.js GAE에 배포 이슈사항</title>
    <link href="https://blog.hodory.dev/2018/07/20/deploy-nuxt-to-GAE/"/>
    <id>https://blog.hodory.dev/2018/07/20/deploy-nuxt-to-GAE/</id>
    <published>2018-07-20T05:45:42.000Z</published>
    <updated>2022-08-10T16:39:59.885Z</updated>
    
    <content type="html"><![CDATA[<h2 id="502-Bad-Gateway"><a href="#502-Bad-Gateway" class="headerlink" title="502 Bad Gateway"></a>502 Bad Gateway</h2><p>배포 후 링크 접속시 502 Bad Gateway 에러가 발생하였는데</p><p>에러 로그를 보니 localhost:8080로 접근하고 있었다</p><span id="more"></span><p>검색 결과 NuxtJS의 실행 포트를 변경할 수 있는 방법이 소개 되어있었다.</p><p>package.json에 다음과 같이 작성하면 된다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  &quot;config&quot;: &#123;</span><br><span class="line">    &quot;nuxt&quot;: &#123;</span><br><span class="line">      &quot;host&quot;: &quot;0.0.0.0&quot;,</span><br><span class="line">      &quot;port&quot;: &quot;8080&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>또는</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    ...</span><br><span class="line">    &quot;start&quot;: &quot;HOST=0.0.0.0 PORT=8080 nuxt build &amp;&amp; nuxt start&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>으로 작성하여 다시 deploy 하면 정상적으로 동작한다.</p><blockquote><p>참고자료</p></blockquote><ul><li><a href="https://github.com/nuxt/nuxt.js/issues/344" title="해당 링크로 이동">NuxtJS Github ISSUE - 334(Google Cloud Deployment)</a></li><li><a href="https://ko.nuxtjs.org/faq/host-port/" title="해당 링크로 이동">NuxtJS FAQ - host 와 port 번호를 변경하려면?</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;502-Bad-Gateway&quot;&gt;&lt;a href=&quot;#502-Bad-Gateway&quot; class=&quot;headerlink&quot; title=&quot;502 Bad Gateway&quot;&gt;&lt;/a&gt;502 Bad Gateway&lt;/h2&gt;&lt;p&gt;배포 후 링크 접속시 502 Bad Gateway 에러가 발생하였는데&lt;/p&gt;
&lt;p&gt;에러 로그를 보니 localhost:8080로 접근하고 있었다&lt;/p&gt;</summary>
    
    
    
    <category term="ETC" scheme="https://blog.hodory.dev/categories/ETC/"/>
    
    <category term="GCP" scheme="https://blog.hodory.dev/categories/ETC/GCP/"/>
    
    
    <category term="GCP" scheme="https://blog.hodory.dev/tags/GCP/"/>
    
    <category term="GAE" scheme="https://blog.hodory.dev/tags/GAE/"/>
    
    <category term="NuxtJS" scheme="https://blog.hodory.dev/tags/NuxtJS/"/>
    
  </entry>
  
  <entry>
    <title>［Database］ postgresql와 mysql 뭐가 다를까?</title>
    <link href="https://blog.hodory.dev/2018/04/23/pgsql-vs-mysql/"/>
    <id>https://blog.hodory.dev/2018/04/23/pgsql-vs-mysql/</id>
    <published>2018-04-23T08:22:45.000Z</published>
    <updated>2022-08-10T16:39:59.885Z</updated>
    
    <content type="html"><![CDATA[<h3 id="PostgreSQL-과-MySQL의-차이점"><a href="#PostgreSQL-과-MySQL의-차이점" class="headerlink" title="PostgreSQL 과 MySQL의 차이점"></a>PostgreSQL 과 MySQL의 차이점</h3><ul><li>PostgreSQL은 기본적으로 트랜잭션을 지원합니다(MySQL의 경우 테이블이 InnoDB 타입일 경우에만 지원합니다.)</li><li>Databse의 하위개념으로 Schema가 있습니다.(MySQL의 Database의 개념은 PostgreSQL의 스키마와 개념이 비슷합니다.)<span id="more"></span><ul><li>스키마를 별도로 지정하지 않을 경우, public이라는 스키마를 기본적으로 사용합니다.</li><li>데이터베이스가 다르면 물리적으로 분리되어있다는것을 의미합니다.</li><li>서로 다른 Schema간에는 JOIN이 가능합니다.</li><li>구조 <img src="/images/postgresql-structure.jpg" alt="pgSQL 구조 이미지"></li></ul></li></ul><blockquote><p>참고자료</p></blockquote><ul><li><a href="http://www.gurubee.net/lecture/2942" title="해당 페이지로 이동">postgreSQL 구조 이미지 - 구루비</a></li><li><a href="http://blog.naver.com/alice_k106/220847310053" title="해당 페이지로 이동">postgreSQL 소개</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;PostgreSQL-과-MySQL의-차이점&quot;&gt;&lt;a href=&quot;#PostgreSQL-과-MySQL의-차이점&quot; class=&quot;headerlink&quot; title=&quot;PostgreSQL 과 MySQL의 차이점&quot;&gt;&lt;/a&gt;PostgreSQL 과 MySQL의 차이점&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;PostgreSQL은 기본적으로 트랜잭션을 지원합니다(MySQL의 경우 테이블이 InnoDB 타입일 경우에만 지원합니다.)&lt;/li&gt;
&lt;li&gt;Databse의 하위개념으로 Schema가 있습니다.(MySQL의 Database의 개념은 PostgreSQL의 스키마와 개념이 비슷합니다.)</summary>
    
    
    
    <category term="ETC" scheme="https://blog.hodory.dev/categories/ETC/"/>
    
    <category term="Database" scheme="https://blog.hodory.dev/categories/ETC/Database/"/>
    
    
    <category term="DataBase" scheme="https://blog.hodory.dev/tags/DataBase/"/>
    
    <category term="postgresql" scheme="https://blog.hodory.dev/tags/postgresql/"/>
    
    <category term="pgsql" scheme="https://blog.hodory.dev/tags/pgsql/"/>
    
    <category term="mysql" scheme="https://blog.hodory.dev/tags/mysql/"/>
    
    <category term="pgSQL vs MySQL" scheme="https://blog.hodory.dev/tags/pgSQL-vs-MySQL/"/>
    
  </entry>
  
  <entry>
    <title>［PHP］ PHP4.x 버전과 PHP 5.x 버전 비교(Comparison between PHP4 and PHP5)</title>
    <link href="https://blog.hodory.dev/2018/04/19/php4-vs-php5/"/>
    <id>https://blog.hodory.dev/2018/04/19/php4-vs-php5/</id>
    <published>2018-04-19T17:04:12.000Z</published>
    <updated>2022-08-10T16:39:59.885Z</updated>
    
    <content type="html"><![CDATA[<h3 id="PHP5에서-무엇이-바뀌었을까"><a href="#PHP5에서-무엇이-바뀌었을까" class="headerlink" title="PHP5에서 무엇이 바뀌었을까?"></a>PHP5에서 무엇이 바뀌었을까?</h3><ul><li>젠드엔진2가 내장되었습니다.</li><li>PHP GCI 버전이 <code>php.exe</code> 에서 <code>php-cgi.exe</code> 로 변경되었습니다.</li><li>PHP CLI 버전이 <code>cli/php.exe</code> 에서 주 디렉토리로 변경되었습니다.</li><li>PHP CLI 버전은 <code>php.ini</code> 지시어 설정과 상관없이 항상 전역 <code>$argv</code>(Array of arguments passed to script) 와 <code>$argc</code>(The number of arguments passed to script) 변수를 가지며, <code>register_argc_argv</code>(argv와 argc 변수를 선언할지 여부 설정)를 <code>off</code>로 설정해도 영향을 미치지 않습니다.<span id="more"></span></li><li>ISAPI 모듈들의 이름이 php4xxx에서 php5xxx로 바뀌었습니다.</li><li>프로퍼티가 없는 객체를 “빈” 것으로 판단하지 않습니다.</li><li>인터페이스 등을 사용할 경우, 사용 전 선언해야합니다.</li><li>포함한 파일에 함수정의가 있을경우, 그 파일이 두번 포함 되었을 때,PHP5에서는 치명적인 오류가 발생합니다. include_once를 사용하길 권장합니다.</li><li>키워드<ul><li>예외처리(try()-catch()-finally()[v5.5~])</li><li>네임스페이스[v5.3~]</li><li>인터페이스(interface,implements)</li><li>추상클래스(abstract)</li><li>접근제어자(private,protected,public)</li><li>instanceof : 객체의 클래스 확인</li><li>clone : 객체 복제</li><li>컴파일 상수<ul><li><code>__NAMESPACE__</code> [v5.3~]</li><li><code>__DIR__</code> [v5.3~]</li></ul></li></ul></li><li>DataBase<ul><li>MySQL 클라이언트 라이브러리를 포함하지 않습니다.</li><li>MySQL 4.1 이상에서 동작하는 <a href="https://php.net/manual/kr/ref.mysqli.php" title="공식 문서로 이동">MySQLi</a>가 추가되었습니다.</li><li><a href="https://php.net/manual/kr/ref.sqlite.php">SQLite</a> 확장 모듈이 포함됩니다.</li></ul></li><li>새로운 함수가 추가되었습니다.(New Functions)<ul><li>배열 (9개)<ul><li><a href="https://php.net/manual/kr/function.array-combine.php">array_combine()</a> : 하나의 배열은 키로, 하나의 배열은 값으로 가지는 배열 생성 합니다.</li><li><a href="https://php.net/manual/kr/function.array-walk-recursive.php">array_walk_recursive()</a> : 배열의 모든 원소에 사용자 함수를 적용합니다.</li><li>이 외의 7개 함수</li></ul></li><li>iconv (7개)<ul><li><a href="https://php.net/manual/kr/function.iconv-strlen.php">iconv_strlen()</a> : 문자열의 문자 수를 반환 합니다.</li><li><a href="https://php.net/manual/kr/function.iconv-strpos.php">iconv_strpos()</a> : haystack에서 needle이 처음으로 나타나는 위치를 찾습니다.</li><li><a href="https://php.net/manual/kr/function.iconv-strrpos.php">iconv_strrpos()</a> : haystack에서 needle이 마지막으로 나타나는 위치를 찾습니다.</li><li><a href="https://php.net/manual/kr/function.iconv-substr.php">iconv_substr()</a> : 문자열의 일부를 잘라냅니다.</li><li>이 외의 3개 함수</li></ul></li><li>스트림 (8개)<ul><li><a href="https://php.net/manual/kr/function.stream-copy-to-stream.php">stream_copy_to_stream()</a> : 한 스트림의 데이터를 다른 스트림으로 복제합니다.</li><li><a href="https://php.net/manual/kr/function.stream-get-line.php">stream_get_line()</a> : 스트림 자원에서 주어진 구분자로 나타나는 열을 얻습니다.</li><li>이 외의 6개 함수</li></ul></li><li>날짜와 시간 관련 (4개)<ul><li><a href="https://php.net/manual/kr/function.idate.php">idate()</a> : 지역 날짜&#x2F;시간을 정수로 바꿉니다.</li><li><a href="https://php.net/manual/kr/function.date-sunset.php">date_sunset()</a> : 주어진 날짜와 위치의 일몰 시간을 반환합니다.</li><li><a href="https://php.net/manual/kr/function.date-sunrise.php">date_sunrise()</a> : 주어진 날짜와 위치의 일출 시간을 반환합니다.</li><li><a href="https://php.net/manual/kr/function.time-nanosleep.php">time_nanosleep()</a> : 초와 나노초의 수만큼 지연합니다.</li></ul></li><li>문자열 (3개)<ul><li><a href="https://php.net/manual/kr/function.str-split.php">str_split()</a> : 문자열을 배열로 변환합니다.</li><li><a href="https://php.net/manual/kr/function.strpbrk.php">strbrk()</a> : 문자열에서 문자 세트에 있는 문자를 검색합니다.(대소문자 구분하여 세트중 한글자라도 먼저 나오는것을 찾습니다.)</li><li><a href="https://php.net/manual/kr/function.substr-compare.php">substr_compare()</a> : 두 문자열을 offset부터 length까지(대소문자 구분없이:옵션) 바이너리로 안전하게 비교합니다.</li></ul></li><li>인터베이스 (19개)</li><li>기타 (30개)<ul><li><a href="https://php.net/manual/kr/function.file-put-contents.php">file_put_contents()</a> : 문자열을 파일로 씁니다.</li><li><a href="https://php.net/manual/kr/function.get-headers.php">get_headers()</a> : HTTP 요청의 응답으로 서버가 보낸 모든 헤더를 가져옵니다.</li><li><a href="https://php.net/manual/kr/function.http-build-query.php">http_build_query()</a> : 배열을 이용하여 URL-encode한 쿼리 문자열을 생성합니다.</li><li><a href="https://php.net/manual/kr/function.scandir.php">scandir()</a> : 지정한 경로 안에 파일과 디렉토리 목록을 배열로 반환합니다.</li><li>이 외의 27개 함수</li></ul></li><li>자세한 내용은 <a href="https://php.net/manual/kr/migration5.functions.php">해당링크</a>에서 확인 하실 수 있습니다.</li></ul></li><li>새로운 지시어 (<code>php.ini</code> 지시어)<ul><li>mail.force_extra_parameter</li><li><a href="https://php.net/manual/kr/ini.core.php#ini.register-long-arrays">register_long_arrays</a></li><li><a href="https://php.net/manual/kr/session.configuration.php#ini.session.hash-function">session.hash_function</a> : 해시 함수 선택(MD5 or SHA-1)</li><li><a href="https://php.net/manual/kr/session.configuration.php#ini.session.hash-bits-per-character">session.hash_bits_per_character</a></li><li><a href="https://php.net/manual/kr/ini.core.php#ini.zend.ze1-compatibility-mode">zend.ze1_compatibility_mode</a> : 젠드엔진1 (PHP 4)호환모드 활성화</li></ul></li></ul><h5 id="기타-자세한-사항은-해당링크에서-확인-하실-수-있습니다"><a href="#기타-자세한-사항은-해당링크에서-확인-하실-수-있습니다" class="headerlink" title="기타 자세한 사항은 해당링크에서 확인 하실 수 있습니다."></a>기타 자세한 사항은 <a href="https://php.net/manual/kr/migration5.php">해당링크</a>에서 확인 하실 수 있습니다.</h5><blockquote><p>참고자료</p></blockquote><ul><li><a href="https://php.net/manual/kr/migration5.php" title="해당 링크로 이동">PHP 공식문서 - PHP4에서 PHP 5.0.x로 이행</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;PHP5에서-무엇이-바뀌었을까&quot;&gt;&lt;a href=&quot;#PHP5에서-무엇이-바뀌었을까&quot; class=&quot;headerlink&quot; title=&quot;PHP5에서 무엇이 바뀌었을까?&quot;&gt;&lt;/a&gt;PHP5에서 무엇이 바뀌었을까?&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;젠드엔진2가 내장되었습니다.&lt;/li&gt;
&lt;li&gt;PHP GCI 버전이 &lt;code&gt;php.exe&lt;/code&gt; 에서 &lt;code&gt;php-cgi.exe&lt;/code&gt; 로 변경되었습니다.&lt;/li&gt;
&lt;li&gt;PHP CLI 버전이 &lt;code&gt;cli/php.exe&lt;/code&gt; 에서 주 디렉토리로 변경되었습니다.&lt;/li&gt;
&lt;li&gt;PHP CLI 버전은 &lt;code&gt;php.ini&lt;/code&gt; 지시어 설정과 상관없이 항상 전역 &lt;code&gt;$argv&lt;/code&gt;(Array of arguments passed to script) 와 &lt;code&gt;$argc&lt;/code&gt;(The number of arguments passed to script) 변수를 가지며, &lt;code&gt;register_argc_argv&lt;/code&gt;(argv와 argc 변수를 선언할지 여부 설정)를 &lt;code&gt;off&lt;/code&gt;로 설정해도 영향을 미치지 않습니다.</summary>
    
    
    
    <category term="PHP" scheme="https://blog.hodory.dev/categories/PHP/"/>
    
    
    <category term="PHP" scheme="https://blog.hodory.dev/tags/PHP/"/>
    
    <category term="PHP5" scheme="https://blog.hodory.dev/tags/PHP5/"/>
    
    <category term="PHP4" scheme="https://blog.hodory.dev/tags/PHP4/"/>
    
  </entry>
  
  <entry>
    <title>［Algorithm］이진탐색 알고리즘(Binary Search Algorithm)</title>
    <link href="https://blog.hodory.dev/2018/04/19/binary-search/"/>
    <id>https://blog.hodory.dev/2018/04/19/binary-search/</id>
    <published>2018-04-19T03:54:39.000Z</published>
    <updated>2022-08-10T16:39:59.885Z</updated>
    
    <content type="html"><![CDATA[<h3 id="이진탐색"><a href="#이진탐색" class="headerlink" title="이진탐색"></a>이진탐색</h3><ul><li>정의<ul><li>오름차순으로 정렬된 리스트에서 특정한 값의 위치를 찾는 것.</li><li>오름차순으로 정렬된 리스트일 경우에만 사용할 수 있다는 단점이 있지만, 절반씩 줄여가며 탐색하기 때문에 매우 빠르다.<span id="more"></span></li></ul></li><li>구현<ul><li>해당 배열에서 가운데 값을 찾고, 그 값과 비교하여 해당 인덱스에서의 배열의 값이 찾는 값 보다 클때는 앞쪽에서 찾고, 작을때는 뒤쪽에서 찾으면 된다.</li><li>코드</li><li><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 해당 인덱스를 출력해주는 알고리즘 입니다.</span></span><br><span class="line">binarSearch = <span class="function">(<span class="params">data, value</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">let</span> start = data[<span class="number">0</span>], end = data.<span class="title function_">slice</span>(-<span class="number">1</span>)[<span class="number">0</span>], index = <span class="number">0</span>, last = data.<span class="property">length</span>-<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> (value &lt; start || value &gt; end)</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (index &lt;= last) &#123;</span><br><span class="line"><span class="keyword">let</span> center = <span class="built_in">parseInt</span>((index+last) / <span class="number">2</span>)</span><br><span class="line"><span class="keyword">if</span> (data[center] === value)</span><br><span class="line"><span class="keyword">return</span> center;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(data[center] &gt; value)</span><br><span class="line"><span class="comment">// 해당 인덱스의 배열값이 더 크기때문에 최대 인덱스를 줄인다.</span></span><br><span class="line">last = center - <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="comment">// 해당 인덱스의 배열값이 더 작기때문에 최소 인덱스를 늘린다.</span></span><br><span class="line">index = center + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 호출</span></span><br><span class="line"><span class="title function_">binarSearch</span>([<span class="number">1</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">25</span>],<span class="number">25</span>) <span class="comment">// 4</span></span><br><span class="line"><span class="title function_">binarSearch</span>([<span class="number">1</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">14</span>,<span class="number">16</span>,<span class="number">18</span>,<span class="number">25</span>],<span class="number">18</span>) <span class="comment">// 6</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><blockquote><p>참고자료</p></blockquote><ul><li><a href="https://ko.wikipedia.org/wiki/%EC%9D%B4%EC%A7%84_%EA%B2%80%EC%83%89_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98" title="해당 링크로 이동">위키백과</a></li><li><a href="https://namu.wiki/w/%EC%9D%B4%EC%A7%84%20%ED%83%90%EC%83%89" title="해당 링크로 이동">나무위키</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;이진탐색&quot;&gt;&lt;a href=&quot;#이진탐색&quot; class=&quot;headerlink&quot; title=&quot;이진탐색&quot;&gt;&lt;/a&gt;이진탐색&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;정의&lt;ul&gt;
&lt;li&gt;오름차순으로 정렬된 리스트에서 특정한 값의 위치를 찾는 것.&lt;/li&gt;
&lt;li&gt;오름차순으로 정렬된 리스트일 경우에만 사용할 수 있다는 단점이 있지만, 절반씩 줄여가며 탐색하기 때문에 매우 빠르다.</summary>
    
    
    
    <category term="ETC" scheme="https://blog.hodory.dev/categories/ETC/"/>
    
    <category term="Algorithm" scheme="https://blog.hodory.dev/categories/ETC/Algorithm/"/>
    
    
    <category term="Algorithm" scheme="https://blog.hodory.dev/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>［ETC］Triple DES(3-DES)를 사용하지 않는 이유</title>
    <link href="https://blog.hodory.dev/2018/04/18/why-not-use-3des/"/>
    <id>https://blog.hodory.dev/2018/04/18/why-not-use-3des/</id>
    <published>2018-04-18T09:27:20.000Z</published>
    <updated>2022-08-10T16:39:59.885Z</updated>
    
    <content type="html"><![CDATA[<p>대학교 프로젝트에서 T-DES 암호화 알고리즘을 사용하여 소켓 기반 채팅 프로그램을 만든 적이 있습니다.</p><p>DES 암호화 알고리즘을 보완하기위해 DES를 3번 수행하는 방식입니다.</p><p>그렇다면 왜 3DES 암호화 알고리즘의 사용이 줄어들었을까요?</p><ul><li>암호화키가 DES 표준에 따라 56비트로 제한됩니다.</li><li>AES(Advanced Encryption Standard)가 미국 표준으로 승인되어 AES 암호화 알고리즘이 더 많이 쓰이고 있습니다.</li><li>암호화를 세번 하면서 생기는 속도의 문제점 (AES가 훨씬 빠르다고 합니다.)<span id="more"></span>결론적으로 대칭키 암호화 알고리즘에서는 DES 암호화 알고리즘을 AES 암호화 알고리즘이 대체하게 되어 없어졌다 할 수 있습니다.</li></ul><p>기존에는 SHA-2 알고리즘이 나와 없어진 줄 알았으나,</p><p>SHA(Secure Hash Algorithm) Encryption(암호화)과 Hash(해쉬)는 다른 의미였습니다.</p><p>Encryption(암호화)는 양방향 통신을 위해 특정 키를 가지고 복호화가 가능한 출력을 만들어 내는 것입니다.</p><p>대표적으로는 아래와 같이 있습니다.</p><ul><li>대칭 암호화<ul><li>DES(Data Encryption Standard)<ul><li>T-DES(Triple Data Encryption Standard)</li></ul></li><li>AES(Advanced Encryption Standard)</li></ul></li><li>비대칭 암호화<ul><li>RSA</li></ul></li></ul><p>Hash(해시)는 임의의 길이의 입력을 고정된 길이의 출력으로 바꾸어주고, 복호화가 되지않아 원문을 알 수 없으나, 같은 입력은 같은 출력을 보장합니다.</p><p>대표적으로는 아래와 같이 있습니다.</p><ul><li>MD5(Message Digest)</li><li>SHA(Secure Hash Algorithm)</li></ul><blockquote><p>참고자료</p></blockquote><ul><li><a href="https://www.chaijeom.com/3/919.html" title="해당 링크로 이동">AES와 3DES의 차이점</a></li><li><a href="https://egloos.zum.com/dextermg/v/305974" title="해당 링크로 이동">대칭키 암호화 - AES, 3DES</a></li><li><a href="https://brownbears.tistory.com/73" title="해당 링크로 이동">AES와 SHA 차이</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;대학교 프로젝트에서 T-DES 암호화 알고리즘을 사용하여 소켓 기반 채팅 프로그램을 만든 적이 있습니다.&lt;/p&gt;
&lt;p&gt;DES 암호화 알고리즘을 보완하기위해 DES를 3번 수행하는 방식입니다.&lt;/p&gt;
&lt;p&gt;그렇다면 왜 3DES 암호화 알고리즘의 사용이 줄어들었을까요?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;암호화키가 DES 표준에 따라 56비트로 제한됩니다.&lt;/li&gt;
&lt;li&gt;AES(Advanced Encryption Standard)가 미국 표준으로 승인되어 AES 암호화 알고리즘이 더 많이 쓰이고 있습니다.&lt;/li&gt;
&lt;li&gt;암호화를 세번 하면서 생기는 속도의 문제점 (AES가 훨씬 빠르다고 합니다.)</summary>
    
    
    
    <category term="ETC" scheme="https://blog.hodory.dev/categories/ETC/"/>
    
    
    <category term="Etc." scheme="https://blog.hodory.dev/tags/Etc/"/>
    
    <category term="Security" scheme="https://blog.hodory.dev/tags/Security/"/>
    
  </entry>
  
  <entry>
    <title>［Algorithm］반복문 없이 1부터 10까지 합 구하기</title>
    <link href="https://blog.hodory.dev/2018/04/18/1-to-10-calc-without-for-loop/"/>
    <id>https://blog.hodory.dev/2018/04/18/1-to-10-calc-without-for-loop/</id>
    <published>2018-04-18T06:53:47.000Z</published>
    <updated>2022-08-10T16:39:59.881Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1부터-10까지-합-구하기"><a href="#1부터-10까지-합-구하기" class="headerlink" title="1부터 10까지 합 구하기"></a>1부터 10까지 합 구하기</h3><blockquote><p>먼저 방법은 무엇이 있을까?</p></blockquote><ul><li><p>등차 수열의 합</p></li><li><p>재귀함수 방식</p></li><li><p>기타 등등…</p><p>하나씩 구현해보자</p></li></ul><span id="more"></span><ul><li><p>등차 수열</p><ul><li>등차 수열이란 ?<br>연속하는 두 항의 차이가 모두 일정한 수열.</li><li>등차 수열의 합 공식 (출처 : <a href="https://ko.wikipedia.org/wiki/%EB%93%B1%EC%B0%A8%EC%88%98%EC%97%B4">위키피디아</a>)<br><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/2c20edf8a4ff670b534d3cb674f934710a88d023" alt="등차수열의 합 공식" title="클릭시 위키피디아로 이동"></li><li>코드 구현<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">addFunction = <span class="function">(<span class="params">start, end</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (end-start+<span class="number">1</span>)*(start+end)/<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">addFunction</span>(<span class="number">1</span>,<span class="number">10</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>재귀함수 방식</p><ul><li><p>재귀 함수란?자기 자신을 재 참조 하는 함수</p></li><li><p>재귀함수 구조(출처 : <a href="https://ko.wikipedia.org/wiki/%EC%9E%AC%EA%B7%80%ED%95%A8%EC%88%98" title="클릭시 위키피디아로 이동">위키피디아</a>)</p></li><li><p>ex)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">factorial = <span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (v &lt;= <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> v * <span class="title function_">factorial</span>(v-<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>코드 구현</p></li><li><p>ex)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">addFunction = <span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (v &lt;= <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> v + <span class="title function_">addFunction</span>(v-<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><blockquote><p>참고자료</p></blockquote><ul><li><a href="https://ko.wikipedia.org/wiki/%EB%93%B1%EC%B0%A8%EC%88%98%EC%97%B4" title="해당 링크로 이동">위키백과 - 등차수열</a></li><li><a href="https://ko.wikipedia.org/wiki/%EC%9E%AC%EA%B7%80%ED%95%A8%EC%88%98" title="해당 링크로 이동">위키백과 - 재귀함수</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;1부터-10까지-합-구하기&quot;&gt;&lt;a href=&quot;#1부터-10까지-합-구하기&quot; class=&quot;headerlink&quot; title=&quot;1부터 10까지 합 구하기&quot;&gt;&lt;/a&gt;1부터 10까지 합 구하기&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;먼저 방법은 무엇이 있을까?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;등차 수열의 합&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;재귀함수 방식&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;기타 등등…&lt;/p&gt;
&lt;p&gt;하나씩 구현해보자&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="ETC" scheme="https://blog.hodory.dev/categories/ETC/"/>
    
    <category term="Algorithm" scheme="https://blog.hodory.dev/categories/ETC/Algorithm/"/>
    
    
    <category term="Algorithm" scheme="https://blog.hodory.dev/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>［PHP］ PSR(PHP Standards Recommendations)이란?</title>
    <link href="https://blog.hodory.dev/2018/04/17/what-is-psr/"/>
    <id>https://blog.hodory.dev/2018/04/17/what-is-psr/</id>
    <published>2018-04-17T17:28:50.000Z</published>
    <updated>2022-08-10T16:39:59.885Z</updated>
    
    <content type="html"><![CDATA[<h3 id="PSR이란"><a href="#PSR이란" class="headerlink" title="PSR이란?"></a>PSR이란?</h3><p>PHP Standards Recommendations의 약자로 <a href="https://www.php-fig.org/" title="PHP-FIG로 이동">PHP-FIG(PHP-FrameWork Interop Group)</a>에서 만든 표준 권고안입니다.</p><ul><li><a href="#PSR-0-DEPRECATED-Autoloading-Standard">PSR-0</a></li><li><a href="#PSR-1-Basic-Coding-Standard">PSR-1</a></li><li><a href="#PSR-2-Coding-Style-Guide">PSR-2</a></li><li><a href="#PSR-3-Logger-Interface">PSR-3</a></li><li><a href="#PSR-4-Autoloader">PSR-4</a><span id="more"></span></li><li>작성예정 목록<ul><li>PSR-6</li><li>PSR-7</li><li>PSR-11</li><li>PSR-13</li><li>PSR-15</li><li>PSR-16</li></ul></li></ul><h4 id="PSR-0-DEPRECATED-Autoloading-Standard"><a href="#PSR-0-DEPRECATED-Autoloading-Standard" class="headerlink" title="PSR-0 (DEPRECATED) : Autoloading Standard"></a>PSR-0 (DEPRECATED) : Autoloading Standard</h4><p>오토로딩 표준으로 PSR-4가 제정되며 DEPRECATED 되었습니다.</p><ul><li><code>\&lt;Vendor Name&gt;\(&lt;NameSpace&gt;\)*&lt;Class Name&gt;</code>의 구조를 따릅니다.</li><li>각 네임스페이스는 <code>(&quot;Vendor Name&quot;)</code>이 최상위 네임스페이스로 있어야합니다.</li><li>각 네임스페이스는 원하는 만큼 하위 네임스페이스를 가질 수 있습니다.</li><li>각 네임스페이스 구분자는 파일시스템에서 로딩될때 <code>DIRECTORY_SEPARATOR</code>로 변환됩니다.</li><li>클래스명의 각 <code>_</code> 문자는 <code>DIRECTORY_SEPARATOR</code>로 변환됩니다.</li><li>기타 자세한 사항은 <a href="https://www.php-fig.org/psr/psr-0/" title="PSR-0 문서로 이동">PSR-0</a>에서 확인 가능합니다.</li></ul><h5 id="Example"><a href="#Example" class="headerlink" title="Example)"></a>Example)</h5><p><code>\Doctrine\Commone\IsolatedClassLoader</code><br><code>=&gt;/path/to/project/lib/vendor/Doctrine/Common/IsolatedClassLoader.php</code><br><code>\Symfony\Core\Request</code><br><code>=&gt;/path/to/project/lib/vendor/Symfony/Core/Request.php</code></p><h4 id="PSR-1-Basic-Coding-Standard"><a href="#PSR-1-Basic-Coding-Standard" class="headerlink" title="PSR-1 : Basic Coding Standard"></a>PSR-1 : Basic Coding Standard</h4><p>PHP 코드를 공유하는데 있어 기술적 상호 운용성을 위해 고려 해야 할 표준 코딩 가이드입니다.</p><ul><li><p><code>&lt;?php</code> 와  <code>&lt;?=</code> 태그만 사용해야합니다.</p></li><li><p>PHP 코드에는 BOM(Byte Order Mark) 없이 UTF-8로만 사용해야합니다.</p></li><li><p>네임스페이스와 클래스는 PSR(PSR-0, PSR-4)의 오토로딩을 따라야합니다.</p><ul><li>클래스명은 <code>StudlyCaps</code> 와 같이 첫글자를 대문자로 합니다.  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// PHP 5.3 이후 버전</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Vendor</span>\<span class="title class_">Model</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// PHP 5.3 이전 버전</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vendor_Model_Foo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>상수는 <code>_</code>를 구분자로 대문자로 선언해야합니다. <code>ex)const CURRENT_VERSION = 1.0;</code></p></li><li><p>프로퍼티명에 대한 규칙은 정해져 있지않으나, 스코프에서 일관적이어야합니다.</p></li><li><p>메소드는 카멜케이스를 사용해야합니다. <code>ex)camelCase()</code></p></li></ul><h4 id="PSR-2-Coding-Style-Guide"><a href="#PSR-2-Coding-Style-Guide" class="headerlink" title="PSR-2 : Coding Style Guide"></a>PSR-2 : Coding Style Guide</h4><p>PSR-1의 확장으로 표준 코딩 스타일 가이드를 다룹니다.</p><ul><li><p>PSR-1을 따라야합니다.</p></li><li><p>들여쓰기 할때는 탭을 사용하지 않고 스페이스 4개를 사용합니다.</p></li><li><p>라인 수에 대한 엄격한 제한은 아니지만, 한 줄에는 120자 이하, 라인 수는 80개 이하로 작성합니다.</p></li><li><p>namespace선언과 use 선언들 후에는 한줄을 띄워 작성합니다.</p></li><li><p>클래스와 메소드들의 여는 괄호는 다음줄에 작성하고, 닫는 괄호는 내용이 끝난 다음 줄에 작성합니다.</p><ul><li>ex)  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Vendor</span>\<span class="title class_">Package</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">BazClass</span> <span class="keyword">as</span> <span class="title">Baz</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">OtherVendor</span>\<span class="title">OtherPackage</span>\<span class="title">BazClass</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestClass</span> <span class="keyword">extends</span> <span class="title">Baz</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">alert</span>(<span class="params"><span class="variable">$msg</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$msg</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>모든 프로퍼티와 메소드는 접근제어자가 선언되어야합니다.</p><ul><li>abstract와 final 키워드는 접근제어자 이전에 선언되고, static 키워드는 접근제어자 이후에 선언되어야합니다.</li></ul></li><li><p>제어문은 사이에 스페이스가 있어야합니다.</p><ul><li>메소드와 함수호출은 그렇지 않습니다.</li><li>ex)  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"><span class="variable">$a</span>, <span class="variable">$b</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$a</span> === <span class="variable">$b</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;equal&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">Foo</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>PHP 파일은 빈 줄로 끝나야 하며, PHP로만 이루어진 파일은 닫는 태그인 <code>?&gt;</code>를 생략해야합니다.</p></li></ul><h4 id="PSR-3-Logger-Interface"><a href="#PSR-3-Logger-Interface" class="headerlink" title="PSR-3 : Logger Interface"></a>PSR-3 : Logger Interface</h4><p>로깅 라이브러리의 공통적인 인터페이스를 명세합니다.<br>라이브러리가 <code>Psr\Log\LoggerInterface</code>의 객체를 받아 간편하고 보편적인 방법으로 그것에 로그를 작성할 수 있도록 하는것이 목표입니다.</p><ul><li>로거 인터페이스는 8개의 <a href="https://tools.ietf.org/html/rfc5424">RFC 5424</a> 레벨(debug, info, notice, warning, error, critical, alert, emergency)로 로그 작성을 하기 위한 메소드를 제공합니다.</li><li>9번째 메소드인 <code>log</code>는 첫번째 인자로 로그 레벨을 받고, 호출시 해당 레벨의 메소드를 호출하는것과 같은 결과를 가집니다.<ul><li>해당 레벨의 메소드가 정의되어 있지 않는 경우, <code>Psr\Log\InvalidArgumentException</code> 에러를 보내야합니다.</li></ul></li><li>모든 메소드는 string 형식의 메시지를 받거나, __toString() 처리 된 object를 받습니다.</li><li>컨텍스트에 주어진 값을 execption에 보내거나, php error나 warning, notice로 보내면 안됩니다.</li></ul><h4 id="PSR-4-Autoloader"><a href="#PSR-4-Autoloader" class="headerlink" title="PSR-4 : Autoloader"></a>PSR-4 : Autoloader</h4><p>파일 경로를 통해 클래스를 오토로딩 하기위한 명세로, PSR-0를 포함하고 있습니다.</p><ul><li><code>class</code>라는 용어는 클래스와 인터페이스, 트레이트 또는 다른 비슷한 구조들을 의미합니다.</li><li>정규화 된 클래스명의 형식은 다음을 따릅니다.<ul><li><code>\&lt;NamespaceName&gt;(\&lt;SubNamespaceNames&gt;)*\&lt;ClassName&gt;</code><ul><li>네임스페이스의 맨 처음은 “Vendor namespace”로 알려진것으로 시작합니다.</li><li>하나 이상의 서브네임스페이스명을 가집니다.</li><li>끝을 클래스명으로 작성 합니다.</li><li>소문자와 대문자의 조합을 혼합하여 작성할 수 있습니다.</li><li>대소문자를 구분하여 참조해야합니다.<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// guzzle/src/ClientInterface.php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">GuzzleHttp</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">GuzzleHttp</span>\<span class="title">Exception</span>\<span class="title">GuzzleException</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ClientInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>GuzzleHttp\Exception\GuzzleException은<br>GuzzleHttp의 Base-Directory(src) 안에 있는 Exception\GuzzleException.php에 위치합니다.</li></ul></li></ul></li></ul><!-- #### PSR-6#### PSR-7#### PSR-11#### PSR-13#### PSR-15#### PSR-16 --><blockquote><p>참고자료</p></blockquote><ul><li><a href="https://www.php-fig.org/psr/" title="해당 링크로 이동">PSR 공식문서</a></li><li><a href="https://www.lesstif.com/pages/viewpage.action?pageId=24445325" title="해당 링크로 이동">PHP 표준 권고(PSR) - 정광섭님</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;PSR이란&quot;&gt;&lt;a href=&quot;#PSR이란&quot; class=&quot;headerlink&quot; title=&quot;PSR이란?&quot;&gt;&lt;/a&gt;PSR이란?&lt;/h3&gt;&lt;p&gt;PHP Standards Recommendations의 약자로 &lt;a href=&quot;https://www.php-fig.org/&quot; title=&quot;PHP-FIG로 이동&quot;&gt;PHP-FIG(PHP-FrameWork Interop Group)&lt;/a&gt;에서 만든 표준 권고안입니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#PSR-0-DEPRECATED-Autoloading-Standard&quot;&gt;PSR-0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#PSR-1-Basic-Coding-Standard&quot;&gt;PSR-1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#PSR-2-Coding-Style-Guide&quot;&gt;PSR-2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#PSR-3-Logger-Interface&quot;&gt;PSR-3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#PSR-4-Autoloader&quot;&gt;PSR-4&lt;/a&gt;</summary>
    
    
    
    <category term="PHP" scheme="https://blog.hodory.dev/categories/PHP/"/>
    
    
    <category term="PHP" scheme="https://blog.hodory.dev/tags/PHP/"/>
    
    <category term="PSR" scheme="https://blog.hodory.dev/tags/PSR/"/>
    
  </entry>
  
  <entry>
    <title>［JS］ ES5와 ES6 뭐가 다를까?</title>
    <link href="https://blog.hodory.dev/2018/04/16/es5-vs-es6/"/>
    <id>https://blog.hodory.dev/2018/04/16/es5-vs-es6/</id>
    <published>2018-04-16T16:26:53.000Z</published>
    <updated>2022-08-10T16:39:59.885Z</updated>
    
    <content type="html"><![CDATA[<p>ES5와 ES6를 비교 할겸<br>ES6를 사용할때 자주 쓰이는 부분만 정리해보았습니다.</p><ul><li><a href="#Const-%EB%B3%80%EC%88%98">Const Variables</a></li><li><a href="#let-%EB%B3%80%EC%88%98">let Variables</a></li><li><a href="#Block-Scoped-%ED%95%A8%EC%88%98">Block-Scoped Function</a><span id="more"></span></li><li><a href="#Arrow-Function">Arrow Function</a></li><li><a href="#Default-Parameter">Default Parameter</a></li><li><a href="#Rest-Parameter">Rest Parameter</a></li><li><a href="#Spread-Operator">Spread Operator</a></li><li><a href="#Template-Literals">Template Literals</a></li><li><a href="#Enhanced-Object-Properties">Ehhanced Object Properties</a><ul><li><a href="#Property-Shorthand">Property Shorthand</a></li><li><a href="#Computed-Property-Names">Computed Property Names</a></li><li><a href="#Method-Properties">Method Properties</a></li></ul></li><li><a href="#Export-Import">Export &#x2F; Import</a></li><li><a href="#Class-Definition">Class Definition</a></li><li><a href="#Promise">Promise</a><ul><li><a href="#Promise-all-%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%A9%EB%8B%88%EB%8B%A4">Promise all</a></li></ul></li></ul><h3 id="Const-변수"><a href="#Const-변수" class="headerlink" title="Const 변수"></a>Const 변수</h3><p>Immutable varibale인 Const 변수(상수 변수)를 지원합니다.(블록-스코프 변수)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.141592</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">PI</span>) <span class="comment">// 3.141592</span></span><br></pre></td></tr></table></figure><h3 id="let-변수"><a href="#let-변수" class="headerlink" title="let 변수"></a>let 변수</h3><p>기존의 함수-스코프였던 변수와 다르게 Hoisting 없는 블록-스코프 변수를 지원합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;for loop start&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;i : &#x27;</span> + i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;for loop end i : &#x27;</span> + i) <span class="comment">// for loop end i : 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>; j&lt;<span class="number">10</span>; j++) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;j : &#x27;</span>, j)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">counter</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;j : &#x27;</span>, j) <span class="comment">// j is not defined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;for loop start&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;i : &#x27;</span> + i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;for loop end i : &#x27;</span> + i) <span class="comment">// j is not defined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>; j&lt;<span class="number">10</span>; j++) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;j : &#x27;</span>, j)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">counter</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;j : &#x27;</span>,j) <span class="comment">// j is not defined</span></span><br></pre></td></tr></table></figure><p>또한 var 변수는 재선언,재할당이 가능하지만 let 변수는 재선언이 불가능합니다 (const 변수는 immutable variable이므로 재할당도 불가능)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&#x27;foo&#x27;</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">&#x27;bar&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// hoisting으로 ReferenceError가 나지않는다.</span></span><br><span class="line">b = <span class="string">&#x27;foo&#x27;</span></span><br><span class="line"><span class="keyword">var</span> b</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c = <span class="string">&#x27;foo&#x27;</span></span><br><span class="line"><span class="keyword">let</span> c = <span class="string">&#x27;bar&#x27;</span> <span class="comment">// Uncaught SyntaxError: Identifier &#x27;c&#x27; has already been declared</span></span><br><span class="line">c = <span class="string">&#x27;bar&#x27;</span> <span class="comment">// &quot;bar&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> d = <span class="string">&#x27;foo&#x27;</span></span><br><span class="line"><span class="keyword">const</span> d = <span class="string">&#x27;bar&#x27;</span> <span class="comment">// Uncaught SyntaxError: Identifier &#x27;d&#x27; has already been declared</span></span><br><span class="line">d = <span class="string">&#x27;bar&#x27;</span> <span class="comment">// Uncaught TypeError: Assignment to constant variable.</span></span><br></pre></td></tr></table></figure><h3 id="Block-Scoped-함수"><a href="#Block-Scoped-함수" class="headerlink" title="Block-Scoped 함수"></a>Block-Scoped 함수</h3><p>블록-스코프 함수 정의 방식 개선</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">foo</span> () &#123; <span class="keyword">return</span> <span class="number">1</span> &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">foo</span>()) <span class="comment">// 1</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123; <span class="keyword">return</span> <span class="number">2</span> &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">foo</span>()) <span class="comment">// 2</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">foo</span>()) <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ES5</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> foo = <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="keyword">return</span> <span class="number">1</span>;&#125;</span><br><span class="line">    <span class="title function_">foo</span>() === <span class="number">1</span>;</span><br><span class="line">    (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> foo = <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="keyword">return</span> <span class="number">2</span>; &#125;</span><br><span class="line">        <span class="title function_">foo</span>() === <span class="number">2</span>;</span><br><span class="line">    &#125;)();</span><br><span class="line">    <span class="title function_">foo</span>() === <span class="number">1</span>;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h3 id="Arrow-Function"><a href="#Arrow-Function" class="headerlink" title="Arrow Function"></a>Arrow Function</h3><p><code>function</code>과 <code>return</code>을 묶어 화살표 함수로 변형 가능합니다</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6</span></span><br><span class="line">nums = evens.<span class="title function_">map</span>(<span class="function">(<span class="params">v,i</span>) =&gt;</span> v+i)</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">nums</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(v % <span class="number">2</span> === <span class="number">0</span>)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">evens</span>.<span class="title function_">push</span>(v)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// ES5</span></span><br><span class="line">nums = evens.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">v, i</span>) &#123; <span class="keyword">return</span> v+i; &#125;);</span><br><span class="line"><span class="keyword">var</span> self = <span class="variable language_">this</span>;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">nums</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">v</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(v % <span class="number">2</span> === <span class="number">0</span>)</span><br><span class="line">        self.<span class="property">evens</span>.<span class="title function_">push</span>(v);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="디폴트-파라미터"><a href="#디폴트-파라미터" class="headerlink" title="디폴트 파라미터"></a>디폴트 파라미터</h3><p>타 언어에서 사용 할 수 있었던 디폴트 파라미터가 지원됩니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span> (x, y=<span class="number">2</span>, z=<span class="number">3</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y + z</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(<span class="number">1</span>) <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span> (x, y, z) &#123;</span><br><span class="line">    <span class="keyword">if</span>(y === <span class="literal">undefined</span>)</span><br><span class="line">        y = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(z === <span class="literal">undefined</span>)</span><br><span class="line">        z = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">return</span> x + y + z;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">foo</span>(<span class="number">1</span>); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><h3 id="Rest-Parameter"><a href="#Rest-Parameter" class="headerlink" title="Rest Parameter"></a>Rest Parameter</h3><p>지정되지 않은 매개변수 집합을 하나의 변수에 담을 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span> (x, y, ...a) &#123;</span><br><span class="line">    <span class="keyword">return</span> (x * y) + a.<span class="property">length</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;baz&quot;</span>, <span class="literal">true</span> , <span class="number">3</span>, [<span class="number">2</span>]) <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span> (x,y) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> (x * y) + a.<span class="property">length</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">foo</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;baz&quot;</span>, <span class="literal">true</span> , <span class="number">3</span>, [<span class="number">2</span>]); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><h3 id="Spread-Operator-전개연산자"><a href="#Spread-Operator-전개연산자" class="headerlink" title="Spread Operator (전개연산자)"></a>Spread Operator (전개연산자)</h3><p>2개 이상의 인수나 2개이상의 요소 또는 2개이상의 변수가 해당되는 곳에 확장 될 수 있도록 합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myFunc</span>(<span class="params">x, y, z</span>)&#123;&#125;</span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">let</span> params = [ <span class="string">&quot;Foo&quot;</span>, <span class="literal">true</span>, <span class="number">2</span> ]</span><br><span class="line"><span class="keyword">let</span> others = [ <span class="number">1</span>, <span class="number">2</span>, ...params ] <span class="comment">// [ 1, 2, &quot;Foo&quot; ,true, 2 ]</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;Bar&quot;</span></span><br><span class="line"><span class="keyword">let</span> chars = [ ...str ] <span class="comment">// [ &quot;B&quot;, &quot;a&quot;, &quot;r&quot;]</span></span><br><span class="line"><span class="title function_">myFunc</span>(<span class="number">1</span>, <span class="number">2</span>, ...params);</span><br><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">var</span> params = [ <span class="string">&quot;Foo&quot;</span>, <span class="literal">true</span>, <span class="number">2</span> ];</span><br><span class="line"><span class="keyword">var</span> others = [ <span class="number">1</span>, <span class="number">2</span> ].<span class="title function_">concat</span>(params); <span class="comment">// [ 1, 2, &quot;Foo&quot; ,true, 2 ]</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;Bar&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> chars = str.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>); <span class="comment">// [ &quot;B&quot;, &quot;a&quot;, &quot;r&quot;]</span></span><br><span class="line">myFunc.<span class="title function_">apply</span>(<span class="literal">null</span>, [<span class="number">1</span>, <span class="number">2</span>].<span class="title function_">concat</span>(params));</span><br></pre></td></tr></table></figure><h3 id="Template-Literals"><a href="#Template-Literals" class="headerlink" title="Template Literals"></a>Template Literals</h3><p>문자열 다중 행 처리와 보간문자 처리를 할 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">let</span> user = &#123; name : <span class="string">&quot;Foo&quot;</span> &#125;</span><br><span class="line"><span class="keyword">let</span> info = &#123; <span class="attr">id</span>: <span class="string">&quot;bar&quot;</span>, <span class="attr">email</span>: <span class="string">&quot;Foo@example.com&quot;</span>&#125;</span><br><span class="line"><span class="keyword">let</span> userInfo = <span class="string">`Hello <span class="subst">$&#123;user.name&#125;</span>.</span></span><br><span class="line"><span class="string">Your ID is <span class="subst">$&#123;info.id&#125;</span> </span></span><br><span class="line"><span class="string">and email is <span class="subst">$&#123;info.email&#125;</span>.`</span></span><br><span class="line"><span class="comment">// Hello Foo.</span></span><br><span class="line"><span class="comment">// Your ID is bar</span></span><br><span class="line"><span class="comment">// and email is Foo@example.com</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">var</span> user = &#123; name : <span class="string">&quot;Foo&quot;</span> &#125;</span><br><span class="line"><span class="keyword">var</span> info = &#123; <span class="attr">id</span>: <span class="string">&quot;bar&quot;</span>, <span class="attr">email</span>: <span class="string">&quot;Foo@example.com&quot;</span>&#125;</span><br><span class="line"><span class="keyword">var</span> userInfo = <span class="string">&quot;Hello &quot;</span> + user.<span class="property">name</span> + <span class="string">&quot;.\n&quot;</span>+</span><br><span class="line"><span class="string">&quot;Your ID is &quot;</span> + info.<span class="property">id</span> + <span class="string">&quot;\n&quot;</span></span><br><span class="line"><span class="string">&quot;and email is &quot;</span>+info.<span class="property">email</span>+<span class="string">&quot;.&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="Enhanced-Object-Properties"><a href="#Enhanced-Object-Properties" class="headerlink" title="Enhanced Object Properties"></a>Enhanced Object Properties</h3><h5 id="Property-Shorthand"><a href="#Property-Shorthand" class="headerlink" title="Property Shorthand"></a>Property Shorthand</h5><p>공통 객체 속성 정의를 간결하게 할 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">0</span>, y = <span class="number">0</span></span><br><span class="line">obj = &#123;x, y&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line">obj = &#123;<span class="attr">x</span>: x , <span class="attr">y</span>: y&#125;;</span><br></pre></td></tr></table></figure><h5 id="Computed-Property-Names"><a href="#Computed-Property-Names" class="headerlink" title="Computed Property Names"></a>Computed Property Names</h5><p>Object 프로퍼티 정의에 계산된 이름을 지원합니다</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">foo</span>: <span class="string">&quot;Bar&quot;</span>,</span><br><span class="line">    [<span class="string">&quot;Baz&quot;</span> + <span class="title function_">myFunc</span>() ]: <span class="number">42</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">foo</span>: <span class="string">&quot;Bar&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line">obj[<span class="string">&quot;Baz&quot;</span> + <span class="title function_">myFunc</span>() ] = <span class="number">42</span>;</span><br></pre></td></tr></table></figure><h5 id="Method-Properties"><a href="#Method-Properties" class="headerlink" title="Method Properties"></a>Method Properties</h5><p>일반적인 함수와 제너레이터 함수의 Object 프로퍼티 정의에 메소드를 표기할 수 있도록 지원합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6</span></span><br><span class="line">obj = &#123;</span><br><span class="line">    foo (a, b) &#123;&#125;,</span><br><span class="line">    bar (x ,y) &#123;&#125;,</span><br><span class="line">    *baz (x, y) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5</span></span><br><span class="line">obj = &#123;</span><br><span class="line">    <span class="attr">foo</span>: <span class="keyword">function</span> (<span class="params">a, b</span>) &#123;&#125;,</span><br><span class="line">    bar : <span class="keyword">function</span> (<span class="params">x, y</span>) &#123;&#125;,</span><br><span class="line">    <span class="comment">// baz : es5에서는 대체할 것이 없습니다.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Export-x2F-Import"><a href="#Export-x2F-Import" class="headerlink" title="Export &#x2F; Import"></a>Export &#x2F; Import</h3><p>값을 export&#x2F;import로 모듈에 가져오거나 모듈로 내보낼 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// lib/math.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">sum</span> (x ,y) &#123; <span class="keyword">return</span> x + y &#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> pi = <span class="number">3.141592</span></span><br><span class="line"><span class="comment">// Foo.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> math <span class="keyword">from</span> <span class="string">&quot;lib/math&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;2pi = &quot;</span> + math.<span class="title function_">sum</span>(math.<span class="property">pi</span>, math.<span class="property">pi</span>))</span><br><span class="line"><span class="comment">// Bar.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; sum, pi &#125; <span class="keyword">from</span> <span class="string">&quot;lib/math&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;2pi = &quot;</span> + <span class="title function_">sum</span>(pi,pi))</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="comment">// lib/math.js</span></span><br><span class="line"><span class="title class_">LibMath</span> = &#123;&#125;;</span><br><span class="line"><span class="title class_">LibMath</span>.<span class="property">sum</span> = <span class="keyword">function</span> (<span class="params">x ,y</span>) &#123; <span class="keyword">return</span> x + y &#125;;</span><br><span class="line"><span class="title class_">LibMath</span>.<span class="property">pi</span> = <span class="number">3.141592</span>;</span><br><span class="line"><span class="comment">// Foo.js</span></span><br><span class="line"><span class="keyword">var</span> math = <span class="title class_">LibMath</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;2pi = &quot;</span> + math.<span class="title function_">sum</span>(math.<span class="property">pi</span>, math.<span class="property">pi</span>));</span><br><span class="line"><span class="comment">// Bar.js</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="title class_">LibMath</span>.<span class="property">sum</span>, pi = <span class="title class_">LibMath</span>.<span class="property">pi</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;2pi = &quot;</span> + <span class="title function_">sum</span>(pi,pi));</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Class-Definition"><a href="#Class-Definition" class="headerlink" title="Class Definition"></a>Class Definition</h3><p>클래스를 지원합니다 (이외에도 상속, 오버로딩, 정적 클래스멤버, Getter&#x2F;Setter를 지원합니다.)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    constuctor (id, x ,y) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">id</span> = id</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">move</span>(x,y)</span><br><span class="line">    &#125;</span><br><span class="line">    move (x, y) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">x</span> = x</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">y</span> = y</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Car</span> = <span class="keyword">function</span> (<span class="params">id, x ,y</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">id</span> = id;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">move</span>(x, y);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Car</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">move</span> = <span class="keyword">function</span> (<span class="params">x, y</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p>비동기 처리 이후 동작을 순차적,또는 병렬로 진행하기 위해 사용하는 클래스. 기존 Callback Hell에서 벗어날 수 있도록 도와줍니다(잘 구현 했을 경우….)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">_promise</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(success)&#123;</span><br><span class="line">            <span class="title function_">resolve</span>(value) <span class="comment">// success</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">reject</span>(reason)  <span class="comment">// fail</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">_promise</span>()</span><br><span class="line">    .<span class="title function_">then</span>(</span><br><span class="line">        <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//success일때 처리</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//reject 일때 처리</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(err)</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line"><span class="title function_">_promise</span>()</span><br><span class="line">    .<span class="title function_">then</span>(...)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(err)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>여러개의 프로미스가 모두 완료 될때 실행하려면요?</p></blockquote></blockquote><h5 id="Promise-all-을-이용합니다"><a href="#Promise-all-을-이용합니다" class="headerlink" title="Promise-all 을 이용합니다."></a>Promise-all 을 이용합니다.</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> _promise1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(success)&#123;</span><br><span class="line">            <span class="title function_">resolve</span>(value) <span class="comment">// success</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">reject</span>(reason)  <span class="comment">// fail</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="keyword">let</span> _promise2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(success)&#123;</span><br><span class="line">            <span class="title function_">resolve</span>(value) <span class="comment">// success</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">reject</span>(reason)  <span class="comment">// fail</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([_promise1, _promise2]).<span class="title function_">then</span>(</span><br><span class="line">    <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// resolve 된 결과 처리</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// reject 된 결과 처리</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// OR</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">_promise1</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(success)&#123;</span><br><span class="line">            <span class="title function_">resolve</span>(value) <span class="comment">// success</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">reject</span>(reason)  <span class="comment">// fail</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">_promise2</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(success)&#123;</span><br><span class="line">            <span class="title function_">resolve</span>(value) <span class="comment">// success</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">reject</span>(reason)  <span class="comment">// fail</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([<span class="title function_">_promise1</span>(), <span class="title function_">_promise2</span>()]).<span class="title function_">then</span>(</span><br><span class="line">    <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// resolve 된 결과 처리</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// reject 된 결과 처리</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>참고자료</p></blockquote><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla" title="해당 링크로 이동">MDN</a></li><li><a href="http://es6-features.org/">ES-6 기능 소개</a></li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise</a><ul><li><a href="http://webframeworks.kr/tutorials/translate/es6-promise-api-1/" title="링크로 이동">ES6 Promises(1) - the API</a></li><li><a href="https://programmingsummaries.tistory.com/325" title="링크로 이동">도대체 Promise는 어떻게 쓰는거야?</a></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;ES5와 ES6를 비교 할겸&lt;br&gt;ES6를 사용할때 자주 쓰이는 부분만 정리해보았습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#Const-%EB%B3%80%EC%88%98&quot;&gt;Const Variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#let-%EB%B3%80%EC%88%98&quot;&gt;let Variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Block-Scoped-%ED%95%A8%EC%88%98&quot;&gt;Block-Scoped Function&lt;/a&gt;</summary>
    
    
    
    <category term="Javascript" scheme="https://blog.hodory.dev/categories/Javascript/"/>
    
    
    <category term="Javascript" scheme="https://blog.hodory.dev/tags/Javascript/"/>
    
    <category term="JS" scheme="https://blog.hodory.dev/tags/JS/"/>
    
    <category term="ES5" scheme="https://blog.hodory.dev/tags/ES5/"/>
    
    <category term="ES6" scheme="https://blog.hodory.dev/tags/ES6/"/>
    
    <category term="ES5 vs ES6" scheme="https://blog.hodory.dev/tags/ES5-vs-ES6/"/>
    
  </entry>
  
  <entry>
    <title>［Node.js］Express.js로 NodeJS 시작하기</title>
    <link href="https://blog.hodory.dev/2018/03/11/start-nodejs/"/>
    <id>https://blog.hodory.dev/2018/03/11/start-nodejs/</id>
    <published>2018-03-11T12:57:18.000Z</published>
    <updated>2022-08-10T16:39:59.885Z</updated>
    
    <content type="html"><![CDATA[<h4 id="express-제너레이터-설치"><a href="#express-제너레이터-설치" class="headerlink" title="express 제너레이터 설치"></a>express 제너레이터 설치</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express-generator</span><br></pre></td></tr></table></figure><h4 id="ejs-템플릿을-이용하여-myapp-디렉토리에-생성"><a href="#ejs-템플릿을-이용하여-myapp-디렉토리에-생성" class="headerlink" title="ejs 템플릿을 이용하여 myapp 디렉토리에 생성"></a>ejs 템플릿을 이용하여 myapp 디렉토리에 생성</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">express myapp --view=ejs</span><br></pre></td></tr></table></figure><h4 id="myapp-디렉토리로-이동하여-npm-install-패키지-설치"><a href="#myapp-디렉토리로-이동하여-npm-install-패키지-설치" class="headerlink" title="myapp 디렉토리로 이동하여 npm install(패키지 설치)"></a>myapp 디렉토리로 이동하여 npm install(패키지 설치)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cd myapp &amp; npm install</span><br></pre></td></tr></table></figure><h4 id="서버-실행"><a href="#서버-실행" class="headerlink" title="서버 실행"></a>서버 실행</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm start</span><br></pre></td></tr></table></figure><h1 id="POST전송시-필요한-body-parser와-express-session-설치"><a href="#POST전송시-필요한-body-parser와-express-session-설치" class="headerlink" title="POST전송시 필요한 body-parser와 express-session 설치"></a>POST전송시 필요한 body-parser와 express-session 설치</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install body-parser express-session</span><br></pre></td></tr></table></figure><p>기존에는 NodeJS에서 POST 요청 데이터를 추출 할 수 있도록 하기 위하여 bodyParser를 설치해야 했는데 express-generator에 추가 되었다</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;express-제너레이터-설치&quot;&gt;&lt;a href=&quot;#express-제너레이터-설치&quot; class=&quot;headerlink&quot; title=&quot;express 제너레이터 설치&quot;&gt;&lt;/a&gt;express 제너레이터 설치&lt;/h4&gt;&lt;figure class=&quot;hi</summary>
      
    
    
    
    <category term="Javascript" scheme="https://blog.hodory.dev/categories/Javascript/"/>
    
    <category term="NodeJS" scheme="https://blog.hodory.dev/categories/Javascript/NodeJS/"/>
    
    
    <category term="Javascript" scheme="https://blog.hodory.dev/tags/Javascript/"/>
    
    <category term="NodeJS" scheme="https://blog.hodory.dev/tags/NodeJS/"/>
    
    <category term="Node" scheme="https://blog.hodory.dev/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>［PHP］ 에러 보여주기</title>
    <link href="https://blog.hodory.dev/2017/11/17/php-view-error/"/>
    <id>https://blog.hodory.dev/2017/11/17/php-view-error/</id>
    <published>2017-11-17T06:12:22.000Z</published>
    <updated>2022-08-10T16:39:59.885Z</updated>
    
    <content type="html"><![CDATA[<h5 id="배포-서버에서는-권장하지-않는-설정입니다"><a href="#배포-서버에서는-권장하지-않는-설정입니다" class="headerlink" title="배포 서버에서는 권장하지 않는 설정입니다."></a>배포 서버에서는 권장하지 않는 설정입니다.</h5><h5 id="테스트-서버에서-에러-메세지를-확인하고-싶을때"><a href="#테스트-서버에서-에러-메세지를-확인하고-싶을때" class="headerlink" title="테스트 서버에서 에러 메세지를 확인하고 싶을때"></a>테스트 서버에서 에러 메세지를 확인하고 싶을때</h5><h5 id="해당-php-파일의-최상위나-공통파일의-최상위에-이-소스코드를-넣어주시면-됩니다"><a href="#해당-php-파일의-최상위나-공통파일의-최상위에-이-소스코드를-넣어주시면-됩니다" class="headerlink" title="해당 php 파일의 최상위나 공통파일의 최상위에 이 소스코드를 넣어주시면 됩니다."></a>해당 php 파일의 최상위나 공통파일의 최상위에 이 소스코드를 넣어주시면 됩니다.</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">error_reporting</span>(E_ALL); <span class="comment">//모든 PHP 에러를 리포팅함</span></span><br><span class="line">    <span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="number">1</span>); <span class="comment">//php.ini 파일의 &#x27;display_errors&#x27;를 활성화 시킴</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;배포-서버에서는-권장하지-않는-설정입니다&quot;&gt;&lt;a href=&quot;#배포-서버에서는-권장하지-않는-설정입니다&quot; class=&quot;headerlink&quot; title=&quot;배포 서버에서는 권장하지 않는 설정입니다.&quot;&gt;&lt;/a&gt;배포 서버에서는 권장하지 않는 설정</summary>
      
    
    
    
    <category term="PHP" scheme="https://blog.hodory.dev/categories/PHP/"/>
    
    
    <category term="PHP" scheme="https://blog.hodory.dev/tags/PHP/"/>
    
    <category term="ERROR" scheme="https://blog.hodory.dev/tags/ERROR/"/>
    
    <category term="INI_SET" scheme="https://blog.hodory.dev/tags/INI-SET/"/>
    
  </entry>
  
  <entry>
    <title>［Docker］명령어 정리</title>
    <link href="https://blog.hodory.dev/2017/09/01/docker-command/"/>
    <id>https://blog.hodory.dev/2017/09/01/docker-command/</id>
    <published>2017-09-01T07:31:39.000Z</published>
    <updated>2018-03-16T01:14:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>이미지 다운로드</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull [다운로드 할 이미지명]: latest</span><br></pre></td></tr></table></figure><p><code>이미지를 컨테이너로 만들때</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -i -t --name [컨테이너명] -d [이미지명]</span><br></pre></td></tr></table></figure><span id="more"></span><p><code>컨테이너상태 확인 (&quot;a&quot;옵션은 정지된 컨테이너도 보여줌)</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker ps [-a]</span><br></pre></td></tr></table></figure><p><code>컨테이너를 실행</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker start [컨테이너명]</span><br></pre></td></tr></table></figure><p><code>컨테이너에 별칭을 주기</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it --name &lt;별칭&gt; &lt;이미지명&gt;</span><br><span class="line">ex) $ docker run -it --name nginx richarvey/nginx-php-fpm</span><br></pre></td></tr></table></figure><p><code>컨테이너 특정 포트 연결</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -p &lt;로컬 포트 번호&gt;:&lt;컨테이너 포트 번호&gt; &lt;이미지명&gt;</span><br><span class="line">ex) $ docker run -p 8000:80 richarvey/nginx-php-fpm</span><br></pre></td></tr></table></figure><p><code>컨테이너 정지</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker stop [컨테이너명]</span><br></pre></td></tr></table></figure><p><code>bash shell로 명령실행가능하게함</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker exec -it &lt;컨테이너 이름&gt; /bin/bash</span><br></pre></td></tr></table></figure><p><code>컨테이너 삭제</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker rm &lt;컨테이너이름&gt;</span><br></pre></td></tr></table></figure><p><code>태그를 입력하지않으면 모든태그가 삭제됨</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker rmi &lt;이미지 이름&gt;:&lt;태그&gt;</span><br></pre></td></tr></table></figure><p><code>윈도우 드라이브 공유</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -v &lt;윈도우 경로&gt;:&lt;컨테이너 경로&gt; -it &lt;컨테이너명&gt;</span><br><span class="line">ex) $ docker run -v /c/User/Administrator/PHP:/home/hodory -it nginx</span><br></pre></td></tr></table></figure><p><code>아래와 같이 여러가지 조합도 가능하다</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name &lt;별칭&gt; -d -p &lt;로컬포트&gt;:&lt;컨테이너포트&gt; -v &lt;로컬경로&gt;:&lt;컨테이너경로&gt; &lt;이미지명&gt;</span><br><span class="line">ex) $ docker run -it --name nginx -d -p 8000:80 -v /c/User/Administrator/PHP:/home/hodory richarvey/nginx-php-fpm</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;이미지 다운로드&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker pull [다운로드 할 이미지명]: latest&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;이미지를 컨테이너로 만들때&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -i -t --name [컨테이너명] -d [이미지명]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="ETC" scheme="https://blog.hodory.dev/categories/ETC/"/>
    
    <category term="Docker" scheme="https://blog.hodory.dev/categories/ETC/Docker/"/>
    
    
    <category term="Docker" scheme="https://blog.hodory.dev/tags/Docker/"/>
    
    <category term="도커" scheme="https://blog.hodory.dev/tags/%EB%8F%84%EC%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>［PHP］삼항 연산자</title>
    <link href="https://blog.hodory.dev/2017/09/01/conditional-ternary-operator/"/>
    <id>https://blog.hodory.dev/2017/09/01/conditional-ternary-operator/</id>
    <published>2017-09-01T01:09:11.000Z</published>
    <updated>2022-08-10T16:39:59.885Z</updated>
    
    <content type="html"><![CDATA[<p>삼항연산자(?:)는 조건식 ? 참일때 실행할로직 : 거짓일때 실행할 로직; 과 같이쓴다. (if-else를 짧게 줄인것)</p><p>a 변수값이 있는지 검사한후 값이 있으면 foo값을 반환, 없으면 bar라는 값을 반환</p><p><code>ex)</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$a</span> ?: <span class="string">&#x27;bar&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>;    <span class="comment">// foo</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;삼항연산자(?:)는 조건식 ? 참일때 실행할로직 : 거짓일때 실행할 로직; 과 같이쓴다. (if-else를 짧게 줄인것)&lt;/p&gt;
&lt;p&gt;a 변수값이 있는지 검사한후 값이 있으면 foo값을 반환, 없으면 bar라는 값을 반환&lt;/p&gt;
&lt;p&gt;&lt;code&gt;</summary>
      
    
    
    
    <category term="PHP" scheme="https://blog.hodory.dev/categories/PHP/"/>
    
    
    <category term="PHP" scheme="https://blog.hodory.dev/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>［Hexo］ 명령어 정리</title>
    <link href="https://blog.hodory.dev/2017/08/31/how-to-use-hexo/"/>
    <id>https://blog.hodory.dev/2017/08/31/how-to-use-hexo/</id>
    <published>2017-08-31T13:57:17.000Z</published>
    <updated>2022-08-10T16:39:59.885Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo-명령어-정리"><a href="#Hexo-명령어-정리" class="headerlink" title="Hexo 명령어 정리"></a>Hexo 명령어 정리</h1><hr><h1 id="초안-생성"><a href="#초안-생성" class="headerlink" title="# 초안 생성"></a># <code>초안 생성</code></h1><p><code>명령어</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new draft [파일명]</span><br></pre></td></tr></table></figure><p><code>예제</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new draft hello-world</span><br></pre></td></tr></table></figure><span id="more"></span><h1 id="초안을-포스트로-옮기기-Draft-to-Post"><a href="#초안을-포스트로-옮기기-Draft-to-Post" class="headerlink" title="# 초안을 포스트로 옮기기(Draft to Post)"></a># <code>초안을 포스트로 옮기기(Draft to Post)</code></h1><p><code>명령어</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo publish [파일명]</span><br></pre></td></tr></table></figure><p><code>예제</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo publish hello-world</span><br></pre></td></tr></table></figure><h1 id="포스트-생성"><a href="#포스트-생성" class="headerlink" title="# 포스트 생성"></a># <code>포스트 생성</code></h1><p><code>명령어</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [파일명]</span><br></pre></td></tr></table></figure><p><code>예제</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new hello-world</span><br></pre></td></tr></table></figure><h1 id="배포하기"><a href="#배포하기" class="headerlink" title="# 배포하기"></a># <code>배포하기</code></h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean // clean을 하지 않으면 deploy를 해도 페이지가 업데이트 되지 않는 경우가 발생한다</span><br><span class="line">$ hexo deploy --generate</span><br></pre></td></tr></table></figure><h1 id="기타사항"><a href="#기타사항" class="headerlink" title="# 기타사항"></a># <code>기타사항</code></h1><blockquote><h2 id="카테고리와-태그와-같은-설정은-어떻게-설정하나요"><a href="#카테고리와-태그와-같은-설정은-어떻게-설정하나요" class="headerlink" title="카테고리와 태그와 같은 설정은 어떻게 설정하나요 ?"></a>카테고리와 태그와 같은 설정은 어떻게 설정하나요 ?</h2></blockquote><p>포스트파일의 Front-matter에 아래와 같이 작성하시면 됩니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: PHP 0001과 같이 번호 지정 하기</span><br><span class="line">tags: </span><br><span class="line">    - Hexo</span><br><span class="line">    - HelloWorld</span><br><span class="line">categories:</span><br><span class="line">    - Hexo</span><br><span class="line">date: 2017-08-31 12:00:00</span><br><span class="line">---</span><br></pre></td></tr></table></figure><blockquote><h2 id="썸네일을-등록하고-싶어요"><a href="#썸네일을-등록하고-싶어요" class="headerlink" title="썸네일을 등록하고 싶어요"></a>썸네일을 등록하고 싶어요</h2></blockquote><p>위의 포스트 Front-matter에 아래 사항을 추가하시면됩니다</p><p>아래에서 지정한 images 폴더의 위치는 source 폴더의 하위경로 입니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">thumbnail: /images/logo.jpg</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Hexo-명령어-정리&quot;&gt;&lt;a href=&quot;#Hexo-명령어-정리&quot; class=&quot;headerlink&quot; title=&quot;Hexo 명령어 정리&quot;&gt;&lt;/a&gt;Hexo 명령어 정리&lt;/h1&gt;&lt;hr&gt;
&lt;h1 id=&quot;초안-생성&quot;&gt;&lt;a href=&quot;#초안-생성&quot; class=&quot;headerlink&quot; title=&quot;# 초안 생성&quot;&gt;&lt;/a&gt;# &lt;code&gt;초안 생성&lt;/code&gt;&lt;/h1&gt;&lt;p&gt;&lt;code&gt;명령어&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new draft [파일명]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;예제&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new draft hello-world&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Hexo" scheme="https://blog.hodory.dev/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="https://blog.hodory.dev/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>［PHP］ 0001과 같이 번호 지정 하기</title>
    <link href="https://blog.hodory.dev/2017/08/31/php-str-pad/"/>
    <id>https://blog.hodory.dev/2017/08/31/php-str-pad/</id>
    <published>2017-08-31T12:51:38.000Z</published>
    <updated>2022-08-10T16:39:59.885Z</updated>
    
    <content type="html"><![CDATA[<h4 id="PHP에서-0001과-같이-번호-지정하기"><a href="#PHP에서-0001과-같이-번호-지정하기" class="headerlink" title="PHP에서 0001과 같이 번호 지정하기"></a>PHP에서 0001과 같이 번호 지정하기</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$count</span> = <span class="number">1</span>;</span><br><span class="line"><span class="variable">$count</span> = <span class="title function_ invoke__">str_pad</span>(<span class="variable">$count</span>,<span class="number">4</span>,<span class="string">&#x27;0&#x27;</span>,STR_PAD_LEFT); <span class="comment">//0001</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>01이나 001 같이 사용할 때는 두번째 파라미터 값에 2(01) 또는 3(001)을 사용하면 된다.</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;PHP에서-0001과-같이-번호-지정하기&quot;&gt;&lt;a href=&quot;#PHP에서-0001과-같이-번호-지정하기&quot; class=&quot;headerlink&quot; title=&quot;PHP에서 0001과 같이 번호 지정하기&quot;&gt;&lt;/a&gt;PHP에서 0001과 같이 번호 지정</summary>
      
    
    
    
    <category term="PHP" scheme="https://blog.hodory.dev/categories/PHP/"/>
    
    
    <category term="PHP" scheme="https://blog.hodory.dev/tags/PHP/"/>
    
    <category term="str_pad" scheme="https://blog.hodory.dev/tags/str-pad/"/>
    
    <category term="function" scheme="https://blog.hodory.dev/tags/function/"/>
    
  </entry>
  
</feed>
